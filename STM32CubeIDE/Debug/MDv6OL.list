
MDv6OL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a68  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ae8  08004b28  08004b28  00005b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005610  08005610  00007398  2**0
                  CONTENTS
  4 .ARM          00000000  08005610  08005610  00007398  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005610  08005610  00007398  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005610  08005610  00006610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005614  08005614  00006614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000398  20000000  08005618  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  20000398  080059b0  00007398  2**2
                  ALLOC
 10 ._user_heap_stack 00000484  20000624  080059b0  00007624  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007398  2**0
                  CONTENTS, READONLY
 12 .debug_line   00028f67  00000000  00000000  000073c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 0000006f  00000000  00000000  00030327  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00024055  00000000  00000000  00030396  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000056eb  00000000  00000000  000543eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001520  00000000  00000000  00059ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00077d6f  00000000  00000000  0005aff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001da0  00000000  00000000  000d2d67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 0000edac  00000000  00000000  000d4b07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00016b86  00000000  00000000  000e38b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  000fa439  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000034c4  00000000  00000000  000fa47c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000398 	.word	0x20000398
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004b10 	.word	0x08004b10

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000039c 	.word	0x2000039c
 8000104:	08004b10 	.word	0x08004b10

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003f4:	480d      	ldr	r0, [pc, #52]	@ (800042c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003f6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003f8:	f002 fd46 	bl	8002e88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003fc:	480c      	ldr	r0, [pc, #48]	@ (8000430 <LoopForever+0x6>)
  ldr r1, =_edata
 80003fe:	490d      	ldr	r1, [pc, #52]	@ (8000434 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000400:	4a0d      	ldr	r2, [pc, #52]	@ (8000438 <LoopForever+0xe>)
  movs r3, #0
 8000402:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000404:	e002      	b.n	800040c <LoopCopyDataInit>

08000406 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000406:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000408:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800040a:	3304      	adds	r3, #4

0800040c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800040c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800040e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000410:	d3f9      	bcc.n	8000406 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000412:	4a0a      	ldr	r2, [pc, #40]	@ (800043c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000414:	4c0a      	ldr	r4, [pc, #40]	@ (8000440 <LoopForever+0x16>)
  movs r3, #0
 8000416:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000418:	e001      	b.n	800041e <LoopFillZerobss>

0800041a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800041a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800041c:	3204      	adds	r2, #4

0800041e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800041e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000420:	d3fb      	bcc.n	800041a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000422:	f004 fb47 	bl	8004ab4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000426:	f000 f845 	bl	80004b4 <main>

0800042a <LoopForever>:

LoopForever:
    b LoopForever
 800042a:	e7fe      	b.n	800042a <LoopForever>
  ldr   r0, =_estack
 800042c:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000430:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000434:	20000398 	.word	0x20000398
  ldr r2, =_sidata
 8000438:	08005618 	.word	0x08005618
  ldr r2, =_sbss
 800043c:	20000398 	.word	0x20000398
  ldr r4, =_ebss
 8000440:	20000624 	.word	0x20000624

08000444 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000444:	e7fe      	b.n	8000444 <ADC1_IRQHandler>
	...

08000448 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000448:	b500      	push	{lr}
 800044a:	b091      	sub	sp, #68	@ 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800044c:	2228      	movs	r2, #40	@ 0x28
 800044e:	2100      	movs	r1, #0
 8000450:	a806      	add	r0, sp, #24
 8000452:	f004 fb27 	bl	8004aa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000456:	2210      	movs	r2, #16
 8000458:	2100      	movs	r1, #0
 800045a:	4668      	mov	r0, sp
 800045c:	f004 fb22 	bl	8004aa4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSE;
 8000460:	2211      	movs	r2, #17
 8000462:	2301      	movs	r3, #1
 8000464:	9204      	str	r2, [sp, #16]
 8000466:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000468:	2301      	movs	r3, #1
 800046a:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800046c:	330f      	adds	r3, #15
 800046e:	930a      	str	r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000470:	2380      	movs	r3, #128	@ 0x80
 8000472:	2202      	movs	r2, #2
 8000474:	025b      	lsls	r3, r3, #9
 8000476:	920c      	str	r2, [sp, #48]	@ 0x30
 8000478:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800047a:	2380      	movs	r3, #128	@ 0x80
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800047c:	a804      	add	r0, sp, #16
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800047e:	035b      	lsls	r3, r3, #13
 8000480:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000482:	f003 f8e9 	bl	8003658 <HAL_RCC_OscConfig>
 8000486:	2800      	cmp	r0, #0
 8000488:	d001      	beq.n	800048e <SystemClock_Config+0x46>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800048a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800048c:	e7fe      	b.n	800048c <SystemClock_Config+0x44>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800048e:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000490:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000492:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000494:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000496:	3b05      	subs	r3, #5
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000498:	2101      	movs	r1, #1
 800049a:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800049c:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800049e:	f003 fb33 	bl	8003b08 <HAL_RCC_ClockConfig>
 80004a2:	2800      	cmp	r0, #0
 80004a4:	d001      	beq.n	80004aa <SystemClock_Config+0x62>
 80004a6:	b672      	cpsid	i
  while (1)
 80004a8:	e7fe      	b.n	80004a8 <SystemClock_Config+0x60>
  HAL_RCC_EnableCSS();
 80004aa:	f003 fbdd 	bl	8003c68 <HAL_RCC_EnableCSS>
}
 80004ae:	b011      	add	sp, #68	@ 0x44
 80004b0:	bd00      	pop	{pc}
 80004b2:	46c0      	nop			@ (mov r8, r8)

080004b4 <main>:
{
 80004b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004b6:	46de      	mov	lr, fp
 80004b8:	4657      	mov	r7, sl
 80004ba:	464e      	mov	r6, r9
 80004bc:	4645      	mov	r5, r8
 80004be:	b5e0      	push	{r5, r6, r7, lr}
 80004c0:	b097      	sub	sp, #92	@ 0x5c
  HAL_Init();
 80004c2:	f002 fd09 	bl	8002ed8 <HAL_Init>
  SystemClock_Config();
 80004c6:	f7ff ffbf 	bl	8000448 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ca:	2214      	movs	r2, #20
 80004cc:	2100      	movs	r1, #0
 80004ce:	a80d      	add	r0, sp, #52	@ 0x34
 80004d0:	f004 fae8 	bl	8004aa4 <memset>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004d4:	2280      	movs	r2, #128	@ 0x80
 80004d6:	4dd3      	ldr	r5, [pc, #844]	@ (8000824 <main+0x370>)
 80004d8:	03d2      	lsls	r2, r2, #15
 80004da:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80004dc:	2090      	movs	r0, #144	@ 0x90
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004de:	4313      	orrs	r3, r2
 80004e0:	616b      	str	r3, [r5, #20]
 80004e2:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80004e4:	2110      	movs	r1, #16
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004e6:	4013      	ands	r3, r2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e8:	2280      	movs	r2, #128	@ 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004ea:	9301      	str	r3, [sp, #4]
 80004ec:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ee:	696b      	ldr	r3, [r5, #20]
 80004f0:	0292      	lsls	r2, r2, #10
 80004f2:	4313      	orrs	r3, r2
 80004f4:	616b      	str	r3, [r5, #20]
 80004f6:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80004f8:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fa:	4013      	ands	r3, r2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004fc:	2280      	movs	r2, #128	@ 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fe:	9302      	str	r3, [sp, #8]
 8000500:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000502:	696b      	ldr	r3, [r5, #20]
 8000504:	02d2      	lsls	r2, r2, #11
 8000506:	4313      	orrs	r3, r2
 8000508:	616b      	str	r3, [r5, #20]
 800050a:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(M1_EN_DRIVER_GPIO_Port, M1_EN_DRIVER_Pin, GPIO_PIN_SET);
 800050c:	2480      	movs	r4, #128	@ 0x80
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800050e:	4013      	ands	r3, r2
 8000510:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000512:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000514:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000516:	f003 f899 	bl	800364c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(M1_EN_DRIVER_GPIO_Port, M1_EN_DRIVER_Pin, GPIO_PIN_SET);
 800051a:	2090      	movs	r0, #144	@ 0x90
 800051c:	0124      	lsls	r4, r4, #4
 800051e:	2201      	movs	r2, #1
 8000520:	0021      	movs	r1, r4
 8000522:	05c0      	lsls	r0, r0, #23
 8000524:	f003 f892 	bl	800364c <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000528:	2090      	movs	r0, #144	@ 0x90
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052a:	2700      	movs	r7, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800052c:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800052e:	2310      	movs	r3, #16
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000530:	a90d      	add	r1, sp, #52	@ 0x34
 8000532:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000534:	930d      	str	r3, [sp, #52]	@ 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000536:	970f      	str	r7, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000538:	9710      	str	r7, [sp, #64]	@ 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800053a:	960e      	str	r6, [sp, #56]	@ 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800053c:	f002 fec0 	bl	80032c0 <HAL_GPIO_Init>
  HAL_GPIO_Init(M1_EN_DRIVER_GPIO_Port, &GPIO_InitStruct);
 8000540:	2090      	movs	r0, #144	@ 0x90
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000542:	2302      	movs	r3, #2
  HAL_GPIO_Init(M1_EN_DRIVER_GPIO_Port, &GPIO_InitStruct);
 8000544:	a90d      	add	r1, sp, #52	@ 0x34
 8000546:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000548:	930f      	str	r3, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054a:	9710      	str	r7, [sp, #64]	@ 0x40
  GPIO_InitStruct.Pin = M1_EN_DRIVER_Pin;
 800054c:	940d      	str	r4, [sp, #52]	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800054e:	960e      	str	r6, [sp, #56]	@ 0x38
  HAL_GPIO_Init(M1_EN_DRIVER_GPIO_Port, &GPIO_InitStruct);
 8000550:	f002 feb6 	bl	80032c0 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000554:	696b      	ldr	r3, [r5, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000556:	220c      	movs	r2, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000558:	4333      	orrs	r3, r6
 800055a:	616b      	str	r3, [r5, #20]
 800055c:	696b      	ldr	r3, [r5, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 800055e:	2100      	movs	r1, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000560:	4033      	ands	r3, r6
 8000562:	9300      	str	r3, [sp, #0]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000564:	a80d      	add	r0, sp, #52	@ 0x34
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000566:	9b00      	ldr	r3, [sp, #0]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000568:	f004 fa9c 	bl	8004aa4 <memset>
  hadc.Instance = ADC1;
 800056c:	4dae      	ldr	r5, [pc, #696]	@ (8000828 <main+0x374>)
 800056e:	4baf      	ldr	r3, [pc, #700]	@ (800082c <main+0x378>)
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000570:	606f      	str	r7, [r5, #4]
  hadc.Instance = ADC1;
 8000572:	602b      	str	r3, [r5, #0]
  hadc.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000574:	2320      	movs	r3, #32
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000576:	60af      	str	r7, [r5, #8]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000578:	61af      	str	r7, [r5, #24]
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 800057a:	61ef      	str	r7, [r5, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800057c:	2780      	movs	r7, #128	@ 0x80
  hadc.Init.DataAlign = ADC_DATAALIGN_LEFT;
 800057e:	60eb      	str	r3, [r5, #12]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000580:	3b1c      	subs	r3, #28
 8000582:	616b      	str	r3, [r5, #20]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000584:	00ff      	lsls	r7, r7, #3
  hadc.Init.DMAContinuousRequests = ENABLE;
 8000586:	3320      	adds	r3, #32
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000588:	0028      	movs	r0, r5
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800058a:	612e      	str	r6, [r5, #16]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800058c:	622f      	str	r7, [r5, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 800058e:	54ee      	strb	r6, [r5, r3]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000590:	62ae      	str	r6, [r5, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000592:	f002 fcd5 	bl	8002f40 <HAL_ADC_Init>
 8000596:	2800      	cmp	r0, #0
 8000598:	d001      	beq.n	800059e <main+0xea>
 800059a:	b672      	cpsid	i
  while (1)
 800059c:	e7fe      	b.n	800059c <main+0xe8>
  sConfig.Channel = ADC_CHANNEL_5;
 800059e:	2305      	movs	r3, #5
 80005a0:	930d      	str	r3, [sp, #52]	@ 0x34
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80005a2:	2380      	movs	r3, #128	@ 0x80
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80005a4:	0028      	movs	r0, r5
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80005a6:	015b      	lsls	r3, r3, #5
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80005a8:	a90d      	add	r1, sp, #52	@ 0x34
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80005aa:	4699      	mov	r9, r3
 80005ac:	930e      	str	r3, [sp, #56]	@ 0x38
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80005ae:	960f      	str	r6, [sp, #60]	@ 0x3c
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80005b0:	f002 fd6a 	bl	8003088 <HAL_ADC_ConfigChannel>
 80005b4:	2800      	cmp	r0, #0
 80005b6:	d001      	beq.n	80005bc <main+0x108>
 80005b8:	b672      	cpsid	i
  while (1)
 80005ba:	e7fe      	b.n	80005ba <main+0x106>
  sConfig.Channel = ADC_CHANNEL_9;
 80005bc:	2309      	movs	r3, #9
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80005be:	0028      	movs	r0, r5
 80005c0:	a90d      	add	r1, sp, #52	@ 0x34
  sConfig.Channel = ADC_CHANNEL_9;
 80005c2:	930d      	str	r3, [sp, #52]	@ 0x34
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80005c4:	f002 fd60 	bl	8003088 <HAL_ADC_ConfigChannel>
 80005c8:	4682      	mov	sl, r0
 80005ca:	2800      	cmp	r0, #0
 80005cc:	d001      	beq.n	80005d2 <main+0x11e>
 80005ce:	b672      	cpsid	i
  while (1)
 80005d0:	e7fe      	b.n	80005d0 <main+0x11c>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005d2:	2308      	movs	r3, #8
 80005d4:	0001      	movs	r1, r0
 80005d6:	001a      	movs	r2, r3
 80005d8:	a804      	add	r0, sp, #16
 80005da:	469b      	mov	fp, r3
 80005dc:	f004 fa62 	bl	8004aa4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005e0:	221c      	movs	r2, #28
 80005e2:	4651      	mov	r1, sl
 80005e4:	a806      	add	r0, sp, #24
 80005e6:	f004 fa5d 	bl	8004aa4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80005ea:	2220      	movs	r2, #32
 80005ec:	4651      	mov	r1, sl
 80005ee:	a80d      	add	r0, sp, #52	@ 0x34
 80005f0:	f004 fa58 	bl	8004aa4 <memset>
  htim1.Instance = TIM1;
 80005f4:	4b8e      	ldr	r3, [pc, #568]	@ (8000830 <main+0x37c>)
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80005f6:	2580      	movs	r5, #128	@ 0x80
  htim1.Instance = TIM1;
 80005f8:	4698      	mov	r8, r3
 80005fa:	4642      	mov	r2, r8
 80005fc:	4b8d      	ldr	r3, [pc, #564]	@ (8000834 <main+0x380>)
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80005fe:	006d      	lsls	r5, r5, #1
  htim1.Instance = TIM1;
 8000600:	6013      	str	r3, [r2, #0]
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 8000602:	4643      	mov	r3, r8
 8000604:	4652      	mov	r2, sl
 8000606:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 8000608:	4642      	mov	r2, r8
 800060a:	2340      	movs	r3, #64	@ 0x40
 800060c:	6093      	str	r3, [r2, #8]
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 800060e:	4b8a      	ldr	r3, [pc, #552]	@ (8000838 <main+0x384>)
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000610:	6115      	str	r5, [r2, #16]
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 8000612:	60d3      	str	r3, [r2, #12]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 8000614:	2303      	movs	r3, #3
 8000616:	6153      	str	r3, [r2, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000618:	4643      	mov	r3, r8
 800061a:	4652      	mov	r2, sl
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800061c:	4640      	mov	r0, r8
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800061e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000620:	f003 fb32 	bl	8003c88 <HAL_TIM_PWM_Init>
 8000624:	2800      	cmp	r0, #0
 8000626:	d001      	beq.n	800062c <main+0x178>
 8000628:	b672      	cpsid	i
  while (1)
 800062a:	e7fe      	b.n	800062a <main+0x176>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800062c:	2320      	movs	r3, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800062e:	9005      	str	r0, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000630:	a904      	add	r1, sp, #16
 8000632:	4640      	mov	r0, r8
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000634:	9304      	str	r3, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000636:	f003 fd71 	bl	800411c <HAL_TIMEx_MasterConfigSynchronization>
 800063a:	1e02      	subs	r2, r0, #0
 800063c:	d001      	beq.n	8000642 <main+0x18e>
 800063e:	b672      	cpsid	i
  while (1)
 8000640:	e7fe      	b.n	8000640 <main+0x18c>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000642:	2360      	movs	r3, #96	@ 0x60
 8000644:	9306      	str	r3, [sp, #24]
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 8000646:	4b7d      	ldr	r3, [pc, #500]	@ (800083c <main+0x388>)
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000648:	900a      	str	r0, [sp, #40]	@ 0x28
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 800064a:	9307      	str	r3, [sp, #28]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800064c:	2302      	movs	r3, #2
 800064e:	9308      	str	r3, [sp, #32]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8000650:	465b      	mov	r3, fp
 8000652:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8000654:	2380      	movs	r3, #128	@ 0x80
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000656:	4640      	mov	r0, r8
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8000658:	009b      	lsls	r3, r3, #2
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800065a:	a906      	add	r1, sp, #24
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 800065c:	950b      	str	r5, [sp, #44]	@ 0x2c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 800065e:	930c      	str	r3, [sp, #48]	@ 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000660:	f003 fc3a 	bl	8003ed8 <HAL_TIM_PWM_ConfigChannel>
 8000664:	2800      	cmp	r0, #0
 8000666:	d001      	beq.n	800066c <main+0x1b8>
 8000668:	b672      	cpsid	i
  while (1)
 800066a:	e7fe      	b.n	800066a <main+0x1b6>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800066c:	2204      	movs	r2, #4
 800066e:	4640      	mov	r0, r8
 8000670:	a906      	add	r1, sp, #24
 8000672:	f003 fc31 	bl	8003ed8 <HAL_TIM_PWM_ConfigChannel>
 8000676:	2800      	cmp	r0, #0
 8000678:	d001      	beq.n	800067e <main+0x1ca>
 800067a:	b672      	cpsid	i
  while (1)
 800067c:	e7fe      	b.n	800067c <main+0x1c8>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800067e:	465a      	mov	r2, fp
 8000680:	4640      	mov	r0, r8
 8000682:	a906      	add	r1, sp, #24
 8000684:	f003 fc28 	bl	8003ed8 <HAL_TIM_PWM_ConfigChannel>
 8000688:	2800      	cmp	r0, #0
 800068a:	d001      	beq.n	8000690 <main+0x1dc>
 800068c:	b672      	cpsid	i
  while (1)
 800068e:	e7fe      	b.n	800068e <main+0x1da>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000690:	2370      	movs	r3, #112	@ 0x70
 8000692:	9306      	str	r3, [sp, #24]
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 8000694:	23df      	movs	r3, #223	@ 0xdf
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000696:	9008      	str	r0, [sp, #32]
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 8000698:	00db      	lsls	r3, r3, #3
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800069a:	900b      	str	r0, [sp, #44]	@ 0x2c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800069c:	900c      	str	r0, [sp, #48]	@ 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800069e:	220c      	movs	r2, #12
 80006a0:	4640      	mov	r0, r8
 80006a2:	a906      	add	r1, sp, #24
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 80006a4:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80006a6:	f003 fc17 	bl	8003ed8 <HAL_TIM_PWM_ConfigChannel>
 80006aa:	2800      	cmp	r0, #0
 80006ac:	d001      	beq.n	80006b2 <main+0x1fe>
 80006ae:	b672      	cpsid	i
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <main+0x1fc>
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 80006b2:	230e      	movs	r3, #14
 80006b4:	9310      	str	r3, [sp, #64]	@ 0x40
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 80006b6:	464b      	mov	r3, r9
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 80006b8:	9012      	str	r0, [sp, #72]	@ 0x48
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80006ba:	9014      	str	r0, [sp, #80]	@ 0x50
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80006bc:	a90d      	add	r1, sp, #52	@ 0x34
 80006be:	4640      	mov	r0, r8
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 80006c0:	940d      	str	r4, [sp, #52]	@ 0x34
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 80006c2:	970e      	str	r7, [sp, #56]	@ 0x38
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_1;
 80006c4:	950f      	str	r5, [sp, #60]	@ 0x3c
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 80006c6:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80006c8:	f003 fd56 	bl	8004178 <HAL_TIMEx_ConfigBreakDeadTime>
 80006cc:	2800      	cmp	r0, #0
 80006ce:	d001      	beq.n	80006d4 <main+0x220>
 80006d0:	b672      	cpsid	i
  while (1)
 80006d2:	e7fe      	b.n	80006d2 <main+0x21e>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006d4:	2608      	movs	r6, #8
  HAL_TIM_MspPostInit(&htim1);
 80006d6:	4640      	mov	r0, r8
 80006d8:	f002 fb22 	bl	8002d20 <HAL_TIM_MspPostInit>
  TIM_Encoder_InitTypeDef sConfig = {0};
 80006dc:	221c      	movs	r2, #28
 80006de:	2100      	movs	r1, #0
 80006e0:	a80e      	add	r0, sp, #56	@ 0x38
 80006e2:	f004 f9df 	bl	8004aa4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006e6:	0032      	movs	r2, r6
 80006e8:	2100      	movs	r1, #0
 80006ea:	a806      	add	r0, sp, #24
 80006ec:	f004 f9da 	bl	8004aa4 <memset>
  htim2.Instance = TIM2;
 80006f0:	2380      	movs	r3, #128	@ 0x80
 80006f2:	4c53      	ldr	r4, [pc, #332]	@ (8000840 <main+0x38c>)
 80006f4:	05db      	lsls	r3, r3, #23
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80006f6:	2501      	movs	r5, #1
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80006f8:	2703      	movs	r7, #3
  htim2.Instance = TIM2;
 80006fa:	6023      	str	r3, [r4, #0]
  htim2.Init.Prescaler = 0;
 80006fc:	2300      	movs	r3, #0
  htim2.Init.Period = M1_PULSE_NBR;
 80006fe:	4a51      	ldr	r2, [pc, #324]	@ (8000844 <main+0x390>)
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000700:	0020      	movs	r0, r4
 8000702:	a90d      	add	r1, sp, #52	@ 0x34
  htim2.Init.Prescaler = 0;
 8000704:	6063      	str	r3, [r4, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000706:	60a3      	str	r3, [r4, #8]
  htim2.Init.Period = M1_PULSE_NBR;
 8000708:	60e2      	str	r2, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800070a:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800070c:	61a3      	str	r3, [r4, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800070e:	970d      	str	r7, [sp, #52]	@ 0x34
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000710:	950f      	str	r5, [sp, #60]	@ 0x3c
  sConfig.IC1Filter = M1_ENC_IC_FILTER;
 8000712:	9611      	str	r6, [sp, #68]	@ 0x44
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000714:	9513      	str	r5, [sp, #76]	@ 0x4c
  sConfig.IC2Filter = M1_ENC_IC_FILTER;
 8000716:	9615      	str	r6, [sp, #84]	@ 0x54
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000718:	f003 fb32 	bl	8003d80 <HAL_TIM_Encoder_Init>
 800071c:	2800      	cmp	r0, #0
 800071e:	d001      	beq.n	8000724 <main+0x270>
 8000720:	b672      	cpsid	i
  while (1)
 8000722:	e7fe      	b.n	8000722 <main+0x26e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000724:	9006      	str	r0, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000726:	9007      	str	r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000728:	a906      	add	r1, sp, #24
 800072a:	0020      	movs	r0, r4
 800072c:	f003 fcf6 	bl	800411c <HAL_TIMEx_MasterConfigSynchronization>
 8000730:	1e04      	subs	r4, r0, #0
 8000732:	d001      	beq.n	8000738 <main+0x284>
 8000734:	b672      	cpsid	i
  while (1)
 8000736:	e7fe      	b.n	8000736 <main+0x282>
  MX_MotorControl_Init();
 8000738:	f000 fe1c 	bl	8001374 <MX_MotorControl_Init>
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 800073c:	0022      	movs	r2, r4
 800073e:	0029      	movs	r1, r5
 8000740:	2009      	movs	r0, #9
 8000742:	f002 fd33 	bl	80031ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000746:	2009      	movs	r0, #9
 8000748:	f002 fd5a 	bl	8003200 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 800074c:	0022      	movs	r2, r4
 800074e:	0021      	movs	r1, r4
 8000750:	200b      	movs	r0, #11
 8000752:	f002 fd2b 	bl	80031ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8000756:	200b      	movs	r0, #11
 8000758:	f002 fd52 	bl	8003200 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 800075c:	0022      	movs	r2, r4
 800075e:	0021      	movs	r1, r4
 8000760:	200d      	movs	r0, #13
 8000762:	f002 fd23 	bl	80031ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000766:	200d      	movs	r0, #13
 8000768:	f002 fd4a 	bl	8003200 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 800076c:	0022      	movs	r2, r4
 800076e:	0039      	movs	r1, r7
 8000770:	200f      	movs	r0, #15
 8000772:	f002 fd1b 	bl	80031ac <HAL_NVIC_SetPriority>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000776:	2690      	movs	r6, #144	@ 0x90
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000778:	200f      	movs	r0, #15
 800077a:	f002 fd41 	bl	8003200 <HAL_NVIC_EnableIRQ>
 800077e:	2506      	movs	r5, #6
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000780:	2710      	movs	r7, #16
      HAL_Delay(200);
 8000782:	24c8      	movs	r4, #200	@ 0xc8
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000784:	05f6      	lsls	r6, r6, #23
 8000786:	2201      	movs	r2, #1
 8000788:	0039      	movs	r1, r7
 800078a:	0030      	movs	r0, r6
 800078c:	f002 ff5e 	bl	800364c <HAL_GPIO_WritePin>
      HAL_Delay(200);
 8000790:	0020      	movs	r0, r4
 8000792:	f002 fbc3 	bl	8002f1c <HAL_Delay>
    for (uint8_t i = 0; i < 6; i++){ 
 8000796:	3d01      	subs	r5, #1
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000798:	2200      	movs	r2, #0
 800079a:	0039      	movs	r1, r7
 800079c:	0030      	movs	r0, r6
 800079e:	f002 ff55 	bl	800364c <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < 6; i++){ 
 80007a2:	b2ed      	uxtb	r5, r5
      HAL_Delay(200);
 80007a4:	0020      	movs	r0, r4
 80007a6:	f002 fbb9 	bl	8002f1c <HAL_Delay>
    for (uint8_t i = 0; i < 6; i++){ 
 80007aa:	2d00      	cmp	r5, #0
 80007ac:	d1eb      	bne.n	8000786 <main+0x2d2>
    OpenLoop_Params.hDefaultVoltage = OPEN_LOOP_VOLTAGE_d; // Default voltage setting
 80007ae:	4c26      	ldr	r4, [pc, #152]	@ (8000848 <main+0x394>)
 80007b0:	4b26      	ldr	r3, [pc, #152]	@ (800084c <main+0x398>)
    OpenLoop_Params.VFMode = OPEN_LOOP_VF; // Disable
 80007b2:	70a5      	strb	r5, [r4, #2]
    OpenLoop_Params.hDefaultVoltage = OPEN_LOOP_VOLTAGE_d; // Default voltage setting
 80007b4:	8023      	strh	r3, [r4, #0]
    OpenLoop_Params.hVFOffset = OPEN_LOOP_OFFSET; // Base voltage when stopped
 80007b6:	4b26      	ldr	r3, [pc, #152]	@ (8000850 <main+0x39c>)
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80007b8:	2610      	movs	r6, #16
    OpenLoop_Params.hVFOffset = OPEN_LOOP_OFFSET; // Base voltage when stopped
 80007ba:	6063      	str	r3, [r4, #4]
    OpenLoop_Params.hVoltage = 24;
 80007bc:	2318      	movs	r3, #24
 80007be:	8123      	strh	r3, [r4, #8]
    MC_GetSTMStateMotor1(); // set a breakpoint on the line if reading the state via Debugger
 80007c0:	f000 f868 	bl	8000894 <MC_GetSTMStateMotor1>
    MC_GetOccurredFaultsMotor1();
 80007c4:	f000 f85e 	bl	8000884 <MC_GetOccurredFaultsMotor1>
    MCI_SetOpenLoopVoltage(&Mci[M1]);
 80007c8:	4d22      	ldr	r5, [pc, #136]	@ (8000854 <main+0x3a0>)
 80007ca:	0028      	movs	r0, r5
 80007cc:	f000 f884 	bl	80008d8 <MCI_SetOpenLoopVoltage>
    OL_UpdateVoltage(&OpenLoop_Params, ((DUTY_CYCLE * 32767) / 100));
 80007d0:	0020      	movs	r0, r4
 80007d2:	4921      	ldr	r1, [pc, #132]	@ (8000858 <main+0x3a4>)
 80007d4:	f003 ff08 	bl	80045e8 <OL_UpdateVoltage>
    MCI_ExecSpeedRamp(&Mci[M1], 60, DURATION_MS);
 80007d8:	22fa      	movs	r2, #250	@ 0xfa
 80007da:	213c      	movs	r1, #60	@ 0x3c
 80007dc:	0092      	lsls	r2, r2, #2
 80007de:	0028      	movs	r0, r5
 80007e0:	f000 f870 	bl	80008c4 <MCI_ExecSpeedRamp>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80007e4:	2590      	movs	r5, #144	@ 0x90
    MC_StartMotor1();
 80007e6:	f000 f83d 	bl	8000864 <MC_StartMotor1>
			  HAL_Delay(500);
 80007ea:	24fa      	movs	r4, #250	@ 0xfa
    HAL_Delay(5000);
 80007ec:	481b      	ldr	r0, [pc, #108]	@ (800085c <main+0x3a8>)
 80007ee:	f002 fb95 	bl	8002f1c <HAL_Delay>
    MC_StopMotor1(); 
 80007f2:	f000 f83f 	bl	8000874 <MC_StopMotor1>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80007f6:	05ed      	lsls	r5, r5, #23
			  HAL_Delay(500);
 80007f8:	0064      	lsls	r4, r4, #1
		if (MC_GetSTMStateMotor1() == RUN) {
 80007fa:	f000 f84b 	bl	8000894 <MC_GetSTMStateMotor1>
 80007fe:	2806      	cmp	r0, #6
 8000800:	d1fb      	bne.n	80007fa <main+0x346>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000802:	0031      	movs	r1, r6
 8000804:	2201      	movs	r2, #1
 8000806:	0028      	movs	r0, r5
 8000808:	f002 ff20 	bl	800364c <HAL_GPIO_WritePin>
			  HAL_Delay(500);
 800080c:	0020      	movs	r0, r4
 800080e:	f002 fb85 	bl	8002f1c <HAL_Delay>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000812:	0028      	movs	r0, r5
 8000814:	2200      	movs	r2, #0
 8000816:	0031      	movs	r1, r6
 8000818:	f002 ff18 	bl	800364c <HAL_GPIO_WritePin>
			  HAL_Delay(500);
 800081c:	0020      	movs	r0, r4
 800081e:	f002 fb7d 	bl	8002f1c <HAL_Delay>
 8000822:	e7ea      	b.n	80007fa <main+0x346>
 8000824:	40021000 	.word	0x40021000
 8000828:	20000520 	.word	0x20000520
 800082c:	40012400 	.word	0x40012400
 8000830:	20000494 	.word	0x20000494
 8000834:	40012c00 	.word	0x40012c00
 8000838:	00000736 	.word	0x00000736
 800083c:	0000039b 	.word	0x0000039b
 8000840:	2000044c 	.word	0x2000044c
 8000844:	00000fff 	.word	0x00000fff
 8000848:	200003b4 	.word	0x200003b4
 800084c:	00007530 	.word	0x00007530
 8000850:	002c7530 	.word	0x002c7530
 8000854:	20000560 	.word	0x20000560
 8000858:	00000ccc 	.word	0x00000ccc
 800085c:	00001388 	.word	0x00001388

08000860 <Error_Handler>:
 8000860:	b672      	cpsid	i
  while (1)
 8000862:	e7fe      	b.n	8000862 <Error_Handler+0x2>

08000864 <MC_StartMotor1>:
  * check if it has reached the #RUN state. See MC_GetSTMStateMotor1() for more details.
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
 8000864:	b510      	push	{r4, lr}
	return MCI_StartMotor( pMCI[M1] );
 8000866:	4b02      	ldr	r3, [pc, #8]	@ (8000870 <MC_StartMotor1+0xc>)
 8000868:	6818      	ldr	r0, [r3, #0]
 800086a:	f000 f88b 	bl	8000984 <MCI_StartMotor>
}
 800086e:	bd10      	pop	{r4, pc}
 8000870:	200005cc 	.word	0x200005cc

08000874 <MC_StopMotor1>:
  * #IDLE state has been reached back.
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
 8000874:	b510      	push	{r4, lr}
	return MCI_StopMotor( pMCI[M1] );
 8000876:	4b02      	ldr	r3, [pc, #8]	@ (8000880 <MC_StopMotor1+0xc>)
 8000878:	6818      	ldr	r0, [r3, #0]
 800087a:	f000 f89b 	bl	80009b4 <MCI_StopMotor>
}
 800087e:	bd10      	pop	{r4, pc}
 8000880:	200005cc 	.word	0x200005cc

08000884 <MC_GetOccurredFaultsMotor1>:
 *
 * See @ref fault_codes "Motor Control Faults" for a list of
 * of all possible faults codes.
 */
__weak uint16_t MC_GetOccurredFaultsMotor1(void)
{
 8000884:	b510      	push	{r4, lr}
	return MCI_GetOccurredFaults( pMCI[M1] );
 8000886:	4b02      	ldr	r3, [pc, #8]	@ (8000890 <MC_GetOccurredFaultsMotor1+0xc>)
 8000888:	6818      	ldr	r0, [r3, #0]
 800088a:	f000 f877 	bl	800097c <MCI_GetOccurredFaults>
}
 800088e:	bd10      	pop	{r4, pc}
 8000890:	200005cc 	.word	0x200005cc

08000894 <MC_GetSTMStateMotor1>:

/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak MCI_State_t  MC_GetSTMStateMotor1(void)
{
 8000894:	b510      	push	{r4, lr}
	return MCI_GetSTMState( pMCI[M1] );
 8000896:	4b02      	ldr	r3, [pc, #8]	@ (80008a0 <MC_GetSTMStateMotor1+0xc>)
 8000898:	6818      	ldr	r0, [r3, #0]
 800089a:	f000 f86d 	bl	8000978 <MCI_GetSTMState>
}
 800089e:	bd10      	pop	{r4, pc}
 80008a0:	200005cc 	.word	0x200005cc

080008a4 <MC_APP_BootHook>:
   */

/* USER CODE BEGIN BootHook */

/* USER CODE END BootHook */
}
 80008a4:	4770      	bx	lr
 80008a6:	46c0      	nop			@ (mov r8, r8)

080008a8 <MC_APP_PostMediumFrequencyHook_M1>:
 * @brief Hook function called right after the Medium Frequency Task
 *
 *
 *
 */
__weak void MC_APP_PostMediumFrequencyHook_M1(void)
 80008a8:	4770      	bx	lr
 80008aa:	46c0      	nop			@ (mov r8, r8)

080008ac <MCI_Init>:
  else
  {
#endif
    pHandle->pSTC = pSTC;
    pHandle->pFOCVars = pFOCVars;
    pHandle->pPWM = pPWMHandle;
 80008ac:	6083      	str	r3, [r0, #8]

    /* Buffer related initialization */
    pHandle->lastCommand = MCI_NOCOMMANDSYET;
 80008ae:	2300      	movs	r3, #0
    pHandle->pSTC = pSTC;
 80008b0:	6001      	str	r1, [r0, #0]
    pHandle->pFOCVars = pFOCVars;
 80008b2:	6042      	str	r2, [r0, #4]
    pHandle->lastCommand = MCI_NOCOMMANDSYET;
 80008b4:	7303      	strb	r3, [r0, #12]
    pHandle->hFinalSpeed = 0;
 80008b6:	81c3      	strh	r3, [r0, #14]
    pHandle->hFinalTorque = 0;
 80008b8:	8203      	strh	r3, [r0, #16]
    pHandle->hDurationms = 0;
 80008ba:	82c3      	strh	r3, [r0, #22]
    pHandle->CommandState = MCI_BUFFER_EMPTY;
    pHandle->DirectCommand = MCI_NO_COMMAND;
 80008bc:	6183      	str	r3, [r0, #24]
    pHandle->State = IDLE;
    pHandle->CurrentFaults = MC_NO_FAULTS;
    pHandle->PastFaults = MC_NO_FAULTS;
 80008be:	8383      	strh	r3, [r0, #28]
    pHandle->CommandState = MCI_BUFFER_EMPTY;
 80008c0:	7783      	strb	r3, [r0, #30]
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 80008c2:	4770      	bx	lr

080008c4 <MCI_ExecSpeedRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 80008c4:	2301      	movs	r3, #1
 80008c6:	7303      	strb	r3, [r0, #12]
    pHandle->hFinalSpeed = hFinalSpeed;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80008c8:	4b02      	ldr	r3, [pc, #8]	@ (80008d4 <MCI_ExecSpeedRamp+0x10>)
    pHandle->hFinalSpeed = hFinalSpeed;
 80008ca:	81c1      	strh	r1, [r0, #14]
    pHandle->hDurationms = hDurationms;
 80008cc:	82c2      	strh	r2, [r0, #22]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80008ce:	83c3      	strh	r3, [r0, #30]
    pHandle->LastModalitySetByUser = MCM_SPEED_MODE;

#ifdef NULL_PTR_MC_INT
  }
#endif
}
 80008d0:	4770      	bx	lr
 80008d2:	46c0      	nop			@ (mov r8, r8)
 80008d4:	00000301 	.word	0x00000301

080008d8 <MCI_SetOpenLoopVoltage>:
  * @param  Iqdref current references on qd reference frame in qd_t
  *         format.
  * @retval none.
  */
__weak void MCI_SetOpenLoopVoltage( MCI_Handle_t * pHandle )
{
 80008d8:	b570      	push	{r4, r5, r6, lr}
  pHandle->pFOCVars->bDriveInput = EXTERNAL;
 80008da:	2324      	movs	r3, #36	@ 0x24
 80008dc:	2501      	movs	r5, #1
{
 80008de:	0004      	movs	r4, r0
  pHandle->pFOCVars->bDriveInput = EXTERNAL;
 80008e0:	6842      	ldr	r2, [r0, #4]
  STC_SetControlMode( pHandle->pSTC, MCM_OPEN_LOOP_VOLTAGE_MODE );
 80008e2:	2101      	movs	r1, #1
  pHandle->pFOCVars->bDriveInput = EXTERNAL;
 80008e4:	54d5      	strb	r5, [r2, r3]
  STC_SetControlMode( pHandle->pSTC, MCM_OPEN_LOOP_VOLTAGE_MODE );
 80008e6:	6800      	ldr	r0, [r0, #0]
 80008e8:	f003 ffe6 	bl	80048b8 <STC_SetControlMode>
  pHandle->LastModalitySetByUser = MCM_OPEN_LOOP_VOLTAGE_MODE;
 80008ec:	77e5      	strb	r5, [r4, #31]
}
 80008ee:	bd70      	pop	{r4, r5, r6, pc}

080008f0 <MCI_FaultProcessing>:
 * @retval State_t New state machine state after fault processing
 */
__weak void MCI_FaultProcessing(MCI_Handle_t *pHandle, uint16_t hSetErrors, uint16_t hResetErrors)
{
  /* Set current errors */
  pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 80008f0:	8b43      	ldrh	r3, [r0, #26]
 80008f2:	430b      	orrs	r3, r1
 80008f4:	4393      	bics	r3, r2
 80008f6:	8343      	strh	r3, [r0, #26]
  pHandle->PastFaults |= hSetErrors;
 80008f8:	8b83      	ldrh	r3, [r0, #28]
 80008fa:	4319      	orrs	r1, r3
 80008fc:	8381      	strh	r1, [r0, #28]

  return;
}
 80008fe:	4770      	bx	lr

08000900 <MCI_ExecBufferedCommands>:
  *         occurs.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none.
  */
__weak void MCI_ExecBufferedCommands(MCI_Handle_t *pHandle)
{
 8000900:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8000902:	7f83      	ldrb	r3, [r0, #30]
{
 8000904:	0004      	movs	r4, r0
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8000906:	2b01      	cmp	r3, #1
 8000908:	d000      	beq.n	800090c <MCI_ExecBufferedCommands+0xc>
      }
    }
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 800090a:	bd10      	pop	{r4, pc}
      switch (pHandle->lastCommand)
 800090c:	7b02      	ldrb	r2, [r0, #12]
 800090e:	2a02      	cmp	r2, #2
 8000910:	d023      	beq.n	800095a <MCI_ExecBufferedCommands+0x5a>
 8000912:	2a03      	cmp	r2, #3
 8000914:	d014      	beq.n	8000940 <MCI_ExecBufferedCommands+0x40>
 8000916:	2a01      	cmp	r2, #1
 8000918:	d11c      	bne.n	8000954 <MCI_ExecBufferedCommands+0x54>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 800091a:	2100      	movs	r1, #0
 800091c:	6842      	ldr	r2, [r0, #4]
 800091e:	3323      	adds	r3, #35	@ 0x23
 8000920:	54d1      	strb	r1, [r2, r3]
          STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 8000922:	6800      	ldr	r0, [r0, #0]
 8000924:	3103      	adds	r1, #3
 8000926:	f003 ffc7 	bl	80048b8 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms);
 800092a:	8ae2      	ldrh	r2, [r4, #22]
 800092c:	230e      	movs	r3, #14
 800092e:	5ee1      	ldrsh	r1, [r4, r3]
 8000930:	6820      	ldr	r0, [r4, #0]
 8000932:	f003 ffc5 	bl	80048c0 <STC_ExecRamp>
      if (commandHasBeenExecuted)
 8000936:	2800      	cmp	r0, #0
 8000938:	d00c      	beq.n	8000954 <MCI_ExecBufferedCommands+0x54>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 800093a:	2302      	movs	r3, #2
 800093c:	77a3      	strb	r3, [r4, #30]
 800093e:	e7e4      	b.n	800090a <MCI_ExecBufferedCommands+0xa>
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8000940:	2224      	movs	r2, #36	@ 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8000942:	0021      	movs	r1, r4
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8000944:	6840      	ldr	r0, [r0, #4]
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8000946:	3112      	adds	r1, #18
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8000948:	5483      	strb	r3, [r0, r2]
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 800094a:	3a20      	subs	r2, #32
 800094c:	3010      	adds	r0, #16
 800094e:	f004 f8d5 	bl	8004afc <memcpy>
      if (commandHasBeenExecuted)
 8000952:	e7f2      	b.n	800093a <MCI_ExecBufferedCommands+0x3a>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 8000954:	2303      	movs	r3, #3
 8000956:	77a3      	strb	r3, [r4, #30]
}
 8000958:	e7d7      	b.n	800090a <MCI_ExecBufferedCommands+0xa>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 800095a:	2324      	movs	r3, #36	@ 0x24
 800095c:	2100      	movs	r1, #0
 800095e:	6842      	ldr	r2, [r0, #4]
 8000960:	54d1      	strb	r1, [r2, r3]
          STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 8000962:	6800      	ldr	r0, [r0, #0]
 8000964:	3104      	adds	r1, #4
 8000966:	f003 ffa7 	bl	80048b8 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms);
 800096a:	8ae2      	ldrh	r2, [r4, #22]
 800096c:	2310      	movs	r3, #16
 800096e:	5ee1      	ldrsh	r1, [r4, r3]
 8000970:	6820      	ldr	r0, [r4, #0]
 8000972:	f003 ffa5 	bl	80048c0 <STC_ExecRamp>
          break;
 8000976:	e7de      	b.n	8000936 <MCI_ExecBufferedCommands+0x36>

08000978 <MCI_GetSTMState>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak MCI_State_t  MCI_GetSTMState(MCI_Handle_t *pHandle)
{
  return (pHandle->State);
 8000978:	7e40      	ldrb	r0, [r0, #25]
}
 800097a:	4770      	bx	lr

0800097c <MCI_GetOccurredFaults>:
  *         FAULT_NOW state.
  * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
  */
__weak uint16_t MCI_GetOccurredFaults(MCI_Handle_t *pHandle)
{
  return ((uint16_t)pHandle->PastFaults);
 800097c:	8b80      	ldrh	r0, [r0, #28]
}
 800097e:	4770      	bx	lr

08000980 <MCI_GetCurrentFaults>:
  *         present faults.
  * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
  */
__weak uint16_t MCI_GetCurrentFaults(MCI_Handle_t *pHandle)
{
  return ((uint16_t)pHandle->CurrentFaults);
 8000980:	8b40      	ldrh	r0, [r0, #26]
}
 8000982:	4770      	bx	lr

08000984 <MCI_StartMotor>:
{
 8000984:	b510      	push	{r4, lr}
 8000986:	0004      	movs	r4, r0
  if ((IDLE == MCI_GetSTMState(pHandle)) &&
 8000988:	f7ff fff6 	bl	8000978 <MCI_GetSTMState>
 800098c:	2800      	cmp	r0, #0
 800098e:	d001      	beq.n	8000994 <MCI_StartMotor+0x10>
    RetVal = false;
 8000990:	2000      	movs	r0, #0
}
 8000992:	bd10      	pop	{r4, pc}
      (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8000994:	0020      	movs	r0, r4
 8000996:	f7ff fff1 	bl	800097c <MCI_GetOccurredFaults>
  if ((IDLE == MCI_GetSTMState(pHandle)) &&
 800099a:	2800      	cmp	r0, #0
 800099c:	d1f8      	bne.n	8000990 <MCI_StartMotor+0xc>
      (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 800099e:	0020      	movs	r0, r4
 80009a0:	f7ff ffee 	bl	8000980 <MCI_GetCurrentFaults>
      (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80009a4:	2800      	cmp	r0, #0
 80009a6:	d1f3      	bne.n	8000990 <MCI_StartMotor+0xc>
    pHandle->DirectCommand = MCI_START;
 80009a8:	2301      	movs	r3, #1
    RetVal = true;
 80009aa:	3001      	adds	r0, #1
    pHandle->DirectCommand = MCI_START;
 80009ac:	7623      	strb	r3, [r4, #24]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80009ae:	77a3      	strb	r3, [r4, #30]
    RetVal = true;
 80009b0:	e7ef      	b.n	8000992 <MCI_StartMotor+0xe>
 80009b2:	46c0      	nop			@ (mov r8, r8)

080009b4 <MCI_StopMotor>:
{
 80009b4:	b570      	push	{r4, r5, r6, lr}
 80009b6:	0004      	movs	r4, r0
  State = MCI_GetSTMState(pHandle);
 80009b8:	f7ff ffde 	bl	8000978 <MCI_GetSTMState>
    status = false;
 80009bc:	2500      	movs	r5, #0
  if (IDLE == State  || ICLWAIT == State)
 80009be:	2800      	cmp	r0, #0
 80009c0:	d004      	beq.n	80009cc <MCI_StopMotor+0x18>
 80009c2:	0003      	movs	r3, r0
 80009c4:	3b0c      	subs	r3, #12
 80009c6:	1e5a      	subs	r2, r3, #1
 80009c8:	4193      	sbcs	r3, r2
 80009ca:	b2dd      	uxtb	r5, r3
  if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80009cc:	0020      	movs	r0, r4
 80009ce:	f7ff ffd5 	bl	800097c <MCI_GetOccurredFaults>
 80009d2:	2800      	cmp	r0, #0
 80009d4:	d002      	beq.n	80009dc <MCI_StopMotor+0x28>
    RetVal = false;
 80009d6:	2500      	movs	r5, #0
}
 80009d8:	0028      	movs	r0, r5
 80009da:	bd70      	pop	{r4, r5, r6, pc}
      (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 80009dc:	0020      	movs	r0, r4
 80009de:	f7ff ffcf 	bl	8000980 <MCI_GetCurrentFaults>
  if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80009e2:	2800      	cmp	r0, #0
 80009e4:	d1f7      	bne.n	80009d6 <MCI_StopMotor+0x22>
      (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 80009e6:	2d00      	cmp	r5, #0
 80009e8:	d0f5      	beq.n	80009d6 <MCI_StopMotor+0x22>
    pHandle->DirectCommand = MCI_STOP;
 80009ea:	2305      	movs	r3, #5
 80009ec:	7623      	strb	r3, [r4, #24]
    RetVal = true;
 80009ee:	e7f3      	b.n	80009d8 <MCI_StopMotor+0x24>

080009f0 <MCI_GetFaultState>:
  */
__weak uint32_t MCI_GetFaultState(MCI_Handle_t *pHandle)
{
  uint32_t LocalFaultState;

  LocalFaultState = (uint32_t)(pHandle->PastFaults);
 80009f0:	8b83      	ldrh	r3, [r0, #28]
  LocalFaultState |= (uint32_t)(pHandle->CurrentFaults) << 16;
 80009f2:	8b40      	ldrh	r0, [r0, #26]
 80009f4:	0400      	lsls	r0, r0, #16
 80009f6:	4318      	orrs	r0, r3

  return (LocalFaultState);
}
 80009f8:	4770      	bx	lr
 80009fa:	46c0      	nop			@ (mov r8, r8)

080009fc <MCM_Clarke>:
  *                       beta = -(2*b+a)/sqrt(3)
  * @param  Input: stator values a and b in ab_t format
  * @retval Stator values alpha and beta in alphabeta_t format
  */
__weak alphabeta_t MCM_Clarke(ab_t Input)
{
 80009fc:	b201      	sxth	r1, r0
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 80009fe:	014a      	lsls	r2, r1, #5
 8000a00:	1852      	adds	r2, r2, r1
 8000a02:	00d2      	lsls	r2, r2, #3
 8000a04:	1a52      	subs	r2, r2, r1
  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 8000a06:	1403      	asrs	r3, r0, #16
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 8000a08:	0092      	lsls	r2, r2, #2
  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 8000a0a:	4812      	ldr	r0, [pc, #72]	@ (8000a54 <MCM_Clarke+0x58>)
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 8000a0c:	1a52      	subs	r2, r2, r1
  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 8000a0e:	4358      	muls	r0, r3
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 8000a10:	00d3      	lsls	r3, r2, #3
 8000a12:	18d3      	adds	r3, r2, r3
#else
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) / 32768;
#endif

  /* Check saturation of Ibeta */
  if (wbeta_tmp > INT16_MAX)
 8000a14:	2280      	movs	r2, #128	@ 0x80
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	425b      	negs	r3, r3
 8000a1a:	1a1b      	subs	r3, r3, r0
 8000a1c:	1a1b      	subs	r3, r3, r0
{
 8000a1e:	b084      	sub	sp, #16
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 8000a20:	13db      	asrs	r3, r3, #15
  if (wbeta_tmp > INT16_MAX)
 8000a22:	0212      	lsls	r2, r2, #8
 8000a24:	4293      	cmp	r3, r2
 8000a26:	da04      	bge.n	8000a32 <MCM_Clarke+0x36>
  {
    hbeta_tmp = INT16_MAX;
  }
  else if (wbeta_tmp < (-32768))
 8000a28:	4a0b      	ldr	r2, [pc, #44]	@ (8000a58 <MCM_Clarke+0x5c>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	da08      	bge.n	8000a40 <MCM_Clarke+0x44>
 8000a2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a5c <MCM_Clarke+0x60>)
 8000a30:	e000      	b.n	8000a34 <MCM_Clarke+0x38>
 8000a32:	4b0b      	ldr	r3, [pc, #44]	@ (8000a60 <MCM_Clarke+0x64>)
  if (((int16_t )-32768) == Output.beta)
  {
    Output.beta = -32767;
  }

  return (Output);
 8000a34:	0408      	lsls	r0, r1, #16
 8000a36:	041b      	lsls	r3, r3, #16
 8000a38:	0c00      	lsrs	r0, r0, #16
 8000a3a:	4318      	orrs	r0, r3
}
 8000a3c:	b004      	add	sp, #16
 8000a3e:	4770      	bx	lr
    hbeta_tmp = ((int16_t)wbeta_tmp);
 8000a40:	4806      	ldr	r0, [pc, #24]	@ (8000a5c <MCM_Clarke+0x60>)
 8000a42:	1c1a      	adds	r2, r3, #0
 8000a44:	b21b      	sxth	r3, r3
 8000a46:	4283      	cmp	r3, r0
 8000a48:	db01      	blt.n	8000a4e <MCM_Clarke+0x52>
 8000a4a:	b213      	sxth	r3, r2
 8000a4c:	e7f2      	b.n	8000a34 <MCM_Clarke+0x38>
 8000a4e:	1c02      	adds	r2, r0, #0
 8000a50:	b213      	sxth	r3, r2
 8000a52:	e7ef      	b.n	8000a34 <MCM_Clarke+0x38>
 8000a54:	000049e6 	.word	0x000049e6
 8000a58:	ffff8000 	.word	0xffff8000
 8000a5c:	ffff8001 	.word	0xffff8001
 8000a60:	00007fff 	.word	0x00007fff

08000a64 <MCM_Trig_Functions>:
  uint16_t uhindex;

  Trig_Components Local_Components;

  /* 10 bit index computation  */
  shindex = (((int32_t)32768) + ((int32_t)hAngle));
 8000a64:	2380      	movs	r3, #128	@ 0x80
 8000a66:	021b      	lsls	r3, r3, #8
 8000a68:	18c3      	adds	r3, r0, r3
  uhindex = (uint16_t)shindex;
 8000a6a:	b29b      	uxth	r3, r3
{
 8000a6c:	b530      	push	{r4, r5, lr}
  uhindex /= ((uint16_t)64);
 8000a6e:	099b      	lsrs	r3, r3, #6

  switch (((uint16_t)uhindex) & SIN_MASK)
 8000a70:	25c0      	movs	r5, #192	@ 0xc0
 8000a72:	0018      	movs	r0, r3
 8000a74:	2480      	movs	r4, #128	@ 0x80
 8000a76:	00ad      	lsls	r5, r5, #2
{
 8000a78:	2200      	movs	r2, #0
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	b083      	sub	sp, #12
 8000a7e:	4028      	ands	r0, r5
  switch (((uint16_t)uhindex) & SIN_MASK)
 8000a80:	00a4      	lsls	r4, r4, #2
 8000a82:	42a0      	cmp	r0, r4
 8000a84:	d01f      	beq.n	8000ac6 <MCM_Trig_Functions+0x62>
 8000a86:	d811      	bhi.n	8000aac <MCM_Trig_Functions+0x48>
 8000a88:	2800      	cmp	r0, #0
 8000a8a:	d025      	beq.n	8000ad8 <MCM_Trig_Functions+0x74>
      break;
    }

    case U270_360:
    {
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	43da      	mvns	r2, r3
 8000a90:	4918      	ldr	r1, [pc, #96]	@ (8000af4 <MCM_Trig_Functions+0x90>)
 8000a92:	b2d2      	uxtb	r2, r2
 8000a94:	0052      	lsls	r2, r2, #1
 8000a96:	5a52      	ldrh	r2, [r2, r1]
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 8000a98:	005b      	lsls	r3, r3, #1
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000a9a:	4252      	negs	r2, r2
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 8000a9c:	5e59      	ldrsh	r1, [r3, r1]
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000a9e:	b212      	sxth	r2, r2
    }

    default:
      break;
  }
  return (Local_Components);
 8000aa0:	0408      	lsls	r0, r1, #16
 8000aa2:	0412      	lsls	r2, r2, #16
 8000aa4:	0c00      	lsrs	r0, r0, #16
 8000aa6:	4310      	orrs	r0, r2
}
 8000aa8:	b003      	add	sp, #12
 8000aaa:	bd30      	pop	{r4, r5, pc}
  switch (((uint16_t)uhindex) & SIN_MASK)
 8000aac:	42a8      	cmp	r0, r5
 8000aae:	d1f7      	bne.n	8000aa0 <MCM_Trig_Functions+0x3c>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	43da      	mvns	r2, r3
 8000ab4:	490f      	ldr	r1, [pc, #60]	@ (8000af4 <MCM_Trig_Functions+0x90>)
 8000ab6:	b2d2      	uxtb	r2, r2
 8000ab8:	0052      	lsls	r2, r2, #1
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000aba:	005b      	lsls	r3, r3, #1
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000abc:	5e52      	ldrsh	r2, [r2, r1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000abe:	5a59      	ldrh	r1, [r3, r1]
 8000ac0:	4249      	negs	r1, r1
 8000ac2:	b209      	sxth	r1, r1
      break;
 8000ac4:	e7ec      	b.n	8000aa0 <MCM_Trig_Functions+0x3c>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	005a      	lsls	r2, r3, #1
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000aca:	43db      	mvns	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8000acc:	4909      	ldr	r1, [pc, #36]	@ (8000af4 <MCM_Trig_Functions+0x90>)
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	005b      	lsls	r3, r3, #1
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8000ad2:	5e52      	ldrsh	r2, [r2, r1]
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000ad4:	5e59      	ldrsh	r1, [r3, r1]
      break;
 8000ad6:	e7e3      	b.n	8000aa0 <MCM_Trig_Functions+0x3c>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	005a      	lsls	r2, r3, #1
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000adc:	43db      	mvns	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000ade:	4905      	ldr	r1, [pc, #20]	@ (8000af4 <MCM_Trig_Functions+0x90>)
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	005b      	lsls	r3, r3, #1
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000ae4:	5a52      	ldrh	r2, [r2, r1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000ae6:	5a59      	ldrh	r1, [r3, r1]
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000ae8:	4252      	negs	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000aea:	4249      	negs	r1, r1
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000aec:	b212      	sxth	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000aee:	b209      	sxth	r1, r1
      break;
 8000af0:	e7d6      	b.n	8000aa0 <MCM_Trig_Functions+0x3c>
 8000af2:	46c0      	nop			@ (mov r8, r8)
 8000af4:	08004b28 	.word	0x08004b28

08000af8 <MCM_Park>:
{
 8000af8:	b570      	push	{r4, r5, r6, lr}
 8000afa:	b205      	sxth	r5, r0
 8000afc:	1404      	asrs	r4, r0, #16
 8000afe:	b084      	sub	sp, #16
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8000b00:	0008      	movs	r0, r1
 8000b02:	f7ff ffaf 	bl	8000a64 <MCM_Trig_Functions>
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 8000b06:	b201      	sxth	r1, r0
  q_tmp_2 = Input.beta * ((int32_t)Local_Vector_Components.hSin);
 8000b08:	1403      	asrs	r3, r0, #16
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 8000b0a:	000a      	movs	r2, r1
  q_tmp_2 = Input.beta * ((int32_t)Local_Vector_Components.hSin);
 8000b0c:	0018      	movs	r0, r3
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 8000b0e:	436a      	muls	r2, r5
  q_tmp_2 = Input.beta * ((int32_t)Local_Vector_Components.hSin);
 8000b10:	4360      	muls	r0, r4
  wqd_tmp = (q_tmp_1 - q_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8000b12:	1a12      	subs	r2, r2, r0
  if (wqd_tmp > INT16_MAX)
 8000b14:	2080      	movs	r0, #128	@ 0x80
  wqd_tmp = (q_tmp_1 - q_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8000b16:	13d2      	asrs	r2, r2, #15
  if (wqd_tmp > INT16_MAX)
 8000b18:	0200      	lsls	r0, r0, #8
 8000b1a:	4282      	cmp	r2, r0
 8000b1c:	da12      	bge.n	8000b44 <MCM_Park+0x4c>
  else if (wqd_tmp < (-32768))
 8000b1e:	481a      	ldr	r0, [pc, #104]	@ (8000b88 <MCM_Park+0x90>)
 8000b20:	4282      	cmp	r2, r0
 8000b22:	da24      	bge.n	8000b6e <MCM_Park+0x76>
  if (wqd_tmp > INT16_MAX)
 8000b24:	2280      	movs	r2, #128	@ 0x80
  d_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hSin);
 8000b26:	436b      	muls	r3, r5
  d_tmp_2 = Input.beta * ((int32_t )Local_Vector_Components.hCos);
 8000b28:	4361      	muls	r1, r4
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8000b2a:	185b      	adds	r3, r3, r1
 8000b2c:	4817      	ldr	r0, [pc, #92]	@ (8000b8c <MCM_Park+0x94>)
 8000b2e:	13db      	asrs	r3, r3, #15
  if (wqd_tmp > INT16_MAX)
 8000b30:	0212      	lsls	r2, r2, #8
 8000b32:	4293      	cmp	r3, r2
 8000b34:	db0f      	blt.n	8000b56 <MCM_Park+0x5e>
 8000b36:	4b16      	ldr	r3, [pc, #88]	@ (8000b90 <MCM_Park+0x98>)
  return (Output);
 8000b38:	0400      	lsls	r0, r0, #16
 8000b3a:	041b      	lsls	r3, r3, #16
 8000b3c:	0c00      	lsrs	r0, r0, #16
 8000b3e:	4318      	orrs	r0, r3
}
 8000b40:	b004      	add	sp, #16
 8000b42:	bd70      	pop	{r4, r5, r6, pc}
 8000b44:	4812      	ldr	r0, [pc, #72]	@ (8000b90 <MCM_Park+0x98>)
  if (wqd_tmp > INT16_MAX)
 8000b46:	2280      	movs	r2, #128	@ 0x80
  d_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hSin);
 8000b48:	436b      	muls	r3, r5
  d_tmp_2 = Input.beta * ((int32_t )Local_Vector_Components.hCos);
 8000b4a:	4361      	muls	r1, r4
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8000b4c:	185b      	adds	r3, r3, r1
 8000b4e:	13db      	asrs	r3, r3, #15
  if (wqd_tmp > INT16_MAX)
 8000b50:	0212      	lsls	r2, r2, #8
 8000b52:	4293      	cmp	r3, r2
 8000b54:	daef      	bge.n	8000b36 <MCM_Park+0x3e>
  else if (wqd_tmp < (-32768))
 8000b56:	4a0c      	ldr	r2, [pc, #48]	@ (8000b88 <MCM_Park+0x90>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	da01      	bge.n	8000b60 <MCM_Park+0x68>
 8000b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b8c <MCM_Park+0x94>)
 8000b5e:	e7eb      	b.n	8000b38 <MCM_Park+0x40>
    hqd_tmp = ((int16_t)wqd_tmp);
 8000b60:	490a      	ldr	r1, [pc, #40]	@ (8000b8c <MCM_Park+0x94>)
 8000b62:	1c1a      	adds	r2, r3, #0
 8000b64:	b21b      	sxth	r3, r3
 8000b66:	428b      	cmp	r3, r1
 8000b68:	db0b      	blt.n	8000b82 <MCM_Park+0x8a>
 8000b6a:	b213      	sxth	r3, r2
 8000b6c:	e7e4      	b.n	8000b38 <MCM_Park+0x40>
    hqd_tmp = ((int16_t)wqd_tmp);
 8000b6e:	4e07      	ldr	r6, [pc, #28]	@ (8000b8c <MCM_Park+0x94>)
 8000b70:	1c10      	adds	r0, r2, #0
 8000b72:	b212      	sxth	r2, r2
 8000b74:	42b2      	cmp	r2, r6
 8000b76:	db01      	blt.n	8000b7c <MCM_Park+0x84>
 8000b78:	b200      	sxth	r0, r0
 8000b7a:	e7e4      	b.n	8000b46 <MCM_Park+0x4e>
 8000b7c:	1c30      	adds	r0, r6, #0
 8000b7e:	b200      	sxth	r0, r0
 8000b80:	e7e1      	b.n	8000b46 <MCM_Park+0x4e>
 8000b82:	1c0a      	adds	r2, r1, #0
 8000b84:	b213      	sxth	r3, r2
 8000b86:	e7d7      	b.n	8000b38 <MCM_Park+0x40>
 8000b88:	ffff8000 	.word	0xffff8000
 8000b8c:	ffff8001 	.word	0xffff8001
 8000b90:	00007fff 	.word	0x00007fff

08000b94 <MCM_Rev_Park>:
{
 8000b94:	b530      	push	{r4, r5, lr}
 8000b96:	b205      	sxth	r5, r0
 8000b98:	b085      	sub	sp, #20
 8000b9a:	1404      	asrs	r4, r0, #16
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8000b9c:	0008      	movs	r0, r1
 8000b9e:	f7ff ff61 	bl	8000a64 <MCM_Trig_Functions>
  alpha_tmp1 = Input.q * ((int32_t)Local_Vector_Components.hCos);
 8000ba2:	b202      	sxth	r2, r0
  alpha_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hSin);
 8000ba4:	1403      	asrs	r3, r0, #16
 8000ba6:	0019      	movs	r1, r3
  alpha_tmp1 = Input.q * ((int32_t)Local_Vector_Components.hCos);
 8000ba8:	0010      	movs	r0, r2
  alpha_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hSin);
 8000baa:	4361      	muls	r1, r4
  alpha_tmp1 = Input.q * ((int32_t)Local_Vector_Components.hCos);
 8000bac:	4368      	muls	r0, r5
  beta_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hCos);
 8000bae:	4354      	muls	r4, r2
  beta_tmp1 = Input.q * ((int32_t)Local_Vector_Components.hSin);
 8000bb0:	436b      	muls	r3, r5
  Output.alpha = (int16_t)(((alpha_tmp1) + (alpha_tmp2)) >> 15);
 8000bb2:	1840      	adds	r0, r0, r1
  Output.beta = (int16_t)((beta_tmp2 - beta_tmp1) >> 15);
 8000bb4:	1ae4      	subs	r4, r4, r3
 8000bb6:	13e4      	asrs	r4, r4, #15
  return (Output);
 8000bb8:	0040      	lsls	r0, r0, #1
 8000bba:	0424      	lsls	r4, r4, #16
 8000bbc:	0c00      	lsrs	r0, r0, #16
 8000bbe:	4320      	orrs	r0, r4
}
 8000bc0:	b005      	add	sp, #20
 8000bc2:	bd30      	pop	{r4, r5, pc}

08000bc4 <FOC_Clear>:

  ab_t NULL_ab = {((int16_t)0), ((int16_t)0)};
  qd_t NULL_qd = {((int16_t)0), ((int16_t)0)};
  alphabeta_t NULL_alphabeta = {((int16_t)0), ((int16_t)0)};

  FOCVars[bMotor].Iab = NULL_ab;
 8000bc4:	2126      	movs	r1, #38	@ 0x26
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	4341      	muls	r1, r0
 8000bca:	4b12      	ldr	r3, [pc, #72]	@ (8000c14 <FOC_Clear+0x50>)
{
 8000bcc:	b510      	push	{r4, lr}
  FOCVars[bMotor].Iab = NULL_ab;
 8000bce:	52ca      	strh	r2, [r1, r3]
 8000bd0:	185b      	adds	r3, r3, r1
 8000bd2:	805a      	strh	r2, [r3, #2]
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 8000bd4:	809a      	strh	r2, [r3, #4]
 8000bd6:	80da      	strh	r2, [r3, #6]
  FOCVars[bMotor].Iqd = NULL_qd;
 8000bd8:	819a      	strh	r2, [r3, #12]
 8000bda:	81da      	strh	r2, [r3, #14]
  {
    FOCVars[bMotor].Iqdref = NULL_qd;
 8000bdc:	821a      	strh	r2, [r3, #16]
 8000bde:	825a      	strh	r2, [r3, #18]
  }
  FOCVars[bMotor].hTeref = (int16_t)0;
 8000be0:	83da      	strh	r2, [r3, #30]
  FOCVars[bMotor].Vqd = NULL_qd;
 8000be2:	82da      	strh	r2, [r3, #22]
 8000be4:	831a      	strh	r2, [r3, #24]
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
 8000be6:	835a      	strh	r2, [r3, #26]
 8000be8:	839a      	strh	r2, [r3, #28]
  FOCVars[bMotor].hElAngle = (int16_t)0;
 8000bea:	841a      	strh	r2, [r3, #32]

  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8000bec:	4b0a      	ldr	r3, [pc, #40]	@ (8000c18 <FOC_Clear+0x54>)
 8000bee:	0084      	lsls	r4, r0, #2
 8000bf0:	58e0      	ldr	r0, [r4, r3]
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	f003 fd02 	bl	80045fc <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], ((int32_t)0));
 8000bf8:	4b08      	ldr	r3, [pc, #32]	@ (8000c1c <FOC_Clear+0x58>)
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	58e0      	ldr	r0, [r4, r3]
 8000bfe:	f003 fcfd 	bl	80045fc <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8000c02:	4b07      	ldr	r3, [pc, #28]	@ (8000c20 <FOC_Clear+0x5c>)
 8000c04:	58e0      	ldr	r0, [r4, r3]
 8000c06:	f003 fe49 	bl	800489c <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8000c0a:	4b06      	ldr	r3, [pc, #24]	@ (8000c24 <FOC_Clear+0x60>)
 8000c0c:	58e0      	ldr	r0, [r4, r3]
 8000c0e:	f000 fcc5 	bl	800159c <PWMC_SwitchOffPWM>

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 8000c12:	bd10      	pop	{r4, pc}
 8000c14:	200005a4 	.word	0x200005a4
 8000c18:	20000008 	.word	0x20000008
 8000c1c:	20000004 	.word	0x20000004
 8000c20:	20000010 	.word	0x20000010
 8000c24:	2000059c 	.word	0x2000059c

08000c28 <MCboot>:
{
 8000c28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c2a:	46de      	mov	lr, fp
 8000c2c:	4657      	mov	r7, sl
 8000c2e:	464e      	mov	r6, r9
 8000c30:	4645      	mov	r5, r8
 8000c32:	b5e0      	push	{r5, r6, r7, lr}
 8000c34:	0004      	movs	r4, r0
 8000c36:	b083      	sub	sp, #12
  if (MC_NULL == pMCIList)
 8000c38:	2800      	cmp	r0, #0
 8000c3a:	d061      	beq.n	8000d00 <MCboot+0xd8>
    bMCBootCompleted = (uint8_t )0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	4a34      	ldr	r2, [pc, #208]	@ (8000d10 <MCboot+0xe8>)
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8000c40:	4e34      	ldr	r6, [pc, #208]	@ (8000d14 <MCboot+0xec>)
 8000c42:	4835      	ldr	r0, [pc, #212]	@ (8000d18 <MCboot+0xf0>)
    bMCBootCompleted = (uint8_t )0;
 8000c44:	4690      	mov	r8, r2
 8000c46:	7013      	strb	r3, [r2, #0]
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8000c48:	6030      	str	r0, [r6, #0]
    R1_Init(&PWM_Handle_M1);
 8000c4a:	f001 f871 	bl	8001d30 <R1_Init>
    PID_HandleInit(&PIDSpeedHandle_M1);
 8000c4e:	4b33      	ldr	r3, [pc, #204]	@ (8000d1c <MCboot+0xf4>)
 8000c50:	0018      	movs	r0, r3
 8000c52:	469b      	mov	fp, r3
 8000c54:	f003 fcca 	bl	80045ec <PID_HandleInit>
    ENC_Init (&ENCODER_M1);
 8000c58:	4b31      	ldr	r3, [pc, #196]	@ (8000d20 <MCboot+0xf8>)
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	469a      	mov	sl, r3
 8000c5e:	f003 fb41 	bl	80042e4 <ENC_Init>
    EAC_Init(&EncAlignCtrlM1,pSTC[M1],&VirtualSpeedSensorM1,&ENCODER_M1);
 8000c62:	4830      	ldr	r0, [pc, #192]	@ (8000d24 <MCboot+0xfc>)
 8000c64:	4d30      	ldr	r5, [pc, #192]	@ (8000d28 <MCboot+0x100>)
 8000c66:	4681      	mov	r9, r0
 8000c68:	4f30      	ldr	r7, [pc, #192]	@ (8000d2c <MCboot+0x104>)
 8000c6a:	4653      	mov	r3, sl
 8000c6c:	003a      	movs	r2, r7
 8000c6e:	6829      	ldr	r1, [r5, #0]
 8000c70:	f003 faee 	bl	8004250 <EAC_Init>
    pEAC[M1] = &EncAlignCtrlM1;
 8000c74:	464a      	mov	r2, r9
 8000c76:	4b2e      	ldr	r3, [pc, #184]	@ (8000d30 <MCboot+0x108>)
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &ENCODER_M1._Super);
 8000c78:	4659      	mov	r1, fp
    pEAC[M1] = &EncAlignCtrlM1;
 8000c7a:	601a      	str	r2, [r3, #0]
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &ENCODER_M1._Super);
 8000c7c:	6828      	ldr	r0, [r5, #0]
 8000c7e:	4652      	mov	r2, sl
 8000c80:	f003 fdf6 	bl	8004870 <STC_Init>
    VSS_Init(&VirtualSpeedSensorM1);
 8000c84:	0038      	movs	r0, r7
 8000c86:	f003 feb5 	bl	80049f4 <VSS_Init>
    PID_HandleInit(&PIDIqHandle_M1);
 8000c8a:	482a      	ldr	r0, [pc, #168]	@ (8000d34 <MCboot+0x10c>)
 8000c8c:	f003 fcae 	bl	80045ec <PID_HandleInit>
    PID_HandleInit(&PIDIdHandle_M1);
 8000c90:	4829      	ldr	r0, [pc, #164]	@ (8000d38 <MCboot+0x110>)
 8000c92:	f003 fcab 	bl	80045ec <PID_HandleInit>
    RVBS_Init(&BusVoltageSensor_M1);
 8000c96:	4f29      	ldr	r7, [pc, #164]	@ (8000d3c <MCboot+0x114>)
 8000c98:	0038      	movs	r0, r7
 8000c9a:	f003 fd3f 	bl	800471c <RVBS_Init>
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 8000c9e:	4b28      	ldr	r3, [pc, #160]	@ (8000d40 <MCboot+0x118>)
    NTC_Init(&TempSensor_M1);
 8000ca0:	4828      	ldr	r0, [pc, #160]	@ (8000d44 <MCboot+0x11c>)
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	60df      	str	r7, [r3, #12]
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 8000ca6:	4f28      	ldr	r7, [pc, #160]	@ (8000d48 <MCboot+0x120>)
 8000ca8:	609f      	str	r7, [r3, #8]
    NTC_Init(&TempSensor_M1);
 8000caa:	f003 fc6b 	bl	8004584 <NTC_Init>
    REMNG_Init(pREMNG[M1]);
 8000cae:	4827      	ldr	r0, [pc, #156]	@ (8000d4c <MCboot+0x124>)
 8000cb0:	f003 fd9e 	bl	80047f0 <REMNG_Init>
    FOC_Clear(M1);
 8000cb4:	2000      	movs	r0, #0
 8000cb6:	f7ff ff85 	bl	8000bc4 <FOC_Clear>
    FOCVars[M1].bDriveInput = EXTERNAL;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	4699      	mov	r9, r3
 8000cbe:	464a      	mov	r2, r9
 8000cc0:	3323      	adds	r3, #35	@ 0x23
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8000cc2:	6828      	ldr	r0, [r5, #0]
    FOCVars[M1].bDriveInput = EXTERNAL;
 8000cc4:	54fa      	strb	r2, [r7, r3]
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8000cc6:	f003 fe77 	bl	80049b8 <STC_GetDefaultIqdref>
 8000cca:	6138      	str	r0, [r7, #16]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8000ccc:	6828      	ldr	r0, [r5, #0]
 8000cce:	f003 fe73 	bl	80049b8 <STC_GetDefaultIqdref>
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 8000cd2:	6833      	ldr	r3, [r6, #0]
 8000cd4:	4e1e      	ldr	r6, [pc, #120]	@ (8000d50 <MCboot+0x128>)
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8000cd6:	0c00      	lsrs	r0, r0, #16
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 8000cd8:	003a      	movs	r2, r7
 8000cda:	6829      	ldr	r1, [r5, #0]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8000cdc:	82b8      	strh	r0, [r7, #20]
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 8000cde:	0030      	movs	r0, r6
 8000ce0:	f7ff fde4 	bl	80008ac <MCI_Init>
    MCI_ExecSpeedRamp(&Mci[M1],
 8000ce4:	6828      	ldr	r0, [r5, #0]
 8000ce6:	f003 fe63 	bl	80049b0 <STC_GetMecSpeedRefUnitDefault>
 8000cea:	2200      	movs	r2, #0
 8000cec:	0001      	movs	r1, r0
 8000cee:	0030      	movs	r0, r6
 8000cf0:	f7ff fde8 	bl	80008c4 <MCI_ExecSpeedRamp>
    pMCIList[M1] = &Mci[M1];
 8000cf4:	6026      	str	r6, [r4, #0]
    MC_APP_BootHook();
 8000cf6:	f7ff fdd5 	bl	80008a4 <MC_APP_BootHook>
    bMCBootCompleted = 1U;
 8000cfa:	4643      	mov	r3, r8
 8000cfc:	464a      	mov	r2, r9
 8000cfe:	701a      	strb	r2, [r3, #0]
}
 8000d00:	b003      	add	sp, #12
 8000d02:	bcf0      	pop	{r4, r5, r6, r7}
 8000d04:	46bb      	mov	fp, r7
 8000d06:	46b2      	mov	sl, r6
 8000d08:	46a9      	mov	r9, r5
 8000d0a:	46a0      	mov	r8, r4
 8000d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d0e:	46c0      	nop			@ (mov r8, r8)
 8000d10:	20000594 	.word	0x20000594
 8000d14:	2000059c 	.word	0x2000059c
 8000d18:	20000204 	.word	0x20000204
 8000d1c:	2000034c 	.word	0x2000034c
 8000d20:	20000150 	.word	0x20000150
 8000d24:	20000134 	.word	0x20000134
 8000d28:	20000010 	.word	0x20000010
 8000d2c:	200001cc 	.word	0x200001cc
 8000d30:	200005a0 	.word	0x200005a0
 8000d34:	20000320 	.word	0x20000320
 8000d38:	200002f4 	.word	0x200002f4
 8000d3c:	200000e0 	.word	0x200000e0
 8000d40:	20000000 	.word	0x20000000
 8000d44:	2000010c 	.word	0x2000010c
 8000d48:	200005a4 	.word	0x200005a4
 8000d4c:	200000c8 	.word	0x200000c8
 8000d50:	20000560 	.word	0x20000560

08000d54 <FOC_InitAdditionalMethods>:
    {
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
    }
}
 8000d54:	4770      	bx	lr
 8000d56:	46c0      	nop			@ (mov r8, r8)

08000d58 <FOC_CalcCurrRef>:
{

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if (INTERNAL == FOCVars[bMotor].bDriveInput)
 8000d58:	2326      	movs	r3, #38	@ 0x26
 8000d5a:	4343      	muls	r3, r0
{
 8000d5c:	b510      	push	{r4, lr}
  if (INTERNAL == FOCVars[bMotor].bDriveInput)
 8000d5e:	4c08      	ldr	r4, [pc, #32]	@ (8000d80 <FOC_CalcCurrRef+0x28>)
 8000d60:	18e4      	adds	r4, r4, r3
 8000d62:	0023      	movs	r3, r4
 8000d64:	3324      	adds	r3, #36	@ 0x24
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d000      	beq.n	8000d6e <FOC_CalcCurrRef+0x16>
    /* Nothing to do */
  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8000d6c:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8000d6e:	4b05      	ldr	r3, [pc, #20]	@ (8000d84 <FOC_CalcCurrRef+0x2c>)
 8000d70:	0080      	lsls	r0, r0, #2
 8000d72:	58c0      	ldr	r0, [r0, r3]
 8000d74:	f003 fde6 	bl	8004944 <STC_CalcTorqueReference>
 8000d78:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 8000d7a:	8220      	strh	r0, [r4, #16]
}
 8000d7c:	e7f6      	b.n	8000d6c <FOC_CalcCurrRef+0x14>
 8000d7e:	46c0      	nop			@ (mov r8, r8)
 8000d80:	200005a4 	.word	0x200005a4
 8000d84:	20000010 	.word	0x20000010

08000d88 <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 8000d88:	4b01      	ldr	r3, [pc, #4]	@ (8000d90 <TSK_SetChargeBootCapDelayM1+0x8>)
 8000d8a:	8018      	strh	r0, [r3, #0]
}
 8000d8c:	4770      	bx	lr
 8000d8e:	46c0      	nop			@ (mov r8, r8)
 8000d90:	20000598 	.word	0x20000598

08000d94 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hBootCapDelayCounterM1)
 8000d94:	4b02      	ldr	r3, [pc, #8]	@ (8000da0 <TSK_ChargeBootCapDelayHasElapsedM1+0xc>)
 8000d96:	8818      	ldrh	r0, [r3, #0]
 8000d98:	4243      	negs	r3, r0
 8000d9a:	4158      	adcs	r0, r3
  {
    retVal = true;
  }
  return (retVal);
 8000d9c:	b2c0      	uxtb	r0, r0
}
 8000d9e:	4770      	bx	lr
 8000da0:	20000598 	.word	0x20000598

08000da4 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8000da4:	4b01      	ldr	r3, [pc, #4]	@ (8000dac <TSK_SetStopPermanencyTimeM1+0x8>)
 8000da6:	8018      	strh	r0, [r3, #0]
}
 8000da8:	4770      	bx	lr
 8000daa:	46c0      	nop			@ (mov r8, r8)
 8000dac:	20000596 	.word	0x20000596

08000db0 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hStopPermanencyCounterM1)
 8000db0:	4b02      	ldr	r3, [pc, #8]	@ (8000dbc <TSK_StopPermanencyTimeHasElapsedM1+0xc>)
 8000db2:	8818      	ldrh	r0, [r3, #0]
 8000db4:	4243      	negs	r3, r0
 8000db6:	4158      	adcs	r0, r3
  {
    retVal = true;
  }
  return (retVal);
 8000db8:	b2c0      	uxtb	r0, r0
}
 8000dba:	4770      	bx	lr
 8000dbc:	20000596 	.word	0x20000596

08000dc0 <TSK_MediumFrequencyTaskM1>:
{
 8000dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dc2:	46c6      	mov	lr, r8
 8000dc4:	b500      	push	{lr}
 8000dc6:	b082      	sub	sp, #8
  int16_t wAux = 0;
 8000dc8:	466b      	mov	r3, sp
 8000dca:	1d99      	adds	r1, r3, #6
 8000dcc:	2300      	movs	r3, #0
  (void)ENC_CalcAvrgMecSpeedUnit(&ENCODER_M1, &wAux);
 8000dce:	4e8b      	ldr	r6, [pc, #556]	@ (8000ffc <TSK_MediumFrequencyTaskM1+0x23c>)
  int16_t wAux = 0;
 8000dd0:	800b      	strh	r3, [r1, #0]
  (void)ENC_CalcAvrgMecSpeedUnit(&ENCODER_M1, &wAux);
 8000dd2:	0030      	movs	r0, r6
 8000dd4:	f003 fae4 	bl	80043a0 <ENC_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower(pMPM[M1]);
 8000dd8:	4d89      	ldr	r5, [pc, #548]	@ (8001000 <TSK_MediumFrequencyTaskM1+0x240>)
 8000dda:	6828      	ldr	r0, [r5, #0]
 8000ddc:	f003 fc4e 	bl	800467c <PQD_CalcElMotorPower>
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 8000de0:	4c88      	ldr	r4, [pc, #544]	@ (8001004 <TSK_MediumFrequencyTaskM1+0x244>)
 8000de2:	0020      	movs	r0, r4
 8000de4:	f7ff fdcc 	bl	8000980 <MCI_GetCurrentFaults>
 8000de8:	2800      	cmp	r0, #0
 8000dea:	d005      	beq.n	8000df8 <TSK_MediumFrequencyTaskM1+0x38>
    Mci[M1].State = FAULT_NOW;
 8000dec:	230a      	movs	r3, #10
 8000dee:	7663      	strb	r3, [r4, #25]
}
 8000df0:	b002      	add	sp, #8
 8000df2:	bc80      	pop	{r7}
 8000df4:	46b8      	mov	r8, r7
 8000df6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (MCI_GetOccurredFaults(&Mci[M1]) == MC_NO_FAULTS)
 8000df8:	0020      	movs	r0, r4
 8000dfa:	f7ff fdbf 	bl	800097c <MCI_GetOccurredFaults>
 8000dfe:	2800      	cmp	r0, #0
 8000e00:	d106      	bne.n	8000e10 <TSK_MediumFrequencyTaskM1+0x50>
      switch (Mci[M1].State)
 8000e02:	7e63      	ldrb	r3, [r4, #25]
 8000e04:	2b14      	cmp	r3, #20
 8000e06:	d8f3      	bhi.n	8000df0 <TSK_MediumFrequencyTaskM1+0x30>
 8000e08:	4a7f      	ldr	r2, [pc, #508]	@ (8001008 <TSK_MediumFrequencyTaskM1+0x248>)
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	58d3      	ldr	r3, [r2, r3]
 8000e0e:	469f      	mov	pc, r3
      Mci[M1].State = FAULT_OVER;
 8000e10:	230b      	movs	r3, #11
 8000e12:	7663      	strb	r3, [r4, #25]
 8000e14:	e7ec      	b.n	8000df0 <TSK_MediumFrequencyTaskM1+0x30>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8000e16:	7e23      	ldrb	r3, [r4, #24]
 8000e18:	2b05      	cmp	r3, #5
 8000e1a:	d100      	bne.n	8000e1e <TSK_MediumFrequencyTaskM1+0x5e>
 8000e1c:	e0ae      	b.n	8000f7c <TSK_MediumFrequencyTaskM1+0x1bc>
            if (TSK_StopPermanencyTimeHasElapsedM1())
 8000e1e:	f7ff ffc7 	bl	8000db0 <TSK_StopPermanencyTimeHasElapsedM1>
 8000e22:	2800      	cmp	r0, #0
 8000e24:	d0e4      	beq.n	8000df0 <TSK_MediumFrequencyTaskM1+0x30>
              ENC_Clear(&ENCODER_M1);
 8000e26:	0030      	movs	r0, r6
 8000e28:	f003 fa94 	bl	8004354 <ENC_Clear>
              R1_SwitchOnPWM( pwmcHandle[M1] );
 8000e2c:	4b77      	ldr	r3, [pc, #476]	@ (800100c <TSK_MediumFrequencyTaskM1+0x24c>)
 8000e2e:	6818      	ldr	r0, [r3, #0]
 8000e30:	f001 f8f2 	bl	8002018 <R1_SwitchOnPWM>
              FOC_InitAdditionalMethods(M1);
 8000e34:	2000      	movs	r0, #0
 8000e36:	f7ff ff8d 	bl	8000d54 <FOC_InitAdditionalMethods>
              STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 8000e3a:	4b75      	ldr	r3, [pc, #468]	@ (8001010 <TSK_MediumFrequencyTaskM1+0x250>)
 8000e3c:	6818      	ldr	r0, [r3, #0]
 8000e3e:	f003 fdc3 	bl	80049c8 <STC_ForceSpeedReferenceToCurrentSpeed>
              MCI_ExecBufferedCommands( &Mci[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 8000e42:	0020      	movs	r0, r4
 8000e44:	f7ff fd5c 	bl	8000900 <MCI_ExecBufferedCommands>
              FOC_CalcCurrRef(M1);
 8000e48:	2000      	movs	r0, #0
 8000e4a:	f7ff ff85 	bl	8000d58 <FOC_CalcCurrRef>
              Mci[M1].State = RUN;
 8000e4e:	2306      	movs	r3, #6
 8000e50:	7663      	strb	r3, [r4, #25]
 8000e52:	e7cd      	b.n	8000df0 <TSK_MediumFrequencyTaskM1+0x30>
           if (pwmcHandle[M1]->offsetCalibStatus == false)
 8000e54:	4e6d      	ldr	r6, [pc, #436]	@ (800100c <TSK_MediumFrequencyTaskM1+0x24c>)
            if (MCI_STOP == Mci[M1].DirectCommand)
 8000e56:	7e23      	ldrb	r3, [r4, #24]
           if (pwmcHandle[M1]->offsetCalibStatus == false)
 8000e58:	6830      	ldr	r0, [r6, #0]
            if (MCI_STOP == Mci[M1].DirectCommand)
 8000e5a:	2b05      	cmp	r3, #5
 8000e5c:	d100      	bne.n	8000e60 <TSK_MediumFrequencyTaskM1+0xa0>
 8000e5e:	e08f      	b.n	8000f80 <TSK_MediumFrequencyTaskM1+0x1c0>
              if (PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC))
 8000e60:	2101      	movs	r1, #1
 8000e62:	f000 fba3 	bl	80015ac <PWMC_CurrentReadingCalibr>
 8000e66:	2800      	cmp	r0, #0
 8000e68:	d0c2      	beq.n	8000df0 <TSK_MediumFrequencyTaskM1+0x30>
                if (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand)
 8000e6a:	7e23      	ldrb	r3, [r4, #24]
 8000e6c:	2b03      	cmp	r3, #3
 8000e6e:	d100      	bne.n	8000e72 <TSK_MediumFrequencyTaskM1+0xb2>
 8000e70:	e0a4      	b.n	8000fbc <TSK_MediumFrequencyTaskM1+0x1fc>
                  R1_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 8000e72:	6830      	ldr	r0, [r6, #0]
 8000e74:	2100      	movs	r1, #0
 8000e76:	f001 f8ab 	bl	8001fd0 <R1_TurnOnLowSides>
                  TSK_SetChargeBootCapDelayM1(CHARGE_BOOT_CAP_TICKS);
 8000e7a:	2014      	movs	r0, #20
 8000e7c:	f7ff ff84 	bl	8000d88 <TSK_SetChargeBootCapDelayM1>
                  Mci[M1].State = CHARGE_BOOT_CAP;
 8000e80:	2310      	movs	r3, #16
 8000e82:	7663      	strb	r3, [r4, #25]
 8000e84:	e7b4      	b.n	8000df0 <TSK_MediumFrequencyTaskM1+0x30>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8000e86:	7e23      	ldrb	r3, [r4, #24]
 8000e88:	2b05      	cmp	r3, #5
 8000e8a:	d077      	beq.n	8000f7c <TSK_MediumFrequencyTaskM1+0x1bc>
            if (TSK_ChargeBootCapDelayHasElapsedM1())
 8000e8c:	f7ff ff82 	bl	8000d94 <TSK_ChargeBootCapDelayHasElapsedM1>
 8000e90:	2800      	cmp	r0, #0
 8000e92:	d0ad      	beq.n	8000df0 <TSK_MediumFrequencyTaskM1+0x30>
              R1_SwitchOffPWM(pwmcHandle[M1]);
 8000e94:	4d5d      	ldr	r5, [pc, #372]	@ (800100c <TSK_MediumFrequencyTaskM1+0x24c>)
 8000e96:	6828      	ldr	r0, [r5, #0]
 8000e98:	f001 f9f8 	bl	800228c <R1_SwitchOffPWM>
              FOCVars[M1].bDriveInput = EXTERNAL;
 8000e9c:	2224      	movs	r2, #36	@ 0x24
 8000e9e:	2101      	movs	r1, #1
 8000ea0:	4b5c      	ldr	r3, [pc, #368]	@ (8001014 <TSK_MediumFrequencyTaskM1+0x254>)
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8000ea2:	4f5b      	ldr	r7, [pc, #364]	@ (8001010 <TSK_MediumFrequencyTaskM1+0x250>)
              FOCVars[M1].bDriveInput = EXTERNAL;
 8000ea4:	5499      	strb	r1, [r3, r2]
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8000ea6:	6838      	ldr	r0, [r7, #0]
 8000ea8:	495b      	ldr	r1, [pc, #364]	@ (8001018 <TSK_MediumFrequencyTaskM1+0x258>)
 8000eaa:	f003 fcf3 	bl	8004894 <STC_SetSpeedSensor>
              ENC_Clear(&ENCODER_M1);
 8000eae:	0030      	movs	r0, r6
 8000eb0:	f003 fa50 	bl	8004354 <ENC_Clear>
              FOC_Clear( M1 );
 8000eb4:	2000      	movs	r0, #0
 8000eb6:	f7ff fe85 	bl	8000bc4 <FOC_Clear>
              if (EAC_IsAligned(&EncAlignCtrlM1) == false )
 8000eba:	4b58      	ldr	r3, [pc, #352]	@ (800101c <TSK_MediumFrequencyTaskM1+0x25c>)
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	4698      	mov	r8, r3
 8000ec0:	f003 fa0c 	bl	80042dc <EAC_IsAligned>
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d000      	beq.n	8000eca <TSK_MediumFrequencyTaskM1+0x10a>
 8000ec8:	e081      	b.n	8000fce <TSK_MediumFrequencyTaskM1+0x20e>
                EAC_StartAlignment(&EncAlignCtrlM1);
 8000eca:	4640      	mov	r0, r8
 8000ecc:	f003 f9c6 	bl	800425c <EAC_StartAlignment>
                Mci[M1].State = ALIGNMENT;
 8000ed0:	2302      	movs	r3, #2
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 8000ed2:	6828      	ldr	r0, [r5, #0]
                Mci[M1].State = ALIGNMENT;
 8000ed4:	7663      	strb	r3, [r4, #25]
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 8000ed6:	f000 fb65 	bl	80015a4 <PWMC_SwitchOnPWM>
 8000eda:	e789      	b.n	8000df0 <TSK_MediumFrequencyTaskM1+0x30>
          if (MCI_ACK_FAULTS == Mci[M1].DirectCommand)
 8000edc:	7e23      	ldrb	r3, [r4, #24]
 8000ede:	2b02      	cmp	r3, #2
 8000ee0:	d000      	beq.n	8000ee4 <TSK_MediumFrequencyTaskM1+0x124>
 8000ee2:	e785      	b.n	8000df0 <TSK_MediumFrequencyTaskM1+0x30>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	8323      	strh	r3, [r4, #24]
 8000ee8:	e782      	b.n	8000df0 <TSK_MediumFrequencyTaskM1+0x30>
          if (TSK_StopPermanencyTimeHasElapsedM1())
 8000eea:	f7ff ff61 	bl	8000db0 <TSK_StopPermanencyTimeHasElapsedM1>
 8000eee:	2800      	cmp	r0, #0
 8000ef0:	d100      	bne.n	8000ef4 <TSK_MediumFrequencyTaskM1+0x134>
 8000ef2:	e77d      	b.n	8000df0 <TSK_MediumFrequencyTaskM1+0x30>
 8000ef4:	e7f6      	b.n	8000ee4 <TSK_MediumFrequencyTaskM1+0x124>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8000ef6:	7e23      	ldrb	r3, [r4, #24]
 8000ef8:	2b05      	cmp	r3, #5
 8000efa:	d03f      	beq.n	8000f7c <TSK_MediumFrequencyTaskM1+0x1bc>
            MCI_ExecBufferedCommands(&Mci[M1]);
 8000efc:	0020      	movs	r0, r4
 8000efe:	f7ff fcff 	bl	8000900 <MCI_ExecBufferedCommands>
              FOC_CalcCurrRef(M1);
 8000f02:	2000      	movs	r0, #0
 8000f04:	f7ff ff28 	bl	8000d58 <FOC_CalcCurrRef>
 8000f08:	e772      	b.n	8000df0 <TSK_MediumFrequencyTaskM1+0x30>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8000f0a:	7e23      	ldrb	r3, [r4, #24]
 8000f0c:	2b05      	cmp	r3, #5
 8000f0e:	d035      	beq.n	8000f7c <TSK_MediumFrequencyTaskM1+0x1bc>
            bool isAligned = EAC_IsAligned(&EncAlignCtrlM1);
 8000f10:	4f42      	ldr	r7, [pc, #264]	@ (800101c <TSK_MediumFrequencyTaskM1+0x25c>)
 8000f12:	0038      	movs	r0, r7
 8000f14:	f003 f9e2 	bl	80042dc <EAC_IsAligned>
 8000f18:	0005      	movs	r5, r0
            bool EACDone = EAC_Exec(&EncAlignCtrlM1);
 8000f1a:	0038      	movs	r0, r7
 8000f1c:	f003 f9c4 	bl	80042a8 <EAC_Exec>
 8000f20:	0007      	movs	r7, r0
            if ((isAligned == false)  && (EACDone == false))
 8000f22:	2d00      	cmp	r5, #0
 8000f24:	d101      	bne.n	8000f2a <TSK_MediumFrequencyTaskM1+0x16a>
 8000f26:	2800      	cmp	r0, #0
 8000f28:	d040      	beq.n	8000fac <TSK_MediumFrequencyTaskM1+0x1ec>
              R1_SwitchOffPWM( pwmcHandle[M1] );
 8000f2a:	4b38      	ldr	r3, [pc, #224]	@ (800100c <TSK_MediumFrequencyTaskM1+0x24c>)
 8000f2c:	6818      	ldr	r0, [r3, #0]
 8000f2e:	f001 f9ad 	bl	800228c <R1_SwitchOffPWM>
              STC_SetControlMode(pSTC[M1], MCM_SPEED_MODE);
 8000f32:	4d37      	ldr	r5, [pc, #220]	@ (8001010 <TSK_MediumFrequencyTaskM1+0x250>)
 8000f34:	2103      	movs	r1, #3
 8000f36:	6828      	ldr	r0, [r5, #0]
 8000f38:	f003 fcbe 	bl	80048b8 <STC_SetControlMode>
              STC_SetSpeedSensor(pSTC[M1], &ENCODER_M1._Super);
 8000f3c:	0031      	movs	r1, r6
 8000f3e:	6828      	ldr	r0, [r5, #0]
 8000f40:	f003 fca8 	bl	8004894 <STC_SetSpeedSensor>
              FOC_Clear(M1);
 8000f44:	2000      	movs	r0, #0
 8000f46:	f7ff fe3d 	bl	8000bc4 <FOC_Clear>
              TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 8000f4a:	20c8      	movs	r0, #200	@ 0xc8
 8000f4c:	0080      	lsls	r0, r0, #2
 8000f4e:	f7ff ff29 	bl	8000da4 <TSK_SetStopPermanencyTimeM1>
              Mci[M1].State = WAIT_STOP_MOTOR;
 8000f52:	2314      	movs	r3, #20
 8000f54:	7663      	strb	r3, [r4, #25]
 8000f56:	e74b      	b.n	8000df0 <TSK_MediumFrequencyTaskM1+0x30>
          if ((MCI_START == Mci[M1].DirectCommand) || (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand))
 8000f58:	2202      	movs	r2, #2
 8000f5a:	7e23      	ldrb	r3, [r4, #24]
 8000f5c:	4393      	bics	r3, r2
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d000      	beq.n	8000f64 <TSK_MediumFrequencyTaskM1+0x1a4>
 8000f62:	e745      	b.n	8000df0 <TSK_MediumFrequencyTaskM1+0x30>
           if (pwmcHandle[M1]->offsetCalibStatus == false)
 8000f64:	4d29      	ldr	r5, [pc, #164]	@ (800100c <TSK_MediumFrequencyTaskM1+0x24c>)
 8000f66:	326c      	adds	r2, #108	@ 0x6c
 8000f68:	6828      	ldr	r0, [r5, #0]
 8000f6a:	5c82      	ldrb	r2, [r0, r2]
 8000f6c:	2a00      	cmp	r2, #0
 8000f6e:	d116      	bne.n	8000f9e <TSK_MediumFrequencyTaskM1+0x1de>
             PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_START);
 8000f70:	2100      	movs	r1, #0
 8000f72:	f000 fb1b 	bl	80015ac <PWMC_CurrentReadingCalibr>
             Mci[M1].State = OFFSET_CALIB;
 8000f76:	2311      	movs	r3, #17
 8000f78:	7663      	strb	r3, [r4, #25]
 8000f7a:	e739      	b.n	8000df0 <TSK_MediumFrequencyTaskM1+0x30>
  R1_SwitchOffPWM(pwmcHandle[motor]);
 8000f7c:	4b23      	ldr	r3, [pc, #140]	@ (800100c <TSK_MediumFrequencyTaskM1+0x24c>)
 8000f7e:	6818      	ldr	r0, [r3, #0]
 8000f80:	f001 f984 	bl	800228c <R1_SwitchOffPWM>
  FOC_Clear(motor);
 8000f84:	2000      	movs	r0, #0
 8000f86:	f7ff fe1d 	bl	8000bc4 <FOC_Clear>
  PQD_Clear(pMPM[motor]);
 8000f8a:	6828      	ldr	r0, [r5, #0]
 8000f8c:	f003 fb90 	bl	80046b0 <PQD_Clear>
  TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 8000f90:	20c8      	movs	r0, #200	@ 0xc8
 8000f92:	0080      	lsls	r0, r0, #2
 8000f94:	f7ff ff06 	bl	8000da4 <TSK_SetStopPermanencyTimeM1>
  Mci[motor].State = STOP;
 8000f98:	2308      	movs	r3, #8
 8000f9a:	7663      	strb	r3, [r4, #25]
  return;
 8000f9c:	e728      	b.n	8000df0 <TSK_MediumFrequencyTaskM1+0x30>
             pwmcHandle[M1]->OffCalibrWaitTimeCounter = 1u;
 8000f9e:	224e      	movs	r2, #78	@ 0x4e
             PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 8000fa0:	2101      	movs	r1, #1
             pwmcHandle[M1]->OffCalibrWaitTimeCounter = 1u;
 8000fa2:	5283      	strh	r3, [r0, r2]
             PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 8000fa4:	f000 fb02 	bl	80015ac <PWMC_CurrentReadingCalibr>
             R1_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 8000fa8:	6828      	ldr	r0, [r5, #0]
 8000faa:	e763      	b.n	8000e74 <TSK_MediumFrequencyTaskM1+0xb4>
                IqdRef.d = STC_CalcTorqueReference(pSTC[M1]);
 8000fac:	4b18      	ldr	r3, [pc, #96]	@ (8001010 <TSK_MediumFrequencyTaskM1+0x250>)
 8000fae:	6818      	ldr	r0, [r3, #0]
 8000fb0:	f003 fcc8 	bl	8004944 <STC_CalcTorqueReference>
                FOCVars[M1].Iqdref = IqdRef;
 8000fb4:	4b17      	ldr	r3, [pc, #92]	@ (8001014 <TSK_MediumFrequencyTaskM1+0x254>)
 8000fb6:	821f      	strh	r7, [r3, #16]
 8000fb8:	8258      	strh	r0, [r3, #18]
            {
 8000fba:	e719      	b.n	8000df0 <TSK_MediumFrequencyTaskM1+0x30>
                  FOC_Clear(M1);
 8000fbc:	2000      	movs	r0, #0
 8000fbe:	f7ff fe01 	bl	8000bc4 <FOC_Clear>
                  PQD_Clear(pMPM[M1]);
 8000fc2:	6828      	ldr	r0, [r5, #0]
 8000fc4:	f003 fb74 	bl	80046b0 <PQD_Clear>
                  Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	8323      	strh	r3, [r4, #24]
 8000fcc:	e710      	b.n	8000df0 <TSK_MediumFrequencyTaskM1+0x30>
                STC_SetControlMode(pSTC[M1], MCM_SPEED_MODE);
 8000fce:	2103      	movs	r1, #3
 8000fd0:	6838      	ldr	r0, [r7, #0]
 8000fd2:	f003 fc71 	bl	80048b8 <STC_SetControlMode>
                STC_SetSpeedSensor(pSTC[M1], &ENCODER_M1._Super);
 8000fd6:	0031      	movs	r1, r6
 8000fd8:	6838      	ldr	r0, [r7, #0]
 8000fda:	f003 fc5b 	bl	8004894 <STC_SetSpeedSensor>
                FOC_InitAdditionalMethods(M1);
 8000fde:	2000      	movs	r0, #0
 8000fe0:	f7ff feb8 	bl	8000d54 <FOC_InitAdditionalMethods>
                FOC_CalcCurrRef( M1 );
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	f7ff feb7 	bl	8000d58 <FOC_CalcCurrRef>
                STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 8000fea:	6838      	ldr	r0, [r7, #0]
 8000fec:	f003 fcec 	bl	80049c8 <STC_ForceSpeedReferenceToCurrentSpeed>
                MCI_ExecBufferedCommands( &Mci[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 8000ff0:	0020      	movs	r0, r4
 8000ff2:	f7ff fc85 	bl	8000900 <MCI_ExecBufferedCommands>
 8000ff6:	2306      	movs	r3, #6
 8000ff8:	e76b      	b.n	8000ed2 <TSK_MediumFrequencyTaskM1+0x112>
 8000ffa:	46c0      	nop			@ (mov r8, r8)
 8000ffc:	20000150 	.word	0x20000150
 8001000:	20000000 	.word	0x20000000
 8001004:	20000560 	.word	0x20000560
 8001008:	08004d64 	.word	0x08004d64
 800100c:	2000059c 	.word	0x2000059c
 8001010:	20000010 	.word	0x20000010
 8001014:	200005a4 	.word	0x200005a4
 8001018:	200001cc 	.word	0x200001cc
 800101c:	20000134 	.word	0x20000134

08001020 <MC_Scheduler>:
{
 8001020:	b510      	push	{r4, lr}
  if (((uint8_t)1) == bMCBootCompleted)
 8001022:	4b11      	ldr	r3, [pc, #68]	@ (8001068 <MC_Scheduler+0x48>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b01      	cmp	r3, #1
 8001028:	d000      	beq.n	800102c <MC_Scheduler+0xc>
}
 800102a:	bd10      	pop	{r4, pc}
    if(hMFTaskCounterM1 > 0u)
 800102c:	4c0f      	ldr	r4, [pc, #60]	@ (800106c <MC_Scheduler+0x4c>)
 800102e:	8823      	ldrh	r3, [r4, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d013      	beq.n	800105c <MC_Scheduler+0x3c>
      hMFTaskCounterM1--;
 8001034:	3b01      	subs	r3, #1
 8001036:	b29b      	uxth	r3, r3
 8001038:	8023      	strh	r3, [r4, #0]
    if(hBootCapDelayCounterM1 > 0U)
 800103a:	4b0d      	ldr	r3, [pc, #52]	@ (8001070 <MC_Scheduler+0x50>)
 800103c:	881a      	ldrh	r2, [r3, #0]
 800103e:	2a00      	cmp	r2, #0
 8001040:	d003      	beq.n	800104a <MC_Scheduler+0x2a>
      hBootCapDelayCounterM1--;
 8001042:	881a      	ldrh	r2, [r3, #0]
 8001044:	3a01      	subs	r2, #1
 8001046:	b292      	uxth	r2, r2
 8001048:	801a      	strh	r2, [r3, #0]
    if(hStopPermanencyCounterM1 > 0U)
 800104a:	4b0a      	ldr	r3, [pc, #40]	@ (8001074 <MC_Scheduler+0x54>)
 800104c:	881a      	ldrh	r2, [r3, #0]
 800104e:	2a00      	cmp	r2, #0
 8001050:	d0eb      	beq.n	800102a <MC_Scheduler+0xa>
      hStopPermanencyCounterM1--;
 8001052:	881a      	ldrh	r2, [r3, #0]
 8001054:	3a01      	subs	r2, #1
 8001056:	b292      	uxth	r2, r2
 8001058:	801a      	strh	r2, [r3, #0]
}
 800105a:	e7e6      	b.n	800102a <MC_Scheduler+0xa>
      TSK_MediumFrequencyTaskM1();
 800105c:	f7ff feb0 	bl	8000dc0 <TSK_MediumFrequencyTaskM1>
      MC_APP_PostMediumFrequencyHook_M1();
 8001060:	f7ff fc22 	bl	80008a8 <MC_APP_PostMediumFrequencyHook_M1>
 8001064:	2301      	movs	r3, #1
 8001066:	e7e7      	b.n	8001038 <MC_Scheduler+0x18>
 8001068:	20000594 	.word	0x20000594
 800106c:	2000059a 	.word	0x2000059a
 8001070:	20000598 	.word	0x20000598
 8001074:	20000596 	.word	0x20000596

08001078 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8001078:	b5f0      	push	{r4, r5, r6, r7, lr}
 800107a:	46ce      	mov	lr, r9
 800107c:	4647      	mov	r7, r8
 800107e:	b580      	push	{r7, lr}
  /* USER CODE END HighFrequencyTask 0 */

  uint16_t hFOCreturn;
  uint8_t bMotorNbr = 0;

  (void)ENC_CalcAngle(&ENCODER_M1);   /* if not sensorless then 2nd parameter is MC_NULL*/
 8001080:	4837      	ldr	r0, [pc, #220]	@ (8001160 <TSK_HighFrequencyTask+0xe8>)
{
 8001082:	b087      	sub	sp, #28
  (void)ENC_CalcAngle(&ENCODER_M1);   /* if not sensorless then 2nd parameter is MC_NULL*/
 8001084:	f003 f976 	bl	8004374 <ENC_CalcAngle>
  ab_t Iab;
  alphabeta_t Ialphabeta, Valphabeta;
  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8001088:	4b36      	ldr	r3, [pc, #216]	@ (8001164 <TSK_HighFrequencyTask+0xec>)
 800108a:	6818      	ldr	r0, [r3, #0]
 800108c:	f003 fc04 	bl	8004898 <STC_GetSpeedSensor>
 8001090:	0006      	movs	r6, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 8001092:	f003 fbb5 	bl	8004800 <SPD_GetElAngle>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001096:	4f34      	ldr	r7, [pc, #208]	@ (8001168 <TSK_HighFrequencyTask+0xf0>)
  hElAngle = SPD_GetElAngle(speedHandle);
 8001098:	0005      	movs	r5, r0
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 800109a:	a903      	add	r1, sp, #12
 800109c:	6838      	ldr	r0, [r7, #0]
 800109e:	f000 f983 	bl	80013a8 <PWMC_GetPhaseCurrents>
  RCM_ExecNextConv();
 80010a2:	f001 fcb5 	bl	8002a10 <RCM_ExecNextConv>
  Ialphabeta = MCM_Clarke(Iab);
 80010a6:	9803      	ldr	r0, [sp, #12]
 80010a8:	f7ff fca8 	bl	80009fc <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80010ac:	0029      	movs	r1, r5
  Ialphabeta = MCM_Clarke(Iab);
 80010ae:	9004      	str	r0, [sp, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80010b0:	f7ff fd22 	bl	8000af8 <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 80010b4:	4c2d      	ldr	r4, [pc, #180]	@ (800116c <TSK_HighFrequencyTask+0xf4>)
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80010b6:	9001      	str	r0, [sp, #4]
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 80010b8:	2310      	movs	r3, #16
 80010ba:	5ee1      	ldrsh	r1, [r4, r3]
 80010bc:	b203      	sxth	r3, r0
 80010be:	1ac9      	subs	r1, r1, r3
 80010c0:	4b2b      	ldr	r3, [pc, #172]	@ (8001170 <TSK_HighFrequencyTask+0xf8>)
 80010c2:	6818      	ldr	r0, [r3, #0]
 80010c4:	f003 fa9c 	bl	8004600 <PI_Controller>
 80010c8:	4680      	mov	r8, r0
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 80010ca:	2312      	movs	r3, #18
 80010cc:	5ee1      	ldrsh	r1, [r4, r3]
 80010ce:	ab01      	add	r3, sp, #4
 80010d0:	2202      	movs	r2, #2
 80010d2:	5e9b      	ldrsh	r3, [r3, r2]
 80010d4:	1ac9      	subs	r1, r1, r3
 80010d6:	4b27      	ldr	r3, [pc, #156]	@ (8001174 <TSK_HighFrequencyTask+0xfc>)
 80010d8:	6818      	ldr	r0, [r3, #0]
 80010da:	f003 fa91 	bl	8004600 <PI_Controller>
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 80010de:	4642      	mov	r2, r8
 80010e0:	ab02      	add	r3, sp, #8
 80010e2:	801a      	strh	r2, [r3, #0]
 80010e4:	8058      	strh	r0, [r3, #2]
 80010e6:	9902      	ldr	r1, [sp, #8]
 80010e8:	4823      	ldr	r0, [pc, #140]	@ (8001178 <TSK_HighFrequencyTask+0x100>)
 80010ea:	f003 f877 	bl	80041dc <Circle_Limitation>
 80010ee:	b203      	sxth	r3, r0
 80010f0:	4699      	mov	r9, r3
 80010f2:	9002      	str	r0, [sp, #8]
 80010f4:	1403      	asrs	r3, r0, #16
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 80010f6:	0030      	movs	r0, r6
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 80010f8:	4698      	mov	r8, r3
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 80010fa:	f003 fb89 	bl	8004810 <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 80010fe:	0029      	movs	r1, r5
 8001100:	9802      	ldr	r0, [sp, #8]
 8001102:	f7ff fd47 	bl	8000b94 <MCM_Rev_Park>
 8001106:	9005      	str	r0, [sp, #20]
  RCM_ReadOngoingConv();
 8001108:	f001 fcba 	bl	8002a80 <RCM_ReadOngoingConv>
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 800110c:	9905      	ldr	r1, [sp, #20]
 800110e:	6838      	ldr	r0, [r7, #0]
 8001110:	f000 f94e 	bl	80013b0 <PWMC_SetPhaseVoltage>
  PWMC_CalcPhaseCurrentsEst(pwmcHandle[M1],Iqd, hElAngle);
 8001114:	002a      	movs	r2, r5
 8001116:	9901      	ldr	r1, [sp, #4]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001118:	0006      	movs	r6, r0
  PWMC_CalcPhaseCurrentsEst(pwmcHandle[M1],Iqd, hElAngle);
 800111a:	6838      	ldr	r0, [r7, #0]
 800111c:	f000 fa62 	bl	80015e4 <PWMC_CalcPhaseCurrentsEst>

  FOCVars[M1].Vqd = Vqd;
 8001120:	464b      	mov	r3, r9
 8001122:	82e3      	strh	r3, [r4, #22]
 8001124:	4643      	mov	r3, r8
  FOCVars[M1].Iab = Iab;
  FOCVars[M1].Ialphabeta = Ialphabeta;
  FOCVars[M1].Iqd = Iqd;
  FOCVars[M1].Valphabeta = Valphabeta;
 8001126:	0020      	movs	r0, r4
  FOCVars[M1].Vqd = Vqd;
 8001128:	8323      	strh	r3, [r4, #24]
  FOCVars[M1].Iab = Iab;
 800112a:	9b03      	ldr	r3, [sp, #12]
  FOCVars[M1].Valphabeta = Valphabeta;
 800112c:	2204      	movs	r2, #4
  FOCVars[M1].Iab = Iab;
 800112e:	6023      	str	r3, [r4, #0]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8001130:	9b04      	ldr	r3, [sp, #16]
  FOCVars[M1].Valphabeta = Valphabeta;
 8001132:	301a      	adds	r0, #26
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8001134:	6063      	str	r3, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 8001136:	9b01      	ldr	r3, [sp, #4]
  FOCVars[M1].Valphabeta = Valphabeta;
 8001138:	a905      	add	r1, sp, #20
  FOCVars[M1].Iqd = Iqd;
 800113a:	60e3      	str	r3, [r4, #12]
  FOCVars[M1].Valphabeta = Valphabeta;
 800113c:	f003 fcde 	bl	8004afc <memcpy>
  FOCVars[M1].hElAngle = hElAngle;
 8001140:	8425      	strh	r5, [r4, #32]
  if(hFOCreturn == MC_DURATION)
 8001142:	2e01      	cmp	r6, #1
 8001144:	d005      	beq.n	8001152 <TSK_HighFrequencyTask+0xda>
}
 8001146:	2000      	movs	r0, #0
 8001148:	b007      	add	sp, #28
 800114a:	bcc0      	pop	{r6, r7}
 800114c:	46b9      	mov	r9, r7
 800114e:	46b0      	mov	r8, r6
 8001150:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MCI_FaultProcessing(&Mci[M1], MC_DURATION, 0);
 8001152:	2200      	movs	r2, #0
 8001154:	2101      	movs	r1, #1
 8001156:	4809      	ldr	r0, [pc, #36]	@ (800117c <TSK_HighFrequencyTask+0x104>)
 8001158:	f7ff fbca 	bl	80008f0 <MCI_FaultProcessing>
 800115c:	e7f3      	b.n	8001146 <TSK_HighFrequencyTask+0xce>
 800115e:	46c0      	nop			@ (mov r8, r8)
 8001160:	20000150 	.word	0x20000150
 8001164:	20000010 	.word	0x20000010
 8001168:	2000059c 	.word	0x2000059c
 800116c:	200005a4 	.word	0x200005a4
 8001170:	20000008 	.word	0x20000008
 8001174:	20000004 	.word	0x20000004
 8001178:	20000014 	.word	0x20000014
 800117c:	20000560 	.word	0x20000560

08001180 <TSK_SafetyTask_PWMOFF>:
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8001180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001182:	46ce      	mov	lr, r9
 8001184:	4647      	mov	r7, r8

  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001186:	4b20      	ldr	r3, [pc, #128]	@ (8001208 <TSK_SafetyTask_PWMOFF+0x88>)
{
 8001188:	b580      	push	{r7, lr}
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 800118a:	0087      	lsls	r7, r0, #2
{
 800118c:	0005      	movs	r5, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 800118e:	59d8      	ldr	r0, [r3, r7]
 8001190:	f003 fa0c 	bl	80045ac <NTC_CalcAvTemp>
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8001194:	4b1d      	ldr	r3, [pc, #116]	@ (800120c <TSK_SafetyTask_PWMOFF+0x8c>)
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001196:	0006      	movs	r6, r0
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8001198:	59d8      	ldr	r0, [r3, r7]
 800119a:	4698      	mov	r8, r3
 800119c:	f000 fa54 	bl	8001648 <PWMC_CheckOverCurrent>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 80011a0:	2308      	movs	r3, #8
 80011a2:	439e      	bics	r6, r3
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 80011a4:	4330      	orrs	r0, r6
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 80011a6:	4699      	mov	r9, r3
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 80011a8:	b284      	uxth	r4, r0
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(M1 == bMotor)
 80011aa:	2d00      	cmp	r5, #0
 80011ac:	d023      	beq.n	80011f6 <TSK_SafetyTask_PWMOFF+0x76>
  {
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1);
  }
  MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* process faults */
 80011ae:	43e2      	mvns	r2, r4
 80011b0:	4b17      	ldr	r3, [pc, #92]	@ (8001210 <TSK_SafetyTask_PWMOFF+0x90>)
 80011b2:	016e      	lsls	r6, r5, #5
 80011b4:	18f6      	adds	r6, r6, r3
 80011b6:	0030      	movs	r0, r6
 80011b8:	0021      	movs	r1, r4
 80011ba:	b292      	uxth	r2, r2
 80011bc:	f7ff fb98 	bl	80008f0 <MCI_FaultProcessing>

  if (MCI_GetFaultState(&Mci[bMotor]) != (uint32_t)MC_NO_FAULTS)
 80011c0:	0030      	movs	r0, r6
 80011c2:	f7ff fc15 	bl	80009f0 <MCI_GetFaultState>
 80011c6:	2800      	cmp	r0, #0
 80011c8:	d011      	beq.n	80011ee <TSK_SafetyTask_PWMOFF+0x6e>
  {
    /* reset Encoder state */
    if (pEAC[bMotor] != MC_NULL)
 80011ca:	4b12      	ldr	r3, [pc, #72]	@ (8001214 <TSK_SafetyTask_PWMOFF+0x94>)
 80011cc:	59d8      	ldr	r0, [r3, r7]
 80011ce:	2800      	cmp	r0, #0
 80011d0:	d002      	beq.n	80011d8 <TSK_SafetyTask_PWMOFF+0x58>
    {
      EAC_SetRestartState(pEAC[bMotor], false);
 80011d2:	2100      	movs	r1, #0
 80011d4:	f003 f884 	bl	80042e0 <EAC_SetRestartState>
    }
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80011d8:	4643      	mov	r3, r8
 80011da:	59d8      	ldr	r0, [r3, r7]
 80011dc:	f000 f9de 	bl	800159c <PWMC_SwitchOffPWM>
    FOC_Clear(bMotor);
 80011e0:	0028      	movs	r0, r5
 80011e2:	f7ff fcef 	bl	8000bc4 <FOC_Clear>
    PQD_Clear(pMPM[bMotor]); //cstat !MISRAC2012-Rule-11.3
 80011e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001218 <TSK_SafetyTask_PWMOFF+0x98>)
 80011e8:	59d8      	ldr	r0, [r3, r7]
 80011ea:	f003 fa61 	bl	80046b0 <PQD_Clear>
  }

  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 80011ee:	bcc0      	pop	{r6, r7}
 80011f0:	46b9      	mov	r9, r7
 80011f2:	46b0      	mov	r8, r6
 80011f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1);
 80011f6:	4809      	ldr	r0, [pc, #36]	@ (800121c <TSK_SafetyTask_PWMOFF+0x9c>)
 80011f8:	f003 fabe 	bl	8004778 <RVBS_CalcAvVbus>
 80011fc:	464b      	mov	r3, r9
 80011fe:	4398      	bics	r0, r3
 8001200:	4304      	orrs	r4, r0
 8001202:	b2a4      	uxth	r4, r4
 8001204:	e7d3      	b.n	80011ae <TSK_SafetyTask_PWMOFF+0x2e>
 8001206:	46c0      	nop			@ (mov r8, r8)
 8001208:	2000000c 	.word	0x2000000c
 800120c:	2000059c 	.word	0x2000059c
 8001210:	20000560 	.word	0x20000560
 8001214:	200005a0 	.word	0x200005a0
 8001218:	20000000 	.word	0x20000000
 800121c:	200000e0 	.word	0x200000e0

08001220 <TSK_SafetyTask>:
{
 8001220:	b510      	push	{r4, lr}
  if (1U == bMCBootCompleted)
 8001222:	4b05      	ldr	r3, [pc, #20]	@ (8001238 <TSK_SafetyTask+0x18>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	2b01      	cmp	r3, #1
 8001228:	d000      	beq.n	800122c <TSK_SafetyTask+0xc>
}
 800122a:	bd10      	pop	{r4, pc}
    TSK_SafetyTask_PWMOFF(M1);
 800122c:	2000      	movs	r0, #0
 800122e:	f7ff ffa7 	bl	8001180 <TSK_SafetyTask_PWMOFF>
    RCM_ExecUserConv();
 8001232:	f001 fbbf 	bl	80029b4 <RCM_ExecUserConv>
}
 8001236:	e7f8      	b.n	800122a <TSK_SafetyTask+0xa>
 8001238:	20000594 	.word	0x20000594

0800123c <MC_RunMotorControlTasks>:
{
 800123c:	b510      	push	{r4, lr}
  if (0U == bMCBootCompleted)
 800123e:	4b05      	ldr	r3, [pc, #20]	@ (8001254 <MC_RunMotorControlTasks+0x18>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d100      	bne.n	8001248 <MC_RunMotorControlTasks+0xc>
}
 8001246:	bd10      	pop	{r4, pc}
    MC_Scheduler();
 8001248:	f7ff feea 	bl	8001020 <MC_Scheduler>
    TSK_SafetyTask();
 800124c:	f7ff ffe8 	bl	8001220 <TSK_SafetyTask>
}
 8001250:	e7f9      	b.n	8001246 <MC_RunMotorControlTasks+0xa>
 8001252:	46c0      	nop			@ (mov r8, r8)
 8001254:	20000594 	.word	0x20000594

08001258 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8001258:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */
  R1_SwitchOffPWM(pwmcHandle[M1]);
 800125a:	4b05      	ldr	r3, [pc, #20]	@ (8001270 <TSK_HardwareFaultTask+0x18>)
 800125c:	6818      	ldr	r0, [r3, #0]
 800125e:	f001 f815 	bl	800228c <R1_SwitchOffPWM>
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);
 8001262:	2200      	movs	r2, #0
 8001264:	2180      	movs	r1, #128	@ 0x80
 8001266:	4803      	ldr	r0, [pc, #12]	@ (8001274 <TSK_HardwareFaultTask+0x1c>)
 8001268:	f7ff fb42 	bl	80008f0 <MCI_FaultProcessing>

  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 800126c:	bd10      	pop	{r4, pc}
 800126e:	46c0      	nop			@ (mov r8, r8)
 8001270:	2000059c 	.word	0x2000059c
 8001274:	20000560 	.word	0x20000560

08001278 <mc_lock_pins>:
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001278:	2390      	movs	r3, #144	@ 0x90
  WRITE_REG(GPIOx->LCKR, PinMask);
 800127a:	2120      	movs	r1, #32
 800127c:	2002      	movs	r0, #2

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 800127e:	b510      	push	{r4, lr}
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001280:	4a37      	ldr	r2, [pc, #220]	@ (8001360 <mc_lock_pins+0xe8>)
 8001282:	05db      	lsls	r3, r3, #23
 8001284:	b08c      	sub	sp, #48	@ 0x30
 8001286:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001288:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800128a:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800128c:	69da      	ldr	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800128e:	4935      	ldr	r1, [pc, #212]	@ (8001364 <mc_lock_pins+0xec>)
  temp = READ_REG(GPIOx->LCKR);
 8001290:	920b      	str	r2, [sp, #44]	@ 0x2c
  (void) temp;
 8001292:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001294:	4a34      	ldr	r2, [pc, #208]	@ (8001368 <mc_lock_pins+0xf0>)
 8001296:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001298:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800129a:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 800129c:	69d4      	ldr	r4, [r2, #28]
 800129e:	940a      	str	r4, [sp, #40]	@ 0x28
  (void) temp;
 80012a0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80012a2:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80012a4:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80012a6:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80012a8:	69d9      	ldr	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80012aa:	3801      	subs	r0, #1
  temp = READ_REG(GPIOx->LCKR);
 80012ac:	9109      	str	r1, [sp, #36]	@ 0x24
  (void) temp;
 80012ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80012b0:	492e      	ldr	r1, [pc, #184]	@ (800136c <mc_lock_pins+0xf4>)
 80012b2:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80012b4:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80012b6:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80012b8:	69d9      	ldr	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80012ba:	30ff      	adds	r0, #255	@ 0xff
  temp = READ_REG(GPIOx->LCKR);
 80012bc:	9108      	str	r1, [sp, #32]
  (void) temp;
 80012be:	9908      	ldr	r1, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80012c0:	492b      	ldr	r1, [pc, #172]	@ (8001370 <mc_lock_pins+0xf8>)
 80012c2:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80012c4:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80012c6:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80012c8:	69d9      	ldr	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80012ca:	3001      	adds	r0, #1
  temp = READ_REG(GPIOx->LCKR);
 80012cc:	9107      	str	r1, [sp, #28]
  (void) temp;
 80012ce:	9907      	ldr	r1, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80012d0:	2181      	movs	r1, #129	@ 0x81
  WRITE_REG(GPIOx->LCKR, PinMask);
 80012d2:	30ff      	adds	r0, #255	@ 0xff
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80012d4:	0249      	lsls	r1, r1, #9
 80012d6:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80012d8:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80012da:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80012dc:	69d9      	ldr	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80012de:	2080      	movs	r0, #128	@ 0x80
  temp = READ_REG(GPIOx->LCKR);
 80012e0:	9106      	str	r1, [sp, #24]
  (void) temp;
 80012e2:	9906      	ldr	r1, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80012e4:	2188      	movs	r1, #136	@ 0x88
  WRITE_REG(GPIOx->LCKR, PinMask);
 80012e6:	0140      	lsls	r0, r0, #5
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80012e8:	0249      	lsls	r1, r1, #9
 80012ea:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80012ec:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80012ee:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80012f0:	69d1      	ldr	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80012f2:	2080      	movs	r0, #128	@ 0x80
  temp = READ_REG(GPIOx->LCKR);
 80012f4:	9105      	str	r1, [sp, #20]
  (void) temp;
 80012f6:	9905      	ldr	r1, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80012f8:	21a0      	movs	r1, #160	@ 0xa0
  WRITE_REG(GPIOx->LCKR, PinMask);
 80012fa:	01c0      	lsls	r0, r0, #7
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80012fc:	0249      	lsls	r1, r1, #9
 80012fe:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001300:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001302:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001304:	69d1      	ldr	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001306:	2080      	movs	r0, #128	@ 0x80
  temp = READ_REG(GPIOx->LCKR);
 8001308:	9104      	str	r1, [sp, #16]
  (void) temp;
 800130a:	9904      	ldr	r1, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800130c:	2182      	movs	r1, #130	@ 0x82
  WRITE_REG(GPIOx->LCKR, PinMask);
 800130e:	00c0      	lsls	r0, r0, #3
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001310:	0249      	lsls	r1, r1, #9
 8001312:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001314:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001316:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001318:	69d9      	ldr	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800131a:	2080      	movs	r0, #128	@ 0x80
  temp = READ_REG(GPIOx->LCKR);
 800131c:	9103      	str	r1, [sp, #12]
  (void) temp;
 800131e:	9903      	ldr	r1, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001320:	21c0      	movs	r1, #192	@ 0xc0
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001322:	0200      	lsls	r0, r0, #8
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001324:	0249      	lsls	r1, r1, #9
 8001326:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001328:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800132a:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 800132c:	69d1      	ldr	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800132e:	2080      	movs	r0, #128	@ 0x80
  temp = READ_REG(GPIOx->LCKR);
 8001330:	9102      	str	r1, [sp, #8]
  (void) temp;
 8001332:	9902      	ldr	r1, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001334:	2190      	movs	r1, #144	@ 0x90
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001336:	0180      	lsls	r0, r0, #6
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001338:	0249      	lsls	r1, r1, #9
 800133a:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800133c:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800133e:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001340:	69d2      	ldr	r2, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001342:	2180      	movs	r1, #128	@ 0x80
  temp = READ_REG(GPIOx->LCKR);
 8001344:	9201      	str	r2, [sp, #4]
  (void) temp;
 8001346:	9a01      	ldr	r2, [sp, #4]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001348:	2284      	movs	r2, #132	@ 0x84
  WRITE_REG(GPIOx->LCKR, PinMask);
 800134a:	0109      	lsls	r1, r1, #4
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800134c:	0252      	lsls	r2, r2, #9
 800134e:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001350:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001352:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001354:	69db      	ldr	r3, [r3, #28]
 8001356:	9300      	str	r3, [sp, #0]
  (void) temp;
 8001358:	9b00      	ldr	r3, [sp, #0]
LL_GPIO_LockPin(M1_PWM_VL_GPIO_Port, M1_PWM_VL_Pin);
LL_GPIO_LockPin(M1_PWM_WH_GPIO_Port, M1_PWM_WH_Pin);
LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
LL_GPIO_LockPin(M1_EN_DRIVER_GPIO_Port, M1_EN_DRIVER_Pin);
}
 800135a:	b00c      	add	sp, #48	@ 0x30
 800135c:	bd10      	pop	{r4, pc}
 800135e:	46c0      	nop			@ (mov r8, r8)
 8001360:	00010020 	.word	0x00010020
 8001364:	00010002 	.word	0x00010002
 8001368:	48000400 	.word	0x48000400
 800136c:	00010001 	.word	0x00010001
 8001370:	00010100 	.word	0x00010100

08001374 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 8001374:	b510      	push	{r4, lr}
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  (void)HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / SYS_TICK_FREQUENCY);
 8001376:	f002 fc81 	bl	8003c7c <HAL_RCC_GetHCLKFreq>
 800137a:	21fa      	movs	r1, #250	@ 0xfa
 800137c:	00c9      	lsls	r1, r1, #3
 800137e:	f7fe fec3 	bl	8000108 <__udivsi3>
 8001382:	f001 ff49 	bl	8003218 <HAL_SYSTICK_Config>
  HAL_NVIC_SetPriority(SysTick_IRQn, uwTickPrio, 0U);
 8001386:	2001      	movs	r0, #1
 8001388:	4b05      	ldr	r3, [pc, #20]	@ (80013a0 <MX_MotorControl_Init+0x2c>)
 800138a:	2200      	movs	r2, #0
 800138c:	6819      	ldr	r1, [r3, #0]
 800138e:	4240      	negs	r0, r0
 8001390:	f001 ff0c 	bl	80031ac <HAL_NVIC_SetPriority>

  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI);
 8001394:	4803      	ldr	r0, [pc, #12]	@ (80013a4 <MX_MotorControl_Init+0x30>)
 8001396:	f7ff fc47 	bl	8000c28 <MCboot>
  mc_lock_pins();
 800139a:	f7ff ff6d 	bl	8001278 <mc_lock_pins>
}
 800139e:	bd10      	pop	{r4, pc}
 80013a0:	20000394 	.word	0x20000394
 80013a4:	200005cc 	.word	0x200005cc

080013a8 <PWMC_GetPhaseCurrents>:
  * @param  Iab: Pointer to the structure that will receive motor current
  *         of phases A & B in ElectricalValue format.
  */
//cstat !MISRAC2012-Rule-8.13 !RED-func-no-effect
__weak void PWMC_GetPhaseCurrents(PWMC_Handle_t *pHandle, ab_t *Iab)
{
 80013a8:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctGetPhaseCurrents(pHandle, Iab);
 80013aa:	6803      	ldr	r3, [r0, #0]
 80013ac:	4798      	blx	r3
#ifdef NULL_PTR_PWR_CUR_FDB
  }
#endif
}
 80013ae:	bd10      	pop	{r4, pc}

080013b0 <PWMC_SetPhaseVoltage>:
  * @param  Valfa_beta: Voltage Components expressed in the @f$(\alpha, \beta)@f$ reference frame.
  * @retval #MC_NO_ERROR if no error occurred or #MC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage(PWMC_Handle_t *pHandle, alphabeta_t Valfa_beta)
{
 80013b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013b2:	46c6      	mov	lr, r8
 80013b4:	b500      	push	{lr}
    int32_t wUBeta;
    int32_t wTimePhA;
    int32_t wTimePhB;
    int32_t wTimePhC;

    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 80013b6:	8f86      	ldrh	r6, [r0, #60]	@ 0x3c
 80013b8:	b20b      	sxth	r3, r1
 80013ba:	435e      	muls	r6, r3
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 80013bc:	2360      	movs	r3, #96	@ 0x60
 80013be:	5ac4      	ldrh	r4, [r0, r3]
 80013c0:	1409      	asrs	r1, r1, #16
 80013c2:	4361      	muls	r1, r4
 80013c4:	004b      	lsls	r3, r1, #1
 80013c6:	425d      	negs	r5, r3

    wX = wUBeta;
    wY = (wUBeta + wUAlpha) / 2;
 80013c8:	1af3      	subs	r3, r6, r3
 80013ca:	0fda      	lsrs	r2, r3, #31
 80013cc:	18d2      	adds	r2, r2, r3
    wZ = (wUBeta - wUAlpha) / 2;
 80013ce:	1bae      	subs	r6, r5, r6
    wY = (wUBeta + wUAlpha) / 2;
 80013d0:	1057      	asrs	r7, r2, #1
    wZ = (wUBeta - wUAlpha) / 2;
 80013d2:	0ff2      	lsrs	r2, r6, #31
 80013d4:	1992      	adds	r2, r2, r6
{
 80013d6:	b082      	sub	sp, #8
    wZ = (wUBeta - wUAlpha) / 2;
 80013d8:	1052      	asrs	r2, r2, #1
    if (wY < 0)
    {
      if (wZ < 0)
      {
        pHandle->Sector = SECTOR_5;
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80013da:	08a1      	lsrs	r1, r4, #2
    if (wY < 0)
 80013dc:	1c5c      	adds	r4, r3, #1
 80013de:	db55      	blt.n	800148c <PWMC_SetPhaseVoltage+0xdc>
          pHandle->highDuty = 1U;
        }
    }
    else /* wY > 0 */
    {
      if (wZ >= 0)
 80013e0:	1c74      	adds	r4, r6, #1
 80013e2:	db3c      	blt.n	800145e <PWMC_SetPhaseVoltage+0xae>
      {
        pHandle->Sector = SECTOR_2;
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80013e4:	1aba      	subs	r2, r7, r2
 80013e6:	17d4      	asrs	r4, r2, #31
 80013e8:	03a4      	lsls	r4, r4, #14
 80013ea:	0ba4      	lsrs	r4, r4, #14
 80013ec:	18a2      	adds	r2, r4, r2
        wTimePhB = wTimePhA + (wZ / 131072);
        wTimePhC = wTimePhA - (wY / 131072);
 80013ee:	17dc      	asrs	r4, r3, #31
 80013f0:	03a4      	lsls	r4, r4, #14
 80013f2:	0ba4      	lsrs	r4, r4, #14
 80013f4:	18e3      	adds	r3, r4, r3
 80013f6:	2401      	movs	r4, #1
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80013f8:	1492      	asrs	r2, r2, #18
 80013fa:	1851      	adds	r1, r2, r1
        wTimePhB = wTimePhA + (wZ / 131072);
 80013fc:	17f2      	asrs	r2, r6, #31
 80013fe:	0392      	lsls	r2, r2, #14
 8001400:	0b92      	lsrs	r2, r2, #14
 8001402:	1992      	adds	r2, r2, r6
 8001404:	46a4      	mov	ip, r4
 8001406:	2702      	movs	r7, #2
 8001408:	2600      	movs	r6, #0
 800140a:	46a0      	mov	r8, r4
 800140c:	1492      	asrs	r2, r2, #18
        wTimePhC = wTimePhA - (wY / 131072);
 800140e:	149b      	asrs	r3, r3, #18
        wTimePhB = wTimePhA + (wZ / 131072);
 8001410:	1852      	adds	r2, r2, r1
        wTimePhC = wTimePhA - (wY / 131072);
 8001412:	1acb      	subs	r3, r1, r3
          pHandle->Sector = SECTOR_4;
 8001414:	246a      	movs	r4, #106	@ 0x6a
 8001416:	4665      	mov	r5, ip
 8001418:	5505      	strb	r5, [r0, r4]
          pHandle->highDuty = 2U;
 800141a:	4645      	mov	r5, r8
          pHandle->lowDuty = 0U;
 800141c:	3c24      	subs	r4, #36	@ 0x24
 800141e:	5307      	strh	r7, [r0, r4]
          pHandle->midDuty = 1U;
 8001420:	3402      	adds	r4, #2
 8001422:	5306      	strh	r6, [r0, r4]
          pHandle->highDuty = 2U;
 8001424:	3402      	adds	r4, #2
 8001426:	5305      	strh	r5, [r0, r4]
          pHandle->midDuty = 1U;
          pHandle->highDuty = 0U;
        }
    }

    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 8001428:	43cc      	mvns	r4, r1
 800142a:	17e4      	asrs	r4, r4, #31
 800142c:	4021      	ands	r1, r4
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 800142e:	43d4      	mvns	r4, r2
 8001430:	17e4      	asrs	r4, r4, #31
 8001432:	4022      	ands	r2, r4
 8001434:	2440      	movs	r4, #64	@ 0x40
 8001436:	b289      	uxth	r1, r1
 8001438:	b292      	uxth	r2, r2
    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 800143a:	87c1      	strh	r1, [r0, #62]	@ 0x3e
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 800143c:	5302      	strh	r2, [r0, r4]
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 800143e:	43dc      	mvns	r4, r3
 8001440:	17e4      	asrs	r4, r4, #31
 8001442:	4023      	ands	r3, r4
 8001444:	2442      	movs	r4, #66	@ 0x42
 8001446:	b29b      	uxth	r3, r3
 8001448:	5303      	strh	r3, [r0, r4]

    if (1U == pHandle->DTTest)
 800144a:	341c      	adds	r4, #28
 800144c:	5b04      	ldrh	r4, [r0, r4]
 800144e:	2c01      	cmp	r4, #1
 8001450:	d036      	beq.n	80014c0 <PWMC_SetPhaseVoltage+0x110>
      else
      {
        pHandle->CntPhC -= pHandle->DTCompCnt;
      }
    }
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 8001452:	6943      	ldr	r3, [r0, #20]
 8001454:	4798      	blx	r3
#ifdef NULL_PTR_PWR_CUR_FDB
  }
#endif
  return (returnValue);
}
 8001456:	b002      	add	sp, #8
 8001458:	bc80      	pop	{r7}
 800145a:	46b8      	mov	r8, r7
 800145c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ( wX <= 0 )
 800145e:	2d00      	cmp	r5, #0
 8001460:	dd61      	ble.n	8001526 <PWMC_SetPhaseVoltage+0x176>
          wTimePhC = wTimePhB - (wX / 131072);
 8001462:	2400      	movs	r4, #0
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 8001464:	1aaa      	subs	r2, r5, r2
 8001466:	1492      	asrs	r2, r2, #18
 8001468:	1851      	adds	r1, r2, r1
          wTimePhB = wTimePhA + (wZ / 131072);
 800146a:	17f2      	asrs	r2, r6, #31
 800146c:	0392      	lsls	r2, r2, #14
          wTimePhC = wTimePhB - (wX / 131072);
 800146e:	17eb      	asrs	r3, r5, #31
          wTimePhB = wTimePhA + (wZ / 131072);
 8001470:	0b92      	lsrs	r2, r2, #14
          wTimePhC = wTimePhB - (wX / 131072);
 8001472:	03db      	lsls	r3, r3, #15
          wTimePhB = wTimePhA + (wZ / 131072);
 8001474:	1992      	adds	r2, r2, r6
          wTimePhC = wTimePhB - (wX / 131072);
 8001476:	0bdb      	lsrs	r3, r3, #15
          wTimePhB = wTimePhA + (wZ / 131072);
 8001478:	1492      	asrs	r2, r2, #18
          wTimePhC = wTimePhB - (wX / 131072);
 800147a:	195b      	adds	r3, r3, r5
          wTimePhB = wTimePhA + (wZ / 131072);
 800147c:	1852      	adds	r2, r2, r1
          wTimePhC = wTimePhB - (wX / 131072);
 800147e:	145b      	asrs	r3, r3, #17
 8001480:	46a4      	mov	ip, r4
 8001482:	2702      	movs	r7, #2
 8001484:	2601      	movs	r6, #1
 8001486:	46a0      	mov	r8, r4
 8001488:	1ad3      	subs	r3, r2, r3
          pHandle->highDuty = 0U;
 800148a:	e7c3      	b.n	8001414 <PWMC_SetPhaseVoltage+0x64>
      if (wZ < 0)
 800148c:	1c74      	adds	r4, r6, #1
 800148e:	db60      	blt.n	8001552 <PWMC_SetPhaseVoltage+0x1a2>
        if (wX <= 0)
 8001490:	2d00      	cmp	r5, #0
 8001492:	dd2e      	ble.n	80014f2 <PWMC_SetPhaseVoltage+0x142>
          wTimePhB = wTimePhC + (wX / 131072);
 8001494:	2402      	movs	r4, #2
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 8001496:	1b7f      	subs	r7, r7, r5
 8001498:	17fa      	asrs	r2, r7, #31
 800149a:	0392      	lsls	r2, r2, #14
 800149c:	0b92      	lsrs	r2, r2, #14
 800149e:	19d2      	adds	r2, r2, r7
 80014a0:	1492      	asrs	r2, r2, #18
 80014a2:	1851      	adds	r1, r2, r1
          wTimePhC = wTimePhA - (wY / 131072);
 80014a4:	17da      	asrs	r2, r3, #31
 80014a6:	0392      	lsls	r2, r2, #14
 80014a8:	0b92      	lsrs	r2, r2, #14
 80014aa:	18d3      	adds	r3, r2, r3
 80014ac:	149b      	asrs	r3, r3, #18
          wTimePhB = wTimePhC + (wX / 131072);
 80014ae:	46a4      	mov	ip, r4
          wTimePhC = wTimePhA - (wY / 131072);
 80014b0:	1acb      	subs	r3, r1, r3
          wTimePhB = wTimePhC + (wX / 131072);
 80014b2:	146a      	asrs	r2, r5, #17
 80014b4:	3c01      	subs	r4, #1
 80014b6:	2700      	movs	r7, #0
 80014b8:	2602      	movs	r6, #2
 80014ba:	46a0      	mov	r8, r4
 80014bc:	18d2      	adds	r2, r2, r3
          pHandle->highDuty = 1U;
 80014be:	e7a9      	b.n	8001414 <PWMC_SetPhaseVoltage+0x64>
      if (pHandle->Ia > 0)
 80014c0:	2550      	movs	r5, #80	@ 0x50
 80014c2:	5f45      	ldrsh	r5, [r0, r5]
        pHandle->CntPhA += pHandle->DTCompCnt;
 80014c4:	3461      	adds	r4, #97	@ 0x61
 80014c6:	5b04      	ldrh	r4, [r0, r4]
      if (pHandle->Ia > 0)
 80014c8:	2d00      	cmp	r5, #0
 80014ca:	dd63      	ble.n	8001594 <PWMC_SetPhaseVoltage+0x1e4>
        pHandle->CntPhA += pHandle->DTCompCnt;
 80014cc:	1909      	adds	r1, r1, r4
 80014ce:	b289      	uxth	r1, r1
 80014d0:	87c1      	strh	r1, [r0, #62]	@ 0x3e
      if (pHandle->Ib > 0)
 80014d2:	2152      	movs	r1, #82	@ 0x52
 80014d4:	5e41      	ldrsh	r1, [r0, r1]
 80014d6:	2900      	cmp	r1, #0
 80014d8:	dd59      	ble.n	800158e <PWMC_SetPhaseVoltage+0x1de>
        pHandle->CntPhB += pHandle->DTCompCnt;
 80014da:	1912      	adds	r2, r2, r4
 80014dc:	b292      	uxth	r2, r2
 80014de:	2140      	movs	r1, #64	@ 0x40
 80014e0:	5242      	strh	r2, [r0, r1]
      if (pHandle->Ic > 0)
 80014e2:	2254      	movs	r2, #84	@ 0x54
 80014e4:	5e82      	ldrsh	r2, [r0, r2]
 80014e6:	2a00      	cmp	r2, #0
 80014e8:	dd4d      	ble.n	8001586 <PWMC_SetPhaseVoltage+0x1d6>
        pHandle->CntPhC += pHandle->DTCompCnt;
 80014ea:	191c      	adds	r4, r3, r4
 80014ec:	2342      	movs	r3, #66	@ 0x42
 80014ee:	52c4      	strh	r4, [r0, r3]
 80014f0:	e7af      	b.n	8001452 <PWMC_SetPhaseVoltage+0xa2>
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 80014f2:	2403      	movs	r4, #3
 80014f4:	1aaa      	subs	r2, r5, r2
 80014f6:	17d3      	asrs	r3, r2, #31
 80014f8:	039b      	lsls	r3, r3, #14
 80014fa:	0b9b      	lsrs	r3, r3, #14
 80014fc:	189b      	adds	r3, r3, r2
 80014fe:	149b      	asrs	r3, r3, #18
          wTimePhB = wTimePhA + (wZ / 131072);
 8001500:	17f2      	asrs	r2, r6, #31
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8001502:	1859      	adds	r1, r3, r1
          wTimePhB = wTimePhA + (wZ / 131072);
 8001504:	0392      	lsls	r2, r2, #14
          wTimePhC = wTimePhB - (wX / 131072);
 8001506:	17eb      	asrs	r3, r5, #31
          wTimePhB = wTimePhA + (wZ / 131072);
 8001508:	0b92      	lsrs	r2, r2, #14
          wTimePhC = wTimePhB - (wX / 131072);
 800150a:	03db      	lsls	r3, r3, #15
          wTimePhB = wTimePhA + (wZ / 131072);
 800150c:	1992      	adds	r2, r2, r6
          wTimePhC = wTimePhB - (wX / 131072);
 800150e:	0bdb      	lsrs	r3, r3, #15
          wTimePhB = wTimePhA + (wZ / 131072);
 8001510:	1492      	asrs	r2, r2, #18
          wTimePhC = wTimePhB - (wX / 131072);
 8001512:	195b      	adds	r3, r3, r5
 8001514:	46a4      	mov	ip, r4
          wTimePhB = wTimePhA + (wZ / 131072);
 8001516:	1852      	adds	r2, r2, r1
          wTimePhC = wTimePhB - (wX / 131072);
 8001518:	145b      	asrs	r3, r3, #17
 800151a:	3c01      	subs	r4, #1
 800151c:	2700      	movs	r7, #0
 800151e:	2601      	movs	r6, #1
 8001520:	46a0      	mov	r8, r4
 8001522:	1ad3      	subs	r3, r2, r3
          pHandle->highDuty = 2U;
 8001524:	e776      	b.n	8001414 <PWMC_SetPhaseVoltage+0x64>
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 8001526:	2405      	movs	r4, #5
 8001528:	46a4      	mov	ip, r4
 800152a:	2400      	movs	r4, #0
 800152c:	1b7a      	subs	r2, r7, r5
 800152e:	1492      	asrs	r2, r2, #18
 8001530:	1851      	adds	r1, r2, r1
          wTimePhC = wTimePhA - (wY / 131072);
 8001532:	17da      	asrs	r2, r3, #31
 8001534:	0392      	lsls	r2, r2, #14
 8001536:	0b92      	lsrs	r2, r2, #14
 8001538:	18d3      	adds	r3, r2, r3
          wTimePhB = wTimePhC + (wX / 131072);
 800153a:	17ea      	asrs	r2, r5, #31
 800153c:	03d2      	lsls	r2, r2, #15
 800153e:	0bd2      	lsrs	r2, r2, #15
          wTimePhC = wTimePhA - (wY / 131072);
 8001540:	149b      	asrs	r3, r3, #18
          wTimePhB = wTimePhC + (wX / 131072);
 8001542:	1952      	adds	r2, r2, r5
          wTimePhC = wTimePhA - (wY / 131072);
 8001544:	1acb      	subs	r3, r1, r3
          wTimePhB = wTimePhC + (wX / 131072);
 8001546:	1452      	asrs	r2, r2, #17
 8001548:	2701      	movs	r7, #1
 800154a:	2602      	movs	r6, #2
 800154c:	46a0      	mov	r8, r4
 800154e:	18d2      	adds	r2, r2, r3
          pHandle->highDuty = 0U;
 8001550:	e760      	b.n	8001414 <PWMC_SetPhaseVoltage+0x64>
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8001552:	1aba      	subs	r2, r7, r2
 8001554:	17d4      	asrs	r4, r2, #31
 8001556:	03a4      	lsls	r4, r4, #14
 8001558:	0ba4      	lsrs	r4, r4, #14
 800155a:	18a2      	adds	r2, r4, r2
        wTimePhC = wTimePhA - (wY / 131072) ;
 800155c:	17dc      	asrs	r4, r3, #31
 800155e:	03a4      	lsls	r4, r4, #14
 8001560:	0ba4      	lsrs	r4, r4, #14
 8001562:	18e3      	adds	r3, r4, r3
 8001564:	2404      	movs	r4, #4
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8001566:	1492      	asrs	r2, r2, #18
 8001568:	1851      	adds	r1, r2, r1
        wTimePhB = wTimePhA + (wZ / 131072);
 800156a:	17f2      	asrs	r2, r6, #31
 800156c:	0392      	lsls	r2, r2, #14
 800156e:	0b92      	lsrs	r2, r2, #14
 8001570:	1992      	adds	r2, r2, r6
 8001572:	46a4      	mov	ip, r4
 8001574:	1492      	asrs	r2, r2, #18
        wTimePhC = wTimePhA - (wY / 131072) ;
 8001576:	149b      	asrs	r3, r3, #18
 8001578:	3c02      	subs	r4, #2
 800157a:	2701      	movs	r7, #1
 800157c:	2600      	movs	r6, #0
 800157e:	46a0      	mov	r8, r4
        wTimePhB = wTimePhA + (wZ / 131072);
 8001580:	1852      	adds	r2, r2, r1
        wTimePhC = wTimePhA - (wY / 131072) ;
 8001582:	1acb      	subs	r3, r1, r3
        pHandle->highDuty = 2U;
 8001584:	e746      	b.n	8001414 <PWMC_SetPhaseVoltage+0x64>
        pHandle->CntPhC -= pHandle->DTCompCnt;
 8001586:	2242      	movs	r2, #66	@ 0x42
 8001588:	1b1b      	subs	r3, r3, r4
 800158a:	5283      	strh	r3, [r0, r2]
 800158c:	e761      	b.n	8001452 <PWMC_SetPhaseVoltage+0xa2>
        pHandle->CntPhB -= pHandle->DTCompCnt;
 800158e:	1b12      	subs	r2, r2, r4
 8001590:	b292      	uxth	r2, r2
 8001592:	e7a4      	b.n	80014de <PWMC_SetPhaseVoltage+0x12e>
        pHandle->CntPhA -= pHandle->DTCompCnt;
 8001594:	1b09      	subs	r1, r1, r4
 8001596:	b289      	uxth	r1, r1
 8001598:	e79a      	b.n	80014d0 <PWMC_SetPhaseVoltage+0x120>
 800159a:	46c0      	nop			@ (mov r8, r8)

0800159c <PWMC_SwitchOffPWM>:
  *
  * @param  pHandle: Handler of the current instance of the PWM component.
  */
//cstat !MISRAC2012-Rule-8.13 !RED-func-no-effect
__weak void PWMC_SwitchOffPWM(PWMC_Handle_t *pHandle)
{
 800159c:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOffPwm(pHandle);
 800159e:	6843      	ldr	r3, [r0, #4]
 80015a0:	4798      	blx	r3
#ifdef NULL_PTR_PWR_CUR_FDB
  }
#endif
}
 80015a2:	bd10      	pop	{r4, pc}

080015a4 <PWMC_SwitchOnPWM>:
  *
  * @param  pHandle: Handler of the current instance of the PWM component.
  */
//cstat !MISRAC2012-Rule-8.13 !RED-func-no-effect
__weak void PWMC_SwitchOnPWM(PWMC_Handle_t *pHandle)
{
 80015a4:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOnPwm(pHandle);
 80015a6:	6883      	ldr	r3, [r0, #8]
 80015a8:	4798      	blx	r3
#ifdef NULL_PTR_PWR_CUR_FDB
  }
#endif
}
 80015aa:	bd10      	pop	{r4, pc}

080015ac <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, **false** if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr(PWMC_Handle_t *pHandle, CRCAction_t action)
{
 80015ac:	b510      	push	{r4, lr}
 80015ae:	0004      	movs	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    if (CRC_START == action)
 80015b0:	2900      	cmp	r1, #0
 80015b2:	d010      	beq.n	80015d6 <PWMC_CurrentReadingCalibr+0x2a>
    {
      PWMC_SwitchOffPWM(pHandle);
      pHandle->pFctCurrReadingCalib(pHandle);
      retVal = true;
    }
    else if (CRC_EXEC == action)
 80015b4:	2901      	cmp	r1, #1
 80015b6:	d001      	beq.n	80015bc <PWMC_CurrentReadingCalibr+0x10>
  bool retVal = false;
 80015b8:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_PWR_CUR_FDB
  }
#endif
  return (retVal);
}
 80015ba:	bd10      	pop	{r4, pc}
      if (pHandle->OffCalibrWaitTimeCounter > 0u)
 80015bc:	224e      	movs	r2, #78	@ 0x4e
 80015be:	5a83      	ldrh	r3, [r0, r2]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d006      	beq.n	80015d2 <PWMC_CurrentReadingCalibr+0x26>
        pHandle->OffCalibrWaitTimeCounter--;
 80015c4:	3b01      	subs	r3, #1
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	5283      	strh	r3, [r0, r2]
        if (0U == pHandle->OffCalibrWaitTimeCounter)
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1f4      	bne.n	80015b8 <PWMC_CurrentReadingCalibr+0xc>
          pHandle->pFctCurrReadingCalib(pHandle);
 80015ce:	68c3      	ldr	r3, [r0, #12]
 80015d0:	4798      	blx	r3
      retVal = true;
 80015d2:	2001      	movs	r0, #1
 80015d4:	e7f1      	b.n	80015ba <PWMC_CurrentReadingCalibr+0xe>
      PWMC_SwitchOffPWM(pHandle);
 80015d6:	f7ff ffe1 	bl	800159c <PWMC_SwitchOffPWM>
      pHandle->pFctCurrReadingCalib(pHandle);
 80015da:	0020      	movs	r0, r4
 80015dc:	68e3      	ldr	r3, [r4, #12]
 80015de:	4798      	blx	r3
      retVal = true;
 80015e0:	2001      	movs	r0, #1
 80015e2:	e7ea      	b.n	80015ba <PWMC_CurrentReadingCalibr+0xe>

080015e4 <PWMC_CalcPhaseCurrentsEst>:
  * @param  pHandle: Handler of the current instance of the PWM component.
  * @param  Iqd: Structure that will receive Iq and Id currents.
  * @param  hElAngledpp: Electrical angle.
  */
void PWMC_CalcPhaseCurrentsEst(PWMC_Handle_t *pHandle, qd_t Iqd, int16_t hElAngledpp)
{
 80015e4:	b570      	push	{r4, r5, r6, lr}
 80015e6:	0004      	movs	r4, r0
#endif
    qd_t idq_ave;
    alphabeta_t ialpha_beta;
    int32_t temp1, temp2;

    idq_ave.q = (int16_t)PWMC_LowPassFilter(Iqd.q, &(pHandle->LPFIqBuf), pHandle->LPFIqd_const);
 80015e8:	205c      	movs	r0, #92	@ 0x5c
 80015ea:	5e20      	ldrsh	r0, [r4, r0]
    *out_buf = (*out_buf) + ((in - ((*out_buf) >> 15)) * t);
 80015ec:	6b65      	ldr	r5, [r4, #52]	@ 0x34
    idq_ave.q = (int16_t)PWMC_LowPassFilter(Iqd.q, &(pHandle->LPFIqBuf), pHandle->LPFIqd_const);
 80015ee:	b20b      	sxth	r3, r1
    *out_buf = (*out_buf) + ((in - ((*out_buf) >> 15)) * t);
 80015f0:	13ee      	asrs	r6, r5, #15
 80015f2:	1b9b      	subs	r3, r3, r6
 80015f4:	4343      	muls	r3, r0
{
 80015f6:	b084      	sub	sp, #16
    *out_buf = (*out_buf) + ((in - ((*out_buf) >> 15)) * t);
 80015f8:	195b      	adds	r3, r3, r5
 80015fa:	6363      	str	r3, [r4, #52]	@ 0x34
    idq_ave.q = (int16_t)PWMC_LowPassFilter(Iqd.q, &(pHandle->LPFIqBuf), pHandle->LPFIqd_const);
 80015fc:	ad02      	add	r5, sp, #8
    x = (*out_buf) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80015fe:	13db      	asrs	r3, r3, #15
    idq_ave.q = (int16_t)PWMC_LowPassFilter(Iqd.q, &(pHandle->LPFIqBuf), pHandle->LPFIqd_const);
 8001600:	802b      	strh	r3, [r5, #0]
    *out_buf = (*out_buf) + ((in - ((*out_buf) >> 15)) * t);
 8001602:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
    idq_ave.d = (int16_t)PWMC_LowPassFilter(Iqd.d, &(pHandle->LPFIdBuf), pHandle->LPFIqd_const);
 8001604:	1409      	asrs	r1, r1, #16
    *out_buf = (*out_buf) + ((in - ((*out_buf) >> 15)) * t);
 8001606:	13de      	asrs	r6, r3, #15
 8001608:	1b89      	subs	r1, r1, r6
 800160a:	4348      	muls	r0, r1
 800160c:	18c0      	adds	r0, r0, r3
 800160e:	63a0      	str	r0, [r4, #56]	@ 0x38
    x = (*out_buf) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8001610:	13c0      	asrs	r0, r0, #15
    idq_ave.d = (int16_t)PWMC_LowPassFilter(Iqd.d, &(pHandle->LPFIdBuf), pHandle->LPFIqd_const);
 8001612:	8068      	strh	r0, [r5, #2]

    ialpha_beta = MCM_Rev_Park(idq_ave, hElAngledpp);
 8001614:	0011      	movs	r1, r2
 8001616:	9802      	ldr	r0, [sp, #8]
 8001618:	f7ff fabc 	bl	8000b94 <MCM_Rev_Park>

    /* reverse Clarke */

    /*Ia*/
    pHandle->IaEst = ialpha_beta.alpha;
 800161c:	2256      	movs	r2, #86	@ 0x56
    ialpha_beta = MCM_Rev_Park(idq_ave, hElAngledpp);
 800161e:	b203      	sxth	r3, r0
    pHandle->IaEst = ialpha_beta.alpha;
 8001620:	52a3      	strh	r3, [r4, r2]

    temp1 = - ialpha_beta.alpha;
 8001622:	425b      	negs	r3, r3
#else
    temp2 = (int32_t)(ialpha_beta.beta) * (int32_t)SQRT3FACTOR / 32768;
#endif

    /*Ib*/
    pHandle->IbEst = (int16_t)(temp1 - temp2)/2;
 8001624:	0c00      	lsrs	r0, r0, #16
 8001626:	b29b      	uxth	r3, r3
 8001628:	1a19      	subs	r1, r3, r0
 800162a:	b209      	sxth	r1, r1
 800162c:	0fca      	lsrs	r2, r1, #31
 800162e:	1852      	adds	r2, r2, r1
 8001630:	2158      	movs	r1, #88	@ 0x58

    /*Ic*/
    pHandle->IcEst = (int16_t)(temp1 + temp2)/2;
 8001632:	181b      	adds	r3, r3, r0
    pHandle->IbEst = (int16_t)(temp1 - temp2)/2;
 8001634:	1052      	asrs	r2, r2, #1
    pHandle->IcEst = (int16_t)(temp1 + temp2)/2;
 8001636:	b21b      	sxth	r3, r3
    pHandle->IbEst = (int16_t)(temp1 - temp2)/2;
 8001638:	5262      	strh	r2, [r4, r1]
    pHandle->IcEst = (int16_t)(temp1 + temp2)/2;
 800163a:	0fda      	lsrs	r2, r3, #31
 800163c:	18d3      	adds	r3, r2, r3
 800163e:	225a      	movs	r2, #90	@ 0x5a
 8001640:	105b      	asrs	r3, r3, #1
 8001642:	52a3      	strh	r3, [r4, r2]
#ifdef NULL_PTR_PWR_CUR_FDB
  }
#endif
}
 8001644:	b004      	add	sp, #16
 8001646:	bd70      	pop	{r4, r5, r6, pc}

08001648 <PWMC_CheckOverCurrent>:
  *	@param  pHandle: Handler of the current instance of the PWM component.
  * @retval #MC_BREAK_IN if an overcurrent has occurred since last call,
  *         and #MC_NO_FAULTS otherwise.
  */
__weak uint16_t PWMC_CheckOverCurrent(PWMC_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
 8001648:	b510      	push	{r4, lr}
#ifdef NULL_PTR_PWR_CUR_FDB
  return ((MC_NULL == pHandle) ? MC_NO_FAULTS : (uint16_t)pHandle->pFctIsOverCurrentOccurred(pHandle));
#else
  return ((uint16_t)pHandle->pFctIsOverCurrentOccurred(pHandle));
 800164a:	6983      	ldr	r3, [r0, #24]
 800164c:	4798      	blx	r3
#endif
}
 800164e:	bd10      	pop	{r4, pc}

08001650 <R1_GetPhaseCurrents>:
  * @retval Ia and Ib current in Curr_Components format
  */
__weak void R1_GetPhaseCurrents( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
  PWMC_R1_Handle_t * pHandle = ( PWMC_R1_Handle_t * )pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8001650:	23b8      	movs	r3, #184	@ 0xb8
 8001652:	58c3      	ldr	r3, [r0, r3]
{
 8001654:	b570      	push	{r4, r5, r6, lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8001656:	685a      	ldr	r2, [r3, #4]
  int16_t hCurrA = 0;
  int16_t hCurrB = 0;
  int16_t hCurrC = 0;

  /* clear flag used for FOC duration check */
  pHandle->FOCDurationFlag = false;
 8001658:	2400      	movs	r4, #0
 800165a:	23b3      	movs	r3, #179	@ 0xb3
 800165c:	54c4      	strb	r4, [r0, r3]
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800165e:	6853      	ldr	r3, [r2, #4]
 8001660:	3470      	adds	r4, #112	@ 0x70
 8001662:	43a3      	bics	r3, r4
 8001664:	6053      	str	r3, [r2, #4]

  /* Disabling the External triggering for ADCx */
  LL_TIM_SetTriggerOutput( TIMx, LL_TIM_TRGO_RESET );
  /* First sampling point */
  wAux1 = (int32_t) pHandle->CurConv[0] ;
  wAux1 -= (int32_t)(pHandle->PhaseOffset);
 8001666:	2288      	movs	r2, #136	@ 0x88
  wAux1 = (int32_t) pHandle->CurConv[0] ;
 8001668:	239c      	movs	r3, #156	@ 0x9c
  wAux1 -= (int32_t)(pHandle->PhaseOffset);
 800166a:	5884      	ldr	r4, [r0, r2]

  /* Check saturation */
  if (wAux1 > -INT16_MAX)
  {
    if (wAux1 < INT16_MAX)
 800166c:	2280      	movs	r2, #128	@ 0x80
  wAux1 = (int32_t) pHandle->CurConv[0] ;
 800166e:	5ac3      	ldrh	r3, [r0, r3]
    if (wAux1 < INT16_MAX)
 8001670:	0212      	lsls	r2, r2, #8
  wAux1 -= (int32_t)(pHandle->PhaseOffset);
 8001672:	1b1b      	subs	r3, r3, r4
    if (wAux1 < INT16_MAX)
 8001674:	4293      	cmp	r3, r2
 8001676:	db00      	blt.n	800167a <R1_GetPhaseCurrents+0x2a>
 8001678:	4b91      	ldr	r3, [pc, #580]	@ (80018c0 <R1_GetPhaseCurrents+0x270>)
 800167a:	4a92      	ldr	r2, [pc, #584]	@ (80018c4 <R1_GetPhaseCurrents+0x274>)
 800167c:	4293      	cmp	r3, r2
 800167e:	da00      	bge.n	8001682 <R1_GetPhaseCurrents+0x32>
 8001680:	0013      	movs	r3, r2
  else
  {
    wAux1 = -INT16_MAX;
  }
   /* Second sampling point */
  wAux2 = (int32_t) pHandle->CurConv[1] ;
 8001682:	229e      	movs	r2, #158	@ 0x9e
 8001684:	5a82      	ldrh	r2, [r0, r2]
  wAux2 -= (int32_t)(pHandle->PhaseOffset);
 8001686:	1b12      	subs	r2, r2, r4

  /* Check saturation */
  if (wAux2 > -INT16_MAX)
  {
    if (wAux2 < INT16_MAX)
 8001688:	2480      	movs	r4, #128	@ 0x80
 800168a:	0224      	lsls	r4, r4, #8
 800168c:	42a2      	cmp	r2, r4
 800168e:	db00      	blt.n	8001692 <R1_GetPhaseCurrents+0x42>
 8001690:	4a8b      	ldr	r2, [pc, #556]	@ (80018c0 <R1_GetPhaseCurrents+0x270>)
 8001692:	4c8c      	ldr	r4, [pc, #560]	@ (80018c4 <R1_GetPhaseCurrents+0x274>)
 8001694:	42a2      	cmp	r2, r4
 8001696:	da00      	bge.n	800169a <R1_GetPhaseCurrents+0x4a>
 8001698:	0022      	movs	r2, r4
  else
  {
    wAux2 = -INT16_MAX;
  }

  switch (pHandle->_Super.Sector)
 800169a:	246a      	movs	r4, #106	@ 0x6a
 800169c:	5d04      	ldrb	r4, [r0, r4]
 800169e:	2c05      	cmp	r4, #5
 80016a0:	d900      	bls.n	80016a4 <R1_GetPhaseCurrents+0x54>
 80016a2:	e109      	b.n	80018b8 <R1_GetPhaseCurrents+0x268>
 80016a4:	4d88      	ldr	r5, [pc, #544]	@ (80018c8 <R1_GetPhaseCurrents+0x278>)
 80016a6:	00a4      	lsls	r4, r4, #2
 80016a8:	592c      	ldr	r4, [r5, r4]
 80016aa:	46a7      	mov	pc, r4
        hCurrB = -hCurrA-hCurrC;
      }
    }
    break;
  case SECTOR_5:
    if((pHandle->iflag & (IB_OK | IC_OK)) == (IB_OK | IC_OK)) //iC,-iB are available to be sampled
 80016ac:	24ad      	movs	r4, #173	@ 0xad
 80016ae:	2506      	movs	r5, #6
 80016b0:	5d04      	ldrb	r4, [r0, r4]
 80016b2:	4025      	ands	r5, r4
 80016b4:	2d06      	cmp	r5, #6
 80016b6:	d100      	bne.n	80016ba <R1_GetPhaseCurrents+0x6a>
 80016b8:	e0ad      	b.n	8001816 <R1_GetPhaseCurrents+0x1c6>
      hCurrB = (int16_t) wAux1;
      hCurrA = -hCurrB-hCurrC;
    }
    else
    {
      if((pHandle->iflag & (IB_OK | IC_OK)) != 0x00) //iC, or -iB is available to be sampled
 80016ba:	2d00      	cmp	r5, #0
 80016bc:	d100      	bne.n	80016c0 <R1_GetPhaseCurrents+0x70>
 80016be:	e085      	b.n	80017cc <R1_GetPhaseCurrents+0x17c>
      {
        if(pHandle->_Super.AlignFlag == 0x01) //START Position     Aligning_angle=270 degree
 80016c0:	2469      	movs	r4, #105	@ 0x69
 80016c2:	5d04      	ldrb	r4, [r0, r4]
 80016c4:	2c01      	cmp	r4, #1
 80016c6:	d100      	bne.n	80016ca <R1_GetPhaseCurrents+0x7a>
 80016c8:	e0c6      	b.n	8001858 <R1_GetPhaseCurrents+0x208>
        hCurrA = pHandle->_Super.IaEst;
 80016ca:	2456      	movs	r4, #86	@ 0x56
 80016cc:	5f04      	ldrsh	r4, [r0, r4]
            hCurrA = 0;
          }
        }
        else  //not START Position
        {
          if((pHandle->iflag & (IB_OK | IC_OK)) == IC_OK)//iC, is available to be sampled
 80016ce:	2d04      	cmp	r5, #4
 80016d0:	d100      	bne.n	80016d4 <R1_GetPhaseCurrents+0x84>
 80016d2:	e0d7      	b.n	8001884 <R1_GetPhaseCurrents+0x234>
    break;
  case SECTOR_6:
    if((pHandle->iflag & (IA_OK | IB_OK)) == (IA_OK | IB_OK)) //iA,-iB are available to be sampled
    {
      hCurrA = (int16_t) wAux2;
      wAux1 = -wAux1;
 80016d4:	425d      	negs	r5, r3
      hCurrB = (int16_t) wAux1;
 80016d6:	b22d      	sxth	r5, r5
 80016d8:	e071      	b.n	80017be <R1_GetPhaseCurrents+0x16e>
    if((pHandle->iflag & (IA_OK | IB_OK)) == (IA_OK | IB_OK)) //iA,-iB are available to be sampled
 80016da:	24ad      	movs	r4, #173	@ 0xad
 80016dc:	5d05      	ldrb	r5, [r0, r4]
 80016de:	3caa      	subs	r4, #170	@ 0xaa
 80016e0:	402c      	ands	r4, r5
 80016e2:	2c03      	cmp	r4, #3
 80016e4:	d100      	bne.n	80016e8 <R1_GetPhaseCurrents+0x98>
 80016e6:	e083      	b.n	80017f0 <R1_GetPhaseCurrents+0x1a0>
    }
    else
    {
      if((pHandle->iflag & (IA_OK | IB_OK)) != 0x00) //iA, or -iB is available to be sampled
 80016e8:	2c00      	cmp	r4, #0
 80016ea:	d100      	bne.n	80016ee <R1_GetPhaseCurrents+0x9e>
 80016ec:	e07b      	b.n	80017e6 <R1_GetPhaseCurrents+0x196>
      {
        if(pHandle->_Super.AlignFlag == 0x01) //START Position     Aligning_angle=330 degree
 80016ee:	2569      	movs	r5, #105	@ 0x69
 80016f0:	5d45      	ldrb	r5, [r0, r5]
 80016f2:	2d01      	cmp	r5, #1
 80016f4:	d100      	bne.n	80016f8 <R1_GetPhaseCurrents+0xa8>
 80016f6:	e093      	b.n	8001820 <R1_GetPhaseCurrents+0x1d0>
            hCurrA = -hCurrB;
          }
        }
        else  //not START Position
        {
          if((pHandle->iflag & (IA_OK | IB_OK)) == IA_OK)//iA, is available to be sampled
 80016f8:	2c01      	cmp	r4, #1
 80016fa:	d100      	bne.n	80016fe <R1_GetPhaseCurrents+0xae>
 80016fc:	e0b2      	b.n	8001864 <R1_GetPhaseCurrents+0x214>
            hCurrA = (int16_t) wAux2;
            hCurrB = pHandle->_Super.IbEst;
          }
          else  //0x02 -ib
          {
            wAux1 = -wAux1;
 80016fe:	425b      	negs	r3, r3
            hCurrB = (int16_t) wAux1;
 8001700:	b21d      	sxth	r5, r3
            hCurrA = pHandle->_Super.IaEst;
 8001702:	2356      	movs	r3, #86	@ 0x56
 8001704:	5ec4      	ldrsh	r4, [r0, r3]
 8001706:	e05a      	b.n	80017be <R1_GetPhaseCurrents+0x16e>
    if((pHandle->iflag & (IA_OK | IC_OK)) == (IA_OK | IC_OK)) //iA and -iC are available to be sampled
 8001708:	24ad      	movs	r4, #173	@ 0xad
 800170a:	5d05      	ldrb	r5, [r0, r4]
 800170c:	3ca8      	subs	r4, #168	@ 0xa8
 800170e:	402c      	ands	r4, r5
 8001710:	2c05      	cmp	r4, #5
 8001712:	d100      	bne.n	8001716 <R1_GetPhaseCurrents+0xc6>
 8001714:	e07b      	b.n	800180e <R1_GetPhaseCurrents+0x1be>
      if((pHandle->iflag & (IA_OK | IC_OK)) != 0x00) //iA or -iC is available to be sampled
 8001716:	2c00      	cmp	r4, #0
 8001718:	d04a      	beq.n	80017b0 <R1_GetPhaseCurrents+0x160>
        if(pHandle->_Super.AlignFlag == 0x01 ) //START Position     Aligning_angle=30 degree
 800171a:	2569      	movs	r5, #105	@ 0x69
 800171c:	5d45      	ldrb	r5, [r0, r5]
 800171e:	2d01      	cmp	r5, #1
 8001720:	d100      	bne.n	8001724 <R1_GetPhaseCurrents+0xd4>
 8001722:	e094      	b.n	800184e <R1_GetPhaseCurrents+0x1fe>
            hCurrB = pHandle->_Super.IbEst;
 8001724:	2558      	movs	r5, #88	@ 0x58
 8001726:	5f45      	ldrsh	r5, [r0, r5]
          if((pHandle->iflag & (IA_OK | IC_OK)) == IA_OK)//iA, is available to be sampled
 8001728:	2c01      	cmp	r4, #1
 800172a:	d100      	bne.n	800172e <R1_GetPhaseCurrents+0xde>
 800172c:	e0a6      	b.n	800187c <R1_GetPhaseCurrents+0x22c>
            hCurrA = -hCurrB-hCurrC;
 800172e:	1b5c      	subs	r4, r3, r5
 8001730:	b224      	sxth	r4, r4
 8001732:	e044      	b.n	80017be <R1_GetPhaseCurrents+0x16e>
    if((pHandle->iflag & (IB_OK | IC_OK)) == (IB_OK | IC_OK)) //iB,-iC are available to be sampled
 8001734:	24ad      	movs	r4, #173	@ 0xad
 8001736:	2506      	movs	r5, #6
 8001738:	5d04      	ldrb	r4, [r0, r4]
 800173a:	4025      	ands	r5, r4
 800173c:	2d06      	cmp	r5, #6
 800173e:	d100      	bne.n	8001742 <R1_GetPhaseCurrents+0xf2>
 8001740:	e061      	b.n	8001806 <R1_GetPhaseCurrents+0x1b6>
      if((pHandle->iflag & (IB_OK | IC_OK)) != 0x00) //iB, or -iC is available to be sampled
 8001742:	2d00      	cmp	r5, #0
 8001744:	d042      	beq.n	80017cc <R1_GetPhaseCurrents+0x17c>
        if(pHandle->_Super.AlignFlag == 0x01) //START Position     Aligning_angle=90 degree
 8001746:	2469      	movs	r4, #105	@ 0x69
 8001748:	5d04      	ldrb	r4, [r0, r4]
 800174a:	2c01      	cmp	r4, #1
 800174c:	d100      	bne.n	8001750 <R1_GetPhaseCurrents+0x100>
 800174e:	e079      	b.n	8001844 <R1_GetPhaseCurrents+0x1f4>
        hCurrA = pHandle->_Super.IaEst;
 8001750:	2456      	movs	r4, #86	@ 0x56
 8001752:	5f04      	ldrsh	r4, [r0, r4]
          if((pHandle->iflag & (IB_OK | IC_OK)) == IB_OK)//iB, is available to be sampled
 8001754:	2d02      	cmp	r5, #2
 8001756:	d100      	bne.n	800175a <R1_GetPhaseCurrents+0x10a>
 8001758:	e092      	b.n	8001880 <R1_GetPhaseCurrents+0x230>
            hCurrB = -hCurrA-hCurrC;
 800175a:	1b1d      	subs	r5, r3, r4
 800175c:	b22d      	sxth	r5, r5
 800175e:	e02e      	b.n	80017be <R1_GetPhaseCurrents+0x16e>
    if((pHandle->iflag & (IA_OK | IB_OK)) == (IA_OK | IB_OK)) //iB,-iA are available to be sampled
 8001760:	24ad      	movs	r4, #173	@ 0xad
 8001762:	5d05      	ldrb	r5, [r0, r4]
 8001764:	3caa      	subs	r4, #170	@ 0xaa
 8001766:	402c      	ands	r4, r5
 8001768:	2c03      	cmp	r4, #3
 800176a:	d048      	beq.n	80017fe <R1_GetPhaseCurrents+0x1ae>
      if((pHandle->iflag & (IA_OK | IB_OK)) != 0x00) //iB, or -iA is available to be sampled
 800176c:	2c00      	cmp	r4, #0
 800176e:	d035      	beq.n	80017dc <R1_GetPhaseCurrents+0x18c>
        if(pHandle->_Super.AlignFlag == 0x01) //START Position    Aligning_angle=150 degree
 8001770:	2569      	movs	r5, #105	@ 0x69
 8001772:	5d45      	ldrb	r5, [r0, r5]
 8001774:	2d01      	cmp	r5, #1
 8001776:	d059      	beq.n	800182c <R1_GetPhaseCurrents+0x1dc>
          if((pHandle->iflag & (IA_OK | IB_OK)) == IB_OK)//iB, is available to be sampled
 8001778:	2c02      	cmp	r4, #2
 800177a:	d100      	bne.n	800177e <R1_GetPhaseCurrents+0x12e>
 800177c:	e076      	b.n	800186c <R1_GetPhaseCurrents+0x21c>
            wAux1 = -wAux1;
 800177e:	425c      	negs	r4, r3
            hCurrB = pHandle->_Super.IbEst;
 8001780:	2358      	movs	r3, #88	@ 0x58
            hCurrA = (int16_t) wAux1;
 8001782:	b224      	sxth	r4, r4
            hCurrB = pHandle->_Super.IbEst;
 8001784:	5ec5      	ldrsh	r5, [r0, r3]
 8001786:	e01a      	b.n	80017be <R1_GetPhaseCurrents+0x16e>
    if((pHandle->iflag & (IA_OK | IC_OK)) == (IA_OK | IC_OK)) //iC,-iA are available to be sampled
 8001788:	24ad      	movs	r4, #173	@ 0xad
 800178a:	5d05      	ldrb	r5, [r0, r4]
 800178c:	3ca8      	subs	r4, #168	@ 0xa8
 800178e:	402c      	ands	r4, r5
 8001790:	2c05      	cmp	r4, #5
 8001792:	d02f      	beq.n	80017f4 <R1_GetPhaseCurrents+0x1a4>
      if((pHandle->iflag & (IA_OK | IC_OK)) != 0x00) //iC, or -iA is available to be sampled
 8001794:	2c00      	cmp	r4, #0
 8001796:	d00b      	beq.n	80017b0 <R1_GetPhaseCurrents+0x160>
        if(pHandle->_Super.AlignFlag == 0x01) //START Position     Aligning_angle=210 degree
 8001798:	2569      	movs	r5, #105	@ 0x69
 800179a:	5d45      	ldrb	r5, [r0, r5]
 800179c:	2d01      	cmp	r5, #1
 800179e:	d04b      	beq.n	8001838 <R1_GetPhaseCurrents+0x1e8>
            hCurrB = pHandle->_Super.IbEst;
 80017a0:	2558      	movs	r5, #88	@ 0x58
 80017a2:	5f45      	ldrsh	r5, [r0, r5]
          if((pHandle->iflag & (IA_OK | IC_OK)) == IC_OK)//iC, is available to be sampled
 80017a4:	2c04      	cmp	r4, #4
 80017a6:	d100      	bne.n	80017aa <R1_GetPhaseCurrents+0x15a>
 80017a8:	e064      	b.n	8001874 <R1_GetPhaseCurrents+0x224>
            wAux1 = -wAux1;
 80017aa:	425c      	negs	r4, r3
            hCurrA = (int16_t) wAux1;
 80017ac:	b224      	sxth	r4, r4
            hCurrB = pHandle->_Super.IbEst;
 80017ae:	e006      	b.n	80017be <R1_GetPhaseCurrents+0x16e>
        hCurrA = pHandle->_Super.IaEst;
 80017b0:	2356      	movs	r3, #86	@ 0x56
 80017b2:	5ec4      	ldrsh	r4, [r0, r3]
        hCurrC = pHandle->_Super.IcEst;
 80017b4:	235a      	movs	r3, #90	@ 0x5a
        hCurrB = -hCurrA-hCurrC;
 80017b6:	5ac5      	ldrh	r5, [r0, r3]
 80017b8:	192d      	adds	r5, r5, r4
 80017ba:	426d      	negs	r5, r5
 80017bc:	b22d      	sxth	r5, r5
    break;
  default:
    break;
  }

  pHandle->CurrAOld = hCurrA;
 80017be:	23a8      	movs	r3, #168	@ 0xa8
 80017c0:	52c4      	strh	r4, [r0, r3]
  pHandle->CurrBOld = hCurrB;
 80017c2:	3302      	adds	r3, #2
 80017c4:	52c5      	strh	r5, [r0, r3]

  pStator_Currents->a = hCurrA;
  pStator_Currents->b = hCurrB;
 80017c6:	804d      	strh	r5, [r1, #2]
  pStator_Currents->a = hCurrA;
 80017c8:	800c      	strh	r4, [r1, #0]
}
 80017ca:	bd70      	pop	{r4, r5, r6, pc}
        hCurrB = pHandle->_Super.IbEst;
 80017cc:	2358      	movs	r3, #88	@ 0x58
 80017ce:	5ec5      	ldrsh	r5, [r0, r3]
        hCurrC = pHandle->_Super.IcEst;
 80017d0:	235a      	movs	r3, #90	@ 0x5a
        hCurrA = -hCurrB-hCurrC;
 80017d2:	5ac4      	ldrh	r4, [r0, r3]
 80017d4:	1964      	adds	r4, r4, r5
 80017d6:	4264      	negs	r4, r4
 80017d8:	b224      	sxth	r4, r4
 80017da:	e7f0      	b.n	80017be <R1_GetPhaseCurrents+0x16e>
        hCurrB = pHandle->_Super.IbEst;
 80017dc:	2358      	movs	r3, #88	@ 0x58
 80017de:	5ec5      	ldrsh	r5, [r0, r3]
        hCurrA = pHandle->_Super.IaEst;
 80017e0:	2356      	movs	r3, #86	@ 0x56
 80017e2:	5ec4      	ldrsh	r4, [r0, r3]
 80017e4:	e7eb      	b.n	80017be <R1_GetPhaseCurrents+0x16e>
        hCurrA = pHandle->_Super.IaEst;
 80017e6:	2356      	movs	r3, #86	@ 0x56
 80017e8:	5ec4      	ldrsh	r4, [r0, r3]
        hCurrB = pHandle->_Super.IbEst;
 80017ea:	2358      	movs	r3, #88	@ 0x58
 80017ec:	5ec5      	ldrsh	r5, [r0, r3]
 80017ee:	e7e6      	b.n	80017be <R1_GetPhaseCurrents+0x16e>
      hCurrA = (int16_t) wAux2;
 80017f0:	b214      	sxth	r4, r2
 80017f2:	e76f      	b.n	80016d4 <R1_GetPhaseCurrents+0x84>
      wAux1 = -wAux1;
 80017f4:	425c      	negs	r4, r3
      hCurrB = -hCurrA-hCurrC;
 80017f6:	1a9d      	subs	r5, r3, r2
      hCurrA = (int16_t) wAux1;
 80017f8:	b224      	sxth	r4, r4
      hCurrB = -hCurrA-hCurrC;
 80017fa:	b22d      	sxth	r5, r5
 80017fc:	e7df      	b.n	80017be <R1_GetPhaseCurrents+0x16e>
      wAux1 = -wAux1;
 80017fe:	425c      	negs	r4, r3
      hCurrB = (int16_t) wAux2;
 8001800:	b215      	sxth	r5, r2
      hCurrA = (int16_t) wAux1;
 8001802:	b224      	sxth	r4, r4
 8001804:	e7db      	b.n	80017be <R1_GetPhaseCurrents+0x16e>
      hCurrA = -hCurrB-hCurrC;
 8001806:	1a9c      	subs	r4, r3, r2
      hCurrB = (int16_t) wAux2;
 8001808:	b215      	sxth	r5, r2
      hCurrA = -hCurrB-hCurrC;
 800180a:	b224      	sxth	r4, r4
 800180c:	e7d7      	b.n	80017be <R1_GetPhaseCurrents+0x16e>
      hCurrB = -hCurrA-hCurrC;
 800180e:	1a9d      	subs	r5, r3, r2
      hCurrA = (int16_t) wAux2;
 8001810:	b214      	sxth	r4, r2
      hCurrB = -hCurrA-hCurrC;
 8001812:	b22d      	sxth	r5, r5
 8001814:	e7d3      	b.n	80017be <R1_GetPhaseCurrents+0x16e>
      wAux1 = -wAux1;
 8001816:	425d      	negs	r5, r3
      hCurrA = -hCurrB-hCurrC;
 8001818:	1a9c      	subs	r4, r3, r2
      hCurrB = (int16_t) wAux1;
 800181a:	b22d      	sxth	r5, r5
      hCurrA = -hCurrB-hCurrC;
 800181c:	b224      	sxth	r4, r4
 800181e:	e7ce      	b.n	80017be <R1_GetPhaseCurrents+0x16e>
          if((pHandle->iflag & (IA_OK | IB_OK)) == IA_OK)//iA, is available to be sampled
 8001820:	2c01      	cmp	r4, #1
 8001822:	d041      	beq.n	80018a8 <R1_GetPhaseCurrents+0x258>
            wAux1 = -wAux1;
 8001824:	425d      	negs	r5, r3
            hCurrB = (int16_t) wAux1;
 8001826:	b22d      	sxth	r5, r5
            hCurrA = -hCurrB;
 8001828:	b21c      	sxth	r4, r3
 800182a:	e7c8      	b.n	80017be <R1_GetPhaseCurrents+0x16e>
          if((pHandle->iflag & (IA_OK | IB_OK)) == IB_OK)//iB, is available to be sampled
 800182c:	2c02      	cmp	r4, #2
 800182e:	d03f      	beq.n	80018b0 <R1_GetPhaseCurrents+0x260>
            wAux1 = -wAux1;
 8001830:	425c      	negs	r4, r3
            hCurrA = (int16_t) wAux1;
 8001832:	b224      	sxth	r4, r4
            hCurrB = -hCurrA;
 8001834:	b21d      	sxth	r5, r3
 8001836:	e7c2      	b.n	80017be <R1_GetPhaseCurrents+0x16e>
          if((pHandle->iflag & (IA_OK | IC_OK)) == IC_OK)//iC, is available to be sampled
 8001838:	2c04      	cmp	r4, #4
 800183a:	d02d      	beq.n	8001898 <R1_GetPhaseCurrents+0x248>
            wAux1 = -wAux1;
 800183c:	425c      	negs	r4, r3
            hCurrB = 0;
 800183e:	2500      	movs	r5, #0
            hCurrA = (int16_t) wAux1;
 8001840:	b224      	sxth	r4, r4
            hCurrB = 0;
 8001842:	e7bc      	b.n	80017be <R1_GetPhaseCurrents+0x16e>
          if((pHandle->iflag & (IB_OK | IC_OK)) == IB_OK)//iB, is available to be sampled
 8001844:	2d02      	cmp	r5, #2
 8001846:	d024      	beq.n	8001892 <R1_GetPhaseCurrents+0x242>
            hCurrA = 0;
 8001848:	2400      	movs	r4, #0
            hCurrB = -hCurrC;
 800184a:	b21d      	sxth	r5, r3
 800184c:	e7b7      	b.n	80017be <R1_GetPhaseCurrents+0x16e>
          if((pHandle->iflag & (IA_OK | IC_OK)) == IA_OK)//iA is available to be sampled and not iC
 800184e:	2c01      	cmp	r4, #1
 8001850:	d01c      	beq.n	800188c <R1_GetPhaseCurrents+0x23c>
            hCurrB = 0;
 8001852:	2500      	movs	r5, #0
            hCurrA = -hCurrC;
 8001854:	b21c      	sxth	r4, r3
            hCurrB = 0;
 8001856:	e7b2      	b.n	80017be <R1_GetPhaseCurrents+0x16e>
          if((pHandle->iflag & (IB_OK | IC_OK)) == IC_OK)//iC, is available to be sampled
 8001858:	2d04      	cmp	r5, #4
 800185a:	d021      	beq.n	80018a0 <R1_GetPhaseCurrents+0x250>
            wAux1 = -wAux1;
 800185c:	425d      	negs	r5, r3
            hCurrA = 0;
 800185e:	2400      	movs	r4, #0
            hCurrB = (int16_t) wAux1;
 8001860:	b22d      	sxth	r5, r5
            hCurrA = 0;
 8001862:	e7ac      	b.n	80017be <R1_GetPhaseCurrents+0x16e>
            hCurrB = pHandle->_Super.IbEst;
 8001864:	2358      	movs	r3, #88	@ 0x58
            hCurrA = (int16_t) wAux2;
 8001866:	b214      	sxth	r4, r2
            hCurrB = pHandle->_Super.IbEst;
 8001868:	5ec5      	ldrsh	r5, [r0, r3]
 800186a:	e7a8      	b.n	80017be <R1_GetPhaseCurrents+0x16e>
            hCurrA = pHandle->_Super.IaEst;
 800186c:	2356      	movs	r3, #86	@ 0x56
            hCurrB = (int16_t) wAux2;
 800186e:	b215      	sxth	r5, r2
            hCurrA = pHandle->_Super.IaEst;
 8001870:	5ec4      	ldrsh	r4, [r0, r3]
 8001872:	e7a4      	b.n	80017be <R1_GetPhaseCurrents+0x16e>
            hCurrA = -hCurrB-hCurrC;
 8001874:	18ac      	adds	r4, r5, r2
 8001876:	4264      	negs	r4, r4
 8001878:	b224      	sxth	r4, r4
 800187a:	e7a0      	b.n	80017be <R1_GetPhaseCurrents+0x16e>
            hCurrA = (int16_t) wAux2;
 800187c:	b214      	sxth	r4, r2
            hCurrB = pHandle->_Super.IbEst;
 800187e:	e79e      	b.n	80017be <R1_GetPhaseCurrents+0x16e>
            hCurrB = (int16_t) wAux2;
 8001880:	b215      	sxth	r5, r2
            hCurrA = pHandle->_Super.IaEst;
 8001882:	e79c      	b.n	80017be <R1_GetPhaseCurrents+0x16e>
            hCurrB = -hCurrA-hCurrC;
 8001884:	18a5      	adds	r5, r4, r2
 8001886:	426d      	negs	r5, r5
 8001888:	b22d      	sxth	r5, r5
 800188a:	e798      	b.n	80017be <R1_GetPhaseCurrents+0x16e>
            hCurrB = 0;
 800188c:	2500      	movs	r5, #0
            hCurrA = (int16_t) wAux2;
 800188e:	b214      	sxth	r4, r2
            hCurrC = -hCurrA;
 8001890:	e795      	b.n	80017be <R1_GetPhaseCurrents+0x16e>
            hCurrA = 0;
 8001892:	2400      	movs	r4, #0
            hCurrB = (int16_t) wAux2;
 8001894:	b215      	sxth	r5, r2
            hCurrA = 0;
 8001896:	e792      	b.n	80017be <R1_GetPhaseCurrents+0x16e>
            hCurrA = -hCurrC;
 8001898:	4254      	negs	r4, r2
            hCurrB = 0;
 800189a:	2500      	movs	r5, #0
            hCurrA = -hCurrC;
 800189c:	b224      	sxth	r4, r4
            hCurrB = 0;
 800189e:	e78e      	b.n	80017be <R1_GetPhaseCurrents+0x16e>
            hCurrB = -hCurrC;
 80018a0:	4255      	negs	r5, r2
            hCurrA = 0;
 80018a2:	2400      	movs	r4, #0
            hCurrB = -hCurrC;
 80018a4:	b22d      	sxth	r5, r5
 80018a6:	e78a      	b.n	80017be <R1_GetPhaseCurrents+0x16e>
            hCurrB = -hCurrA;
 80018a8:	4255      	negs	r5, r2
            hCurrA = (int16_t) wAux2;
 80018aa:	b214      	sxth	r4, r2
            hCurrB = -hCurrA;
 80018ac:	b22d      	sxth	r5, r5
 80018ae:	e786      	b.n	80017be <R1_GetPhaseCurrents+0x16e>
            hCurrA = -hCurrB;
 80018b0:	4254      	negs	r4, r2
            hCurrB = (int16_t) wAux2;
 80018b2:	b215      	sxth	r5, r2
            hCurrA = -hCurrB;
 80018b4:	b224      	sxth	r4, r4
 80018b6:	e782      	b.n	80017be <R1_GetPhaseCurrents+0x16e>
  switch (pHandle->_Super.Sector)
 80018b8:	2500      	movs	r5, #0
 80018ba:	002c      	movs	r4, r5
 80018bc:	e77f      	b.n	80017be <R1_GetPhaseCurrents+0x16e>
 80018be:	46c0      	nop			@ (mov r8, r8)
 80018c0:	00007fff 	.word	0x00007fff
 80018c4:	ffff8001 	.word	0xffff8001
 80018c8:	08004db8 	.word	0x08004db8

080018cc <R1_HFCurrentsCalibration>:
  */
static void R1_HFCurrentsCalibration( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
  /* Derived class members container */
  PWMC_R1_Handle_t * pHandle = ( PWMC_R1_Handle_t * )pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80018cc:	23b8      	movs	r3, #184	@ 0xb8
 80018ce:	58c3      	ldr	r3, [r0, r3]
{
 80018d0:	b530      	push	{r4, r5, lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80018d2:	685a      	ldr	r2, [r3, #4]
  /* clear flag used for FOC duration check */
  pHandle->FOCDurationFlag = false;
 80018d4:	2400      	movs	r4, #0
 80018d6:	23b3      	movs	r3, #179	@ 0xb3
 80018d8:	54c4      	strb	r4, [r0, r3]
 80018da:	6853      	ldr	r3, [r2, #4]
 80018dc:	3470      	adds	r4, #112	@ 0x70
 80018de:	43a3      	bics	r3, r4
 80018e0:	6053      	str	r3, [r2, #4]

  /* Disabling the External triggering for ADCx */
  LL_TIM_SetTriggerOutput( TIMx, LL_TIM_TRGO_RESET );
  if ( pHandle->Index < NB_CONVERSIONS )
 80018e2:	23ac      	movs	r3, #172	@ 0xac
 80018e4:	5cc2      	ldrb	r2, [r0, r3]
 80018e6:	2a0f      	cmp	r2, #15
 80018e8:	d809      	bhi.n	80018fe <R1_HFCurrentsCalibration+0x32>
  {
    pHandle->PhaseOffset += pHandle->CurConv[1] ;
 80018ea:	229e      	movs	r2, #158	@ 0x9e
 80018ec:	3418      	adds	r4, #24
 80018ee:	5a85      	ldrh	r5, [r0, r2]
 80018f0:	5902      	ldr	r2, [r0, r4]
 80018f2:	1952      	adds	r2, r2, r5
 80018f4:	5102      	str	r2, [r0, r4]
    pHandle->Index++;
 80018f6:	5cc2      	ldrb	r2, [r0, r3]
 80018f8:	3201      	adds	r2, #1
 80018fa:	b2d2      	uxtb	r2, r2
 80018fc:	54c2      	strb	r2, [r0, r3]
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 80018fe:	2300      	movs	r3, #0
 8001900:	800b      	strh	r3, [r1, #0]
  pStator_Currents->b = 0;
 8001902:	804b      	strh	r3, [r1, #2]

}
 8001904:	bd30      	pop	{r4, r5, pc}
 8001906:	46c0      	nop			@ (mov r8, r8)

08001908 <R1_SetADCSampPointPolarization>:
{
  /* Derived class members container */
  PWMC_R1_Handle_t * pHandle = ( PWMC_R1_Handle_t * )pHdl;

  uint16_t hAux;
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1) - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8001908:	21b8      	movs	r1, #184	@ 0xb8
 800190a:	22a0      	movs	r2, #160	@ 0xa0
{
 800190c:	b530      	push	{r4, r5, lr}
 800190e:	0003      	movs	r3, r0
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1) - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8001910:	5a82      	ldrh	r2, [r0, r2]
 8001912:	5840      	ldr	r0, [r0, r1]
 8001914:	0852      	lsrs	r2, r2, #1
 8001916:	8e04      	ldrh	r4, [r0, #48]	@ 0x30
 8001918:	8e41      	ldrh	r1, [r0, #50]	@ 0x32
 800191a:	1909      	adds	r1, r1, r4
 800191c:	b289      	uxth	r1, r1
 800191e:	1a55      	subs	r5, r2, r1
 8001920:	24a2      	movs	r4, #162	@ 0xa2
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1) + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8001922:	1852      	adds	r2, r2, r1
 8001924:	21a4      	movs	r1, #164	@ 0xa4
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1) - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8001926:	531d      	strh	r5, [r3, r4]
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1) + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8001928:	525a      	strh	r2, [r3, r1]

  LL_ADC_REG_SetSequencerChannels( ADC1, __LL_ADC_DECIMAL_NB_TO_CHANNEL ( pHandle->pParams_str->IChannel ));
 800192a:	2235      	movs	r2, #53	@ 0x35
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChannels(ADC_TypeDef *ADCx, uint32_t Channel)
{
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800192c:	2180      	movs	r1, #128	@ 0x80
 800192e:	5c82      	ldrb	r2, [r0, r2]
 8001930:	0189      	lsls	r1, r1, #6
 8001932:	4091      	lsls	r1, r2
 8001934:	4a0d      	ldr	r2, [pc, #52]	@ (800196c <R1_SetADCSampPointPolarization+0x64>)
 8001936:	0b49      	lsrs	r1, r1, #13
 8001938:	6291      	str	r1, [r2, #40]	@ 0x28
  LL_ADC_SetSamplingTimeCommonChannels ( ADC1, pHandle->pParams_str->ISamplingTime );
 800193a:	2136      	movs	r1, #54	@ 0x36
 800193c:	5c41      	ldrb	r1, [r0, r1]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 800193e:	2007      	movs	r0, #7
 8001940:	6954      	ldr	r4, [r2, #20]
 8001942:	4384      	bics	r4, r0
 8001944:	4321      	orrs	r1, r4
 8001946:	6151      	str	r1, [r2, #20]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8001948:	68d0      	ldr	r0, [r2, #12]
 800194a:	4909      	ldr	r1, [pc, #36]	@ (8001970 <R1_SetADCSampPointPolarization+0x68>)
 800194c:	4008      	ands	r0, r1
 800194e:	2188      	movs	r1, #136	@ 0x88
 8001950:	00c9      	lsls	r1, r1, #3
 8001952:	4301      	orrs	r1, r0
 8001954:	60d1      	str	r1, [r2, #12]
  LL_ADC_REG_SetTriggerSource(ADC1, LL_ADC_REG_TRIG_EXT_TIM1_CH4);

  /*check software error*/
  if ( pHandle->FOCDurationFlag == true)
 8001956:	22b3      	movs	r2, #179	@ 0xb3
 8001958:	5c99      	ldrb	r1, [r3, r2]
  }
  else
  {
    hAux = MC_NO_ERROR;
  }
  if ( pHandle->_Super.SWerror == 1u )
 800195a:	3a6f      	subs	r2, #111	@ 0x6f
 800195c:	5a98      	ldrh	r0, [r3, r2]
 800195e:	2801      	cmp	r0, #1
 8001960:	d001      	beq.n	8001966 <R1_SetADCSampPointPolarization+0x5e>
  if ( pHandle->FOCDurationFlag == true)
 8001962:	0008      	movs	r0, r1
  {
    hAux = MC_DURATION;
    pHandle->_Super.SWerror = 0u;
  }
  return hAux;
}
 8001964:	bd30      	pop	{r4, r5, pc}
    pHandle->_Super.SWerror = 0u;
 8001966:	2100      	movs	r1, #0
 8001968:	5299      	strh	r1, [r3, r2]
 800196a:	e7fb      	b.n	8001964 <R1_SetADCSampPointPolarization+0x5c>
 800196c:	40012400 	.word	0x40012400
 8001970:	fffff23f 	.word	0xfffff23f

08001974 <R1_CalcDutyCycles>:
  * @param  pHandle related object of class CPWMC
  * @retval uint16_t It returns MC_DURATION if the TIMx update occurs
  *         before the end of FOC algorithm else returns MC_NO_ERROR
  */
__weak uint16_t R1_CalcDutyCycles( PWMC_Handle_t * pHdl )
{
 8001974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001976:	4657      	mov	r7, sl
 8001978:	464e      	mov	r6, r9
 800197a:	4645      	mov	r5, r8
 800197c:	46de      	mov	lr, fp
  PWMC_R1_Handle_t * pHandle = ( PWMC_R1_Handle_t * )pHdl;
  DMA_TypeDef * DMAx = pHandle->pParams_str->DMAx;
 800197e:	22b8      	movs	r2, #184	@ 0xb8
{
 8001980:	b5e0      	push	{r5, r6, r7, lr}
  DMA_TypeDef * DMAx = pHandle->pParams_str->DMAx;
 8001982:	5882      	ldr	r2, [r0, r2]
{
 8001984:	b08f      	sub	sp, #60	@ 0x3c
  DMA_TypeDef * DMAx = pHandle->pParams_str->DMAx;
 8001986:	9201      	str	r2, [sp, #4]
 8001988:	6892      	ldr	r2, [r2, #8]
{
 800198a:	0003      	movs	r3, r0
  DMA_TypeDef * DMAx = pHandle->pParams_str->DMAx;
 800198c:	9207      	str	r2, [sp, #28]
  uint16_t hAux;
  uint8_t max, mid, min;
  uint8_t max_bad_flag;
  uint8_t min_bad_flag;

  aCCRval[0] = pHandle->_Super.CntPhA;
 800198e:	8fc2      	ldrh	r2, [r0, #62]	@ 0x3e
  aCCRval[2] = pHandle->_Super.CntPhC;

  max =  (uint16_t)pHandle->_Super.highDuty;
  mid =  (uint16_t)pHandle->_Super.midDuty;
  min =  (uint16_t)pHandle->_Super.lowDuty;
  pHandle->iflag=0x00;
 8001990:	2700      	movs	r7, #0
  aCCRval[0] = pHandle->_Super.CntPhA;
 8001992:	4690      	mov	r8, r2
 8001994:	4640      	mov	r0, r8
 8001996:	aa0c      	add	r2, sp, #48	@ 0x30
 8001998:	8010      	strh	r0, [r2, #0]
  aCCRval[1] = pHandle->_Super.CntPhB;
 800199a:	2240      	movs	r2, #64	@ 0x40
 800199c:	5a9a      	ldrh	r2, [r3, r2]

  /* Phase-shift and set iflag */
  submax_mid = aCCRval[max]-aCCRval[mid];
 800199e:	ad0c      	add	r5, sp, #48	@ 0x30
  aCCRval[1] = pHandle->_Super.CntPhB;
 80019a0:	4692      	mov	sl, r2
 80019a2:	4650      	mov	r0, sl
 80019a4:	aa0c      	add	r2, sp, #48	@ 0x30
 80019a6:	8050      	strh	r0, [r2, #2]
  aCCRval[2] = pHandle->_Super.CntPhC;
 80019a8:	2242      	movs	r2, #66	@ 0x42
 80019aa:	5a9a      	ldrh	r2, [r3, r2]
 80019ac:	4691      	mov	r9, r2
 80019ae:	4648      	mov	r0, r9
 80019b0:	aa0c      	add	r2, sp, #48	@ 0x30
 80019b2:	8090      	strh	r0, [r2, #4]
  max =  (uint16_t)pHandle->_Super.highDuty;
 80019b4:	224a      	movs	r2, #74	@ 0x4a
  min =  (uint16_t)pHandle->_Super.lowDuty;
 80019b6:	2046      	movs	r0, #70	@ 0x46
  max =  (uint16_t)pHandle->_Super.highDuty;
 80019b8:	5c9e      	ldrb	r6, [r3, r2]
  min =  (uint16_t)pHandle->_Super.lowDuty;
 80019ba:	5c1c      	ldrb	r4, [r3, r0]
  mid =  (uint16_t)pHandle->_Super.midDuty;
 80019bc:	3a02      	subs	r2, #2
  pHandle->iflag=0x00;
 80019be:	3067      	adds	r0, #103	@ 0x67
  mid =  (uint16_t)pHandle->_Super.midDuty;
 80019c0:	5c9a      	ldrb	r2, [r3, r2]
  pHandle->iflag=0x00;
 80019c2:	9008      	str	r0, [sp, #32]
 80019c4:	541f      	strb	r7, [r3, r0]
  submax_mid = aCCRval[max]-aCCRval[mid];
 80019c6:	0070      	lsls	r0, r6, #1
 80019c8:	5f45      	ldrsh	r5, [r0, r5]
 80019ca:	0052      	lsls	r2, r2, #1
 80019cc:	46ac      	mov	ip, r5
 80019ce:	ad0c      	add	r5, sp, #48	@ 0x30
 80019d0:	5a28      	ldrh	r0, [r5, r0]
 80019d2:	5f55      	ldrsh	r5, [r2, r5]
 80019d4:	900b      	str	r0, [sp, #44]	@ 0x2c
 80019d6:	9502      	str	r5, [sp, #8]
 80019d8:	ad0c      	add	r5, sp, #48	@ 0x30
 80019da:	5aaa      	ldrh	r2, [r5, r2]
 80019dc:	4693      	mov	fp, r2
  submax_mid_deltmin = submax_mid - pHandle->pParams_str->TMin;
 80019de:	465d      	mov	r5, fp
 80019e0:	9a01      	ldr	r2, [sp, #4]
 80019e2:	8dd2      	ldrh	r2, [r2, #46]	@ 0x2e
 80019e4:	1a80      	subs	r0, r0, r2
 80019e6:	1b40      	subs	r0, r0, r5
 80019e8:	9203      	str	r2, [sp, #12]
 80019ea:	b205      	sxth	r5, r0
  submid_min = aCCRval[mid]-aCCRval[min];
 80019ec:	0062      	lsls	r2, r4, #1
 80019ee:	a80c      	add	r0, sp, #48	@ 0x30
 80019f0:	5e10      	ldrsh	r0, [r2, r0]
  submid_min_deltmin = submid_min - pHandle->pParams_str->TMin;
 80019f2:	4659      	mov	r1, fp
 80019f4:	9a03      	ldr	r2, [sp, #12]
  submid_min = aCCRval[mid]-aCCRval[min];
 80019f6:	9009      	str	r0, [sp, #36]	@ 0x24
  submid_min_deltmin = submid_min - pHandle->pParams_str->TMin;
 80019f8:	1a8a      	subs	r2, r1, r2
 80019fa:	1a12      	subs	r2, r2, r0
 80019fc:	b291      	uxth	r1, r2
 80019fe:	910a      	str	r1, [sp, #40]	@ 0x28
  pHandle->aShiftval[0]=0;
 8001a00:	2190      	movs	r1, #144	@ 0x90
  {
    pHandle->iflag |= ALFLAG[max];
  }
  else
  {
    if((1-submax_mid_deltmin+aCCRval[max]+pHandle->pParams_str->hTADConv)>(pHandle->Half_PWMPeriod))
 8001a02:	9801      	ldr	r0, [sp, #4]
  pHandle->aShiftval[0]=0;
 8001a04:	505f      	str	r7, [r3, r1]
  pHandle->aShiftval[2]=0;
 8001a06:	3104      	adds	r1, #4
 8001a08:	525f      	strh	r7, [r3, r1]
    if((1-submax_mid_deltmin+aCCRval[max]+pHandle->pParams_str->hTADConv)>(pHandle->Half_PWMPeriod))
 8001a0a:	8e41      	ldrh	r1, [r0, #50]	@ 0x32
 8001a0c:	37a0      	adds	r7, #160	@ 0xa0
 8001a0e:	9104      	str	r1, [sp, #16]
    SamplePoint2 = aCCRval[mid] + pHandle->pParams_str->TMin - pHandle->pParams_str->TSample;
  }
  else if((max_bad_flag == 1) && (min_bad_flag == 1))
  {
    SamplePoint1 = pHandle->Half_PWMPeriod / 2;
    SamplePoint2 = SamplePoint1 + pHandle->pParams_str->TSample + pHandle->pParams_str->hTADConv;
 8001a10:	8e01      	ldrh	r1, [r0, #48]	@ 0x30
    pHandle->iflag |= ALFLAG[min];
 8001a12:	48c2      	ldr	r0, [pc, #776]	@ (8001d1c <R1_CalcDutyCycles+0x3a8>)
    SamplePoint2 = SamplePoint1 + pHandle->pParams_str->TSample + pHandle->pParams_str->hTADConv;
 8001a14:	9106      	str	r1, [sp, #24]
    pHandle->iflag |= ALFLAG[min];
 8001a16:	5701      	ldrsb	r1, [r0, r4]
    if((1-submax_mid_deltmin+aCCRval[max]+pHandle->pParams_str->hTADConv)>(pHandle->Half_PWMPeriod))
 8001a18:	5bdf      	ldrh	r7, [r3, r7]
  submid_min_deltmin = submid_min - pHandle->pParams_str->TMin;
 8001a1a:	b212      	sxth	r2, r2
    pHandle->iflag |= ALFLAG[min];
 8001a1c:	9105      	str	r1, [sp, #20]
  if(submax_mid_deltmin > 0)
 8001a1e:	2d00      	cmp	r5, #0
 8001a20:	dc00      	bgt.n	8001a24 <R1_CalcDutyCycles+0xb0>
 8001a22:	e0cb      	b.n	8001bbc <R1_CalcDutyCycles+0x248>
    pHandle->iflag |= ALFLAG[max];
 8001a24:	5780      	ldrsb	r0, [r0, r6]
  if(submid_min_deltmin > 0)
 8001a26:	2a00      	cmp	r2, #0
 8001a28:	dc00      	bgt.n	8001a2c <R1_CalcDutyCycles+0xb8>
 8001a2a:	e096      	b.n	8001b5a <R1_CalcDutyCycles+0x1e6>
    pHandle->iflag |= ALFLAG[min];
 8001a2c:	9a08      	ldr	r2, [sp, #32]
 8001a2e:	4308      	orrs	r0, r1
 8001a30:	4641      	mov	r1, r8
 8001a32:	5498      	strb	r0, [r3, r2]
 8001a34:	464a      	mov	r2, r9
 8001a36:	4650      	mov	r0, sl
 8001a38:	9105      	str	r1, [sp, #20]
    SamplePoint1 = aCCRval[mid] - pHandle->pParams_str->TSample;
 8001a3a:	465c      	mov	r4, fp
 8001a3c:	9906      	ldr	r1, [sp, #24]
 8001a3e:	1a65      	subs	r5, r4, r1
    SamplePoint2 = aCCRval[mid] + pHandle->pParams_str->TMin - pHandle->pParams_str->TSample;
 8001a40:	9c03      	ldr	r4, [sp, #12]
    SamplePoint1 = aCCRval[mid] - pHandle->pParams_str->TSample;
 8001a42:	b22d      	sxth	r5, r5
    SamplePoint2 = aCCRval[mid] + pHandle->pParams_str->TMin - pHandle->pParams_str->TSample;
 8001a44:	1a64      	subs	r4, r4, r1
 8001a46:	445c      	add	r4, fp
 8001a48:	b221      	sxth	r1, r4
 8001a4a:	9102      	str	r1, [sp, #8]
  {
    SamplePoint2 = aCCRval[mid] + pHandle->pParams_str->hTADConv + pHandle->pParams_str->TMin - pHandle->pParams_str->TSample;
    SamplePoint1 = aCCRval[mid];
  }

  if((SamplePoint2-SamplePoint1) < pHandle->pParams_str->hTADConv)
 8001a4c:	9902      	ldr	r1, [sp, #8]
 8001a4e:	9e04      	ldr	r6, [sp, #16]
 8001a50:	1b4c      	subs	r4, r1, r5
 8001a52:	42b4      	cmp	r4, r6
 8001a54:	da0f      	bge.n	8001a76 <R1_CalcDutyCycles+0x102>
  {
    SamplePoint1 = aCCRval[mid]-((pHandle->pParams_str->hTADConv)-(pHandle->pParams_str->TMin))/2;
 8001a56:	9903      	ldr	r1, [sp, #12]
 8001a58:	1a75      	subs	r5, r6, r1
 8001a5a:	0fec      	lsrs	r4, r5, #31
 8001a5c:	1964      	adds	r4, r4, r5
 8001a5e:	465d      	mov	r5, fp
    SamplePoint2 = aCCRval[mid]+(pHandle->pParams_str->TMin) - pHandle->pParams_str->TSample +((pHandle->pParams_str->hTADConv)-(pHandle->pParams_str->TMin))/2+1;
 8001a60:	1c4e      	adds	r6, r1, #1
 8001a62:	9906      	ldr	r1, [sp, #24]
    SamplePoint1 = aCCRval[mid]-((pHandle->pParams_str->hTADConv)-(pHandle->pParams_str->TMin))/2;
 8001a64:	1064      	asrs	r4, r4, #1
    SamplePoint2 = aCCRval[mid]+(pHandle->pParams_str->TMin) - pHandle->pParams_str->TSample +((pHandle->pParams_str->hTADConv)-(pHandle->pParams_str->TMin))/2+1;
 8001a66:	1a76      	subs	r6, r6, r1
    SamplePoint1 = aCCRval[mid]-((pHandle->pParams_str->hTADConv)-(pHandle->pParams_str->TMin))/2;
 8001a68:	4264      	negs	r4, r4
    SamplePoint2 = aCCRval[mid]+(pHandle->pParams_str->TMin) - pHandle->pParams_str->TSample +((pHandle->pParams_str->hTADConv)-(pHandle->pParams_str->TMin))/2+1;
 8001a6a:	445e      	add	r6, fp
 8001a6c:	1b36      	subs	r6, r6, r4
    SamplePoint1 = aCCRval[mid]-((pHandle->pParams_str->hTADConv)-(pHandle->pParams_str->TMin))/2;
 8001a6e:	192d      	adds	r5, r5, r4
    SamplePoint2 = aCCRval[mid]+(pHandle->pParams_str->TMin) - pHandle->pParams_str->TSample +((pHandle->pParams_str->hTADConv)-(pHandle->pParams_str->TMin))/2+1;
 8001a70:	b231      	sxth	r1, r6
    SamplePoint1 = aCCRval[mid]-((pHandle->pParams_str->hTADConv)-(pHandle->pParams_str->TMin))/2;
 8001a72:	b22d      	sxth	r5, r5
    SamplePoint2 = aCCRval[mid]+(pHandle->pParams_str->TMin) - pHandle->pParams_str->TSample +((pHandle->pParams_str->hTADConv)-(pHandle->pParams_str->TMin))/2+1;
 8001a74:	9102      	str	r1, [sp, #8]
  }

  /* saturate sampling point */
  if ((SamplePoint2 >= pHandle->Half_PWMPeriod)||(SamplePoint2 <= 0))
 8001a76:	9c02      	ldr	r4, [sp, #8]
 8001a78:	42bc      	cmp	r4, r7
 8001a7a:	db00      	blt.n	8001a7e <R1_CalcDutyCycles+0x10a>
 8001a7c:	e09b      	b.n	8001bb6 <R1_CalcDutyCycles+0x242>
 8001a7e:	2c00      	cmp	r4, #0
 8001a80:	dc00      	bgt.n	8001a84 <R1_CalcDutyCycles+0x110>
 8001a82:	e098      	b.n	8001bb6 <R1_CalcDutyCycles+0x242>
  {
    SamplePoint1 = pHandle->Half_PWMPeriod-1;
  }

  pHandle->CntSmp1 = SamplePoint1;
  pHandle->CntSmp2 = SamplePoint2;
 8001a84:	b2a6      	uxth	r6, r4
  if ((SamplePoint1 >= pHandle->Half_PWMPeriod)||(SamplePoint1 <= 0))
 8001a86:	42bd      	cmp	r5, r7
 8001a88:	db00      	blt.n	8001a8c <R1_CalcDutyCycles+0x118>
 8001a8a:	e091      	b.n	8001bb0 <R1_CalcDutyCycles+0x23c>
 8001a8c:	2d00      	cmp	r5, #0
 8001a8e:	dc00      	bgt.n	8001a92 <R1_CalcDutyCycles+0x11e>
 8001a90:	e08e      	b.n	8001bb0 <R1_CalcDutyCycles+0x23c>
  pHandle->CntSmp1 = SamplePoint1;
 8001a92:	b2ad      	uxth	r5, r5
 8001a94:	24a2      	movs	r4, #162	@ 0xa2
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8001a96:	9901      	ldr	r1, [sp, #4]
 8001a98:	531d      	strh	r5, [r3, r4]
 8001a9a:	698f      	ldr	r7, [r1, #24]
 8001a9c:	9907      	ldr	r1, [sp, #28]
  pHandle->CntSmp2 = SamplePoint2;
 8001a9e:	3402      	adds	r4, #2
 8001aa0:	468b      	mov	fp, r1
 8001aa2:	2102      	movs	r1, #2
 8001aa4:	531e      	strh	r6, [r3, r4]
 8001aa6:	4c9e      	ldr	r4, [pc, #632]	@ (8001d20 <R1_CalcDutyCycles+0x3ac>)
 8001aa8:	5d3c      	ldrb	r4, [r7, r4]
 8001aaa:	445c      	add	r4, fp
 8001aac:	6827      	ldr	r7, [r4, #0]
 8001aae:	438f      	bics	r7, r1
 8001ab0:	6027      	str	r7, [r4, #0]

  /* critical section start */
  LL_DMA_DisableIT_TC(DMAx, pHandle->pParams_str->DMAChannelX);

  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA + pHandle->aShiftval[0];
 8001ab2:	277c      	movs	r7, #124	@ 0x7c
 8001ab4:	9905      	ldr	r1, [sp, #20]
 8001ab6:	53d9      	strh	r1, [r3, r7]
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
    // second half PWM period CCR value transfered by DMA
  pHandle->DmaBuffCCR_latch[3]= pHandle->_Super.CntPhA - pHandle->aShiftval[0];
 8001ab8:	4641      	mov	r1, r8
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 8001aba:	3702      	adds	r7, #2
 8001abc:	53d8      	strh	r0, [r3, r7]
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 8001abe:	3702      	adds	r7, #2
 8001ac0:	53da      	strh	r2, [r3, r7]
  pHandle->DmaBuffCCR_latch[3]= pHandle->_Super.CntPhA - pHandle->aShiftval[0];
 8001ac2:	3702      	adds	r7, #2
 8001ac4:	53d9      	strh	r1, [r3, r7]
  pHandle->DmaBuffCCR_latch[4]= pHandle->_Super.CntPhB - pHandle->aShiftval[1];
 8001ac6:	4651      	mov	r1, sl
 8001ac8:	3702      	adds	r7, #2
 8001aca:	53d9      	strh	r1, [r3, r7]
  pHandle->DmaBuffCCR_latch[5]= pHandle->_Super.CntPhC - pHandle->aShiftval[2];
 8001acc:	4649      	mov	r1, r9
 8001ace:	3702      	adds	r7, #2
 8001ad0:	53d9      	strh	r1, [r3, r7]

  if ( pHandle->TCDoneFlag == true )
 8001ad2:	372e      	adds	r7, #46	@ 0x2e
 8001ad4:	5ddf      	ldrb	r7, [r3, r7]
 8001ad6:	2f00      	cmp	r7, #0
 8001ad8:	d011      	beq.n	8001afe <R1_CalcDutyCycles+0x18a>
  {
    // first half PWM period CCR value transfered by DMA
    pHandle->DmaBuffCCR[0] = pHandle->DmaBuffCCR_latch[0];
 8001ada:	2770      	movs	r7, #112	@ 0x70
 8001adc:	9905      	ldr	r1, [sp, #20]
 8001ade:	53d9      	strh	r1, [r3, r7]
    pHandle->DmaBuffCCR[1] = pHandle->DmaBuffCCR_latch[1];
 8001ae0:	3702      	adds	r7, #2
 8001ae2:	53d8      	strh	r0, [r3, r7]
    pHandle->DmaBuffCCR[2] = pHandle->DmaBuffCCR_latch[2];
 8001ae4:	2074      	movs	r0, #116	@ 0x74
    // second half PWM period CCR value transfered by DMA
    pHandle->DmaBuffCCR[3]= pHandle->DmaBuffCCR_latch[3];
 8001ae6:	4641      	mov	r1, r8
    pHandle->DmaBuffCCR[2] = pHandle->DmaBuffCCR_latch[2];
 8001ae8:	521a      	strh	r2, [r3, r0]
    pHandle->DmaBuffCCR[3]= pHandle->DmaBuffCCR_latch[3];
 8001aea:	2276      	movs	r2, #118	@ 0x76
 8001aec:	5299      	strh	r1, [r3, r2]
    pHandle->DmaBuffCCR[4]= pHandle->DmaBuffCCR_latch[4];
 8001aee:	4651      	mov	r1, sl
 8001af0:	3202      	adds	r2, #2
 8001af2:	5299      	strh	r1, [r3, r2]
    pHandle->DmaBuffCCR[5]= pHandle->DmaBuffCCR_latch[5];
 8001af4:	4649      	mov	r1, r9
 8001af6:	3202      	adds	r2, #2
 8001af8:	5299      	strh	r1, [r3, r2]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8001afa:	4a8a      	ldr	r2, [pc, #552]	@ (8001d24 <R1_CalcDutyCycles+0x3b0>)
 8001afc:	6415      	str	r5, [r2, #64]	@ 0x40
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8001afe:	2002      	movs	r0, #2
 8001b00:	6822      	ldr	r2, [r4, #0]
    /* do nothing, it will be applied during DMA transfer complete IRQ */
  }
  /* critical section end */
  LL_DMA_EnableIT_TC(DMAx, pHandle->pParams_str->DMAChannelX);

  LL_ADC_REG_SetSequencerChannels( ADC1, __LL_ADC_DECIMAL_NB_TO_CHANNEL ( pHandle->pParams_str->IChannel ));
 8001b02:	9901      	ldr	r1, [sp, #4]
 8001b04:	4302      	orrs	r2, r0
 8001b06:	6022      	str	r2, [r4, #0]
 8001b08:	2235      	movs	r2, #53	@ 0x35
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001b0a:	2080      	movs	r0, #128	@ 0x80
 8001b0c:	5c8a      	ldrb	r2, [r1, r2]
 8001b0e:	0180      	lsls	r0, r0, #6
 8001b10:	4090      	lsls	r0, r2
  LL_ADC_SetSamplingTimeCommonChannels ( ADC1, pHandle->pParams_str->ISamplingTime );
 8001b12:	2436      	movs	r4, #54	@ 0x36
 8001b14:	4a84      	ldr	r2, [pc, #528]	@ (8001d28 <R1_CalcDutyCycles+0x3b4>)
 8001b16:	0b40      	lsrs	r0, r0, #13
 8001b18:	6290      	str	r0, [r2, #40]	@ 0x28
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8001b1a:	6950      	ldr	r0, [r2, #20]
 8001b1c:	5d09      	ldrb	r1, [r1, r4]
 8001b1e:	3c2f      	subs	r4, #47	@ 0x2f
 8001b20:	43a0      	bics	r0, r4
 8001b22:	4301      	orrs	r1, r0
 8001b24:	6151      	str	r1, [r2, #20]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8001b26:	68d0      	ldr	r0, [r2, #12]
 8001b28:	4980      	ldr	r1, [pc, #512]	@ (8001d2c <R1_CalcDutyCycles+0x3b8>)
 8001b2a:	4008      	ands	r0, r1
 8001b2c:	2188      	movs	r1, #136	@ 0x88
 8001b2e:	00c9      	lsls	r1, r1, #3
 8001b30:	4301      	orrs	r1, r0
 8001b32:	60d1      	str	r1, [r2, #12]
  LL_ADC_REG_SetTriggerSource(ADC1, LL_ADC_REG_TRIG_EXT_TIM1_CH4);

  pHandle->DmaBuffCCR_ADCTrig[0] = SamplePoint2;
 8001b34:	2296      	movs	r2, #150	@ 0x96
 8001b36:	529e      	strh	r6, [r3, r2]
  pHandle->DmaBuffCCR_ADCTrig[2] = SamplePoint1;
 8001b38:	3204      	adds	r2, #4
 8001b3a:	529d      	strh	r5, [r3, r2]

  /*check software error*/
  if ( pHandle->FOCDurationFlag == true)
 8001b3c:	3219      	adds	r2, #25
 8001b3e:	5c99      	ldrb	r1, [r3, r2]
  }
  else
  {
    hAux = MC_NO_ERROR;
  }
  if ( pHandle->_Super.SWerror == 1u )
 8001b40:	3a6f      	subs	r2, #111	@ 0x6f
 8001b42:	5a98      	ldrh	r0, [r3, r2]
 8001b44:	2801      	cmp	r0, #1
 8001b46:	d100      	bne.n	8001b4a <R1_CalcDutyCycles+0x1d6>
 8001b48:	e09b      	b.n	8001c82 <R1_CalcDutyCycles+0x30e>
  if ( pHandle->FOCDurationFlag == true)
 8001b4a:	0008      	movs	r0, r1
    hAux = MC_DURATION;
    pHandle->_Super.SWerror = 0u;
  }

  return (hAux);
}
 8001b4c:	b00f      	add	sp, #60	@ 0x3c
 8001b4e:	bcf0      	pop	{r4, r5, r6, r7}
 8001b50:	46bb      	mov	fp, r7
 8001b52:	46b2      	mov	sl, r6
 8001b54:	46a9      	mov	r9, r5
 8001b56:	46a0      	mov	r8, r4
 8001b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b5a:	b2c0      	uxtb	r0, r0
    if((submid_min_deltmin-1+aCCRval[min])<0)
 8001b5c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8001b5e:	3a01      	subs	r2, #1
 8001b60:	42ca      	cmn	r2, r1
 8001b62:	d45f      	bmi.n	8001c24 <R1_CalcDutyCycles+0x2b0>
      pHandle->iflag |= ALFLAG[min];
 8001b64:	9a05      	ldr	r2, [sp, #20]
      pHandle->aShiftval[min] = submid_min_deltmin - 1;
 8001b66:	3448      	adds	r4, #72	@ 0x48
      pHandle->iflag |= ALFLAG[min];
 8001b68:	4310      	orrs	r0, r2
 8001b6a:	22ad      	movs	r2, #173	@ 0xad
 8001b6c:	5498      	strb	r0, [r3, r2]
      pHandle->aShiftval[min] = submid_min_deltmin - 1;
 8001b6e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8001b70:	0064      	lsls	r4, r4, #1
 8001b72:	3a01      	subs	r2, #1
 8001b74:	52e2      	strh	r2, [r4, r3]
  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA + pHandle->aShiftval[0];
 8001b76:	2290      	movs	r2, #144	@ 0x90
 8001b78:	5a9e      	ldrh	r6, [r3, r2]
 8001b7a:	4642      	mov	r2, r8
 8001b7c:	1992      	adds	r2, r2, r6
 8001b7e:	b292      	uxth	r2, r2
 8001b80:	9205      	str	r2, [sp, #20]
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 8001b82:	2292      	movs	r2, #146	@ 0x92
  pHandle->DmaBuffCCR_latch[3]= pHandle->_Super.CntPhA - pHandle->aShiftval[0];
 8001b84:	4641      	mov	r1, r8
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 8001b86:	5a9d      	ldrh	r5, [r3, r2]
 8001b88:	4652      	mov	r2, sl
  pHandle->DmaBuffCCR_latch[3]= pHandle->_Super.CntPhA - pHandle->aShiftval[0];
 8001b8a:	1b8e      	subs	r6, r1, r6
 8001b8c:	b2b1      	uxth	r1, r6
 8001b8e:	4688      	mov	r8, r1
  pHandle->DmaBuffCCR_latch[4]= pHandle->_Super.CntPhB - pHandle->aShiftval[1];
 8001b90:	4651      	mov	r1, sl
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 8001b92:	1950      	adds	r0, r2, r5
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 8001b94:	2294      	movs	r2, #148	@ 0x94
  pHandle->DmaBuffCCR_latch[4]= pHandle->_Super.CntPhB - pHandle->aShiftval[1];
 8001b96:	1b4d      	subs	r5, r1, r5
 8001b98:	b2a9      	uxth	r1, r5
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 8001b9a:	5a9c      	ldrh	r4, [r3, r2]
  pHandle->DmaBuffCCR_latch[4]= pHandle->_Super.CntPhB - pHandle->aShiftval[1];
 8001b9c:	468a      	mov	sl, r1
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 8001b9e:	464a      	mov	r2, r9
  pHandle->DmaBuffCCR_latch[5]= pHandle->_Super.CntPhC - pHandle->aShiftval[2];
 8001ba0:	4649      	mov	r1, r9
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 8001ba2:	1912      	adds	r2, r2, r4
  pHandle->DmaBuffCCR_latch[5]= pHandle->_Super.CntPhC - pHandle->aShiftval[2];
 8001ba4:	1b0c      	subs	r4, r1, r4
 8001ba6:	b2a1      	uxth	r1, r4
 8001ba8:	4689      	mov	r9, r1
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 8001baa:	b280      	uxth	r0, r0
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 8001bac:	b292      	uxth	r2, r2
 8001bae:	e744      	b.n	8001a3a <R1_CalcDutyCycles+0xc6>
    SamplePoint1 = pHandle->Half_PWMPeriod-1;
 8001bb0:	3f01      	subs	r7, #1
 8001bb2:	b2bd      	uxth	r5, r7
 8001bb4:	e76e      	b.n	8001a94 <R1_CalcDutyCycles+0x120>
    SamplePoint2 = pHandle->Half_PWMPeriod-1;
 8001bb6:	1e7e      	subs	r6, r7, #1
 8001bb8:	b2b6      	uxth	r6, r6
 8001bba:	e764      	b.n	8001a86 <R1_CalcDutyCycles+0x112>
    if((1-submax_mid_deltmin+aCCRval[max]+pHandle->pParams_str->hTADConv)>(pHandle->Half_PWMPeriod))
 8001bbc:	4661      	mov	r1, ip
 8001bbe:	1b4d      	subs	r5, r1, r5
 8001bc0:	9904      	ldr	r1, [sp, #16]
 8001bc2:	3501      	adds	r5, #1
 8001bc4:	468c      	mov	ip, r1
 8001bc6:	4465      	add	r5, ip
 8001bc8:	42bd      	cmp	r5, r7
 8001bca:	dc5d      	bgt.n	8001c88 <R1_CalcDutyCycles+0x314>
      pHandle->aShiftval[max] = 1- submax_mid_deltmin;
 8001bcc:	9903      	ldr	r1, [sp, #12]
      pHandle->iflag |= ALFLAG[max];
 8001bce:	5785      	ldrsb	r5, [r0, r6]
      pHandle->aShiftval[max] = 1- submax_mid_deltmin;
 8001bd0:	1c48      	adds	r0, r1, #1
 8001bd2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8001bd4:	3648      	adds	r6, #72	@ 0x48
 8001bd6:	4458      	add	r0, fp
 8001bd8:	0076      	lsls	r6, r6, #1
 8001bda:	1a40      	subs	r0, r0, r1
 8001bdc:	52f0      	strh	r0, [r6, r3]
  if(submid_min_deltmin > 0)
 8001bde:	2a00      	cmp	r2, #0
 8001be0:	dd63      	ble.n	8001caa <R1_CalcDutyCycles+0x336>
    pHandle->iflag |= ALFLAG[min];
 8001be2:	9a05      	ldr	r2, [sp, #20]
  pHandle->DmaBuffCCR_latch[3]= pHandle->_Super.CntPhA - pHandle->aShiftval[0];
 8001be4:	4641      	mov	r1, r8
    pHandle->iflag |= ALFLAG[min];
 8001be6:	4315      	orrs	r5, r2
 8001be8:	9a08      	ldr	r2, [sp, #32]
 8001bea:	549d      	strb	r5, [r3, r2]
  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA + pHandle->aShiftval[0];
 8001bec:	2290      	movs	r2, #144	@ 0x90
 8001bee:	5a9d      	ldrh	r5, [r3, r2]
 8001bf0:	4642      	mov	r2, r8
 8001bf2:	1952      	adds	r2, r2, r5
 8001bf4:	b292      	uxth	r2, r2
 8001bf6:	9205      	str	r2, [sp, #20]
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 8001bf8:	2292      	movs	r2, #146	@ 0x92
 8001bfa:	5a9c      	ldrh	r4, [r3, r2]
 8001bfc:	4652      	mov	r2, sl
  pHandle->DmaBuffCCR_latch[3]= pHandle->_Super.CntPhA - pHandle->aShiftval[0];
 8001bfe:	1b4d      	subs	r5, r1, r5
 8001c00:	b2a9      	uxth	r1, r5
 8001c02:	4688      	mov	r8, r1
  pHandle->DmaBuffCCR_latch[4]= pHandle->_Super.CntPhB - pHandle->aShiftval[1];
 8001c04:	4651      	mov	r1, sl
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 8001c06:	1910      	adds	r0, r2, r4
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 8001c08:	2294      	movs	r2, #148	@ 0x94
  pHandle->DmaBuffCCR_latch[4]= pHandle->_Super.CntPhB - pHandle->aShiftval[1];
 8001c0a:	1b0c      	subs	r4, r1, r4
 8001c0c:	b2a1      	uxth	r1, r4
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 8001c0e:	5a9e      	ldrh	r6, [r3, r2]
  pHandle->DmaBuffCCR_latch[4]= pHandle->_Super.CntPhB - pHandle->aShiftval[1];
 8001c10:	468a      	mov	sl, r1
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 8001c12:	464a      	mov	r2, r9
  pHandle->DmaBuffCCR_latch[5]= pHandle->_Super.CntPhC - pHandle->aShiftval[2];
 8001c14:	4649      	mov	r1, r9
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 8001c16:	1992      	adds	r2, r2, r6
  pHandle->DmaBuffCCR_latch[5]= pHandle->_Super.CntPhC - pHandle->aShiftval[2];
 8001c18:	1b8e      	subs	r6, r1, r6
 8001c1a:	b2b1      	uxth	r1, r6
 8001c1c:	4689      	mov	r9, r1
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 8001c1e:	b280      	uxth	r0, r0
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 8001c20:	b292      	uxth	r2, r2
 8001c22:	e70a      	b.n	8001a3a <R1_CalcDutyCycles+0xc6>
      pHandle->iflag &= ~ALFLAG[min];
 8001c24:	9a05      	ldr	r2, [sp, #20]
    SamplePoint2 = aCCRval[mid] + pHandle->pParams_str->hTADConv + pHandle->pParams_str->TMin - pHandle->pParams_str->TSample;
 8001c26:	9c03      	ldr	r4, [sp, #12]
      pHandle->iflag &= ~ALFLAG[min];
 8001c28:	4390      	bics	r0, r2
 8001c2a:	22ad      	movs	r2, #173	@ 0xad
 8001c2c:	5498      	strb	r0, [r3, r2]
    SamplePoint2 = aCCRval[mid] + pHandle->pParams_str->hTADConv + pHandle->pParams_str->TMin - pHandle->pParams_str->TSample;
 8001c2e:	9a04      	ldr	r2, [sp, #16]
 8001c30:	4694      	mov	ip, r2
 8001c32:	9a06      	ldr	r2, [sp, #24]
 8001c34:	4464      	add	r4, ip
 8001c36:	1aa4      	subs	r4, r4, r2
  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA + pHandle->aShiftval[0];
 8001c38:	2290      	movs	r2, #144	@ 0x90
    SamplePoint2 = aCCRval[mid] + pHandle->pParams_str->hTADConv + pHandle->pParams_str->TMin - pHandle->pParams_str->TSample;
 8001c3a:	0021      	movs	r1, r4
  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA + pHandle->aShiftval[0];
 8001c3c:	5a9c      	ldrh	r4, [r3, r2]
 8001c3e:	4642      	mov	r2, r8
 8001c40:	1912      	adds	r2, r2, r4
 8001c42:	b292      	uxth	r2, r2
 8001c44:	9205      	str	r2, [sp, #20]
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 8001c46:	2292      	movs	r2, #146	@ 0x92
    SamplePoint2 = aCCRval[mid] + pHandle->pParams_str->hTADConv + pHandle->pParams_str->TMin - pHandle->pParams_str->TSample;
 8001c48:	4459      	add	r1, fp
 8001c4a:	9108      	str	r1, [sp, #32]
  pHandle->DmaBuffCCR_latch[3]= pHandle->_Super.CntPhA - pHandle->aShiftval[0];
 8001c4c:	4641      	mov	r1, r8
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 8001c4e:	5a9e      	ldrh	r6, [r3, r2]
 8001c50:	4652      	mov	r2, sl
  pHandle->DmaBuffCCR_latch[3]= pHandle->_Super.CntPhA - pHandle->aShiftval[0];
 8001c52:	1b0c      	subs	r4, r1, r4
 8001c54:	b2a1      	uxth	r1, r4
 8001c56:	4688      	mov	r8, r1
  pHandle->DmaBuffCCR_latch[4]= pHandle->_Super.CntPhB - pHandle->aShiftval[1];
 8001c58:	4651      	mov	r1, sl
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 8001c5a:	1990      	adds	r0, r2, r6
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 8001c5c:	2294      	movs	r2, #148	@ 0x94
  pHandle->DmaBuffCCR_latch[4]= pHandle->_Super.CntPhB - pHandle->aShiftval[1];
 8001c5e:	1b8e      	subs	r6, r1, r6
 8001c60:	b2b1      	uxth	r1, r6
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 8001c62:	5a9d      	ldrh	r5, [r3, r2]
  pHandle->DmaBuffCCR_latch[4]= pHandle->_Super.CntPhB - pHandle->aShiftval[1];
 8001c64:	468a      	mov	sl, r1
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 8001c66:	464a      	mov	r2, r9
  pHandle->DmaBuffCCR_latch[5]= pHandle->_Super.CntPhC - pHandle->aShiftval[2];
 8001c68:	4649      	mov	r1, r9
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 8001c6a:	1952      	adds	r2, r2, r5
  pHandle->DmaBuffCCR_latch[5]= pHandle->_Super.CntPhC - pHandle->aShiftval[2];
 8001c6c:	1b4d      	subs	r5, r1, r5
 8001c6e:	b2a9      	uxth	r1, r5
 8001c70:	4689      	mov	r9, r1
    SamplePoint2 = aCCRval[mid] + pHandle->pParams_str->hTADConv + pHandle->pParams_str->TMin - pHandle->pParams_str->TSample;
 8001c72:	4669      	mov	r1, sp
 8001c74:	2420      	movs	r4, #32
 8001c76:	5f09      	ldrsh	r1, [r1, r4]
    SamplePoint1 = aCCRval[mid];
 8001c78:	9d02      	ldr	r5, [sp, #8]
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 8001c7a:	b280      	uxth	r0, r0
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 8001c7c:	b292      	uxth	r2, r2
    SamplePoint2 = aCCRval[mid] + pHandle->pParams_str->hTADConv + pHandle->pParams_str->TMin - pHandle->pParams_str->TSample;
 8001c7e:	9102      	str	r1, [sp, #8]
 8001c80:	e6e4      	b.n	8001a4c <R1_CalcDutyCycles+0xd8>
    pHandle->_Super.SWerror = 0u;
 8001c82:	2100      	movs	r1, #0
 8001c84:	5299      	strh	r1, [r3, r2]
  return (hAux);
 8001c86:	e761      	b.n	8001b4c <R1_CalcDutyCycles+0x1d8>
  if(submid_min_deltmin > 0)
 8001c88:	2a00      	cmp	r2, #0
 8001c8a:	dd10      	ble.n	8001cae <R1_CalcDutyCycles+0x33a>
    pHandle->iflag |= ALFLAG[min];
 8001c8c:	9905      	ldr	r1, [sp, #20]
 8001c8e:	9a08      	ldr	r2, [sp, #32]
 8001c90:	4650      	mov	r0, sl
 8001c92:	5499      	strb	r1, [r3, r2]
 8001c94:	4641      	mov	r1, r8
 8001c96:	464a      	mov	r2, r9
 8001c98:	9105      	str	r1, [sp, #20]
    SamplePoint1 = aCCRval[mid] - pHandle->pParams_str->TSample- pHandle->pParams_str->hTADConv;
 8001c9a:	9906      	ldr	r1, [sp, #24]
 8001c9c:	9d04      	ldr	r5, [sp, #16]
 8001c9e:	468c      	mov	ip, r1
 8001ca0:	4659      	mov	r1, fp
 8001ca2:	4465      	add	r5, ip
 8001ca4:	1b4d      	subs	r5, r1, r5
 8001ca6:	b22d      	sxth	r5, r5
    SamplePoint2 = aCCRval[mid];
 8001ca8:	e6d0      	b.n	8001a4c <R1_CalcDutyCycles+0xd8>
 8001caa:	b2e8      	uxtb	r0, r5
 8001cac:	e756      	b.n	8001b5c <R1_CalcDutyCycles+0x1e8>
    if((submid_min_deltmin-1+aCCRval[min])<0)
 8001cae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8001cb0:	3a01      	subs	r2, #1
 8001cb2:	42ca      	cmn	r2, r1
 8001cb4:	d50d      	bpl.n	8001cd2 <R1_CalcDutyCycles+0x35e>
    SamplePoint2 = SamplePoint1 + pHandle->pParams_str->TSample + pHandle->pParams_str->hTADConv;
 8001cb6:	9906      	ldr	r1, [sp, #24]
 8001cb8:	9804      	ldr	r0, [sp, #16]
 8001cba:	468c      	mov	ip, r1
 8001cbc:	4641      	mov	r1, r8
    SamplePoint1 = pHandle->Half_PWMPeriod / 2;
 8001cbe:	087a      	lsrs	r2, r7, #1
    SamplePoint2 = SamplePoint1 + pHandle->pParams_str->TSample + pHandle->pParams_str->hTADConv;
 8001cc0:	4460      	add	r0, ip
    SamplePoint1 = pHandle->Half_PWMPeriod / 2;
 8001cc2:	0015      	movs	r5, r2
    SamplePoint2 = SamplePoint1 + pHandle->pParams_str->TSample + pHandle->pParams_str->hTADConv;
 8001cc4:	1812      	adds	r2, r2, r0
 8001cc6:	b212      	sxth	r2, r2
 8001cc8:	9202      	str	r2, [sp, #8]
 8001cca:	4650      	mov	r0, sl
 8001ccc:	464a      	mov	r2, r9
 8001cce:	9105      	str	r1, [sp, #20]
 8001cd0:	e6bc      	b.n	8001a4c <R1_CalcDutyCycles+0xd8>
      pHandle->iflag |= ALFLAG[min];
 8001cd2:	9905      	ldr	r1, [sp, #20]
 8001cd4:	9a08      	ldr	r2, [sp, #32]
      pHandle->aShiftval[min] = submid_min_deltmin - 1;
 8001cd6:	3448      	adds	r4, #72	@ 0x48
      pHandle->iflag |= ALFLAG[min];
 8001cd8:	5499      	strb	r1, [r3, r2]
      pHandle->aShiftval[min] = submid_min_deltmin - 1;
 8001cda:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8001cdc:	0064      	lsls	r4, r4, #1
 8001cde:	3a01      	subs	r2, #1
 8001ce0:	52e2      	strh	r2, [r4, r3]
  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA + pHandle->aShiftval[0];
 8001ce2:	2290      	movs	r2, #144	@ 0x90
 8001ce4:	5a9d      	ldrh	r5, [r3, r2]
 8001ce6:	4642      	mov	r2, r8
 8001ce8:	1952      	adds	r2, r2, r5
 8001cea:	b292      	uxth	r2, r2
 8001cec:	9205      	str	r2, [sp, #20]
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 8001cee:	2292      	movs	r2, #146	@ 0x92
  pHandle->DmaBuffCCR_latch[3]= pHandle->_Super.CntPhA - pHandle->aShiftval[0];
 8001cf0:	4641      	mov	r1, r8
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 8001cf2:	5a9c      	ldrh	r4, [r3, r2]
 8001cf4:	4652      	mov	r2, sl
  pHandle->DmaBuffCCR_latch[3]= pHandle->_Super.CntPhA - pHandle->aShiftval[0];
 8001cf6:	1b4d      	subs	r5, r1, r5
 8001cf8:	b2a9      	uxth	r1, r5
 8001cfa:	4688      	mov	r8, r1
  pHandle->DmaBuffCCR_latch[4]= pHandle->_Super.CntPhB - pHandle->aShiftval[1];
 8001cfc:	4651      	mov	r1, sl
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 8001cfe:	1910      	adds	r0, r2, r4
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 8001d00:	2294      	movs	r2, #148	@ 0x94
  pHandle->DmaBuffCCR_latch[4]= pHandle->_Super.CntPhB - pHandle->aShiftval[1];
 8001d02:	1b0c      	subs	r4, r1, r4
 8001d04:	b2a1      	uxth	r1, r4
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 8001d06:	5a9e      	ldrh	r6, [r3, r2]
  pHandle->DmaBuffCCR_latch[4]= pHandle->_Super.CntPhB - pHandle->aShiftval[1];
 8001d08:	468a      	mov	sl, r1
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 8001d0a:	464a      	mov	r2, r9
  pHandle->DmaBuffCCR_latch[5]= pHandle->_Super.CntPhC - pHandle->aShiftval[2];
 8001d0c:	4649      	mov	r1, r9
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 8001d0e:	1992      	adds	r2, r2, r6
  pHandle->DmaBuffCCR_latch[5]= pHandle->_Super.CntPhC - pHandle->aShiftval[2];
 8001d10:	1b8e      	subs	r6, r1, r6
 8001d12:	b2b1      	uxth	r1, r6
 8001d14:	4689      	mov	r9, r1
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 8001d16:	b280      	uxth	r0, r0
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 8001d18:	b292      	uxth	r2, r2
 8001d1a:	e7be      	b.n	8001c9a <R1_CalcDutyCycles+0x326>
 8001d1c:	08004dd0 	.word	0x08004dd0
 8001d20:	08004dd3 	.word	0x08004dd3
 8001d24:	40012c00 	.word	0x40012c00
 8001d28:	40012400 	.word	0x40012400
 8001d2c:	fffff23f 	.word	0xfffff23f

08001d30 <R1_Init>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8001d30:	23b8      	movs	r3, #184	@ 0xb8
{
 8001d32:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8001d34:	58c4      	ldr	r4, [r0, r3]
{
 8001d36:	4657      	mov	r7, sl
  DMA_TypeDef * DMAx = pHandle->pParams_str->DMAx;
 8001d38:	68a1      	ldr	r1, [r4, #8]
{
 8001d3a:	464e      	mov	r6, r9
  DMA_TypeDef * DMAx = pHandle->pParams_str->DMAx;
 8001d3c:	468c      	mov	ip, r1
  pHandle->iflag = 0;
 8001d3e:	2100      	movs	r1, #0
{
 8001d40:	4645      	mov	r5, r8
 8001d42:	46de      	mov	lr, fp
  pHandle->iflag = 0;
 8001d44:	4688      	mov	r8, r1
{
 8001d46:	b5e0      	push	{r5, r6, r7, lr}
  pHandle->iflag = 0;
 8001d48:	4645      	mov	r5, r8
 8001d4a:	31ad      	adds	r1, #173	@ 0xad
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8001d4c:	6863      	ldr	r3, [r4, #4]
{
 8001d4e:	b085      	sub	sp, #20
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 8001d50:	6822      	ldr	r2, [r4, #0]
  pHandle->iflag = 0;
 8001d52:	5445      	strb	r5, [r0, r1]
  pHandle->Half_PWMPeriod = (pHandle->_Super.PWMperiod/2u);
 8001d54:	394d      	subs	r1, #77	@ 0x4d
 8001d56:	5a47      	ldrh	r7, [r0, r1]
 8001d58:	35a0      	adds	r5, #160	@ 0xa0
 8001d5a:	0879      	lsrs	r1, r7, #1
 8001d5c:	5341      	strh	r1, [r0, r5]
 8001d5e:	9100      	str	r1, [sp, #0]
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1) - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8001d60:	8e26      	ldrh	r6, [r4, #48]	@ 0x30
 8001d62:	8e61      	ldrh	r1, [r4, #50]	@ 0x32
 8001d64:	08bf      	lsrs	r7, r7, #2
 8001d66:	1989      	adds	r1, r1, r6
 8001d68:	b289      	uxth	r1, r1
 8001d6a:	1a7e      	subs	r6, r7, r1
 8001d6c:	468a      	mov	sl, r1
 8001d6e:	b2b1      	uxth	r1, r6
 8001d70:	26a2      	movs	r6, #162	@ 0xa2
 8001d72:	9101      	str	r1, [sp, #4]
 8001d74:	5381      	strh	r1, [r0, r6]
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1) + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8001d76:	4651      	mov	r1, sl
 8001d78:	1879      	adds	r1, r7, r1
 8001d7a:	b289      	uxth	r1, r1
 8001d7c:	3602      	adds	r6, #2
 8001d7e:	5381      	strh	r1, [r0, r6]
  pHandle->_Super.CntPhB = pHandle->Half_PWMPeriod >> 1;
 8001d80:	3e64      	subs	r6, #100	@ 0x64
  pHandle->_Super.CntPhA = pHandle->Half_PWMPeriod >> 1;
 8001d82:	87c7      	strh	r7, [r0, #62]	@ 0x3e
  pHandle->_Super.CntPhB = pHandle->Half_PWMPeriod >> 1;
 8001d84:	46b1      	mov	r9, r6
 8001d86:	5387      	strh	r7, [r0, r6]
  pHandle->_Super.CntPhC = pHandle->Half_PWMPeriod >> 1;
 8001d88:	3602      	adds	r6, #2
 8001d8a:	5387      	strh	r7, [r0, r6]
  pHandle->DmaBuffCCR_latch[5] = pHandle->_Super.CntPhC;       // CCR3 value overwritten during second half PWM period
 8001d8c:	043d      	lsls	r5, r7, #16
 8001d8e:	362e      	adds	r6, #46	@ 0x2e
 8001d90:	433d      	orrs	r5, r7
 8001d92:	46b2      	mov	sl, r6
  pHandle->DmaBuffCCR[0]       = pHandle->_Super.CntPhA;       // CCR1 value overwritten during first half PWM period
 8001d94:	3610      	adds	r6, #16
 8001d96:	6705      	str	r5, [r0, #112]	@ 0x70
 8001d98:	6745      	str	r5, [r0, #116]	@ 0x74
 8001d9a:	6785      	str	r5, [r0, #120]	@ 0x78
 8001d9c:	67c5      	str	r5, [r0, #124]	@ 0x7c
 8001d9e:	46b3      	mov	fp, r6
 8001da0:	5185      	str	r5, [r0, r6]
 8001da2:	3604      	adds	r6, #4
 8001da4:	5185      	str	r5, [r0, r6]
  pHandle->DmaBuffCCR_ADCTrig[0] = pHandle->CntSmp2;
 8001da6:	2596      	movs	r5, #150	@ 0x96
 8001da8:	5341      	strh	r1, [r0, r5]
  pHandle->DmaBuffCCR_ADCTrig[1] = pHandle->Half_PWMPeriod-1u;
 8001daa:	9900      	ldr	r1, [sp, #0]
  pHandle->DmaBuffCCR_ADCTrig[2] = pHandle->CntSmp1;
 8001dac:	9d01      	ldr	r5, [sp, #4]
  pHandle->DmaBuffCCR_ADCTrig[1] = pHandle->Half_PWMPeriod-1u;
 8001dae:	1e4f      	subs	r7, r1, #1
 8001db0:	2198      	movs	r1, #152	@ 0x98
 8001db2:	5247      	strh	r7, [r0, r1]
  pHandle->DmaBuffCCR_ADCTrig[2] = pHandle->CntSmp1;
 8001db4:	3102      	adds	r1, #2
 8001db6:	5245      	strh	r5, [r0, r1]
  pHandle->BrakeActionLock = false;
 8001db8:	4645      	mov	r5, r8
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001dba:	2680      	movs	r6, #128	@ 0x80
 8001dbc:	3118      	adds	r1, #24
 8001dbe:	5245      	strh	r5, [r0, r1]
 8001dc0:	4970      	ldr	r1, [pc, #448]	@ (8001f84 <R1_Init+0x254>)
 8001dc2:	03f6      	lsls	r6, r6, #15
 8001dc4:	698d      	ldr	r5, [r1, #24]
 8001dc6:	4482      	add	sl, r0
 8001dc8:	4335      	orrs	r5, r6
 8001dca:	618d      	str	r5, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001dcc:	6989      	ldr	r1, [r1, #24]
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB1_GRP2_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 8001dce:	4d6e      	ldr	r5, [pc, #440]	@ (8001f88 <R1_Init+0x258>)
 8001dd0:	4031      	ands	r1, r6
 8001dd2:	9103      	str	r1, [sp, #12]
  (void)tmpreg;
 8001dd4:	9903      	ldr	r1, [sp, #12]
 8001dd6:	2180      	movs	r1, #128	@ 0x80
 8001dd8:	68ee      	ldr	r6, [r5, #12]
 8001dda:	0109      	lsls	r1, r1, #4
 8001ddc:	4331      	orrs	r1, r6
 8001dde:	60e9      	str	r1, [r5, #12]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001de0:	2501      	movs	r5, #1
  MODIFY_REG(TIMx->CR1, (TIM_CR1_DIR | TIM_CR1_CMS), CounterMode);
 8001de2:	464e      	mov	r6, r9
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001de4:	6819      	ldr	r1, [r3, #0]
 8001de6:	43a9      	bics	r1, r5
 8001de8:	6019      	str	r1, [r3, #0]
  MODIFY_REG(TIMx->CR1, (TIM_CR1_DIR | TIM_CR1_CMS), CounterMode);
 8001dea:	6819      	ldr	r1, [r3, #0]
 8001dec:	356f      	adds	r5, #111	@ 0x6f
 8001dee:	43a9      	bics	r1, r5
 8001df0:	4331      	orrs	r1, r6
 8001df2:	6019      	str	r1, [r3, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001df4:	6859      	ldr	r1, [r3, #4]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001df6:	3e38      	subs	r6, #56	@ 0x38
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001df8:	43a9      	bics	r1, r5
 8001dfa:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001dfc:	6999      	ldr	r1, [r3, #24]
 8001dfe:	4d63      	ldr	r5, [pc, #396]	@ (8001f8c <R1_Init+0x25c>)
 8001e00:	43b1      	bics	r1, r6
 8001e02:	6199      	str	r1, [r3, #24]
 8001e04:	6999      	ldr	r1, [r3, #24]
 8001e06:	4029      	ands	r1, r5
 8001e08:	6199      	str	r1, [r3, #24]
 8001e0a:	69d9      	ldr	r1, [r3, #28]
 8001e0c:	43b1      	bics	r1, r6
 8001e0e:	61d9      	str	r1, [r3, #28]
 8001e10:	69d9      	ldr	r1, [r3, #28]
 8001e12:	4029      	ands	r1, r5
 8001e14:	61d9      	str	r1, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8001e16:	2180      	movs	r1, #128	@ 0x80
 8001e18:	6a1d      	ldr	r5, [r3, #32]
 8001e1a:	0149      	lsls	r1, r1, #5
 8001e1c:	4329      	orrs	r1, r5
 8001e1e:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8001e20:	4641      	mov	r1, r8
  if ( (pHandle->pParams_str->EmergencyStop) != DISABLE )
 8001e22:	2538      	movs	r5, #56	@ 0x38
 8001e24:	6319      	str	r1, [r3, #48]	@ 0x30
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_BRK(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8001e26:	3981      	subs	r1, #129	@ 0x81
 8001e28:	6119      	str	r1, [r3, #16]
 8001e2a:	5d65      	ldrb	r5, [r4, r5]
 8001e2c:	2d00      	cmp	r5, #0
 8001e2e:	d004      	beq.n	8001e3a <R1_Init+0x10a>
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_BRK(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 8001e30:	465d      	mov	r5, fp
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8001e32:	6119      	str	r1, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 8001e34:	68d9      	ldr	r1, [r3, #12]
 8001e36:	4329      	orrs	r1, r5
 8001e38:	60d9      	str	r1, [r3, #12]
  SET_BIT(TIMx->CCER, Channels);
 8001e3a:	6a1d      	ldr	r5, [r3, #32]
 8001e3c:	4954      	ldr	r1, [pc, #336]	@ (8001f90 <R1_Init+0x260>)
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001e3e:	4f55      	ldr	r7, [pc, #340]	@ (8001f94 <R1_Init+0x264>)
 8001e40:	4329      	orrs	r1, r5
 8001e42:	4d55      	ldr	r5, [pc, #340]	@ (8001f98 <R1_Init+0x268>)
 8001e44:	6219      	str	r1, [r3, #32]
 8001e46:	46ab      	mov	fp, r5
 8001e48:	69a1      	ldr	r1, [r4, #24]
 8001e4a:	4d54      	ldr	r5, [pc, #336]	@ (8001f9c <R1_Init+0x26c>)
 8001e4c:	4459      	add	r1, fp
 8001e4e:	3901      	subs	r1, #1
 8001e50:	7809      	ldrb	r1, [r1, #0]
 8001e52:	46b8      	mov	r8, r7
 8001e54:	4461      	add	r1, ip
 8001e56:	680e      	ldr	r6, [r1, #0]
 8001e58:	403e      	ands	r6, r7
 8001e5a:	432e      	orrs	r6, r5
 8001e5c:	600e      	str	r6, [r1, #0]
  MODIFY_REG(TIMx->DCR, (TIM_DCR_DBL | TIM_DCR_DBA), (DMABurstBaseAddress | DMABurstLength));
 8001e5e:	6c9e      	ldr	r6, [r3, #72]	@ 0x48
 8001e60:	4f4f      	ldr	r7, [pc, #316]	@ (8001fa0 <R1_Init+0x270>)
 8001e62:	4037      	ands	r7, r6
 8001e64:	4e4f      	ldr	r6, [pc, #316]	@ (8001fa4 <R1_Init+0x274>)
 8001e66:	433e      	orrs	r6, r7
 8001e68:	649e      	str	r6, [r3, #72]	@ 0x48
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8001e6a:	4656      	mov	r6, sl
 8001e6c:	60ce      	str	r6, [r1, #12]
  LL_DMA_SetPeriphAddress( DMAx, pHandle->pParams_str->DMAChannelX, ( uint32_t ) &TIMx->DMAR );
 8001e6e:	001e      	movs	r6, r3
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001e70:	2706      	movs	r7, #6
 8001e72:	364c      	adds	r6, #76	@ 0x4c
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8001e74:	608e      	str	r6, [r1, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001e76:	684e      	ldr	r6, [r1, #4]
  LL_DMA_SetPeriphAddress( DMAx, pHandle->pParams_str->DMASamplingPtChannelX, ( uint32_t ) &TIMx->CCR4 );
 8001e78:	3340      	adds	r3, #64	@ 0x40
 8001e7a:	0c36      	lsrs	r6, r6, #16
 8001e7c:	0436      	lsls	r6, r6, #16
 8001e7e:	433e      	orrs	r6, r7
 8001e80:	604e      	str	r6, [r1, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001e82:	69e6      	ldr	r6, [r4, #28]
 8001e84:	445e      	add	r6, fp
 8001e86:	3e01      	subs	r6, #1
 8001e88:	7836      	ldrb	r6, [r6, #0]
 8001e8a:	4466      	add	r6, ip
 8001e8c:	6837      	ldr	r7, [r6, #0]
 8001e8e:	46b9      	mov	r9, r7
 8001e90:	4647      	mov	r7, r8
 8001e92:	464d      	mov	r5, r9
 8001e94:	402f      	ands	r7, r5
 8001e96:	003d      	movs	r5, r7
 8001e98:	4f40      	ldr	r7, [pc, #256]	@ (8001f9c <R1_Init+0x26c>)
 8001e9a:	432f      	orrs	r7, r5
 8001e9c:	6037      	str	r7, [r6, #0]
  LL_DMA_SetMemoryAddress( DMAx, pHandle->pParams_str->DMASamplingPtChannelX, ( uint32_t )&pHandle->DmaBuffCCR_ADCTrig[0] );
 8001e9e:	0007      	movs	r7, r0
 8001ea0:	3796      	adds	r7, #150	@ 0x96
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8001ea2:	60f7      	str	r7, [r6, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001ea4:	2703      	movs	r7, #3
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8001ea6:	60b3      	str	r3, [r6, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001ea8:	6873      	ldr	r3, [r6, #4]
 8001eaa:	0c1b      	lsrs	r3, r3, #16
 8001eac:	041b      	lsls	r3, r3, #16
 8001eae:	433b      	orrs	r3, r7
 8001eb0:	6073      	str	r3, [r6, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8001eb2:	2602      	movs	r6, #2
 8001eb4:	680b      	ldr	r3, [r1, #0]
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS));
 8001eb6:	3f01      	subs	r7, #1
 8001eb8:	4333      	orrs	r3, r6
 8001eba:	600b      	str	r3, [r1, #0]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8001ebc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001ebe:	445b      	add	r3, fp
 8001ec0:	001d      	movs	r5, r3
 8001ec2:	0003      	movs	r3, r0
 8001ec4:	3d01      	subs	r5, #1
 8001ec6:	7829      	ldrb	r1, [r5, #0]
 8001ec8:	339c      	adds	r3, #156	@ 0x9c
 8001eca:	4461      	add	r1, ip
 8001ecc:	60cb      	str	r3, [r1, #12]
  LL_DMA_SetPeriphAddress(DMAx, pHandle->pParams_str->DMA_ADC_DR_ChannelX, (uint32_t)&ADCx->DR);
 8001ece:	0013      	movs	r3, r2
 8001ed0:	3340      	adds	r3, #64	@ 0x40
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8001ed2:	608b      	str	r3, [r1, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001ed4:	684b      	ldr	r3, [r1, #4]
 8001ed6:	0c1b      	lsrs	r3, r3, #16
 8001ed8:	041b      	lsls	r3, r3, #16
 8001eda:	4333      	orrs	r3, r6
 8001edc:	604b      	str	r3, [r1, #4]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8001ede:	2104      	movs	r1, #4
 8001ee0:	6853      	ldr	r3, [r2, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTP) == (ADC_CR_ADSTP));
 8001ee2:	360e      	adds	r6, #14
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8001ee4:	438b      	bics	r3, r1
 8001ee6:	6053      	str	r3, [r2, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8001ee8:	6011      	str	r1, [r2, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 8001eea:	6853      	ldr	r3, [r2, #4]
 8001eec:	3104      	adds	r1, #4
 8001eee:	438b      	bics	r3, r1
 8001ef0:	6053      	str	r3, [r2, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOS);
 8001ef2:	6011      	str	r1, [r2, #0]
  MODIFY_REG(ADCx->CR,
 8001ef4:	492c      	ldr	r1, [pc, #176]	@ (8001fa8 <R1_Init+0x278>)
 8001ef6:	4b2d      	ldr	r3, [pc, #180]	@ (8001fac <R1_Init+0x27c>)
 8001ef8:	688d      	ldr	r5, [r1, #8]
 8001efa:	401d      	ands	r5, r3
 8001efc:	3318      	adds	r3, #24
 8001efe:	432b      	orrs	r3, r5
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 8001f00:	2504      	movs	r5, #4
  MODIFY_REG(ADCx->CR,
 8001f02:	608b      	str	r3, [r1, #8]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8001f04:	688b      	ldr	r3, [r1, #8]
         (LL_ADC_REG_IsStopConversionOngoing(ADC1) == SET) ||
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	dbfc      	blt.n	8001f04 <R1_Init+0x1d4>
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 8001f0a:	688b      	ldr	r3, [r1, #8]
  while ((LL_ADC_IsCalibrationOnGoing(ADC1) == SET) ||
 8001f0c:	421d      	tst	r5, r3
 8001f0e:	d1f9      	bne.n	8001f04 <R1_Init+0x1d4>
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTP) == (ADC_CR_ADSTP));
 8001f10:	688b      	ldr	r3, [r1, #8]
         (LL_ADC_REG_IsConversionOngoing(ADC1) == SET) ||
 8001f12:	421e      	tst	r6, r3
 8001f14:	d1f6      	bne.n	8001f04 <R1_Init+0x1d4>
  return (READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS));
 8001f16:	688b      	ldr	r3, [r1, #8]
         (LL_ADC_REG_IsStopConversionOngoing(ADC1) == SET) ||
 8001f18:	421f      	tst	r7, r3
 8001f1a:	d1f3      	bne.n	8001f04 <R1_Init+0x1d4>
  MODIFY_REG(ADCx->CR,
 8001f1c:	688b      	ldr	r3, [r1, #8]
 8001f1e:	4d23      	ldr	r5, [pc, #140]	@ (8001fac <R1_Init+0x27c>)
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8001f20:	4e23      	ldr	r6, [pc, #140]	@ (8001fb0 <R1_Init+0x280>)
  MODIFY_REG(ADCx->CR,
 8001f22:	402b      	ands	r3, r5
 8001f24:	2501      	movs	r5, #1
 8001f26:	432b      	orrs	r3, r5
 8001f28:	608b      	str	r3, [r1, #8]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8001f2a:	68d3      	ldr	r3, [r2, #12]
 8001f2c:	4033      	ands	r3, r6
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8001f2e:	2603      	movs	r6, #3
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8001f30:	60d3      	str	r3, [r2, #12]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8001f32:	68cb      	ldr	r3, [r1, #12]
 8001f34:	43b3      	bics	r3, r6
 8001f36:	432b      	orrs	r3, r5
 8001f38:	60cb      	str	r3, [r1, #12]
  while ( LL_ADC_IsActiveFlag_ADRDY( ADC1 ) == RESET )
 8001f3a:	2101      	movs	r1, #1
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 8001f3c:	4d1a      	ldr	r5, [pc, #104]	@ (8001fa8 <R1_Init+0x278>)
 8001f3e:	682b      	ldr	r3, [r5, #0]
 8001f40:	4219      	tst	r1, r3
 8001f42:	d0fc      	beq.n	8001f3e <R1_Init+0x20e>
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8001f44:	68d5      	ldr	r5, [r2, #12]
 8001f46:	4b1a      	ldr	r3, [pc, #104]	@ (8001fb0 <R1_Init+0x280>)
 8001f48:	401d      	ands	r5, r3
 8001f4a:	2380      	movs	r3, #128	@ 0x80
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	432b      	orrs	r3, r5
 8001f50:	60d3      	str	r3, [r2, #12]
  LL_ADC_REG_SetSequencerChannels ( ADCx, __LL_ADC_DECIMAL_NB_TO_CHANNEL ( pHandle->pParams_str->IChannel ));
 8001f52:	2335      	movs	r3, #53	@ 0x35
 8001f54:	5ce3      	ldrb	r3, [r4, r3]
 8001f56:	000c      	movs	r4, r1
 8001f58:	409c      	lsls	r4, r3
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001f5a:	0363      	lsls	r3, r4, #13
 8001f5c:	0b5b      	lsrs	r3, r3, #13
 8001f5e:	6293      	str	r3, [r2, #40]	@ 0x28
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001f60:	4a14      	ldr	r2, [pc, #80]	@ (8001fb4 <R1_Init+0x284>)
 8001f62:	6813      	ldr	r3, [r2, #0]
 8001f64:	430b      	orrs	r3, r1
 8001f66:	6013      	str	r3, [r2, #0]
  pHandle->ADCRegularLocked=false; /* We allow ADC usage for regular conversion on Systick*/
 8001f68:	2300      	movs	r3, #0
 8001f6a:	22b5      	movs	r2, #181	@ 0xb5
 8001f6c:	5483      	strb	r3, [r0, r2]
  pHandle->OverCurrentFlag = false;
 8001f6e:	3a05      	subs	r2, #5
 8001f70:	5283      	strh	r3, [r0, r2]
  pHandle->_Super.DTTest = 0u;
 8001f72:	3a52      	subs	r2, #82	@ 0x52
 8001f74:	5283      	strh	r3, [r0, r2]
}
 8001f76:	b005      	add	sp, #20
 8001f78:	bcf0      	pop	{r4, r5, r6, r7}
 8001f7a:	46bb      	mov	fp, r7
 8001f7c:	46b2      	mov	sl, r6
 8001f7e:	46a9      	mov	r9, r5
 8001f80:	46a0      	mov	r8, r4
 8001f82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f84:	40021000 	.word	0x40021000
 8001f88:	40015800 	.word	0x40015800
 8001f8c:	fffff7ff 	.word	0xfffff7ff
 8001f90:	00000555 	.word	0x00000555
 8001f94:	ffff800f 	.word	0xffff800f
 8001f98:	08004dd4 	.word	0x08004dd4
 8001f9c:	000035b0 	.word	0x000035b0
 8001fa0:	ffffe0e0 	.word	0xffffe0e0
 8001fa4:	0000020d 	.word	0x0000020d
 8001fa8:	40012400 	.word	0x40012400
 8001fac:	7fffffe8 	.word	0x7fffffe8
 8001fb0:	fffff23f 	.word	0xfffff23f
 8001fb4:	40012c00 	.word	0x40012c00

08001fb8 <R1_SetOffsetCalib>:
  pHandle->PhaseOffset = offsets->phaseAOffset;
 8001fb8:	2388      	movs	r3, #136	@ 0x88
 8001fba:	680a      	ldr	r2, [r1, #0]
 8001fbc:	50c2      	str	r2, [r0, r3]
  pHdl->offsetCalibStatus = true;
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	3b1a      	subs	r3, #26
 8001fc2:	54c2      	strb	r2, [r0, r3]
}
 8001fc4:	4770      	bx	lr
 8001fc6:	46c0      	nop			@ (mov r8, r8)

08001fc8 <R1_GetOffsetCalib>:
  offsets->phaseAOffset = pHandle->PhaseOffset;
 8001fc8:	2388      	movs	r3, #136	@ 0x88
 8001fca:	58c3      	ldr	r3, [r0, r3]
 8001fcc:	600b      	str	r3, [r1, #0]
}
 8001fce:	4770      	bx	lr

08001fd0 <R1_TurnOnLowSides>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8001fd0:	23b8      	movs	r3, #184	@ 0xb8
{
 8001fd2:	b530      	push	{r4, r5, lr}
  pHandle->_Super.TurnOnLowSidesAction = true;
 8001fd4:	226b      	movs	r2, #107	@ 0x6b
 8001fd6:	2501      	movs	r5, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8001fd8:	58c4      	ldr	r4, [r0, r3]
 8001fda:	6863      	ldr	r3, [r4, #4]
  pHandle->_Super.TurnOnLowSidesAction = true;
 8001fdc:	5485      	strb	r5, [r0, r2]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001fde:	6359      	str	r1, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8001fe0:	6399      	str	r1, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8001fe2:	63d9      	str	r1, [r3, #60]	@ 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8001fe4:	2101      	movs	r1, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001fe6:	3a6d      	subs	r2, #109	@ 0x6d
 8001fe8:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8001fea:	691a      	ldr	r2, [r3, #16]
 8001fec:	4211      	tst	r1, r2
 8001fee:	d0fc      	beq.n	8001fea <R1_TurnOnLowSides+0x1a>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8001ff0:	2280      	movs	r2, #128	@ 0x80
 8001ff2:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001ff4:	0212      	lsls	r2, r2, #8
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	645a      	str	r2, [r3, #68]	@ 0x44
  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8001ffa:	2334      	movs	r3, #52	@ 0x34
 8001ffc:	5ce3      	ldrb	r3, [r4, r3]
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d000      	beq.n	8002004 <R1_TurnOnLowSides+0x34>
}
 8002002:	bd30      	pop	{r4, r5, pc}
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8002004:	68e3      	ldr	r3, [r4, #12]
 8002006:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002008:	619a      	str	r2, [r3, #24]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800200a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800200c:	6923      	ldr	r3, [r4, #16]
 800200e:	619a      	str	r2, [r3, #24]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8002010:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8002012:	6963      	ldr	r3, [r4, #20]
 8002014:	619a      	str	r2, [r3, #24]
  return;
 8002016:	e7f4      	b.n	8002002 <R1_TurnOnLowSides+0x32>

08002018 <R1_SwitchOnPWM>:
{
 8002018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800201a:	4657      	mov	r7, sl
 800201c:	464e      	mov	r6, r9
 800201e:	4645      	mov	r5, r8
 8002020:	46de      	mov	lr, fp
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8002022:	23b8      	movs	r3, #184	@ 0xb8
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1) - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8002024:	24a0      	movs	r4, #160	@ 0xa0
{
 8002026:	b5e0      	push	{r5, r6, r7, lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8002028:	58c2      	ldr	r2, [r0, r3]
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1) - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 800202a:	5b04      	ldrh	r4, [r0, r4]
 800202c:	8e55      	ldrh	r5, [r2, #50]	@ 0x32
 800202e:	0866      	lsrs	r6, r4, #1
 8002030:	46a2      	mov	sl, r4
 8002032:	8e14      	ldrh	r4, [r2, #48]	@ 0x30
{
 8002034:	b085      	sub	sp, #20
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1) - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8002036:	192d      	adds	r5, r5, r4
 8002038:	b2ad      	uxth	r5, r5
 800203a:	1b74      	subs	r4, r6, r5
 800203c:	b2a4      	uxth	r4, r4
 800203e:	0027      	movs	r7, r4
 8002040:	9401      	str	r4, [sp, #4]
 8002042:	24a2      	movs	r4, #162	@ 0xa2
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 8002044:	6811      	ldr	r1, [r2, #0]
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1) + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8002046:	1975      	adds	r5, r6, r5
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8002048:	6853      	ldr	r3, [r2, #4]
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1) + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 800204a:	b2ad      	uxth	r5, r5
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 800204c:	468b      	mov	fp, r1
  DMA_TypeDef * DMAx = pHandle->pParams_str->DMAx;
 800204e:	6891      	ldr	r1, [r2, #8]
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1) - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8002050:	5307      	strh	r7, [r0, r4]
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1) + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8002052:	3402      	adds	r4, #2
 8002054:	5305      	strh	r5, [r0, r4]
  pHandle->_Super.TurnOnLowSidesAction = false;
 8002056:	3c39      	subs	r4, #57	@ 0x39
 8002058:	46a4      	mov	ip, r4
 800205a:	2400      	movs	r4, #0
 800205c:	46a0      	mov	r8, r4
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1) + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 800205e:	46a9      	mov	r9, r5
  pHandle->_Super.TurnOnLowSidesAction = false;
 8002060:	4664      	mov	r4, ip
 8002062:	4645      	mov	r5, r8
 8002064:	5505      	strb	r5, [r0, r4]
  pHandle->DmaBuffCCR_ADCTrig[0] = pHandle->CntSmp2;
 8002066:	464d      	mov	r5, r9
 8002068:	342b      	adds	r4, #43	@ 0x2b
 800206a:	5305      	strh	r5, [r0, r4]
  pHandle->DmaBuffCCR_ADCTrig[2] = pHandle->CntSmp1;
 800206c:	259a      	movs	r5, #154	@ 0x9a
  LL_TIM_OC_SetCompareCH4( TIMx, ( uint32_t )(pHandle->Half_PWMPeriod + 1) );
 800206e:	4654      	mov	r4, sl
  pHandle->DmaBuffCCR_ADCTrig[2] = pHandle->CntSmp1;
 8002070:	5347      	strh	r7, [r0, r5]
 8002072:	2580      	movs	r5, #128	@ 0x80
  LL_TIM_OC_SetCompareCH4( TIMx, ( uint32_t )(pHandle->Half_PWMPeriod + 1) );
 8002074:	3401      	adds	r4, #1
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002076:	641c      	str	r4, [r3, #64]	@ 0x40
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002078:	635e      	str	r6, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800207a:	639e      	str	r6, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800207c:	63de      	str	r6, [r3, #60]	@ 0x3c
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800207e:	6c5e      	ldr	r6, [r3, #68]	@ 0x44
 8002080:	022d      	lsls	r5, r5, #8
 8002082:	4335      	orrs	r5, r6
 8002084:	645d      	str	r5, [r3, #68]	@ 0x44
  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8002086:	2534      	movs	r5, #52	@ 0x34
  LL_TIM_OC_SetCompareCH4( TIMx, ( uint32_t )(pHandle->Half_PWMPeriod + 1) );
 8002088:	9403      	str	r4, [sp, #12]
  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800208a:	5d55      	ldrb	r5, [r2, r5]
 800208c:	2d02      	cmp	r5, #2
 800208e:	d100      	bne.n	8002092 <R1_SwitchOnPWM+0x7a>
 8002090:	e0d2      	b.n	8002238 <R1_SwitchOnPWM+0x220>
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8002092:	681d      	ldr	r5, [r3, #0]
 8002094:	2610      	movs	r6, #16
 8002096:	9c01      	ldr	r4, [sp, #4]
  if (LL_TIM_COUNTERDIRECTION_UP == LL_TIM_GetDirection(TIMx))
 8002098:	06ed      	lsls	r5, r5, #27
 800209a:	d500      	bpl.n	800209e <R1_SwitchOnPWM+0x86>
 800209c:	e0c4      	b.n	8002228 <R1_SwitchOnPWM+0x210>
 800209e:	681d      	ldr	r5, [r3, #0]
    while (LL_TIM_COUNTERDIRECTION_UP == LL_TIM_GetDirection(TIMx))
 80020a0:	422e      	tst	r6, r5
 80020a2:	d0fc      	beq.n	800209e <R1_SwitchOnPWM+0x86>
    /* Nothing to do */
  }
  else
  {
    /* Clear TC bits with bits position depending on parameter "Channel".      */
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 80020a4:	69d5      	ldr	r5, [r2, #28]
 80020a6:	9401      	str	r4, [sp, #4]
 80020a8:	1e6c      	subs	r4, r5, #1
 80020aa:	6995      	ldr	r5, [r2, #24]
 80020ac:	46a4      	mov	ip, r4
 80020ae:	3d01      	subs	r5, #1
  if (NULL == DMAx)
 80020b0:	2900      	cmp	r1, #0
 80020b2:	d011      	beq.n	80020d8 <R1_SwitchOnPWM+0xc0>
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 80020b4:	2702      	movs	r7, #2
 80020b6:	003e      	movs	r6, r7
 80020b8:	00ac      	lsls	r4, r5, #2
 80020ba:	40a6      	lsls	r6, r4
 80020bc:	46a0      	mov	r8, r4
 80020be:	604e      	str	r6, [r1, #4]
    /* Nothing to do */
  }
  else
  {
    /* Clear HT bits with bits position depending on parameter "Channel".      */
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CHTIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 80020c0:	2404      	movs	r4, #4
 80020c2:	4646      	mov	r6, r8
 80020c4:	46a1      	mov	r9, r4
 80020c6:	40b4      	lsls	r4, r6
 80020c8:	604c      	str	r4, [r1, #4]
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 80020ca:	4664      	mov	r4, ip
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CHTIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 80020cc:	464e      	mov	r6, r9
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 80020ce:	00a4      	lsls	r4, r4, #2
 80020d0:	40a7      	lsls	r7, r4
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CHTIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 80020d2:	40a6      	lsls	r6, r4
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 80020d4:	604f      	str	r7, [r1, #4]
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CHTIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 80020d6:	604e      	str	r6, [r1, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80020d8:	2602      	movs	r6, #2
  pHandle->TCCnt = 0;
 80020da:	2400      	movs	r4, #0
 80020dc:	4f65      	ldr	r7, [pc, #404]	@ (8002274 <R1_SwitchOnPWM+0x25c>)
 80020de:	4276      	negs	r6, r6
 80020e0:	5d7d      	ldrb	r5, [r7, r5]
 80020e2:	611e      	str	r6, [r3, #16]
 80020e4:	36b0      	adds	r6, #176	@ 0xb0
 80020e6:	5584      	strb	r4, [r0, r6]
 80020e8:	186d      	adds	r5, r5, r1
  pHandle->TCDoneFlag = false;
 80020ea:	3606      	adds	r6, #6
 80020ec:	5584      	strb	r4, [r0, r6]
 80020ee:	686e      	ldr	r6, [r5, #4]
  pHandle->TCCnt = 0;
 80020f0:	46a1      	mov	r9, r4
 80020f2:	0c36      	lsrs	r6, r6, #16
 80020f4:	3406      	adds	r4, #6
 80020f6:	0436      	lsls	r6, r6, #16
 80020f8:	4326      	orrs	r6, r4
 80020fa:	606e      	str	r6, [r5, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80020fc:	2601      	movs	r6, #1
 80020fe:	682c      	ldr	r4, [r5, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8002100:	9702      	str	r7, [sp, #8]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8002102:	4334      	orrs	r4, r6
 8002104:	602c      	str	r4, [r5, #0]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableDMAReq_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->DIER, TIM_DIER_UDE);
 8002106:	68dc      	ldr	r4, [r3, #12]
 8002108:	46a2      	mov	sl, r4
 800210a:	2480      	movs	r4, #128	@ 0x80
 800210c:	0064      	lsls	r4, r4, #1
 800210e:	46a0      	mov	r8, r4
 8002110:	4654      	mov	r4, sl
 8002112:	4647      	mov	r7, r8
 8002114:	433c      	orrs	r4, r7
 8002116:	60dc      	str	r4, [r3, #12]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableDMAReq_CC4(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->DIER, TIM_DIER_CC4DE);
 8002118:	68dc      	ldr	r4, [r3, #12]
 800211a:	46a2      	mov	sl, r4
 800211c:	2480      	movs	r4, #128	@ 0x80
 800211e:	0164      	lsls	r4, r4, #5
 8002120:	46a0      	mov	r8, r4
 8002122:	4654      	mov	r4, sl
 8002124:	4647      	mov	r7, r8
 8002126:	433c      	orrs	r4, r7
 8002128:	60dc      	str	r4, [r3, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 800212a:	4664      	mov	r4, ip
 800212c:	9f02      	ldr	r7, [sp, #8]
 800212e:	5d3c      	ldrb	r4, [r7, r4]
 8002130:	46a0      	mov	r8, r4
 8002132:	4488      	add	r8, r1
 8002134:	4644      	mov	r4, r8
 8002136:	6864      	ldr	r4, [r4, #4]
 8002138:	0c24      	lsrs	r4, r4, #16
 800213a:	0424      	lsls	r4, r4, #16
 800213c:	46a4      	mov	ip, r4
 800213e:	2403      	movs	r4, #3
 8002140:	46a2      	mov	sl, r4
 8002142:	4664      	mov	r4, ip
 8002144:	4657      	mov	r7, sl
 8002146:	433c      	orrs	r4, r7
 8002148:	46a4      	mov	ip, r4
 800214a:	4644      	mov	r4, r8
 800214c:	4667      	mov	r7, ip
 800214e:	6067      	str	r7, [r4, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8002150:	6824      	ldr	r4, [r4, #0]
 8002152:	4334      	orrs	r4, r6
 8002154:	46a4      	mov	ip, r4
 8002156:	4644      	mov	r4, r8
 8002158:	4667      	mov	r7, ip
 800215a:	6027      	str	r7, [r4, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800215c:	9c03      	ldr	r4, [sp, #12]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800215e:	9f02      	ldr	r7, [sp, #8]
 8002160:	641c      	str	r4, [r3, #64]	@ 0x40
 8002162:	6a54      	ldr	r4, [r2, #36]	@ 0x24
 8002164:	46a4      	mov	ip, r4
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8002166:	2402      	movs	r4, #2
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8002168:	4467      	add	r7, ip
 800216a:	3f01      	subs	r7, #1
 800216c:	783f      	ldrb	r7, [r7, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 800216e:	46a4      	mov	ip, r4
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8002170:	1879      	adds	r1, r7, r1
 8002172:	680f      	ldr	r7, [r1, #0]
 8002174:	43b7      	bics	r7, r6
 8002176:	600f      	str	r7, [r1, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8002178:	684f      	ldr	r7, [r1, #4]
 800217a:	0c3f      	lsrs	r7, r7, #16
 800217c:	043f      	lsls	r7, r7, #16
 800217e:	4327      	orrs	r7, r4
 8002180:	604f      	str	r7, [r1, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8002182:	680f      	ldr	r7, [r1, #0]
  LL_ADC_REG_SetSequencerChannels ( ADCx, __LL_ADC_DECIMAL_NB_TO_CHANNEL ( pHandle->pParams_str->IChannel ));
 8002184:	0034      	movs	r4, r6
 8002186:	4337      	orrs	r7, r6
 8002188:	600f      	str	r7, [r1, #0]
 800218a:	2735      	movs	r7, #53	@ 0x35
 800218c:	5dd7      	ldrb	r7, [r2, r7]
 800218e:	40bc      	lsls	r4, r7
 8002190:	0367      	lsls	r7, r4, #13
 8002192:	465c      	mov	r4, fp
 8002194:	0b7f      	lsrs	r7, r7, #13
 8002196:	62a7      	str	r7, [r4, #40]	@ 0x28
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8002198:	4f37      	ldr	r7, [pc, #220]	@ (8002278 <R1_SwitchOnPWM+0x260>)
 800219a:	697c      	ldr	r4, [r7, #20]
 800219c:	46a0      	mov	r8, r4
  LL_ADC_SetSamplingTimeCommonChannels ( ADC1, pHandle->pParams_str->ISamplingTime );
 800219e:	2436      	movs	r4, #54	@ 0x36
 80021a0:	5d14      	ldrb	r4, [r2, r4]
 80021a2:	9402      	str	r4, [sp, #8]
 80021a4:	2407      	movs	r4, #7
 80021a6:	46a3      	mov	fp, r4
 80021a8:	4644      	mov	r4, r8
 80021aa:	465a      	mov	r2, fp
 80021ac:	4394      	bics	r4, r2
 80021ae:	0022      	movs	r2, r4
 80021b0:	9c02      	ldr	r4, [sp, #8]
 80021b2:	4314      	orrs	r4, r2
 80021b4:	617c      	str	r4, [r7, #20]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 80021b6:	4654      	mov	r4, sl
 80021b8:	68fa      	ldr	r2, [r7, #12]
 80021ba:	43a2      	bics	r2, r4
 80021bc:	4332      	orrs	r2, r6
 80021be:	60fa      	str	r2, [r7, #12]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 80021c0:	68fa      	ldr	r2, [r7, #12]
 80021c2:	4c2e      	ldr	r4, [pc, #184]	@ (800227c <R1_SwitchOnPWM+0x264>)
 80021c4:	4014      	ands	r4, r2
 80021c6:	2288      	movs	r2, #136	@ 0x88
 80021c8:	00d2      	lsls	r2, r2, #3
 80021ca:	4322      	orrs	r2, r4
 80021cc:	60fa      	str	r2, [r7, #12]
  MODIFY_REG(ADCx->CR,
 80021ce:	68ba      	ldr	r2, [r7, #8]
 80021d0:	4c2b      	ldr	r4, [pc, #172]	@ (8002280 <R1_SwitchOnPWM+0x268>)
 80021d2:	4022      	ands	r2, r4
 80021d4:	2404      	movs	r4, #4
 80021d6:	4322      	orrs	r2, r4
 80021d8:	60ba      	str	r2, [r7, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80021da:	2770      	movs	r7, #112	@ 0x70
 80021dc:	685a      	ldr	r2, [r3, #4]
  pHandle->FOCDurationFlag = false;
 80021de:	464c      	mov	r4, r9
 80021e0:	433a      	orrs	r2, r7
 80021e2:	605a      	str	r2, [r3, #4]
 80021e4:	22b3      	movs	r2, #179	@ 0xb3
 80021e6:	5484      	strb	r4, [r0, r2]
  pHandle->ADCRegularLocked=true;
 80021e8:	3202      	adds	r2, #2
 80021ea:	5486      	strb	r6, [r0, r2]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 80021ec:	4660      	mov	r0, ip
 80021ee:	682a      	ldr	r2, [r5, #0]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80021f0:	3e03      	subs	r6, #3
 80021f2:	4302      	orrs	r2, r0
 80021f4:	602a      	str	r2, [r5, #0]
 80021f6:	680a      	ldr	r2, [r1, #0]
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 80021f8:	9c01      	ldr	r4, [sp, #4]
 80021fa:	4302      	orrs	r2, r0
 80021fc:	600a      	str	r2, [r1, #0]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80021fe:	2101      	movs	r1, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002200:	611e      	str	r6, [r3, #16]
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8002202:	300e      	adds	r0, #14
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8002204:	691a      	ldr	r2, [r3, #16]
 8002206:	4211      	tst	r1, r2
 8002208:	d0fc      	beq.n	8002204 <R1_SwitchOnPWM+0x1ec>
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 800220a:	681a      	ldr	r2, [r3, #0]
  while (( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == RESET ) || (LL_TIM_GetDirection(TIMx) == LL_TIM_COUNTERDIRECTION_DOWN))
 800220c:	4210      	tst	r0, r2
 800220e:	d1f9      	bne.n	8002204 <R1_SwitchOnPWM+0x1ec>
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8002210:	481c      	ldr	r0, [pc, #112]	@ (8002284 <R1_SwitchOnPWM+0x26c>)
 8002212:	68c2      	ldr	r2, [r0, #12]
 8002214:	430a      	orrs	r2, r1
 8002216:	60c2      	str	r2, [r0, #12]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002218:	641c      	str	r4, [r3, #64]	@ 0x40
}
 800221a:	b005      	add	sp, #20
 800221c:	bcf0      	pop	{r4, r5, r6, r7}
 800221e:	46bb      	mov	fp, r7
 8002220:	46b2      	mov	sl, r6
 8002222:	46a9      	mov	r9, r5
 8002224:	46a0      	mov	r8, r4
 8002226:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8002228:	681d      	ldr	r5, [r3, #0]
    while (LL_TIM_COUNTERDIRECTION_DOWN == LL_TIM_GetDirection(TIMx))
 800222a:	422e      	tst	r6, r5
 800222c:	d1fc      	bne.n	8002228 <R1_SwitchOnPWM+0x210>
 800222e:	2610      	movs	r6, #16
 8002230:	681d      	ldr	r5, [r3, #0]
    while (LL_TIM_COUNTERDIRECTION_UP == LL_TIM_GetDirection(TIMx))
 8002232:	422e      	tst	r6, r5
 8002234:	d0fc      	beq.n	8002230 <R1_SwitchOnPWM+0x218>
 8002236:	e735      	b.n	80020a4 <R1_SwitchOnPWM+0x8c>
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8002238:	68d5      	ldr	r5, [r2, #12]
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 800223a:	6a1c      	ldr	r4, [r3, #32]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800223c:	46a8      	mov	r8, r5
 800223e:	8d15      	ldrh	r5, [r2, #40]	@ 0x28
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8002240:	6917      	ldr	r7, [r2, #16]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8002242:	46a9      	mov	r9, r5
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8002244:	8d55      	ldrh	r5, [r2, #42]	@ 0x2a
 8002246:	46ac      	mov	ip, r5
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8002248:	6955      	ldr	r5, [r2, #20]
 800224a:	9502      	str	r5, [sp, #8]
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 800224c:	4d0e      	ldr	r5, [pc, #56]	@ (8002288 <R1_SwitchOnPWM+0x270>)
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800224e:	8d96      	ldrh	r6, [r2, #44]	@ 0x2c
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 8002250:	422c      	tst	r4, r5
 8002252:	d007      	beq.n	8002264 <R1_SwitchOnPWM+0x24c>
 8002254:	4644      	mov	r4, r8
 8002256:	464d      	mov	r5, r9
 8002258:	61a5      	str	r5, [r4, #24]
 800225a:	4664      	mov	r4, ip
 800225c:	61bc      	str	r4, [r7, #24]
 800225e:	9c02      	ldr	r4, [sp, #8]
 8002260:	61a6      	str	r6, [r4, #24]
}
 8002262:	e716      	b.n	8002092 <R1_SwitchOnPWM+0x7a>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8002264:	4644      	mov	r4, r8
 8002266:	464d      	mov	r5, r9
 8002268:	62a5      	str	r5, [r4, #40]	@ 0x28
 800226a:	4664      	mov	r4, ip
 800226c:	62bc      	str	r4, [r7, #40]	@ 0x28
 800226e:	9c02      	ldr	r4, [sp, #8]
 8002270:	62a6      	str	r6, [r4, #40]	@ 0x28
}
 8002272:	e70e      	b.n	8002092 <R1_SwitchOnPWM+0x7a>
 8002274:	08004dd4 	.word	0x08004dd4
 8002278:	40012400 	.word	0x40012400
 800227c:	fffff23f 	.word	0xfffff23f
 8002280:	7fffffe8 	.word	0x7fffffe8
 8002284:	40012c00 	.word	0x40012c00
 8002288:	00000555 	.word	0x00000555

0800228c <R1_SwitchOffPWM>:
{
 800228c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800228e:	4657      	mov	r7, sl
 8002290:	464e      	mov	r6, r9
 8002292:	4645      	mov	r5, r8
 8002294:	46de      	mov	lr, fp
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1) - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8002296:	22a0      	movs	r2, #160	@ 0xa0
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8002298:	23b8      	movs	r3, #184	@ 0xb8
{
 800229a:	b5e0      	push	{r5, r6, r7, lr}
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1) - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 800229c:	5a82      	ldrh	r2, [r0, r2]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800229e:	58c4      	ldr	r4, [r0, r3]
{
 80022a0:	b083      	sub	sp, #12
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1) - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80022a2:	9200      	str	r2, [sp, #0]
 80022a4:	8e25      	ldrh	r5, [r4, #48]	@ 0x30
 80022a6:	0856      	lsrs	r6, r2, #1
 80022a8:	8e62      	ldrh	r2, [r4, #50]	@ 0x32
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80022aa:	6863      	ldr	r3, [r4, #4]
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1) - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80022ac:	1952      	adds	r2, r2, r5
 80022ae:	b292      	uxth	r2, r2
 80022b0:	1ab5      	subs	r5, r6, r2
 80022b2:	b2ad      	uxth	r5, r5
 80022b4:	46ac      	mov	ip, r5
 80022b6:	25a2      	movs	r5, #162	@ 0xa2
 80022b8:	4667      	mov	r7, ip
  DMA_TypeDef * DMAx = pHandle->pParams_str->DMAx;
 80022ba:	68a1      	ldr	r1, [r4, #8]
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1) - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80022bc:	5347      	strh	r7, [r0, r5]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 80022be:	2701      	movs	r7, #1
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1) + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80022c0:	18b6      	adds	r6, r6, r2
 80022c2:	b2b6      	uxth	r6, r6
 80022c4:	3502      	adds	r5, #2
 80022c6:	5346      	strh	r6, [r0, r5]
 80022c8:	68dd      	ldr	r5, [r3, #12]
 80022ca:	9601      	str	r6, [sp, #4]
 80022cc:	43bd      	bics	r5, r7
 80022ce:	60dd      	str	r5, [r3, #12]
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 80022d0:	681d      	ldr	r5, [r3, #0]
  if (LL_TIM_COUNTERDIRECTION_UP == LL_TIM_GetDirection(TIMx))
 80022d2:	06ed      	lsls	r5, r5, #27
 80022d4:	d400      	bmi.n	80022d8 <R1_SwitchOffPWM+0x4c>
 80022d6:	e0ba      	b.n	800244e <R1_SwitchOffPWM+0x1c2>
 80022d8:	2510      	movs	r5, #16
 80022da:	46a8      	mov	r8, r5
    while (LL_TIM_COUNTERDIRECTION_DOWN == LL_TIM_GetDirection(TIMx))
 80022dc:	4647      	mov	r7, r8
 80022de:	681d      	ldr	r5, [r3, #0]
 80022e0:	422f      	tst	r7, r5
 80022e2:	d1fb      	bne.n	80022dc <R1_SwitchOffPWM+0x50>
 80022e4:	2510      	movs	r5, #16
 80022e6:	46a8      	mov	r8, r5
    while (LL_TIM_COUNTERDIRECTION_UP == LL_TIM_GetDirection(TIMx))
 80022e8:	4647      	mov	r7, r8
 80022ea:	681d      	ldr	r5, [r3, #0]
 80022ec:	422f      	tst	r7, r5
 80022ee:	d0fb      	beq.n	80022e8 <R1_SwitchOffPWM+0x5c>
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 80022f0:	4d65      	ldr	r5, [pc, #404]	@ (8002488 <R1_SwitchOffPWM+0x1fc>)
 80022f2:	46a8      	mov	r8, r5
 80022f4:	69a5      	ldr	r5, [r4, #24]
 80022f6:	4445      	add	r5, r8
 80022f8:	3d01      	subs	r5, #1
 80022fa:	782d      	ldrb	r5, [r5, #0]
 80022fc:	186d      	adds	r5, r5, r1
 80022fe:	682f      	ldr	r7, [r5, #0]
 8002300:	46b9      	mov	r9, r7
 8002302:	2702      	movs	r7, #2
 8002304:	46ba      	mov	sl, r7
 8002306:	464f      	mov	r7, r9
 8002308:	4656      	mov	r6, sl
 800230a:	43b7      	bics	r7, r6
 800230c:	602f      	str	r7, [r5, #0]
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_HTIE);
 800230e:	682e      	ldr	r6, [r5, #0]
 8002310:	46b1      	mov	r9, r6
 8002312:	2604      	movs	r6, #4
 8002314:	464f      	mov	r7, r9
 8002316:	43b7      	bics	r7, r6
  pHandle->_Super.TurnOnLowSidesAction = false;
 8002318:	266b      	movs	r6, #107	@ 0x6b
 800231a:	46b1      	mov	r9, r6
 800231c:	2600      	movs	r6, #0
 800231e:	46b2      	mov	sl, r6
 8002320:	602f      	str	r7, [r5, #0]
 8002322:	464e      	mov	r6, r9
 8002324:	4657      	mov	r7, sl
 8002326:	5587      	strb	r7, [r0, r6]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8002328:	6c5e      	ldr	r6, [r3, #68]	@ 0x44
 800232a:	46b1      	mov	r9, r6
 800232c:	464f      	mov	r7, r9
 800232e:	4e57      	ldr	r6, [pc, #348]	@ (800248c <R1_SwitchOffPWM+0x200>)
 8002330:	4037      	ands	r7, r6
  if ( pHandle->BrakeActionLock == true )
 8002332:	26b2      	movs	r6, #178	@ 0xb2
 8002334:	645f      	str	r7, [r3, #68]	@ 0x44
 8002336:	5d86      	ldrb	r6, [r0, r6]
 8002338:	2e00      	cmp	r6, #0
 800233a:	d104      	bne.n	8002346 <R1_SwitchOffPWM+0xba>
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800233c:	3634      	adds	r6, #52	@ 0x34
 800233e:	5da6      	ldrb	r6, [r4, r6]
 8002340:	2e02      	cmp	r6, #2
 8002342:	d100      	bne.n	8002346 <R1_SwitchOffPWM+0xba>
 8002344:	e08a      	b.n	800245c <R1_SwitchOffPWM+0x1d0>
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8002346:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8002348:	69e4      	ldr	r4, [r4, #28]
 800234a:	46b1      	mov	r9, r6
 800234c:	2601      	movs	r6, #1
 800234e:	4276      	negs	r6, r6
 8002350:	46b2      	mov	sl, r6
 8002352:	44c1      	add	r9, r8
 8002354:	44d1      	add	r9, sl
 8002356:	464e      	mov	r6, r9
 8002358:	7836      	ldrb	r6, [r6, #0]
 800235a:	4444      	add	r4, r8
 800235c:	46b2      	mov	sl, r6
 800235e:	448a      	add	sl, r1
 8002360:	4656      	mov	r6, sl
 8002362:	6836      	ldr	r6, [r6, #0]
 8002364:	3c01      	subs	r4, #1
 8002366:	46b3      	mov	fp, r6
 8002368:	2601      	movs	r6, #1
 800236a:	465f      	mov	r7, fp
 800236c:	46b1      	mov	r9, r6
 800236e:	43b7      	bics	r7, r6
 8002370:	4656      	mov	r6, sl
 8002372:	6037      	str	r7, [r6, #0]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF1);
 8002374:	464e      	mov	r6, r9
 8002376:	604e      	str	r6, [r1, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 8002378:	3601      	adds	r6, #1
 800237a:	604e      	str	r6, [r1, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF1);
 800237c:	3602      	adds	r6, #2
 800237e:	604e      	str	r6, [r1, #4]
 8002380:	46b2      	mov	sl, r6
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8002382:	682e      	ldr	r6, [r5, #0]
 8002384:	7824      	ldrb	r4, [r4, #0]
 8002386:	0037      	movs	r7, r6
 8002388:	464e      	mov	r6, r9
 800238a:	43b7      	bics	r7, r6
 800238c:	602f      	str	r7, [r5, #0]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UDE);
 800238e:	68dd      	ldr	r5, [r3, #12]
 8002390:	4e3f      	ldr	r6, [pc, #252]	@ (8002490 <R1_SwitchOffPWM+0x204>)
 8002392:	1909      	adds	r1, r1, r4
 8002394:	4035      	ands	r5, r6
 8002396:	60dd      	str	r5, [r3, #12]
 8002398:	464d      	mov	r5, r9
 800239a:	680c      	ldr	r4, [r1, #0]
  LL_TIM_OC_SetCompareCH4( TIMx, ( uint32_t )(pHandle->Half_PWMPeriod + 1) );
 800239c:	9f00      	ldr	r7, [sp, #0]
 800239e:	43ac      	bics	r4, r5
 80023a0:	600c      	str	r4, [r1, #0]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableDMAReq_CC4(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->DIER, TIM_DIER_CC4DE);
 80023a2:	68d9      	ldr	r1, [r3, #12]
 80023a4:	4c3b      	ldr	r4, [pc, #236]	@ (8002494 <R1_SwitchOffPWM+0x208>)
 80023a6:	3701      	adds	r7, #1
 80023a8:	4021      	ands	r1, r4
 80023aa:	60d9      	str	r1, [r3, #12]
  pHandle->DmaBuffCCR_ADCTrig[0] = pHandle->CntSmp2;
 80023ac:	2196      	movs	r1, #150	@ 0x96
 80023ae:	9c01      	ldr	r4, [sp, #4]
 80023b0:	5244      	strh	r4, [r0, r1]
  pHandle->DmaBuffCCR_ADCTrig[2] = pHandle->CntSmp1;
 80023b2:	4664      	mov	r4, ip
 80023b4:	3104      	adds	r1, #4
 80023b6:	5244      	strh	r4, [r0, r1]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80023b8:	2470      	movs	r4, #112	@ 0x70
  WRITE_REG(TIMx->CCR4, CompareValue);
 80023ba:	641f      	str	r7, [r3, #64]	@ 0x40
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80023bc:	6859      	ldr	r1, [r3, #4]
 80023be:	43a1      	bics	r1, r4
  if (LL_ADC_REG_IsConversionOngoing (ADC1))
 80023c0:	4654      	mov	r4, sl
 80023c2:	6059      	str	r1, [r3, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 80023c4:	4934      	ldr	r1, [pc, #208]	@ (8002498 <R1_SwitchOffPWM+0x20c>)
 80023c6:	688b      	ldr	r3, [r1, #8]
 80023c8:	421c      	tst	r4, r3
 80023ca:	d009      	beq.n	80023e0 <R1_SwitchOffPWM+0x154>
  MODIFY_REG(ADCx->CR,
 80023cc:	688b      	ldr	r3, [r1, #8]
 80023ce:	4c33      	ldr	r4, [pc, #204]	@ (800249c <R1_SwitchOffPWM+0x210>)
 80023d0:	4023      	ands	r3, r4
 80023d2:	2410      	movs	r4, #16
 80023d4:	4323      	orrs	r3, r4
 80023d6:	608b      	str	r3, [r1, #8]
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 80023d8:	3c0c      	subs	r4, #12
 80023da:	688b      	ldr	r3, [r1, #8]
    while ( LL_ADC_REG_IsConversionOngoing(ADC1))
 80023dc:	421c      	tst	r4, r3
 80023de:	d1fc      	bne.n	80023da <R1_SwitchOffPWM+0x14e>
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 80023e0:	492d      	ldr	r1, [pc, #180]	@ (8002498 <R1_SwitchOffPWM+0x20c>)
 80023e2:	4c2f      	ldr	r4, [pc, #188]	@ (80024a0 <R1_SwitchOffPWM+0x214>)
 80023e4:	68cb      	ldr	r3, [r1, #12]
  pHandle->ADCRegularLocked=false;
 80023e6:	2600      	movs	r6, #0
 80023e8:	4023      	ands	r3, r4
 80023ea:	60cb      	str	r3, [r1, #12]
 80023ec:	23b5      	movs	r3, #181	@ 0xb5
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1) - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80023ee:	27a2      	movs	r7, #162	@ 0xa2
  pHandle->ADCRegularLocked=false;
 80023f0:	54c6      	strb	r6, [r0, r3]
  pHandle->iflag = 0;
 80023f2:	3b08      	subs	r3, #8
 80023f4:	54c6      	strb	r6, [r0, r3]
  pHandle->Half_PWMPeriod = (pHandle->_Super.PWMperiod/2u);
 80023f6:	3b4d      	subs	r3, #77	@ 0x4d
 80023f8:	5ac1      	ldrh	r1, [r0, r3]
 80023fa:	3340      	adds	r3, #64	@ 0x40
 80023fc:	084d      	lsrs	r5, r1, #1
 80023fe:	52c5      	strh	r5, [r0, r3]
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1) - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8002400:	088b      	lsrs	r3, r1, #2
 8002402:	1a9c      	subs	r4, r3, r2
 8002404:	b2a4      	uxth	r4, r4
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1) + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8002406:	18d2      	adds	r2, r2, r3
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1) - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8002408:	53c4      	strh	r4, [r0, r7]
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1) + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 800240a:	b292      	uxth	r2, r2
 800240c:	3702      	adds	r7, #2
 800240e:	53c2      	strh	r2, [r0, r7]
  pHandle->_Super.CntPhB = pHandle->Half_PWMPeriod >> 1;
 8002410:	3f64      	subs	r7, #100	@ 0x64
  pHandle->_Super.CntPhA = pHandle->Half_PWMPeriod >> 1;
 8002412:	87c3      	strh	r3, [r0, #62]	@ 0x3e
  pHandle->_Super.CntPhB = pHandle->Half_PWMPeriod >> 1;
 8002414:	0419      	lsls	r1, r3, #16
 8002416:	53c3      	strh	r3, [r0, r7]
  pHandle->_Super.CntPhC = pHandle->Half_PWMPeriod >> 1;
 8002418:	3702      	adds	r7, #2
 800241a:	53c3      	strh	r3, [r0, r7]
  pHandle->DmaBuffCCR_latch[5] = pHandle->_Super.CntPhC;       // CCR3 value overwritten during second half PWM period
 800241c:	4319      	orrs	r1, r3
  pHandle->DmaBuffCCR[0]       = pHandle->_Super.CntPhA;       // CCR1 value overwritten during first half PWM period
 800241e:	2380      	movs	r3, #128	@ 0x80
 8002420:	6701      	str	r1, [r0, #112]	@ 0x70
 8002422:	6741      	str	r1, [r0, #116]	@ 0x74
 8002424:	6781      	str	r1, [r0, #120]	@ 0x78
 8002426:	67c1      	str	r1, [r0, #124]	@ 0x7c
 8002428:	50c1      	str	r1, [r0, r3]
 800242a:	3304      	adds	r3, #4
 800242c:	50c1      	str	r1, [r0, r3]
  pHandle->DmaBuffCCR_ADCTrig[0] = pHandle->CntSmp2;
 800242e:	3312      	adds	r3, #18
 8002430:	52c2      	strh	r2, [r0, r3]
  pHandle->DmaBuffCCR_ADCTrig[1] = pHandle->Half_PWMPeriod-1u;
 8002432:	2298      	movs	r2, #152	@ 0x98
 8002434:	3d01      	subs	r5, #1
  pHandle->DmaBuffCCR_ADCTrig[2] = pHandle->CntSmp1;
 8002436:	3304      	adds	r3, #4
  pHandle->DmaBuffCCR_ADCTrig[1] = pHandle->Half_PWMPeriod-1u;
 8002438:	5285      	strh	r5, [r0, r2]
  pHandle->DmaBuffCCR_ADCTrig[2] = pHandle->CntSmp1;
 800243a:	52c4      	strh	r4, [r0, r3]
  pHandle->BrakeActionLock = false;
 800243c:	3318      	adds	r3, #24
 800243e:	52c6      	strh	r6, [r0, r3]
}
 8002440:	b003      	add	sp, #12
 8002442:	bcf0      	pop	{r4, r5, r6, r7}
 8002444:	46bb      	mov	fp, r7
 8002446:	46b2      	mov	sl, r6
 8002448:	46a9      	mov	r9, r5
 800244a:	46a0      	mov	r8, r4
 800244c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 800244e:	2510      	movs	r5, #16
 8002450:	46a8      	mov	r8, r5
    while (LL_TIM_COUNTERDIRECTION_UP == LL_TIM_GetDirection(TIMx))
 8002452:	4647      	mov	r7, r8
 8002454:	681d      	ldr	r5, [r3, #0]
 8002456:	422f      	tst	r7, r5
 8002458:	d0fb      	beq.n	8002452 <R1_SwitchOffPWM+0x1c6>
 800245a:	e749      	b.n	80022f0 <R1_SwitchOffPWM+0x64>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800245c:	68e6      	ldr	r6, [r4, #12]
 800245e:	46b1      	mov	r9, r6
 8002460:	8d26      	ldrh	r6, [r4, #40]	@ 0x28
 8002462:	46b2      	mov	sl, r6
  WRITE_REG(GPIOx->BRR, PinMask);
 8002464:	464e      	mov	r6, r9
 8002466:	4657      	mov	r7, sl
 8002468:	62b7      	str	r7, [r6, #40]	@ 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800246a:	6926      	ldr	r6, [r4, #16]
 800246c:	46b1      	mov	r9, r6
 800246e:	8d66      	ldrh	r6, [r4, #42]	@ 0x2a
 8002470:	46b2      	mov	sl, r6
 8002472:	464e      	mov	r6, r9
 8002474:	4657      	mov	r7, sl
 8002476:	62b7      	str	r7, [r6, #40]	@ 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8002478:	6966      	ldr	r6, [r4, #20]
 800247a:	46b1      	mov	r9, r6
 800247c:	8da6      	ldrh	r6, [r4, #44]	@ 0x2c
 800247e:	46b2      	mov	sl, r6
 8002480:	464e      	mov	r6, r9
 8002482:	4657      	mov	r7, sl
 8002484:	62b7      	str	r7, [r6, #40]	@ 0x28
}
 8002486:	e75e      	b.n	8002346 <R1_SwitchOffPWM+0xba>
 8002488:	08004dd4 	.word	0x08004dd4
 800248c:	ffff7fff 	.word	0xffff7fff
 8002490:	fffffeff 	.word	0xfffffeff
 8002494:	ffffefff 	.word	0xffffefff
 8002498:	40012400 	.word	0x40012400
 800249c:	7fffffe8 	.word	0x7fffffe8
 80024a0:	fffff23f 	.word	0xfffff23f

080024a4 <R1_CurrentReadingCalibration>:
{
 80024a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024a6:	4647      	mov	r7, r8
 80024a8:	46ce      	mov	lr, r9
 80024aa:	0004      	movs	r4, r0
  if (false == pHandle->_Super.offsetCalibStatus)
 80024ac:	236e      	movs	r3, #110	@ 0x6e
{
 80024ae:	b580      	push	{r7, lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80024b0:	27b8      	movs	r7, #184	@ 0xb8
  if (false == pHandle->_Super.offsetCalibStatus)
 80024b2:	5ce6      	ldrb	r6, [r4, r3]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80024b4:	59c0      	ldr	r0, [r0, r7]
  if (false == pHandle->_Super.offsetCalibStatus)
 80024b6:	4698      	mov	r8, r3
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80024b8:	6845      	ldr	r5, [r0, #4]
  if (false == pHandle->_Super.offsetCalibStatus)
 80024ba:	2e00      	cmp	r6, #0
 80024bc:	d034      	beq.n	8002528 <R1_CurrentReadingCalibration+0x84>
  SET_BIT(TIMx->CCER, Channels);
 80024be:	6a2a      	ldr	r2, [r5, #32]
 80024c0:	4b2e      	ldr	r3, [pc, #184]	@ (800257c <R1_CurrentReadingCalibration+0xd8>)
  pHandle->iflag = 0;
 80024c2:	2600      	movs	r6, #0
 80024c4:	4313      	orrs	r3, r2
 80024c6:	622b      	str	r3, [r5, #32]
 80024c8:	23ad      	movs	r3, #173	@ 0xad
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1) - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80024ca:	27a2      	movs	r7, #162	@ 0xa2
  pHandle->iflag = 0;
 80024cc:	54e6      	strb	r6, [r4, r3]
  pHandle->Half_PWMPeriod = (pHandle->_Super.PWMperiod/2u);
 80024ce:	3b4d      	subs	r3, #77	@ 0x4d
 80024d0:	5ae2      	ldrh	r2, [r4, r3]
 80024d2:	3340      	adds	r3, #64	@ 0x40
 80024d4:	0855      	lsrs	r5, r2, #1
 80024d6:	52e5      	strh	r5, [r4, r3]
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1) - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80024d8:	8e43      	ldrh	r3, [r0, #50]	@ 0x32
 80024da:	8e00      	ldrh	r0, [r0, #48]	@ 0x30
 80024dc:	0892      	lsrs	r2, r2, #2
 80024de:	181b      	adds	r3, r3, r0
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	1ad0      	subs	r0, r2, r3
 80024e4:	b280      	uxth	r0, r0
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1) + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80024e6:	18d3      	adds	r3, r2, r3
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1) - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80024e8:	53e0      	strh	r0, [r4, r7]
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1) + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	3702      	adds	r7, #2
 80024ee:	53e3      	strh	r3, [r4, r7]
  pHandle->_Super.CntPhB = pHandle->Half_PWMPeriod >> 1;
 80024f0:	3f64      	subs	r7, #100	@ 0x64
  pHandle->_Super.CntPhA = pHandle->Half_PWMPeriod >> 1;
 80024f2:	87e2      	strh	r2, [r4, #62]	@ 0x3e
  pHandle->_Super.CntPhB = pHandle->Half_PWMPeriod >> 1;
 80024f4:	0411      	lsls	r1, r2, #16
 80024f6:	53e2      	strh	r2, [r4, r7]
  pHandle->_Super.CntPhC = pHandle->Half_PWMPeriod >> 1;
 80024f8:	3702      	adds	r7, #2
 80024fa:	53e2      	strh	r2, [r4, r7]
  pHandle->DmaBuffCCR_latch[5] = pHandle->_Super.CntPhC;       // CCR3 value overwritten during second half PWM period
 80024fc:	4311      	orrs	r1, r2
  pHandle->DmaBuffCCR[0]       = pHandle->_Super.CntPhA;       // CCR1 value overwritten during first half PWM period
 80024fe:	2280      	movs	r2, #128	@ 0x80
 8002500:	6721      	str	r1, [r4, #112]	@ 0x70
 8002502:	6761      	str	r1, [r4, #116]	@ 0x74
 8002504:	67a1      	str	r1, [r4, #120]	@ 0x78
 8002506:	67e1      	str	r1, [r4, #124]	@ 0x7c
 8002508:	50a1      	str	r1, [r4, r2]
 800250a:	3204      	adds	r2, #4
 800250c:	50a1      	str	r1, [r4, r2]
  pHandle->DmaBuffCCR_ADCTrig[0] = pHandle->CntSmp2;
 800250e:	3212      	adds	r2, #18
 8002510:	52a3      	strh	r3, [r4, r2]
  pHandle->DmaBuffCCR_ADCTrig[2] = pHandle->CntSmp1;
 8002512:	239a      	movs	r3, #154	@ 0x9a
  pHandle->DmaBuffCCR_ADCTrig[1] = pHandle->Half_PWMPeriod-1u;
 8002514:	3d01      	subs	r5, #1
 8002516:	3202      	adds	r2, #2
 8002518:	52a5      	strh	r5, [r4, r2]
  pHandle->DmaBuffCCR_ADCTrig[2] = pHandle->CntSmp1;
 800251a:	52e0      	strh	r0, [r4, r3]
  pHandle->BrakeActionLock = false;
 800251c:	3318      	adds	r3, #24
 800251e:	52e6      	strh	r6, [r4, r3]
}
 8002520:	bcc0      	pop	{r6, r7}
 8002522:	46b9      	mov	r9, r7
 8002524:	46b0      	mov	r8, r6
 8002526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pHandle->PhaseOffset = 0u;
 8002528:	331a      	adds	r3, #26
 800252a:	50e6      	str	r6, [r4, r3]
 800252c:	4699      	mov	r9, r3
    pHandle->Index = 0u;
 800252e:	3324      	adds	r3, #36	@ 0x24
 8002530:	54e6      	strb	r6, [r4, r3]
  CLEAR_BIT(TIMx->CCER, Channels);
 8002532:	6a2b      	ldr	r3, [r5, #32]
 8002534:	4a12      	ldr	r2, [pc, #72]	@ (8002580 <R1_CurrentReadingCalibration+0xdc>)
    R1_SwitchOnPWM( &pHandle->_Super );
 8002536:	0020      	movs	r0, r4
 8002538:	4013      	ands	r3, r2
 800253a:	622b      	str	r3, [r5, #32]
    pHandle->_Super.pFctGetPhaseCurrents = &R1_HFCurrentsCalibration;
 800253c:	4b11      	ldr	r3, [pc, #68]	@ (8002584 <R1_CurrentReadingCalibration+0xe0>)
 800253e:	6023      	str	r3, [r4, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = &R1_SetADCSampPointPolarization;
 8002540:	4b11      	ldr	r3, [pc, #68]	@ (8002588 <R1_CurrentReadingCalibration+0xe4>)
 8002542:	6163      	str	r3, [r4, #20]
    R1_SwitchOnPWM( &pHandle->_Super );
 8002544:	f7ff fd68 	bl	8002018 <R1_SwitchOnPWM>
    			  pHandle->pParams_str->RepetitionCounter,
 8002548:	2337      	movs	r3, #55	@ 0x37
 800254a:	59e2      	ldr	r2, [r4, r7]
    waitForPolarizationEnd( TIMx,
 800254c:	0021      	movs	r1, r4
 800254e:	5cd2      	ldrb	r2, [r2, r3]
 8002550:	0023      	movs	r3, r4
 8002552:	0028      	movs	r0, r5
 8002554:	33ac      	adds	r3, #172	@ 0xac
 8002556:	3144      	adds	r1, #68	@ 0x44
 8002558:	f002 f8ae 	bl	80046b8 <waitForPolarizationEnd>
    R1_SwitchOffPWM( &pHandle->_Super );
 800255c:	0020      	movs	r0, r4
 800255e:	f7ff fe95 	bl	800228c <R1_SwitchOffPWM>
    pHandle->PhaseOffset >>= 4u;
 8002562:	464b      	mov	r3, r9
 8002564:	464a      	mov	r2, r9
 8002566:	58e3      	ldr	r3, [r4, r3]
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1) - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8002568:	59e0      	ldr	r0, [r4, r7]
    pHandle->PhaseOffset >>= 4u;
 800256a:	091b      	lsrs	r3, r3, #4
 800256c:	50a3      	str	r3, [r4, r2]
    pHandle->_Super.offsetCalibStatus = 0;
 800256e:	4643      	mov	r3, r8
 8002570:	54e6      	strb	r6, [r4, r3]
    pHandle->_Super.pFctGetPhaseCurrents = &R1_GetPhaseCurrents;
 8002572:	4b06      	ldr	r3, [pc, #24]	@ (800258c <R1_CurrentReadingCalibration+0xe8>)
 8002574:	6023      	str	r3, [r4, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = &R1_CalcDutyCycles;
 8002576:	4b06      	ldr	r3, [pc, #24]	@ (8002590 <R1_CurrentReadingCalibration+0xec>)
 8002578:	6163      	str	r3, [r4, #20]
 800257a:	e7a0      	b.n	80024be <R1_CurrentReadingCalibration+0x1a>
 800257c:	00000555 	.word	0x00000555
 8002580:	fffffaaa 	.word	0xfffffaaa
 8002584:	080018cd 	.word	0x080018cd
 8002588:	08001909 	.word	0x08001909
 800258c:	08001651 	.word	0x08001651
 8002590:	08001975 	.word	0x08001975

08002594 <R1_BRK_IRQHandler>:
  if ( pHandle->BrakeActionLock == false )
 8002594:	23b2      	movs	r3, #178	@ 0xb2
 8002596:	5cc3      	ldrb	r3, [r0, r3]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d105      	bne.n	80025a8 <R1_BRK_IRQHandler+0x14>
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800259c:	2234      	movs	r2, #52	@ 0x34
 800259e:	33b8      	adds	r3, #184	@ 0xb8
 80025a0:	58c3      	ldr	r3, [r0, r3]
 80025a2:	5c9a      	ldrb	r2, [r3, r2]
 80025a4:	2a02      	cmp	r2, #2
 80025a6:	d004      	beq.n	80025b2 <R1_BRK_IRQHandler+0x1e>
  pHandle->OverCurrentFlag = true;
 80025a8:	23b0      	movs	r3, #176	@ 0xb0
 80025aa:	2201      	movs	r2, #1
 80025ac:	54c2      	strb	r2, [r0, r3]
  return &( pHandle->_Super.Motor );
 80025ae:	3068      	adds	r0, #104	@ 0x68
}
 80025b0:	4770      	bx	lr
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80025b2:	68da      	ldr	r2, [r3, #12]
 80025b4:	8d19      	ldrh	r1, [r3, #40]	@ 0x28
  WRITE_REG(GPIOx->BRR, PinMask);
 80025b6:	6291      	str	r1, [r2, #40]	@ 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80025b8:	8d59      	ldrh	r1, [r3, #42]	@ 0x2a
 80025ba:	691a      	ldr	r2, [r3, #16]
 80025bc:	6291      	str	r1, [r2, #40]	@ 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80025be:	695a      	ldr	r2, [r3, #20]
 80025c0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80025c2:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80025c4:	e7f0      	b.n	80025a8 <R1_BRK_IRQHandler+0x14>
 80025c6:	46c0      	nop			@ (mov r8, r8)

080025c8 <R1_IsOverCurrentOccurred>:
  if ( pHandle->OverVoltageFlag == true )
 80025c8:	22b1      	movs	r2, #177	@ 0xb1
{
 80025ca:	b510      	push	{r4, lr}
  if ( pHandle->OverVoltageFlag == true )
 80025cc:	5c81      	ldrb	r1, [r0, r2]
{
 80025ce:	0003      	movs	r3, r0
  if ( pHandle->OverVoltageFlag == true )
 80025d0:	2900      	cmp	r1, #0
 80025d2:	d00b      	beq.n	80025ec <R1_IsOverCurrentOccurred+0x24>
    pHandle->OverVoltageFlag = false;
 80025d4:	2100      	movs	r1, #0
 80025d6:	2442      	movs	r4, #66	@ 0x42
 80025d8:	5481      	strb	r1, [r0, r2]
    retVal = MC_OVER_VOLT;
 80025da:	2002      	movs	r0, #2
  if ( pHandle->OverCurrentFlag == true )
 80025dc:	22b0      	movs	r2, #176	@ 0xb0
 80025de:	5c99      	ldrb	r1, [r3, r2]
 80025e0:	2900      	cmp	r1, #0
 80025e2:	d002      	beq.n	80025ea <R1_IsOverCurrentOccurred+0x22>
    pHandle->OverCurrentFlag = false;
 80025e4:	2100      	movs	r1, #0
    retVal |= MC_BREAK_IN;
 80025e6:	0020      	movs	r0, r4
    pHandle->OverCurrentFlag = false;
 80025e8:	5499      	strb	r1, [r3, r2]
}
 80025ea:	bd10      	pop	{r4, pc}
 80025ec:	2440      	movs	r4, #64	@ 0x40
  uint16_t retVal = MC_NO_FAULTS;
 80025ee:	2000      	movs	r0, #0
 80025f0:	e7f4      	b.n	80025dc <R1_IsOverCurrentOccurred+0x14>
 80025f2:	46c0      	nop			@ (mov r8, r8)

080025f4 <R1_TIM1_UP_IRQHandler>:
  * @retval none
  */
__weak void * R1_TIM1_UP_IRQHandler( PWMC_R1_Handle_t * pHandle )
{

  if (pHandle->TCDoneFlag ==true)
 80025f4:	22b4      	movs	r2, #180	@ 0xb4
{
 80025f6:	b510      	push	{r4, lr}
  if (pHandle->TCDoneFlag ==true)
 80025f8:	5c83      	ldrb	r3, [r0, r2]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d010      	beq.n	8002620 <R1_TIM1_UP_IRQHandler+0x2c>
  MODIFY_REG(ADCx->CR,
 80025fe:	4909      	ldr	r1, [pc, #36]	@ (8002624 <R1_TIM1_UP_IRQHandler+0x30>)
 8002600:	4c09      	ldr	r4, [pc, #36]	@ (8002628 <R1_TIM1_UP_IRQHandler+0x34>)
 8002602:	688b      	ldr	r3, [r1, #8]
 8002604:	4023      	ands	r3, r4
 8002606:	2404      	movs	r4, #4
 8002608:	4323      	orrs	r3, r4
 800260a:	608b      	str	r3, [r1, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800260c:	4907      	ldr	r1, [pc, #28]	@ (800262c <R1_TIM1_UP_IRQHandler+0x38>)
 800260e:	346c      	adds	r4, #108	@ 0x6c
 8002610:	684b      	ldr	r3, [r1, #4]
 8002612:	4323      	orrs	r3, r4
 8002614:	604b      	str	r3, [r1, #4]
  {
    LL_ADC_REG_StartConversion(ADC1);
    LL_TIM_SetTriggerOutput( TIM1, LL_TIM_TRGO_OC4REF );
    pHandle->FOCDurationFlag = true;
 8002616:	23b3      	movs	r3, #179	@ 0xb3
 8002618:	2101      	movs	r1, #1
 800261a:	54c1      	strb	r1, [r0, r3]
    pHandle->TCDoneFlag = false;
 800261c:	2300      	movs	r3, #0
 800261e:	5483      	strb	r3, [r0, r2]
  }

  return &( pHandle->_Super.Motor );
 8002620:	3068      	adds	r0, #104	@ 0x68
}
 8002622:	bd10      	pop	{r4, pc}
 8002624:	40012400 	.word	0x40012400
 8002628:	7fffffe8 	.word	0x7fffffe8
 800262c:	40012c00 	.word	0x40012c00

08002630 <R1_DMAx_TC_IRQHandler>:
  * @param pHdl: handler of the current instance of the PWM component
  * @retval none
  */
__weak void *R1_DMAx_TC_IRQHandler( PWMC_R1_Handle_t * pHandle )
{
  DMA_TypeDef * DMAx = pHandle->pParams_str->DMAx;
 8002630:	23b8      	movs	r3, #184	@ 0xb8
 8002632:	58c2      	ldr	r2, [r0, r3]
{
 8002634:	b510      	push	{r4, lr}
  DMA_TypeDef * DMAx = pHandle->pParams_str->DMAx;
 8002636:	6894      	ldr	r4, [r2, #8]
  if (NULL == DMAx)
 8002638:	2c00      	cmp	r4, #0
 800263a:	d005      	beq.n	8002648 <R1_DMAx_TC_IRQHandler+0x18>
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CHTIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 800263c:	2104      	movs	r1, #4
 800263e:	6993      	ldr	r3, [r2, #24]
 8002640:	3b01      	subs	r3, #1
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	4099      	lsls	r1, r3
 8002646:	6061      	str	r1, [r4, #4]

  LL_DMA_ClearFlag_HT(DMAx, pHandle->pParams_str->DMAChannelX);
  pHandle->TCCnt++;
 8002648:	21ae      	movs	r1, #174	@ 0xae
  if (pHandle->TCCnt == pHandle->pParams_str->RepetitionCounter)
 800264a:	2437      	movs	r4, #55	@ 0x37
  pHandle->TCCnt++;
 800264c:	5c43      	ldrb	r3, [r0, r1]
 800264e:	3301      	adds	r3, #1
 8002650:	b2db      	uxtb	r3, r3
 8002652:	5443      	strb	r3, [r0, r1]
  if (pHandle->TCCnt == pHandle->pParams_str->RepetitionCounter)
 8002654:	5d12      	ldrb	r2, [r2, r4]
 8002656:	429a      	cmp	r2, r3
 8002658:	d10c      	bne.n	8002674 <R1_DMAx_TC_IRQHandler+0x44>
  {
    // first half PWM period CCR value transfered by DMA
    pHandle->DmaBuffCCR[0] = pHandle->DmaBuffCCR_latch[0];
 800265a:	2380      	movs	r3, #128	@ 0x80
 800265c:	58c2      	ldr	r2, [r0, r3]
 800265e:	3304      	adds	r3, #4
 8002660:	58c3      	ldr	r3, [r0, r3]
 8002662:	6742      	str	r2, [r0, #116]	@ 0x74
 8002664:	6783      	str	r3, [r0, #120]	@ 0x78
    // second half PWM period CCR value transfered by DMA
    pHandle->DmaBuffCCR[3]= pHandle->DmaBuffCCR_latch[3];
    pHandle->DmaBuffCCR[4]= pHandle->DmaBuffCCR_latch[4];
    pHandle->DmaBuffCCR[5]= pHandle->DmaBuffCCR_latch[5];

    pHandle->TCCnt = 0;
 8002666:	2300      	movs	r3, #0
    pHandle->TCDoneFlag =true;
 8002668:	2201      	movs	r2, #1
    pHandle->DmaBuffCCR[0] = pHandle->DmaBuffCCR_latch[0];
 800266a:	6fc4      	ldr	r4, [r0, #124]	@ 0x7c
 800266c:	6704      	str	r4, [r0, #112]	@ 0x70
    pHandle->TCCnt = 0;
 800266e:	5443      	strb	r3, [r0, r1]
    pHandle->TCDoneFlag =true;
 8002670:	33b4      	adds	r3, #180	@ 0xb4
 8002672:	54c2      	strb	r2, [r0, r3]
  }
  else
  {
  }

  return &( pHandle->_Super.Motor );
 8002674:	3068      	adds	r0, #104	@ 0x68
}
 8002676:	bd10      	pop	{r4, pc}

08002678 <RCM_RegisterRegConv>:
  *         Contains ADC, Channel and sampling time to be used.
  *
  *  @retval the handle of the registered conversion or 255 if the registration failed
  */
uint8_t RCM_RegisterRegConv(RegConv_t *regConv)
{
 8002678:	b570      	push	{r4, r5, r6, lr}

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800267a:	4d6c      	ldr	r5, [pc, #432]	@ (800282c <RCM_RegisterRegConv+0x1b4>)
{
 800267c:	0002      	movs	r2, r0
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800267e:	6828      	ldr	r0, [r5, #0]
 8002680:	2800      	cmp	r0, #0
 8002682:	d030      	beq.n	80026e6 <RCM_RegisterRegConv+0x6e>
        /* Nothing to do */
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (RCM_handle_array [i] != 0)
      {
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8002684:	7903      	ldrb	r3, [r0, #4]
 8002686:	7911      	ldrb	r1, [r2, #4]
 8002688:	428b      	cmp	r3, r1
 800268a:	d01c      	beq.n	80026c6 <RCM_RegisterRegConv+0x4e>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800268c:	686c      	ldr	r4, [r5, #4]
 800268e:	2c00      	cmp	r4, #0
 8002690:	d100      	bne.n	8002694 <RCM_RegisterRegConv+0x1c>
 8002692:	e08a      	b.n	80027aa <RCM_RegisterRegConv+0x132>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8002694:	7923      	ldrb	r3, [r4, #4]
 8002696:	428b      	cmp	r3, r1
 8002698:	d100      	bne.n	800269c <RCM_RegisterRegConv+0x24>
 800269a:	e09a      	b.n	80027d2 <RCM_RegisterRegConv+0x15a>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800269c:	68ac      	ldr	r4, [r5, #8]
 800269e:	2c00      	cmp	r4, #0
 80026a0:	d06a      	beq.n	8002778 <RCM_RegisterRegConv+0x100>
  uint8_t handle = 255U;
 80026a2:	20ff      	movs	r0, #255	@ 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80026a4:	7923      	ldrb	r3, [r4, #4]
 80026a6:	428b      	cmp	r3, r1
 80026a8:	d100      	bne.n	80026ac <RCM_RegisterRegConv+0x34>
 80026aa:	e070      	b.n	800278e <RCM_RegisterRegConv+0x116>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80026ac:	68ec      	ldr	r4, [r5, #12]
 80026ae:	2c00      	cmp	r4, #0
 80026b0:	d100      	bne.n	80026b4 <RCM_RegisterRegConv+0x3c>
 80026b2:	e074      	b.n	800279e <RCM_RegisterRegConv+0x126>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80026b4:	7923      	ldrb	r3, [r4, #4]
 80026b6:	428b      	cmp	r3, r1
 80026b8:	d100      	bne.n	80026bc <RCM_RegisterRegConv+0x44>
 80026ba:	e08d      	b.n	80027d8 <RCM_RegisterRegConv+0x160>
      {
        /* Nothing to do */
      }
      i++;
    }
    if (handle < RCM_MAX_CONV)
 80026bc:	2803      	cmp	r0, #3
 80026be:	d800      	bhi.n	80026c2 <RCM_RegisterRegConv+0x4a>
 80026c0:	e070      	b.n	80027a4 <RCM_RegisterRegConv+0x12c>
 80026c2:	20ff      	movs	r0, #255	@ 0xff
    }
#ifdef NULL_PTR_REG_CON_MNG
  }
#endif
  return (handle);
}
 80026c4:	bd70      	pop	{r4, r5, r6, pc}
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80026c6:	6813      	ldr	r3, [r2, #0]
 80026c8:	6800      	ldr	r0, [r0, #0]
 80026ca:	4298      	cmp	r0, r3
 80026cc:	d023      	beq.n	8002716 <RCM_RegisterRegConv+0x9e>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80026ce:	686c      	ldr	r4, [r5, #4]
 80026d0:	2c00      	cmp	r4, #0
 80026d2:	d100      	bne.n	80026d6 <RCM_RegisterRegConv+0x5e>
 80026d4:	e098      	b.n	8002808 <RCM_RegisterRegConv+0x190>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80026d6:	7920      	ldrb	r0, [r4, #4]
 80026d8:	4288      	cmp	r0, r1
 80026da:	d100      	bne.n	80026de <RCM_RegisterRegConv+0x66>
 80026dc:	e08f      	b.n	80027fe <RCM_RegisterRegConv+0x186>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80026de:	68ac      	ldr	r4, [r5, #8]
 80026e0:	2c00      	cmp	r4, #0
 80026e2:	d1de      	bne.n	80026a2 <RCM_RegisterRegConv+0x2a>
 80026e4:	e049      	b.n	800277a <RCM_RegisterRegConv+0x102>
 80026e6:	686c      	ldr	r4, [r5, #4]
 80026e8:	2c00      	cmp	r4, #0
 80026ea:	d064      	beq.n	80027b6 <RCM_RegisterRegConv+0x13e>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80026ec:	7923      	ldrb	r3, [r4, #4]
 80026ee:	7911      	ldrb	r1, [r2, #4]
 80026f0:	428b      	cmp	r3, r1
 80026f2:	d035      	beq.n	8002760 <RCM_RegisterRegConv+0xe8>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80026f4:	68ac      	ldr	r4, [r5, #8]
 80026f6:	2000      	movs	r0, #0
 80026f8:	2c00      	cmp	r4, #0
 80026fa:	d1d3      	bne.n	80026a4 <RCM_RegisterRegConv+0x2c>
 80026fc:	6813      	ldr	r3, [r2, #0]
 80026fe:	68e9      	ldr	r1, [r5, #12]
 8002700:	2900      	cmp	r1, #0
 8002702:	d006      	beq.n	8002712 <RCM_RegisterRegConv+0x9a>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8002704:	790e      	ldrb	r6, [r1, #4]
 8002706:	7914      	ldrb	r4, [r2, #4]
 8002708:	42a6      	cmp	r6, r4
 800270a:	d102      	bne.n	8002712 <RCM_RegisterRegConv+0x9a>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 800270c:	6809      	ldr	r1, [r1, #0]
 800270e:	4299      	cmp	r1, r3
 8002710:	d067      	beq.n	80027e2 <RCM_RegisterRegConv+0x16a>
      RCM_handle_array [handle] = regConv;
 8002712:	0006      	movs	r6, r0
 8002714:	e001      	b.n	800271a <RCM_RegisterRegConv+0xa2>
    uint8_t i = 0;
 8002716:	2000      	movs	r0, #0
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002718:	2600      	movs	r6, #0
      RCM_handle_array [handle] = regConv;
 800271a:	00b4      	lsls	r4, r6, #2
 800271c:	512a      	str	r2, [r5, r4]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 800271e:	2500      	movs	r5, #0
 8002720:	4a43      	ldr	r2, [pc, #268]	@ (8002830 <RCM_RegisterRegConv+0x1b8>)
 8002722:	00f4      	lsls	r4, r6, #3
 8002724:	50a5      	str	r5, [r4, r2]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8002726:	689a      	ldr	r2, [r3, #8]
 8002728:	0201      	lsls	r1, r0, #8
 800272a:	4301      	orrs	r1, r0
      if (0U == LL_ADC_IsEnabled(regConv->regADC))
 800272c:	07d2      	lsls	r2, r2, #31
 800272e:	d40e      	bmi.n	800274e <RCM_RegisterRegConv+0xd6>
  MODIFY_REG(ADCx->CR,
 8002730:	689c      	ldr	r4, [r3, #8]
 8002732:	4a40      	ldr	r2, [pc, #256]	@ (8002834 <RCM_RegisterRegConv+0x1bc>)
 8002734:	4014      	ands	r4, r2
 8002736:	3218      	adds	r2, #24
 8002738:	4322      	orrs	r2, r4
 800273a:	609a      	str	r2, [r3, #8]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 800273c:	689a      	ldr	r2, [r3, #8]
        while (1U == LL_ADC_IsCalibrationOnGoing(regConv->regADC))
 800273e:	2a00      	cmp	r2, #0
 8002740:	dbfc      	blt.n	800273c <RCM_RegisterRegConv+0xc4>
  MODIFY_REG(ADCx->CR,
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	4c3b      	ldr	r4, [pc, #236]	@ (8002834 <RCM_RegisterRegConv+0x1bc>)
 8002746:	4022      	ands	r2, r4
 8002748:	2401      	movs	r4, #1
 800274a:	4322      	orrs	r2, r4
 800274c:	609a      	str	r2, [r3, #8]
      RCM_NoInj_array[handle].enable = false;
 800274e:	2400      	movs	r4, #0
 8002750:	0073      	lsls	r3, r6, #1
 8002752:	4a39      	ldr	r2, [pc, #228]	@ (8002838 <RCM_RegisterRegConv+0x1c0>)
 8002754:	199b      	adds	r3, r3, r6
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	549c      	strb	r4, [r3, r2]
      RCM_NoInj_array[handle].prev = handle;
 800275a:	3204      	adds	r2, #4
 800275c:	52d1      	strh	r1, [r2, r3]
 800275e:	e7b1      	b.n	80026c4 <RCM_RegisterRegConv+0x4c>
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
 8002760:	2000      	movs	r0, #0
 8002762:	6813      	ldr	r3, [r2, #0]
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8002764:	6824      	ldr	r4, [r4, #0]
 8002766:	429c      	cmp	r4, r3
 8002768:	d03e      	beq.n	80027e8 <RCM_RegisterRegConv+0x170>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800276a:	68ac      	ldr	r4, [r5, #8]
 800276c:	2c00      	cmp	r4, #0
 800276e:	d199      	bne.n	80026a4 <RCM_RegisterRegConv+0x2c>
 8002770:	2804      	cmp	r0, #4
 8002772:	d802      	bhi.n	800277a <RCM_RegisterRegConv+0x102>
 8002774:	2000      	movs	r0, #0
 8002776:	e7c2      	b.n	80026fe <RCM_RegisterRegConv+0x86>
 8002778:	6813      	ldr	r3, [r2, #0]
 800277a:	68e8      	ldr	r0, [r5, #12]
 800277c:	2800      	cmp	r0, #0
 800277e:	d002      	beq.n	8002786 <RCM_RegisterRegConv+0x10e>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8002780:	7904      	ldrb	r4, [r0, #4]
 8002782:	428c      	cmp	r4, r1
 8002784:	d033      	beq.n	80027ee <RCM_RegisterRegConv+0x176>
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
 8002786:	2002      	movs	r0, #2
      RCM_handle_array [handle] = regConv;
 8002788:	0006      	movs	r6, r0
 800278a:	e7c6      	b.n	800271a <RCM_RegisterRegConv+0xa2>
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
 800278c:	2000      	movs	r0, #0
 800278e:	6813      	ldr	r3, [r2, #0]
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8002790:	6824      	ldr	r4, [r4, #0]
 8002792:	429c      	cmp	r4, r3
 8002794:	d000      	beq.n	8002798 <RCM_RegisterRegConv+0x120>
 8002796:	e789      	b.n	80026ac <RCM_RegisterRegConv+0x34>
      i++;
 8002798:	2002      	movs	r0, #2
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800279a:	2602      	movs	r6, #2
 800279c:	e7bd      	b.n	800271a <RCM_RegisterRegConv+0xa2>
 800279e:	2804      	cmp	r0, #4
 80027a0:	d900      	bls.n	80027a4 <RCM_RegisterRegConv+0x12c>
 80027a2:	2003      	movs	r0, #3
 80027a4:	6813      	ldr	r3, [r2, #0]
      RCM_handle_array [handle] = regConv;
 80027a6:	0006      	movs	r6, r0
 80027a8:	e7b7      	b.n	800271a <RCM_RegisterRegConv+0xa2>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80027aa:	68ac      	ldr	r4, [r5, #8]
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
 80027ac:	2001      	movs	r0, #1
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80027ae:	2c00      	cmp	r4, #0
 80027b0:	d000      	beq.n	80027b4 <RCM_RegisterRegConv+0x13c>
 80027b2:	e777      	b.n	80026a4 <RCM_RegisterRegConv+0x2c>
 80027b4:	e7a2      	b.n	80026fc <RCM_RegisterRegConv+0x84>
 80027b6:	68ac      	ldr	r4, [r5, #8]
 80027b8:	2c00      	cmp	r4, #0
 80027ba:	d022      	beq.n	8002802 <RCM_RegisterRegConv+0x18a>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80027bc:	7923      	ldrb	r3, [r4, #4]
 80027be:	7911      	ldrb	r1, [r2, #4]
 80027c0:	428b      	cmp	r3, r1
 80027c2:	d0e3      	beq.n	800278c <RCM_RegisterRegConv+0x114>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80027c4:	68ec      	ldr	r4, [r5, #12]
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
 80027c6:	2000      	movs	r0, #0
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80027c8:	2c00      	cmp	r4, #0
 80027ca:	d000      	beq.n	80027ce <RCM_RegisterRegConv+0x156>
 80027cc:	e772      	b.n	80026b4 <RCM_RegisterRegConv+0x3c>
 80027ce:	6813      	ldr	r3, [r2, #0]
 80027d0:	e7e9      	b.n	80027a6 <RCM_RegisterRegConv+0x12e>
  uint8_t handle = 255U;
 80027d2:	20ff      	movs	r0, #255	@ 0xff
 80027d4:	6813      	ldr	r3, [r2, #0]
 80027d6:	e7c5      	b.n	8002764 <RCM_RegisterRegConv+0xec>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80027d8:	6813      	ldr	r3, [r2, #0]
 80027da:	6821      	ldr	r1, [r4, #0]
 80027dc:	4299      	cmp	r1, r3
 80027de:	d000      	beq.n	80027e2 <RCM_RegisterRegConv+0x16a>
 80027e0:	e76c      	b.n	80026bc <RCM_RegisterRegConv+0x44>
 80027e2:	2003      	movs	r0, #3
 80027e4:	2603      	movs	r6, #3
 80027e6:	e798      	b.n	800271a <RCM_RegisterRegConv+0xa2>
      i++;
 80027e8:	2001      	movs	r0, #1
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80027ea:	2601      	movs	r6, #1
 80027ec:	e795      	b.n	800271a <RCM_RegisterRegConv+0xa2>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80027ee:	6801      	ldr	r1, [r0, #0]
 80027f0:	2603      	movs	r6, #3
 80027f2:	2003      	movs	r0, #3
 80027f4:	4299      	cmp	r1, r3
 80027f6:	d090      	beq.n	800271a <RCM_RegisterRegConv+0xa2>
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
 80027f8:	3801      	subs	r0, #1
      RCM_handle_array [handle] = regConv;
 80027fa:	0006      	movs	r6, r0
 80027fc:	e78d      	b.n	800271a <RCM_RegisterRegConv+0xa2>
  uint8_t handle = 255U;
 80027fe:	20ff      	movs	r0, #255	@ 0xff
 8002800:	e7b0      	b.n	8002764 <RCM_RegisterRegConv+0xec>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002802:	2000      	movs	r0, #0
 8002804:	6813      	ldr	r3, [r2, #0]
 8002806:	e77a      	b.n	80026fe <RCM_RegisterRegConv+0x86>
 8002808:	68ac      	ldr	r4, [r5, #8]
 800280a:	2c00      	cmp	r4, #0
 800280c:	d009      	beq.n	8002822 <RCM_RegisterRegConv+0x1aa>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 800280e:	7920      	ldrb	r0, [r4, #4]
 8002810:	4288      	cmp	r0, r1
 8002812:	d008      	beq.n	8002826 <RCM_RegisterRegConv+0x1ae>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002814:	68ec      	ldr	r4, [r5, #12]
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
 8002816:	2001      	movs	r0, #1
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002818:	2c00      	cmp	r4, #0
 800281a:	d000      	beq.n	800281e <RCM_RegisterRegConv+0x1a6>
 800281c:	e74a      	b.n	80026b4 <RCM_RegisterRegConv+0x3c>
      RCM_handle_array [handle] = regConv;
 800281e:	0006      	movs	r6, r0
 8002820:	e77b      	b.n	800271a <RCM_RegisterRegConv+0xa2>
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
 8002822:	2001      	movs	r0, #1
 8002824:	e76b      	b.n	80026fe <RCM_RegisterRegConv+0x86>
 8002826:	2001      	movs	r0, #1
 8002828:	e7b2      	b.n	8002790 <RCM_RegisterRegConv+0x118>
 800282a:	46c0      	nop			@ (mov r8, r8)
 800282c:	20000610 	.word	0x20000610
 8002830:	200005f0 	.word	0x200005f0
 8002834:	7fffffe8 	.word	0x7fffffe8
 8002838:	200005d8 	.word	0x200005d8

0800283c <RCM_ExecRegularConv>:
  uint16_t retVal;
  uint8_t formerNext;
  uint8_t i=0;
  uint8_t LastEnable = RCM_MAX_CONV;

  if (false == RCM_NoInj_array [handle].enable)
 800283c:	0041      	lsls	r1, r0, #1
 800283e:	4b57      	ldr	r3, [pc, #348]	@ (800299c <RCM_ExecRegularConv+0x160>)
 8002840:	180a      	adds	r2, r1, r0
 8002842:	0052      	lsls	r2, r2, #1
 8002844:	5c9a      	ldrb	r2, [r3, r2]
{
 8002846:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (false == RCM_NoInj_array [handle].enable)
 8002848:	2a00      	cmp	r2, #0
 800284a:	d139      	bne.n	80028c0 <RCM_ExecRegularConv+0x84>
  {
    /* find position in the list */
    while (i < RCM_MAX_CONV)
    {
      if (true == RCM_NoInj_array [i].enable)
 800284c:	781a      	ldrb	r2, [r3, #0]
 800284e:	2a00      	cmp	r2, #0
 8002850:	d113      	bne.n	800287a <RCM_ExecRegularConv+0x3e>
  uint8_t LastEnable = RCM_MAX_CONV;
 8002852:	2204      	movs	r2, #4
      if (true == RCM_NoInj_array [i].enable)
 8002854:	799c      	ldrb	r4, [r3, #6]
 8002856:	2c00      	cmp	r4, #0
 8002858:	d000      	beq.n	800285c <RCM_ExecRegularConv+0x20>
 800285a:	e071      	b.n	8002940 <RCM_ExecRegularConv+0x104>
 800285c:	7b1c      	ldrb	r4, [r3, #12]
 800285e:	2c00      	cmp	r4, #0
 8002860:	d000      	beq.n	8002864 <RCM_ExecRegularConv+0x28>
 8002862:	e073      	b.n	800294c <RCM_ExecRegularConv+0x110>
 8002864:	7c9e      	ldrb	r6, [r3, #18]
 8002866:	2e00      	cmp	r6, #0
 8002868:	d100      	bne.n	800286c <RCM_ExecRegularConv+0x30>
 800286a:	e08b      	b.n	8002984 <RCM_ExecRegularConv+0x148>
      {
        if (RCM_NoInj_array[i].next > handle)
 800286c:	7ddd      	ldrb	r5, [r3, #23]
 800286e:	4285      	cmp	r5, r0
 8002870:	d800      	bhi.n	8002874 <RCM_ExecRegularConv+0x38>
 8002872:	e090      	b.n	8002996 <RCM_ExecRegularConv+0x15a>
 8002874:	2603      	movs	r6, #3
 8002876:	2403      	movs	r4, #3
 8002878:	e005      	b.n	8002886 <RCM_ExecRegularConv+0x4a>
 800287a:	795d      	ldrb	r5, [r3, #5]
          i = RCM_MAX_CONV; /* stop the loop, handler inserted*/
        }
        else
        { /* We found an enabled regular conv,
           * but do not know yet if it is the one we have to be linked to. */
          LastEnable = i;
 800287c:	2200      	movs	r2, #0
        if (RCM_NoInj_array[i].next > handle)
 800287e:	42a8      	cmp	r0, r5
 8002880:	d2e8      	bcs.n	8002854 <RCM_ExecRegularConv+0x18>
  uint8_t i=0;
 8002882:	2600      	movs	r6, #0
      if (true == RCM_NoInj_array [i].enable)
 8002884:	2400      	movs	r4, #0
          RCM_NoInj_array[handle].next = formerNext;
 8002886:	180a      	adds	r2, r1, r0
 8002888:	0052      	lsls	r2, r2, #1
 800288a:	189a      	adds	r2, r3, r2
 800288c:	7155      	strb	r5, [r2, #5]
          RCM_NoInj_array[handle].prev = i;
 800288e:	7116      	strb	r6, [r2, #4]
          RCM_NoInj_array[i].next = handle;
 8002890:	0062      	lsls	r2, r4, #1
 8002892:	1912      	adds	r2, r2, r4
 8002894:	0052      	lsls	r2, r2, #1
 8002896:	189a      	adds	r2, r3, r2
       /* we find a regular conversion with smaller position to be linked with */
       {
         formerNext = RCM_NoInj_array[LastEnable].next;
         RCM_NoInj_array[handle].next = formerNext;
         RCM_NoInj_array[handle].prev = LastEnable;
         RCM_NoInj_array[LastEnable].next = handle;
 8002898:	7150      	strb	r0, [r2, #5]
         RCM_NoInj_array[formerNext].prev = handle;
 800289a:	006a      	lsls	r2, r5, #1
 800289c:	1952      	adds	r2, r2, r5
 800289e:	0052      	lsls	r2, r2, #1
 80028a0:	189a      	adds	r2, r3, r2
 80028a2:	7110      	strb	r0, [r2, #4]
      }
    }
    /* The handle is now linked with others, we can set the enable flag */
    RCM_NoInj_array[handle].enable = true;
    RCM_NoInj_array[handle].status = notvalid;
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 80028a4:	4a3e      	ldr	r2, [pc, #248]	@ (80029a0 <RCM_ExecRegularConv+0x164>)
 80028a6:	7815      	ldrb	r5, [r2, #0]
    RCM_NoInj_array[handle].enable = true;
 80028a8:	2601      	movs	r6, #1
 80028aa:	180c      	adds	r4, r1, r0
 80028ac:	0064      	lsls	r4, r4, #1
 80028ae:	531e      	strh	r6, [r3, r4]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 80028b0:	006c      	lsls	r4, r5, #1
 80028b2:	1964      	adds	r4, r4, r5
 80028b4:	0064      	lsls	r4, r4, #1
 80028b6:	191c      	adds	r4, r3, r4
 80028b8:	7864      	ldrb	r4, [r4, #1]
 80028ba:	2c01      	cmp	r4, #1
 80028bc:	d000      	beq.n	80028c0 <RCM_ExecRegularConv+0x84>
    {/* select the new conversion to be the next scheduled only if a conversion is not ongoing*/
      RCM_currentHandle = handle;
 80028be:	7010      	strb	r0, [r2, #0]
  }
  else
  {
    /* Nothing to do the current handle is already scheduled */
  }
  if (false == PWM_Handle_M1.ADCRegularLocked)
 80028c0:	24b5      	movs	r4, #181	@ 0xb5
 80028c2:	4a38      	ldr	r2, [pc, #224]	@ (80029a4 <RCM_ExecRegularConv+0x168>)
 80028c4:	5d12      	ldrb	r2, [r2, r4]
 80028c6:	2a00      	cmp	r2, #0
 80028c8:	d135      	bne.n	8002936 <RCM_ExecRegularConv+0xfa>
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 80028ca:	2703      	movs	r7, #3
  /* The ADC is free to be used asynchronously*/
  {
    LL_ADC_REG_SetDMATransfer(RCM_handle_array[handle]->regADC, LL_ADC_REG_DMA_TRANSFER_NONE);
 80028cc:	4e36      	ldr	r6, [pc, #216]	@ (80029a8 <RCM_ExecRegularConv+0x16c>)
 80028ce:	0082      	lsls	r2, r0, #2
 80028d0:	58b5      	ldr	r5, [r6, r2]
 80028d2:	682a      	ldr	r2, [r5, #0]
 80028d4:	68d4      	ldr	r4, [r2, #12]
 80028d6:	43bc      	bics	r4, r7
 80028d8:	60d4      	str	r4, [r2, #12]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 80028da:	68d4      	ldr	r4, [r2, #12]
 80028dc:	4f33      	ldr	r7, [pc, #204]	@ (80029ac <RCM_ExecRegularConv+0x170>)
 80028de:	403c      	ands	r4, r7
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 80028e0:	2707      	movs	r7, #7
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 80028e2:	60d4      	str	r4, [r2, #12]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 80028e4:	6954      	ldr	r4, [r2, #20]
 80028e6:	43bc      	bics	r4, r7
 80028e8:	68af      	ldr	r7, [r5, #8]
 80028ea:	433c      	orrs	r4, r7
 80028ec:	6154      	str	r4, [r2, #20]
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80028ee:	2480      	movs	r4, #128	@ 0x80
    LL_ADC_REG_SetTriggerSource(RCM_handle_array[handle]->regADC, LL_ADC_REG_TRIG_SOFTWARE);

    /* Set Sampling time and channel */
    LL_ADC_SetSamplingTimeCommonChannels(RCM_handle_array[handle]->regADC, RCM_handle_array[handle]->samplingTime);
    LL_ADC_REG_SetSequencerChannels(RCM_handle_array[handle]->regADC,
                                    __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 80028f0:	792d      	ldrb	r5, [r5, #4]
 80028f2:	01a4      	lsls	r4, r4, #6
 80028f4:	40ac      	lsls	r4, r5
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80028f6:	2504      	movs	r5, #4
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80028f8:	0b64      	lsrs	r4, r4, #13
 80028fa:	6294      	str	r4, [r2, #40]	@ 0x28
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80028fc:	6015      	str	r5, [r2, #0]
  MODIFY_REG(ADCx->CR,
 80028fe:	6894      	ldr	r4, [r2, #8]
 8002900:	4f2b      	ldr	r7, [pc, #172]	@ (80029b0 <RCM_ExecRegularConv+0x174>)
 8002902:	403c      	ands	r4, r7
 8002904:	432c      	orrs	r4, r5
 8002906:	6094      	str	r4, [r2, #8]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8002908:	6814      	ldr	r4, [r2, #0]

    /* Start ADC conversion */
    LL_ADC_REG_StartConversion(RCM_handle_array[handle]->regADC);

    /* Wait EOC */
    while ( 0U == LL_ADC_IsActiveFlag_EOC(RCM_handle_array[handle]->regADC))
 800290a:	4225      	tst	r5, r4
 800290c:	d0fc      	beq.n	8002908 <RCM_ExecRegularConv+0xcc>
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 800290e:	2703      	movs	r7, #3
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8002910:	6c14      	ldr	r4, [r2, #64]	@ 0x40
    {
      /* Nothing to do */
    }

    /* Read the "Regular" conversion (Not related to current sampling) */
    RCM_NoInj_array[handle].value = LL_ADC_REG_ReadConversionData12(RCM_handle_array[handle]->regADC);
 8002912:	180a      	adds	r2, r1, r0
    LL_ADC_REG_SetDMATransfer(RCM_handle_array[RCM_currentHandle]->regADC, LL_ADC_REG_DMA_TRANSFER_LIMITED);
 8002914:	4d22      	ldr	r5, [pc, #136]	@ (80029a0 <RCM_ExecRegularConv+0x164>)
    RCM_NoInj_array[handle].value = LL_ADC_REG_ReadConversionData12(RCM_handle_array[handle]->regADC);
 8002916:	0052      	lsls	r2, r2, #1
 8002918:	189a      	adds	r2, r3, r2
 800291a:	8054      	strh	r4, [r2, #2]
    LL_ADC_REG_SetDMATransfer(RCM_handle_array[RCM_currentHandle]->regADC, LL_ADC_REG_DMA_TRANSFER_LIMITED);
 800291c:	782c      	ldrb	r4, [r5, #0]
 800291e:	00a4      	lsls	r4, r4, #2
 8002920:	5934      	ldr	r4, [r6, r4]
 8002922:	6826      	ldr	r6, [r4, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8002924:	68f4      	ldr	r4, [r6, #12]
 8002926:	43bc      	bics	r4, r7
 8002928:	3f02      	subs	r7, #2
 800292a:	433c      	orrs	r4, r7
 800292c:	60f4      	str	r4, [r6, #12]
    RCM_currentHandle = RCM_NoInj_array[handle].next;
 800292e:	7954      	ldrb	r4, [r2, #5]
 8002930:	702c      	strb	r4, [r5, #0]
    RCM_NoInj_array[handle].status = valid;
 8002932:	2402      	movs	r4, #2
 8002934:	7054      	strb	r4, [r2, #1]
  }
  else
  {
    /* Nothing to do */
  }
  retVal = RCM_NoInj_array[handle].value;
 8002936:	1809      	adds	r1, r1, r0
 8002938:	0049      	lsls	r1, r1, #1
 800293a:	185b      	adds	r3, r3, r1
  return retVal;
 800293c:	8858      	ldrh	r0, [r3, #2]
}
 800293e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (RCM_NoInj_array[i].next > handle)
 8002940:	7add      	ldrb	r5, [r3, #11]
 8002942:	42a8      	cmp	r0, r5
 8002944:	d316      	bcc.n	8002974 <RCM_ExecRegularConv+0x138>
      if (true == RCM_NoInj_array [i].enable)
 8002946:	7b1a      	ldrb	r2, [r3, #12]
 8002948:	2a00      	cmp	r2, #0
 800294a:	d016      	beq.n	800297a <RCM_ExecRegularConv+0x13e>
        if (RCM_NoInj_array[i].next > handle)
 800294c:	7c5d      	ldrb	r5, [r3, #17]
 800294e:	42a8      	cmp	r0, r5
 8002950:	d31e      	bcc.n	8002990 <RCM_ExecRegularConv+0x154>
      if (true == RCM_NoInj_array [i].enable)
 8002952:	7c9a      	ldrb	r2, [r3, #18]
          LastEnable = i;
 8002954:	2602      	movs	r6, #2
      if (true == RCM_NoInj_array [i].enable)
 8002956:	2a00      	cmp	r2, #0
 8002958:	d000      	beq.n	800295c <RCM_ExecRegularConv+0x120>
 800295a:	e787      	b.n	800286c <RCM_ExecRegularConv+0x30>
         formerNext = RCM_NoInj_array[LastEnable].next;
 800295c:	0034      	movs	r4, r6
 800295e:	0062      	lsls	r2, r4, #1
 8002960:	1912      	adds	r2, r2, r4
 8002962:	0052      	lsls	r2, r2, #1
 8002964:	189a      	adds	r2, r3, r2
         RCM_NoInj_array[handle].next = formerNext;
 8002966:	180c      	adds	r4, r1, r0
         formerNext = RCM_NoInj_array[LastEnable].next;
 8002968:	7955      	ldrb	r5, [r2, #5]
         RCM_NoInj_array[handle].next = formerNext;
 800296a:	0064      	lsls	r4, r4, #1
 800296c:	191c      	adds	r4, r3, r4
 800296e:	7165      	strb	r5, [r4, #5]
         RCM_NoInj_array[handle].prev = LastEnable;
 8002970:	7126      	strb	r6, [r4, #4]
 8002972:	e791      	b.n	8002898 <RCM_ExecRegularConv+0x5c>
        if (RCM_NoInj_array[i].next > handle)
 8002974:	2601      	movs	r6, #1
      if (true == RCM_NoInj_array [i].enable)
 8002976:	2401      	movs	r4, #1
 8002978:	e785      	b.n	8002886 <RCM_ExecRegularConv+0x4a>
 800297a:	7c9a      	ldrb	r2, [r3, #18]
          LastEnable = i;
 800297c:	2601      	movs	r6, #1
      if (true == RCM_NoInj_array [i].enable)
 800297e:	2a00      	cmp	r2, #0
 8002980:	d0ec      	beq.n	800295c <RCM_ExecRegularConv+0x120>
 8002982:	e773      	b.n	800286c <RCM_ExecRegularConv+0x30>
       if (LastEnable != RCM_MAX_CONV )
 8002984:	2a04      	cmp	r2, #4
 8002986:	d1e9      	bne.n	800295c <RCM_ExecRegularConv+0x120>
         RCM_currentHandle = handle;
 8002988:	4a05      	ldr	r2, [pc, #20]	@ (80029a0 <RCM_ExecRegularConv+0x164>)
 800298a:	0005      	movs	r5, r0
 800298c:	7010      	strb	r0, [r2, #0]
    while (i < RCM_MAX_CONV)
 800298e:	e78b      	b.n	80028a8 <RCM_ExecRegularConv+0x6c>
        if (RCM_NoInj_array[i].next > handle)
 8002990:	2602      	movs	r6, #2
      if (true == RCM_NoInj_array [i].enable)
 8002992:	2402      	movs	r4, #2
 8002994:	e777      	b.n	8002886 <RCM_ExecRegularConv+0x4a>
 8002996:	2403      	movs	r4, #3
          LastEnable = i;
 8002998:	2603      	movs	r6, #3
 800299a:	e7e0      	b.n	800295e <RCM_ExecRegularConv+0x122>
 800299c:	200005d8 	.word	0x200005d8
 80029a0:	200005d4 	.word	0x200005d4
 80029a4:	20000204 	.word	0x20000204
 80029a8:	20000610 	.word	0x20000610
 80029ac:	fffff23f 	.word	0xfffff23f
 80029b0:	7fffffe8 	.word	0x7fffffe8

080029b4 <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv()
{
 80029b4:	b570      	push	{r4, r5, r6, lr}
  if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 80029b6:	4c11      	ldr	r4, [pc, #68]	@ (80029fc <RCM_ExecUserConv+0x48>)
 80029b8:	7823      	ldrb	r3, [r4, #0]
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d000      	beq.n	80029c0 <RCM_ExecUserConv+0xc>
    else
    {
      /* Nothing to do */
    }
  }
}
 80029be:	bd70      	pop	{r4, r5, r6, pc}
    RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 80029c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002a00 <RCM_ExecUserConv+0x4c>)
 80029c2:	781d      	ldrb	r5, [r3, #0]
 80029c4:	0028      	movs	r0, r5
 80029c6:	f7ff ff39 	bl	800283c <RCM_ExecRegularConv>
 80029ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002a04 <RCM_ExecUserConv+0x50>)
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 80029cc:	006a      	lsls	r2, r5, #1
    RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 80029ce:	8018      	strh	r0, [r3, #0]
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 80029d0:	1952      	adds	r2, r2, r5
 80029d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002a08 <RCM_ExecUserConv+0x54>)
 80029d4:	0052      	lsls	r2, r2, #1
 80029d6:	189b      	adds	r3, r3, r2
 80029d8:	785b      	ldrb	r3, [r3, #1]
    RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 80029da:	0001      	movs	r1, r0
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <RCM_ExecUserConv+0x30>
      RCM_UserConvState = RCM_USERCONV_EOC;
 80029e0:	2302      	movs	r3, #2
 80029e2:	7023      	strb	r3, [r4, #0]
    if (RCM_CB_array[RCM_UserConvHandle].cb != NULL)
 80029e4:	4b09      	ldr	r3, [pc, #36]	@ (8002a0c <RCM_ExecUserConv+0x58>)
 80029e6:	00ea      	lsls	r2, r5, #3
 80029e8:	58d6      	ldr	r6, [r2, r3]
 80029ea:	2e00      	cmp	r6, #0
 80029ec:	d0e7      	beq.n	80029be <RCM_ExecUserConv+0xa>
      RCM_UserConvState = RCM_USERCONV_IDLE;
 80029ee:	2000      	movs	r0, #0
      RCM_CB_array[RCM_UserConvHandle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 80029f0:	189b      	adds	r3, r3, r2
      RCM_UserConvState = RCM_USERCONV_IDLE;
 80029f2:	7020      	strb	r0, [r4, #0]
      RCM_CB_array[RCM_UserConvHandle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 80029f4:	685a      	ldr	r2, [r3, #4]
 80029f6:	0028      	movs	r0, r5
 80029f8:	47b0      	blx	r6
}
 80029fa:	e7e0      	b.n	80029be <RCM_ExecUserConv+0xa>
 80029fc:	200005d1 	.word	0x200005d1
 8002a00:	200005d0 	.word	0x200005d0
 8002a04:	200005d2 	.word	0x200005d2
 8002a08:	200005d8 	.word	0x200005d8
 8002a0c:	200005f0 	.word	0x200005f0

08002a10 <RCM_ExecNextConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecNextConv(void)
{
 8002a10:	b570      	push	{r4, r5, r6, lr}
  if (true == RCM_NoInj_array [RCM_currentHandle].enable)
 8002a12:	4b16      	ldr	r3, [pc, #88]	@ (8002a6c <RCM_ExecNextConv+0x5c>)
 8002a14:	4916      	ldr	r1, [pc, #88]	@ (8002a70 <RCM_ExecNextConv+0x60>)
 8002a16:	781a      	ldrb	r2, [r3, #0]
 8002a18:	0053      	lsls	r3, r2, #1
 8002a1a:	189b      	adds	r3, r3, r2
 8002a1c:	005b      	lsls	r3, r3, #1
 8002a1e:	5c58      	ldrb	r0, [r3, r1]
 8002a20:	2800      	cmp	r0, #0
 8002a22:	d021      	beq.n	8002a68 <RCM_ExecNextConv+0x58>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8002a24:	2504      	movs	r5, #4
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8002a26:	2603      	movs	r6, #3
    /* When this function is called, the ADC conversions triggered by External
       event for current reading has been completed.
       ADC is therefore ready to be started because already stopped.*/

    /* Clear EOC */
    LL_ADC_ClearFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8002a28:	4812      	ldr	r0, [pc, #72]	@ (8002a74 <RCM_ExecNextConv+0x64>)
 8002a2a:	0092      	lsls	r2, r2, #2
 8002a2c:	5814      	ldr	r4, [r2, r0]
                                         RCM_handle_array[RCM_currentHandle]->samplingTime);
    (void)LL_ADC_REG_SetSequencerChannels(RCM_handle_array[RCM_currentHandle]->regADC,
                                       __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
    /* Start ADC for regular conversion */
    LL_ADC_REG_StartConversion(RCM_handle_array[RCM_currentHandle]->regADC);
    RCM_NoInj_array[RCM_currentHandle].status = ongoing;
 8002a2e:	18c9      	adds	r1, r1, r3
    LL_ADC_ClearFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8002a30:	6822      	ldr	r2, [r4, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8002a32:	6015      	str	r5, [r2, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8002a34:	68d0      	ldr	r0, [r2, #12]
 8002a36:	43b0      	bics	r0, r6
 8002a38:	60d0      	str	r0, [r2, #12]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8002a3a:	68d0      	ldr	r0, [r2, #12]
 8002a3c:	4e0e      	ldr	r6, [pc, #56]	@ (8002a78 <RCM_ExecNextConv+0x68>)
 8002a3e:	4030      	ands	r0, r6
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8002a40:	2607      	movs	r6, #7
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8002a42:	60d0      	str	r0, [r2, #12]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8002a44:	6950      	ldr	r0, [r2, #20]
 8002a46:	43b0      	bics	r0, r6
 8002a48:	68a6      	ldr	r6, [r4, #8]
 8002a4a:	4330      	orrs	r0, r6
 8002a4c:	6150      	str	r0, [r2, #20]
                                       __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 8002a4e:	7920      	ldrb	r0, [r4, #4]
 8002a50:	2401      	movs	r4, #1
 8002a52:	0026      	movs	r6, r4
 8002a54:	4086      	lsls	r6, r0
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002a56:	0370      	lsls	r0, r6, #13
 8002a58:	0b40      	lsrs	r0, r0, #13
 8002a5a:	6290      	str	r0, [r2, #40]	@ 0x28
  MODIFY_REG(ADCx->CR,
 8002a5c:	6890      	ldr	r0, [r2, #8]
 8002a5e:	4e07      	ldr	r6, [pc, #28]	@ (8002a7c <RCM_ExecNextConv+0x6c>)
 8002a60:	4030      	ands	r0, r6
 8002a62:	4328      	orrs	r0, r5
 8002a64:	6090      	str	r0, [r2, #8]
    RCM_NoInj_array[RCM_currentHandle].status = ongoing;
 8002a66:	704c      	strb	r4, [r1, #1]
  }
  else
  {
    /* nothing to do, conversion not enabled have already notvalid status */
  }
}
 8002a68:	bd70      	pop	{r4, r5, r6, pc}
 8002a6a:	46c0      	nop			@ (mov r8, r8)
 8002a6c:	200005d4 	.word	0x200005d4
 8002a70:	200005d8 	.word	0x200005d8
 8002a74:	20000610 	.word	0x20000610
 8002a78:	fffff23f 	.word	0xfffff23f
 8002a7c:	7fffffe8 	.word	0x7fffffe8

08002a80 <RCM_ReadOngoingConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ReadOngoingConv(void)
{
 8002a80:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t result;
  RCM_status_t status;

  status = RCM_NoInj_array[RCM_currentHandle].status;
  result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
  if (( valid == status ) || ( notvalid == status ) || ( 0U == result ))
 8002a82:	2702      	movs	r7, #2
  status = RCM_NoInj_array[RCM_currentHandle].status;
 8002a84:	4d11      	ldr	r5, [pc, #68]	@ (8002acc <RCM_ReadOngoingConv+0x4c>)
  result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8002a86:	4b12      	ldr	r3, [pc, #72]	@ (8002ad0 <RCM_ReadOngoingConv+0x50>)
  status = RCM_NoInj_array[RCM_currentHandle].status;
 8002a88:	7828      	ldrb	r0, [r5, #0]
 8002a8a:	4912      	ldr	r1, [pc, #72]	@ (8002ad4 <RCM_ReadOngoingConv+0x54>)
  result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8002a8c:	0082      	lsls	r2, r0, #2
 8002a8e:	58d3      	ldr	r3, [r2, r3]
 8002a90:	681e      	ldr	r6, [r3, #0]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8002a92:	6833      	ldr	r3, [r6, #0]
 8002a94:	469c      	mov	ip, r3
  status = RCM_NoInj_array[RCM_currentHandle].status;
 8002a96:	0043      	lsls	r3, r0, #1
 8002a98:	181a      	adds	r2, r3, r0
 8002a9a:	0052      	lsls	r2, r2, #1
 8002a9c:	188a      	adds	r2, r1, r2
  if (( valid == status ) || ( notvalid == status ) || ( 0U == result ))
 8002a9e:	7854      	ldrb	r4, [r2, #1]
 8002aa0:	43bc      	bics	r4, r7
 8002aa2:	d002      	beq.n	8002aaa <RCM_ReadOngoingConv+0x2a>
 8002aa4:	4664      	mov	r4, ip
 8002aa6:	0764      	lsls	r4, r4, #29
 8002aa8:	d405      	bmi.n	8002ab6 <RCM_ReadOngoingConv+0x36>
    /* Restore back DMA configuration. */
    LL_ADC_REG_SetDMATransfer( RCM_handle_array[RCM_currentHandle]->regADC, LL_ADC_REG_DMA_TRANSFER_LIMITED );
  }

  /* Prepare next conversion */
  RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 8002aaa:	181b      	adds	r3, r3, r0
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	18c9      	adds	r1, r1, r3
 8002ab0:	794b      	ldrb	r3, [r1, #5]
 8002ab2:	702b      	strb	r3, [r5, #0]
}
 8002ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8002ab6:	6c34      	ldr	r4, [r6, #64]	@ 0x40
    RCM_NoInj_array[RCM_currentHandle].status = valid;
 8002ab8:	7057      	strb	r7, [r2, #1]
                  = LL_ADC_REG_ReadConversionData12(RCM_handle_array[RCM_currentHandle]->regADC);
 8002aba:	8054      	strh	r4, [r2, #2]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8002abc:	2403      	movs	r4, #3
 8002abe:	68f2      	ldr	r2, [r6, #12]
 8002ac0:	43a2      	bics	r2, r4
 8002ac2:	3c02      	subs	r4, #2
 8002ac4:	4322      	orrs	r2, r4
 8002ac6:	60f2      	str	r2, [r6, #12]
}
 8002ac8:	e7ef      	b.n	8002aaa <RCM_ReadOngoingConv+0x2a>
 8002aca:	46c0      	nop			@ (mov r8, r8)
 8002acc:	200005d4 	.word	0x200005d4
 8002ad0:	20000610 	.word	0x20000610
 8002ad4:	200005d8 	.word	0x200005d8

08002ad8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ad8:	2201      	movs	r2, #1
 8002ada:	4b0a      	ldr	r3, [pc, #40]	@ (8002b04 <HAL_MspInit+0x2c>)
{
 8002adc:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ade:	6999      	ldr	r1, [r3, #24]
 8002ae0:	4311      	orrs	r1, r2
 8002ae2:	6199      	str	r1, [r3, #24]
 8002ae4:	6999      	ldr	r1, [r3, #24]
 8002ae6:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ae8:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aea:	9200      	str	r2, [sp, #0]
 8002aec:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002aee:	69da      	ldr	r2, [r3, #28]
 8002af0:	0549      	lsls	r1, r1, #21
 8002af2:	430a      	orrs	r2, r1
 8002af4:	61da      	str	r2, [r3, #28]
 8002af6:	69db      	ldr	r3, [r3, #28]
 8002af8:	400b      	ands	r3, r1
 8002afa:	9301      	str	r3, [sp, #4]
 8002afc:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002afe:	b002      	add	sp, #8
 8002b00:	4770      	bx	lr
 8002b02:	46c0      	nop			@ (mov r8, r8)
 8002b04:	40021000 	.word	0x40021000

08002b08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002b08:	b570      	push	{r4, r5, r6, lr}
 8002b0a:	0004      	movs	r4, r0
 8002b0c:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b0e:	2214      	movs	r2, #20
 8002b10:	2100      	movs	r1, #0
 8002b12:	a804      	add	r0, sp, #16
 8002b14:	f001 ffc6 	bl	8004aa4 <memset>
  if(hadc->Instance==ADC1)
 8002b18:	4b27      	ldr	r3, [pc, #156]	@ (8002bb8 <HAL_ADC_MspInit+0xb0>)
 8002b1a:	6822      	ldr	r2, [r4, #0]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d001      	beq.n	8002b24 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002b20:	b00a      	add	sp, #40	@ 0x28
 8002b22:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002b24:	2180      	movs	r1, #128	@ 0x80
 8002b26:	4b25      	ldr	r3, [pc, #148]	@ (8002bbc <HAL_ADC_MspInit+0xb4>)
 8002b28:	0089      	lsls	r1, r1, #2
 8002b2a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(M1_CURR_AMPL_GPIO_Port, &GPIO_InitStruct);
 8002b2c:	2090      	movs	r0, #144	@ 0x90
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	619a      	str	r2, [r3, #24]
 8002b32:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(M1_CURR_AMPL_GPIO_Port, &GPIO_InitStruct);
 8002b34:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002b36:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b38:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002b3a:	9201      	str	r2, [sp, #4]
 8002b3c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b3e:	695a      	ldr	r2, [r3, #20]
 8002b40:	0289      	lsls	r1, r1, #10
 8002b42:	430a      	orrs	r2, r1
 8002b44:	615a      	str	r2, [r3, #20]
 8002b46:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b48:	2600      	movs	r6, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b4a:	400a      	ands	r2, r1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b4c:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b4e:	9202      	str	r2, [sp, #8]
 8002b50:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b52:	695a      	ldr	r2, [r3, #20]
 8002b54:	02c9      	lsls	r1, r1, #11
 8002b56:	430a      	orrs	r2, r1
 8002b58:	615a      	str	r2, [r3, #20]
 8002b5a:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_Pin;
 8002b5c:	2220      	movs	r2, #32
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b5e:	400b      	ands	r3, r1
 8002b60:	9303      	str	r3, [sp, #12]
 8002b62:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_Pin;
 8002b64:	2303      	movs	r3, #3
    HAL_GPIO_Init(M1_CURR_AMPL_GPIO_Port, &GPIO_InitStruct);
 8002b66:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_AMPL_Pin;
 8002b68:	9204      	str	r2, [sp, #16]
 8002b6a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(M1_CURR_AMPL_GPIO_Port, &GPIO_InitStruct);
 8002b6c:	f000 fba8 	bl	80032c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin;
 8002b70:	2303      	movs	r3, #3
 8002b72:	2202      	movs	r2, #2
    HAL_GPIO_Init(M1_BUS_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8002b74:	4812      	ldr	r0, [pc, #72]	@ (8002bc0 <HAL_ADC_MspInit+0xb8>)
 8002b76:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin;
 8002b78:	9204      	str	r2, [sp, #16]
 8002b7a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7c:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(M1_BUS_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8002b7e:	f000 fb9f 	bl	80032c0 <HAL_GPIO_Init>
    hdma_adc.Instance = DMA1_Channel1;
 8002b82:	4d10      	ldr	r5, [pc, #64]	@ (8002bc4 <HAL_ADC_MspInit+0xbc>)
 8002b84:	4b10      	ldr	r3, [pc, #64]	@ (8002bc8 <HAL_ADC_MspInit+0xc0>)
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8002b86:	0028      	movs	r0, r5
    hdma_adc.Instance = DMA1_Channel1;
 8002b88:	602b      	str	r3, [r5, #0]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8002b8a:	2380      	movs	r3, #128	@ 0x80
 8002b8c:	60eb      	str	r3, [r5, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002b8e:	3380      	adds	r3, #128	@ 0x80
 8002b90:	612b      	str	r3, [r5, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002b92:	2380      	movs	r3, #128	@ 0x80
 8002b94:	00db      	lsls	r3, r3, #3
 8002b96:	616b      	str	r3, [r5, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8002b98:	2320      	movs	r3, #32
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b9a:	606e      	str	r6, [r5, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b9c:	60ae      	str	r6, [r5, #8]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8002b9e:	61ab      	str	r3, [r5, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8002ba0:	61ee      	str	r6, [r5, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8002ba2:	f000 fb59 	bl	8003258 <HAL_DMA_Init>
 8002ba6:	2800      	cmp	r0, #0
 8002ba8:	d102      	bne.n	8002bb0 <HAL_ADC_MspInit+0xa8>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8002baa:	6325      	str	r5, [r4, #48]	@ 0x30
 8002bac:	626c      	str	r4, [r5, #36]	@ 0x24
}
 8002bae:	e7b7      	b.n	8002b20 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8002bb0:	f7fd fe56 	bl	8000860 <Error_Handler>
 8002bb4:	e7f9      	b.n	8002baa <HAL_ADC_MspInit+0xa2>
 8002bb6:	46c0      	nop			@ (mov r8, r8)
 8002bb8:	40012400 	.word	0x40012400
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	48000400 	.word	0x48000400
 8002bc4:	200004dc 	.word	0x200004dc
 8002bc8:	40020008 	.word	0x40020008

08002bcc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002bcc:	b530      	push	{r4, r5, lr}
 8002bce:	0004      	movs	r4, r0
 8002bd0:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd2:	2214      	movs	r2, #20
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	a802      	add	r0, sp, #8
 8002bd8:	f001 ff64 	bl	8004aa4 <memset>
  if(htim_pwm->Instance==TIM1)
 8002bdc:	4b31      	ldr	r3, [pc, #196]	@ (8002ca4 <HAL_TIM_PWM_MspInit+0xd8>)
 8002bde:	6822      	ldr	r2, [r4, #0]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d001      	beq.n	8002be8 <HAL_TIM_PWM_MspInit+0x1c>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002be4:	b009      	add	sp, #36	@ 0x24
 8002be6:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002be8:	2180      	movs	r1, #128	@ 0x80
 8002bea:	4b2f      	ldr	r3, [pc, #188]	@ (8002ca8 <HAL_TIM_PWM_MspInit+0xdc>)
 8002bec:	0109      	lsls	r1, r1, #4
 8002bee:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8002bf0:	482e      	ldr	r0, [pc, #184]	@ (8002cac <HAL_TIM_PWM_MspInit+0xe0>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	619a      	str	r2, [r3, #24]
 8002bf6:	699a      	ldr	r2, [r3, #24]
 8002bf8:	400a      	ands	r2, r1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bfa:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002bfc:	9200      	str	r2, [sp, #0]
 8002bfe:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c00:	695a      	ldr	r2, [r3, #20]
 8002c02:	02c9      	lsls	r1, r1, #11
 8002c04:	430a      	orrs	r2, r1
 8002c06:	615a      	str	r2, [r3, #20]
 8002c08:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 8002c0a:	2280      	movs	r2, #128	@ 0x80
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c0c:	400b      	ands	r3, r1
 8002c0e:	9301      	str	r3, [sp, #4]
 8002c10:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 8002c12:	2302      	movs	r3, #2
 8002c14:	0152      	lsls	r2, r2, #5
 8002c16:	9202      	str	r2, [sp, #8]
 8002c18:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c1a:	2301      	movs	r3, #1
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8002c1c:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c1e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002c20:	3301      	adds	r3, #1
 8002c22:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8002c24:	f000 fb4c 	bl	80032c0 <HAL_GPIO_Init>
    hdma_tim1_ch4_trig_com.Instance = DMA1_Channel4;
 8002c28:	4d21      	ldr	r5, [pc, #132]	@ (8002cb0 <HAL_TIM_PWM_MspInit+0xe4>)
 8002c2a:	4b22      	ldr	r3, [pc, #136]	@ (8002cb4 <HAL_TIM_PWM_MspInit+0xe8>)
    if (HAL_DMA_Init(&hdma_tim1_ch4_trig_com) != HAL_OK)
 8002c2c:	0028      	movs	r0, r5
    hdma_tim1_ch4_trig_com.Instance = DMA1_Channel4;
 8002c2e:	602b      	str	r3, [r5, #0]
    hdma_tim1_ch4_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c30:	2310      	movs	r3, #16
 8002c32:	606b      	str	r3, [r5, #4]
    hdma_tim1_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c34:	2300      	movs	r3, #0
 8002c36:	60ab      	str	r3, [r5, #8]
    hdma_tim1_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 8002c38:	3380      	adds	r3, #128	@ 0x80
 8002c3a:	60eb      	str	r3, [r5, #12]
    hdma_tim1_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002c3c:	3380      	adds	r3, #128	@ 0x80
 8002c3e:	612b      	str	r3, [r5, #16]
    hdma_tim1_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002c40:	2380      	movs	r3, #128	@ 0x80
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	616b      	str	r3, [r5, #20]
    hdma_tim1_ch4_trig_com.Init.Mode = DMA_CIRCULAR;
 8002c46:	2320      	movs	r3, #32
 8002c48:	61ab      	str	r3, [r5, #24]
    hdma_tim1_ch4_trig_com.Init.Priority = DMA_PRIORITY_HIGH;
 8002c4a:	2380      	movs	r3, #128	@ 0x80
 8002c4c:	019b      	lsls	r3, r3, #6
 8002c4e:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch4_trig_com) != HAL_OK)
 8002c50:	f000 fb02 	bl	8003258 <HAL_DMA_Init>
 8002c54:	2800      	cmp	r0, #0
 8002c56:	d11f      	bne.n	8002c98 <HAL_TIM_PWM_MspInit+0xcc>
    hdma_tim1_ch3_up.Instance = DMA1_Channel5;
 8002c58:	4b17      	ldr	r3, [pc, #92]	@ (8002cb8 <HAL_TIM_PWM_MspInit+0xec>)
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim1_ch4_trig_com);
 8002c5a:	6325      	str	r5, [r4, #48]	@ 0x30
 8002c5c:	626c      	str	r4, [r5, #36]	@ 0x24
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim1_ch4_trig_com);
 8002c5e:	63a5      	str	r5, [r4, #56]	@ 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim1_ch4_trig_com);
 8002c60:	6365      	str	r5, [r4, #52]	@ 0x34
    hdma_tim1_ch3_up.Instance = DMA1_Channel5;
 8002c62:	4d16      	ldr	r5, [pc, #88]	@ (8002cbc <HAL_TIM_PWM_MspInit+0xf0>)
 8002c64:	602b      	str	r3, [r5, #0]
    hdma_tim1_ch3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c66:	2310      	movs	r3, #16
 8002c68:	606b      	str	r3, [r5, #4]
    hdma_tim1_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	60ab      	str	r3, [r5, #8]
    hdma_tim1_ch3_up.Init.MemInc = DMA_MINC_ENABLE;
 8002c6e:	3380      	adds	r3, #128	@ 0x80
 8002c70:	60eb      	str	r3, [r5, #12]
    hdma_tim1_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002c72:	3380      	adds	r3, #128	@ 0x80
 8002c74:	612b      	str	r3, [r5, #16]
    hdma_tim1_ch3_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002c76:	2380      	movs	r3, #128	@ 0x80
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	616b      	str	r3, [r5, #20]
    hdma_tim1_ch3_up.Init.Mode = DMA_CIRCULAR;
 8002c7c:	2320      	movs	r3, #32
 8002c7e:	61ab      	str	r3, [r5, #24]
    hdma_tim1_ch3_up.Init.Priority = DMA_PRIORITY_HIGH;
 8002c80:	2380      	movs	r3, #128	@ 0x80
    if (HAL_DMA_Init(&hdma_tim1_ch3_up) != HAL_OK)
 8002c82:	0028      	movs	r0, r5
    hdma_tim1_ch3_up.Init.Priority = DMA_PRIORITY_HIGH;
 8002c84:	019b      	lsls	r3, r3, #6
 8002c86:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch3_up) != HAL_OK)
 8002c88:	f000 fae6 	bl	8003258 <HAL_DMA_Init>
 8002c8c:	2800      	cmp	r0, #0
 8002c8e:	d106      	bne.n	8002c9e <HAL_TIM_PWM_MspInit+0xd2>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_ch3_up);
 8002c90:	6225      	str	r5, [r4, #32]
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3_up);
 8002c92:	62e5      	str	r5, [r4, #44]	@ 0x2c
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_ch3_up);
 8002c94:	626c      	str	r4, [r5, #36]	@ 0x24
}
 8002c96:	e7a5      	b.n	8002be4 <HAL_TIM_PWM_MspInit+0x18>
      Error_Handler();
 8002c98:	f7fd fde2 	bl	8000860 <Error_Handler>
 8002c9c:	e7dc      	b.n	8002c58 <HAL_TIM_PWM_MspInit+0x8c>
      Error_Handler();
 8002c9e:	f7fd fddf 	bl	8000860 <Error_Handler>
 8002ca2:	e7f5      	b.n	8002c90 <HAL_TIM_PWM_MspInit+0xc4>
 8002ca4:	40012c00 	.word	0x40012c00
 8002ca8:	40021000 	.word	0x40021000
 8002cac:	48000400 	.word	0x48000400
 8002cb0:	20000408 	.word	0x20000408
 8002cb4:	40020044 	.word	0x40020044
 8002cb8:	40020058 	.word	0x40020058
 8002cbc:	200003c4 	.word	0x200003c4

08002cc0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002cc0:	b510      	push	{r4, lr}
 8002cc2:	0004      	movs	r4, r0
 8002cc4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc6:	2214      	movs	r2, #20
 8002cc8:	2100      	movs	r1, #0
 8002cca:	a802      	add	r0, sp, #8
 8002ccc:	f001 feea 	bl	8004aa4 <memset>
  if(htim_encoder->Instance==TIM2)
 8002cd0:	2380      	movs	r3, #128	@ 0x80
 8002cd2:	6822      	ldr	r2, [r4, #0]
 8002cd4:	05db      	lsls	r3, r3, #23
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d001      	beq.n	8002cde <HAL_TIM_Encoder_MspInit+0x1e>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002cda:	b008      	add	sp, #32
 8002cdc:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002cde:	2201      	movs	r2, #1
 8002ce0:	4b0e      	ldr	r3, [pc, #56]	@ (8002d1c <HAL_TIM_Encoder_MspInit+0x5c>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ce2:	2090      	movs	r0, #144	@ 0x90
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ce4:	69d9      	ldr	r1, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ce6:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ce8:	4311      	orrs	r1, r2
 8002cea:	61d9      	str	r1, [r3, #28]
 8002cec:	69d9      	ldr	r1, [r3, #28]
 8002cee:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cf0:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002cf2:	9200      	str	r2, [sp, #0]
 8002cf4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cf6:	695a      	ldr	r2, [r3, #20]
 8002cf8:	0289      	lsls	r1, r1, #10
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	615a      	str	r2, [r3, #20]
 8002cfe:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = M1_ENCODER_A_Pin|M1_ENCODER_B_Pin;
 8002d00:	2203      	movs	r2, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d02:	400b      	ands	r3, r1
 8002d04:	9301      	str	r3, [sp, #4]
 8002d06:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = M1_ENCODER_A_Pin|M1_ENCODER_B_Pin;
 8002d08:	2302      	movs	r3, #2
 8002d0a:	9202      	str	r2, [sp, #8]
 8002d0c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8002d0e:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d10:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8002d12:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d14:	f000 fad4 	bl	80032c0 <HAL_GPIO_Init>
}
 8002d18:	e7df      	b.n	8002cda <HAL_TIM_Encoder_MspInit+0x1a>
 8002d1a:	46c0      	nop			@ (mov r8, r8)
 8002d1c:	40021000 	.word	0x40021000

08002d20 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d20:	b5d0      	push	{r4, r6, r7, lr}
 8002d22:	0004      	movs	r4, r0
 8002d24:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d26:	2214      	movs	r2, #20
 8002d28:	2100      	movs	r1, #0
 8002d2a:	a802      	add	r0, sp, #8
 8002d2c:	f001 feba 	bl	8004aa4 <memset>
  if(htim->Instance==TIM1)
 8002d30:	4b1a      	ldr	r3, [pc, #104]	@ (8002d9c <HAL_TIM_MspPostInit+0x7c>)
 8002d32:	6822      	ldr	r2, [r4, #0]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d001      	beq.n	8002d3c <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002d38:	b008      	add	sp, #32
 8002d3a:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d3c:	2180      	movs	r1, #128	@ 0x80
 8002d3e:	4b18      	ldr	r3, [pc, #96]	@ (8002da0 <HAL_TIM_MspPostInit+0x80>)
 8002d40:	02c9      	lsls	r1, r1, #11
 8002d42:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8002d44:	2601      	movs	r6, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d46:	430a      	orrs	r2, r1
 8002d48:	615a      	str	r2, [r3, #20]
 8002d4a:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8002d4c:	2703      	movs	r7, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d4e:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d50:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d52:	9200      	str	r2, [sp, #0]
 8002d54:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d56:	695a      	ldr	r2, [r3, #20]
 8002d58:	0289      	lsls	r1, r1, #10
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	615a      	str	r2, [r3, #20]
 8002d5e:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8002d60:	22e0      	movs	r2, #224	@ 0xe0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d62:	400b      	ands	r3, r1
 8002d64:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002d66:	2402      	movs	r4, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d68:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	0212      	lsls	r2, r2, #8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d6e:	a902      	add	r1, sp, #8
 8002d70:	480c      	ldr	r0, [pc, #48]	@ (8002da4 <HAL_TIM_MspPostInit+0x84>)
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8002d72:	9202      	str	r2, [sp, #8]
 8002d74:	9303      	str	r3, [sp, #12]
 8002d76:	9604      	str	r6, [sp, #16]
 8002d78:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002d7a:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d7c:	f000 faa0 	bl	80032c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8002d80:	22e0      	movs	r2, #224	@ 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d82:	2090      	movs	r0, #144	@ 0x90
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8002d84:	2302      	movs	r3, #2
 8002d86:	00d2      	lsls	r2, r2, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d88:	a902      	add	r1, sp, #8
 8002d8a:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8002d8c:	9202      	str	r2, [sp, #8]
 8002d8e:	9303      	str	r3, [sp, #12]
 8002d90:	9604      	str	r6, [sp, #16]
 8002d92:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002d94:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d96:	f000 fa93 	bl	80032c0 <HAL_GPIO_Init>
}
 8002d9a:	e7cd      	b.n	8002d38 <HAL_TIM_MspPostInit+0x18>
 8002d9c:	40012c00 	.word	0x40012c00
 8002da0:	40021000 	.word	0x40021000
 8002da4:	48000400 	.word	0x48000400

08002da8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002da8:	e7fe      	b.n	8002da8 <NMI_Handler>
 8002daa:	46c0      	nop			@ (mov r8, r8)

08002dac <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002dac:	4770      	bx	lr
 8002dae:	46c0      	nop			@ (mov r8, r8)

08002db0 <DMA1_Channel1_IRQHandler>:
  /* USER CODE BEGIN CURRENT_REGULATION_IRQn 0 */

  /* USER CODE END CURRENT_REGULATION_IRQn 0 */

  /* Clear Flags */
  DMA1->IFCR = (LL_DMA_ISR_GIF1|LL_DMA_ISR_TCIF1|LL_DMA_ISR_HTIF1);
 8002db0:	2207      	movs	r2, #7
{
 8002db2:	b510      	push	{r4, lr}
  DMA1->IFCR = (LL_DMA_ISR_GIF1|LL_DMA_ISR_TCIF1|LL_DMA_ISR_HTIF1);
 8002db4:	4b02      	ldr	r3, [pc, #8]	@ (8002dc0 <DMA1_Channel1_IRQHandler+0x10>)
 8002db6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN CURRENT_REGULATION_IRQn 1 */

  /* USER CODE END CURRENT_REGULATION_IRQn 1 */
    TSK_HighFrequencyTask();
 8002db8:	f7fe f95e 	bl	8001078 <TSK_HighFrequencyTask>

  /* USER CODE BEGIN CURRENT_REGULATION_IRQn 2 */

  /* USER CODE END CURRENT_REGULATION_IRQn 2 */
}
 8002dbc:	bd10      	pop	{r4, pc}
 8002dbe:	46c0      	nop			@ (mov r8, r8)
 8002dc0:	40020000 	.word	0x40020000

08002dc4 <TIM1_BRK_UP_TRG_COM_IRQHandler>:
  * @brief  This function handles first motor TIMx Update, Break-in interrupt request.
  * @param  None
  * @retval None
  */
void TIMx_UP_BRK_M1_IRQHandler(void)
{
 8002dc4:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN TIMx_UP_BRK_M1_IRQn 0 */

  /* USER CODE END TIMx_UP_BRK_M1_IRQn 0 */

  if(LL_TIM_IsActiveFlag_UPDATE(PWM_Handle_M1.pParams_str->TIMx) && LL_TIM_IsEnabledIT_UPDATE(PWM_Handle_M1.pParams_str->TIMx))
 8002dc6:	25b8      	movs	r5, #184	@ 0xb8
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8002dc8:	2201      	movs	r2, #1
 8002dca:	4c10      	ldr	r4, [pc, #64]	@ (8002e0c <TIM1_BRK_UP_TRG_COM_IRQHandler+0x48>)
 8002dcc:	5963      	ldr	r3, [r4, r5]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	6919      	ldr	r1, [r3, #16]
 8002dd2:	420a      	tst	r2, r1
 8002dd4:	d002      	beq.n	8002ddc <TIM1_BRK_UP_TRG_COM_IRQHandler+0x18>
  return ((READ_BIT(TIMx->DIER, TIM_DIER_UIE) == (TIM_DIER_UIE)) ? 1UL : 0UL);
 8002dd6:	68d9      	ldr	r1, [r3, #12]
 8002dd8:	420a      	tst	r2, r1
 8002dda:	d10d      	bne.n	8002df8 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x34>
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8002ddc:	2280      	movs	r2, #128	@ 0x80
 8002dde:	6919      	ldr	r1, [r3, #16]
 8002de0:	420a      	tst	r2, r1
 8002de2:	d008      	beq.n	8002df6 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x32>
  return ((READ_BIT(TIMx->DIER, TIM_DIER_BIE) == (TIM_DIER_BIE)) ? 1UL : 0UL);
 8002de4:	68d9      	ldr	r1, [r3, #12]
 8002de6:	420a      	tst	r2, r1
 8002de8:	d005      	beq.n	8002df6 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x32>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8002dea:	3a02      	subs	r2, #2
 8002dec:	3aff      	subs	r2, #255	@ 0xff
    /* USER CODE END PWM_Update */
  }
  if(LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx) && LL_TIM_IsEnabledIT_BRK(PWM_Handle_M1.pParams_str->TIMx))
  {
    LL_TIM_ClearFlag_BRK(PWM_Handle_M1.pParams_str->TIMx);
    R1_BRK_IRQHandler(&PWM_Handle_M1);
 8002dee:	0020      	movs	r0, r4
 8002df0:	611a      	str	r2, [r3, #16]
 8002df2:	f7ff fbcf 	bl	8002594 <R1_BRK_IRQHandler>
   /* No other interrupts are routed to this handler */
  }
  /* USER CODE BEGIN TIMx_UP_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_UP_BRK_M1_IRQn 1 */
}
 8002df6:	bd70      	pop	{r4, r5, r6, pc}
    R1_TIM1_UP_IRQHandler(&PWM_Handle_M1);
 8002df8:	0020      	movs	r0, r4
 8002dfa:	f7ff fbfb 	bl	80025f4 <R1_TIM1_UP_IRQHandler>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002dfe:	2202      	movs	r2, #2
    LL_TIM_ClearFlag_UPDATE(PWM_Handle_M1.pParams_str->TIMx);
 8002e00:	5963      	ldr	r3, [r4, r5]
 8002e02:	4252      	negs	r2, r2
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	611a      	str	r2, [r3, #16]
}
 8002e08:	e7e8      	b.n	8002ddc <TIM1_BRK_UP_TRG_COM_IRQHandler+0x18>
 8002e0a:	46c0      	nop			@ (mov r8, r8)
 8002e0c:	20000204 	.word	0x20000204

08002e10 <DMA1_Channel4_5_IRQHandler>:
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF5) == (DMA_ISR_TCIF5));
 8002e10:	2280      	movs	r2, #128	@ 0x80
 8002e12:	4b06      	ldr	r3, [pc, #24]	@ (8002e2c <DMA1_Channel4_5_IRQHandler+0x1c>)
 8002e14:	0292      	lsls	r2, r2, #10
 8002e16:	6819      	ldr	r1, [r3, #0]
  *         Required only for R1 with rep rate > 1
  * @param  None
  * @retval None
  */
void DMAx_R1_M1_IRQHandler(void)
{
 8002e18:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMAx_R1_M1_IRQn 0 */

  /* USER CODE END DMAx_R1_M1_IRQn 0 */
  if (LL_DMA_IsActiveFlag_TC5(DMA1))
 8002e1a:	4211      	tst	r1, r2
 8002e1c:	d100      	bne.n	8002e20 <DMA1_Channel4_5_IRQHandler+0x10>
  }

  /* USER CODE BEGIN DMAx_R1_M1_IRQn 1 */

  /* USER CODE END DMAx_R1_M1_IRQn 1 */
}
 8002e1e:	bd10      	pop	{r4, pc}
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF5);
 8002e20:	605a      	str	r2, [r3, #4]
    R1_DMAx_TC_IRQHandler(&PWM_Handle_M1);
 8002e22:	4803      	ldr	r0, [pc, #12]	@ (8002e30 <DMA1_Channel4_5_IRQHandler+0x20>)
 8002e24:	f7ff fc04 	bl	8002630 <R1_DMAx_TC_IRQHandler>
}
 8002e28:	e7f9      	b.n	8002e1e <DMA1_Channel4_5_IRQHandler+0xe>
 8002e2a:	46c0      	nop			@ (mov r8, r8)
 8002e2c:	40020000 	.word	0x40020000
 8002e30:	20000204 	.word	0x20000204

08002e34 <TIM2_IRQHandler>:
  return ((READ_BIT(TIMx->DIER, TIM_DIER_UIE) == (TIM_DIER_UIE)) ? 1UL : 0UL);
 8002e34:	2201      	movs	r2, #1
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 0 */

  /* USER CODE END SPD_TIM_M1_IRQn 0 */

 /* Encoder Timer UPDATE IT is dynamicaly enabled/disabled, checking enable state is required */
  if (LL_TIM_IsEnabledIT_UPDATE (ENCODER_M1.TIMx) && LL_TIM_IsActiveFlag_UPDATE (ENCODER_M1.TIMx))
 8002e36:	4807      	ldr	r0, [pc, #28]	@ (8002e54 <TIM2_IRQHandler+0x20>)
{
 8002e38:	b510      	push	{r4, lr}
  if (LL_TIM_IsEnabledIT_UPDATE (ENCODER_M1.TIMx) && LL_TIM_IsActiveFlag_UPDATE (ENCODER_M1.TIMx))
 8002e3a:	6a03      	ldr	r3, [r0, #32]
 8002e3c:	68d9      	ldr	r1, [r3, #12]
 8002e3e:	420a      	tst	r2, r1
 8002e40:	d006      	beq.n	8002e50 <TIM2_IRQHandler+0x1c>
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8002e42:	6919      	ldr	r1, [r3, #16]
 8002e44:	420a      	tst	r2, r1
 8002e46:	d003      	beq.n	8002e50 <TIM2_IRQHandler+0x1c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002e48:	3a03      	subs	r2, #3
 8002e4a:	611a      	str	r2, [r3, #16]
  {
    LL_TIM_ClearFlag_UPDATE(ENCODER_M1.TIMx);
    ENC_IRQHandler(&ENCODER_M1);
 8002e4c:	f001 fb80 	bl	8004550 <ENC_IRQHandler>
  /* No other IT to manage for encoder config */
  }
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 1 */

  /* USER CODE END SPD_TIM_M1_IRQn 1 */
}
 8002e50:	bd10      	pop	{r4, pc}
 8002e52:	46c0      	nop			@ (mov r8, r8)
 8002e54:	20000150 	.word	0x20000150

08002e58 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002e58:	b510      	push	{r4, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 8002e5a:	f7fe f9fd 	bl	8001258 <TSK_HardwareFaultTask>

  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8002e5e:	e7fe      	b.n	8002e5e <HardFault_Handler+0x6>

08002e60 <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 8002e60:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8002e62:	4c08      	ldr	r4, [pc, #32]	@ (8002e84 <SysTick_Handler+0x24>)
 8002e64:	7823      	ldrb	r3, [r4, #0]
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d005      	beq.n	8002e76 <SysTick_Handler+0x16>
  }
  else
  {
    /* Nothing to do */
  }
  SystickDividerCounter ++;
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	7023      	strb	r3, [r4, #0]
#endif /* MC_HAL_IS_USED */

  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */

    MC_RunMotorControlTasks();
 8002e70:	f7fe f9e4 	bl	800123c <MC_RunMotorControlTasks>

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 8002e74:	bd10      	pop	{r4, pc}
    HAL_IncTick();
 8002e76:	f000 f83f 	bl	8002ef8 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 8002e7a:	f000 f9e9 	bl	8003250 <HAL_SYSTICK_IRQHandler>
    SystickDividerCounter = 0;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e7f5      	b.n	8002e6e <SysTick_Handler+0xe>
 8002e82:	46c0      	nop			@ (mov r8, r8)
 8002e84:	20000388 	.word	0x20000388

08002e88 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002e88:	4770      	bx	lr
 8002e8a:	46c0      	nop			@ (mov r8, r8)

08002e8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e8c:	b570      	push	{r4, r5, r6, lr}
 8002e8e:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e90:	20fa      	movs	r0, #250	@ 0xfa
 8002e92:	4b0e      	ldr	r3, [pc, #56]	@ (8002ecc <HAL_InitTick+0x40>)
 8002e94:	0080      	lsls	r0, r0, #2
 8002e96:	7819      	ldrb	r1, [r3, #0]
 8002e98:	f7fd f936 	bl	8000108 <__udivsi3>
 8002e9c:	4d0c      	ldr	r5, [pc, #48]	@ (8002ed0 <HAL_InitTick+0x44>)
 8002e9e:	0001      	movs	r1, r0
 8002ea0:	6828      	ldr	r0, [r5, #0]
 8002ea2:	f7fd f931 	bl	8000108 <__udivsi3>
 8002ea6:	f000 f9b7 	bl	8003218 <HAL_SYSTICK_Config>
 8002eaa:	2800      	cmp	r0, #0
 8002eac:	d10c      	bne.n	8002ec8 <HAL_InitTick+0x3c>
  {
    return HAL_ERROR;
 8002eae:	3001      	adds	r0, #1
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002eb0:	2c03      	cmp	r4, #3
 8002eb2:	d900      	bls.n	8002eb6 <HAL_InitTick+0x2a>
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8002eb4:	bd70      	pop	{r4, r5, r6, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002eb6:	3802      	subs	r0, #2
 8002eb8:	2200      	movs	r2, #0
 8002eba:	0021      	movs	r1, r4
 8002ebc:	f000 f976 	bl	80031ac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ec0:	4b04      	ldr	r3, [pc, #16]	@ (8002ed4 <HAL_InitTick+0x48>)
 8002ec2:	2000      	movs	r0, #0
 8002ec4:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 8002ec6:	e7f5      	b.n	8002eb4 <HAL_InitTick+0x28>
    return HAL_ERROR;
 8002ec8:	2001      	movs	r0, #1
 8002eca:	e7f3      	b.n	8002eb4 <HAL_InitTick+0x28>
 8002ecc:	20000390 	.word	0x20000390
 8002ed0:	2000038c 	.word	0x2000038c
 8002ed4:	20000394 	.word	0x20000394

08002ed8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ed8:	2110      	movs	r1, #16
 8002eda:	4a06      	ldr	r2, [pc, #24]	@ (8002ef4 <HAL_Init+0x1c>)
{
 8002edc:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ede:	6813      	ldr	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ee0:	2002      	movs	r0, #2
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ee2:	430b      	orrs	r3, r1
 8002ee4:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ee6:	f7ff ffd1 	bl	8002e8c <HAL_InitTick>
  HAL_MspInit();
 8002eea:	f7ff fdf5 	bl	8002ad8 <HAL_MspInit>
}
 8002eee:	2000      	movs	r0, #0
 8002ef0:	bd10      	pop	{r4, pc}
 8002ef2:	46c0      	nop			@ (mov r8, r8)
 8002ef4:	40022000 	.word	0x40022000

08002ef8 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002ef8:	4a03      	ldr	r2, [pc, #12]	@ (8002f08 <HAL_IncTick+0x10>)
 8002efa:	4b04      	ldr	r3, [pc, #16]	@ (8002f0c <HAL_IncTick+0x14>)
 8002efc:	6811      	ldr	r1, [r2, #0]
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	185b      	adds	r3, r3, r1
 8002f02:	6013      	str	r3, [r2, #0]
}
 8002f04:	4770      	bx	lr
 8002f06:	46c0      	nop			@ (mov r8, r8)
 8002f08:	20000620 	.word	0x20000620
 8002f0c:	20000390 	.word	0x20000390

08002f10 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002f10:	4b01      	ldr	r3, [pc, #4]	@ (8002f18 <HAL_GetTick+0x8>)
 8002f12:	6818      	ldr	r0, [r3, #0]
}
 8002f14:	4770      	bx	lr
 8002f16:	46c0      	nop			@ (mov r8, r8)
 8002f18:	20000620 	.word	0x20000620

08002f1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f1c:	b570      	push	{r4, r5, r6, lr}
 8002f1e:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002f20:	f7ff fff6 	bl	8002f10 <HAL_GetTick>
 8002f24:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f26:	1c63      	adds	r3, r4, #1
 8002f28:	d002      	beq.n	8002f30 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f2a:	4b04      	ldr	r3, [pc, #16]	@ (8002f3c <HAL_Delay+0x20>)
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002f30:	f7ff ffee 	bl	8002f10 <HAL_GetTick>
 8002f34:	1b40      	subs	r0, r0, r5
 8002f36:	42a0      	cmp	r0, r4
 8002f38:	d3fa      	bcc.n	8002f30 <HAL_Delay+0x14>
  {
  }
}
 8002f3a:	bd70      	pop	{r4, r5, r6, pc}
 8002f3c:	20000390 	.word	0x20000390

08002f40 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f40:	b570      	push	{r4, r5, r6, lr}
 8002f42:	1e04      	subs	r4, r0, #0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0U;

  /* Check ADC handle */
  if(hadc == NULL)
 8002f44:	d064      	beq.n	8003010 <HAL_ADC_Init+0xd0>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f46:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d068      	beq.n	800301e <HAL_ADC_Init+0xde>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002f4c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002f4e:	06db      	lsls	r3, r3, #27
 8002f50:	d460      	bmi.n	8003014 <HAL_ADC_Init+0xd4>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002f52:	6822      	ldr	r2, [r4, #0]
 8002f54:	6893      	ldr	r3, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 8002f56:	075b      	lsls	r3, r3, #29
 8002f58:	d45c      	bmi.n	8003014 <HAL_ADC_Init+0xd4>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f5a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002f5c:	4947      	ldr	r1, [pc, #284]	@ (800307c <HAL_ADC_Init+0x13c>)
 8002f5e:	400b      	ands	r3, r1
 8002f60:	3106      	adds	r1, #6
 8002f62:	31ff      	adds	r1, #255	@ 0xff
 8002f64:	430b      	orrs	r3, r1
 8002f66:	63a3      	str	r3, [r4, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002f68:	2303      	movs	r3, #3
 8002f6a:	6891      	ldr	r1, [r2, #8]
 8002f6c:	400b      	ands	r3, r1
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d05b      	beq.n	800302a <HAL_ADC_Init+0xea>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002f72:	2118      	movs	r1, #24
 8002f74:	68d3      	ldr	r3, [r2, #12]
 8002f76:	438b      	bics	r3, r1
 8002f78:	68a1      	ldr	r1, [r4, #8]
 8002f7a:	430b      	orrs	r3, r1
 8002f7c:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002f7e:	6913      	ldr	r3, [r2, #16]
 8002f80:	6861      	ldr	r1, [r4, #4]
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	089b      	lsrs	r3, r3, #2
 8002f86:	430b      	orrs	r3, r1
 8002f88:	6113      	str	r3, [r2, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002f8a:	68d3      	ldr	r3, [r2, #12]
 8002f8c:	493c      	ldr	r1, [pc, #240]	@ (8003080 <HAL_ADC_Init+0x140>)
 8002f8e:	400b      	ands	r3, r1
 8002f90:	60d3      	str	r3, [r2, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002f92:	7e23      	ldrb	r3, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002f94:	7e61      	ldrb	r1, [r4, #25]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002f96:	039b      	lsls	r3, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002f98:	03c9      	lsls	r1, r1, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002f9a:	430b      	orrs	r3, r1
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002f9c:	7ea0      	ldrb	r0, [r4, #26]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
                 hadc->Init.DataAlign                                             |
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002f9e:	68e1      	ldr	r1, [r4, #12]
 8002fa0:	430b      	orrs	r3, r1
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002fa2:	0341      	lsls	r1, r0, #13
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002fa4:	430b      	orrs	r3, r1
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002fa6:	2124      	movs	r1, #36	@ 0x24
 8002fa8:	5c61      	ldrb	r1, [r4, r1]
 8002faa:	0049      	lsls	r1, r1, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002fac:	430b      	orrs	r3, r1
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002fae:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8002fb0:	3901      	subs	r1, #1
 8002fb2:	1e4d      	subs	r5, r1, #1
 8002fb4:	41a9      	sbcs	r1, r5
 8002fb6:	0309      	lsls	r1, r1, #12
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002fb8:	430b      	orrs	r3, r1
 8002fba:	6921      	ldr	r1, [r4, #16]
 8002fbc:	3902      	subs	r1, #2
 8002fbe:	424d      	negs	r5, r1
 8002fc0:	4169      	adcs	r1, r5
 8002fc2:	0089      	lsls	r1, r1, #2
 8002fc4:	430b      	orrs	r3, r1
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002fc6:	7ee1      	ldrb	r1, [r4, #27]
 8002fc8:	2901      	cmp	r1, #1
 8002fca:	d03e      	beq.n	800304a <HAL_ADC_Init+0x10a>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002fcc:	20c2      	movs	r0, #194	@ 0xc2
 8002fce:	69e1      	ldr	r1, [r4, #28]
 8002fd0:	30ff      	adds	r0, #255	@ 0xff
 8002fd2:	4281      	cmp	r1, r0
 8002fd4:	d002      	beq.n	8002fdc <HAL_ADC_Init+0x9c>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002fd6:	6a20      	ldr	r0, [r4, #32]
 8002fd8:	4301      	orrs	r1, r0
 8002fda:	430b      	orrs	r3, r1
                    hadc->Init.ExternalTrigConvEdge );
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002fdc:	68d1      	ldr	r1, [r2, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002fde:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002fe0:	4319      	orrs	r1, r3
 8002fe2:	60d1      	str	r1, [r2, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002fe4:	2180      	movs	r1, #128	@ 0x80
 8002fe6:	0549      	lsls	r1, r1, #21
 8002fe8:	428d      	cmp	r5, r1
 8002fea:	d025      	beq.n	8003038 <HAL_ADC_Init+0xf8>
 8002fec:	1e69      	subs	r1, r5, #1
 8002fee:	2906      	cmp	r1, #6
 8002ff0:	d922      	bls.n	8003038 <HAL_ADC_Init+0xf8>
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002ff2:	68d2      	ldr	r2, [r2, #12]
 8002ff4:	4923      	ldr	r1, [pc, #140]	@ (8003084 <HAL_ADC_Init+0x144>)
 8002ff6:	400a      	ands	r2, r1
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d02c      	beq.n	8003056 <HAL_ADC_Init+0x116>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002ffc:	2212      	movs	r2, #18
 8002ffe:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003000:	4393      	bics	r3, r2
 8003002:	3a02      	subs	r2, #2
 8003004:	4313      	orrs	r3, r2
 8003006:	63a3      	str	r3, [r4, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003008:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800300a:	3a0f      	subs	r2, #15
 800300c:	4313      	orrs	r3, r2
 800300e:	63e3      	str	r3, [r4, #60]	@ 0x3c
    return HAL_ERROR;
 8003010:	2001      	movs	r0, #1
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8003012:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003014:	2210      	movs	r2, #16
 8003016:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003018:	4313      	orrs	r3, r2
 800301a:	63a3      	str	r3, [r4, #56]	@ 0x38
    tmp_hal_status = HAL_ERROR;
 800301c:	e7f8      	b.n	8003010 <HAL_ADC_Init+0xd0>
    hadc->Lock = HAL_UNLOCKED;
 800301e:	2234      	movs	r2, #52	@ 0x34
    ADC_CLEAR_ERRORCODE(hadc);
 8003020:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hadc->Lock = HAL_UNLOCKED;
 8003022:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 8003024:	f7ff fd70 	bl	8002b08 <HAL_ADC_MspInit>
 8003028:	e790      	b.n	8002f4c <HAL_ADC_Init+0xc>
    if (ADC_IS_ENABLE(hadc) == RESET)
 800302a:	6811      	ldr	r1, [r2, #0]
 800302c:	420b      	tst	r3, r1
 800302e:	d1ac      	bne.n	8002f8a <HAL_ADC_Init+0x4a>
 8003030:	68d3      	ldr	r3, [r2, #12]
 8003032:	041b      	lsls	r3, r3, #16
 8003034:	d4a9      	bmi.n	8002f8a <HAL_ADC_Init+0x4a>
 8003036:	e79c      	b.n	8002f72 <HAL_ADC_Init+0x32>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003038:	2107      	movs	r1, #7
 800303a:	6950      	ldr	r0, [r2, #20]
 800303c:	4388      	bics	r0, r1
 800303e:	6150      	str	r0, [r2, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8003040:	6950      	ldr	r0, [r2, #20]
 8003042:	4029      	ands	r1, r5
 8003044:	4301      	orrs	r1, r0
 8003046:	6151      	str	r1, [r2, #20]
 8003048:	e7d3      	b.n	8002ff2 <HAL_ADC_Init+0xb2>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800304a:	2800      	cmp	r0, #0
 800304c:	d10d      	bne.n	800306a <HAL_ADC_Init+0x12a>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800304e:	2180      	movs	r1, #128	@ 0x80
 8003050:	0249      	lsls	r1, r1, #9
 8003052:	430b      	orrs	r3, r1
 8003054:	e7ba      	b.n	8002fcc <HAL_ADC_Init+0x8c>
      ADC_CLEAR_ERRORCODE(hadc);
 8003056:	2300      	movs	r3, #0
      ADC_STATE_CLR_SET(hadc->State,
 8003058:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 800305a:	63e3      	str	r3, [r4, #60]	@ 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 800305c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800305e:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8003060:	4393      	bics	r3, r2
 8003062:	3a02      	subs	r2, #2
 8003064:	4313      	orrs	r3, r2
 8003066:	63a3      	str	r3, [r4, #56]	@ 0x38
 8003068:	e7d3      	b.n	8003012 <HAL_ADC_Init+0xd2>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800306a:	2520      	movs	r5, #32
 800306c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800306e:	4328      	orrs	r0, r5
 8003070:	63a0      	str	r0, [r4, #56]	@ 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003072:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8003074:	4301      	orrs	r1, r0
 8003076:	63e1      	str	r1, [r4, #60]	@ 0x3c
 8003078:	e7a8      	b.n	8002fcc <HAL_ADC_Init+0x8c>
 800307a:	46c0      	nop			@ (mov r8, r8)
 800307c:	fffffefd 	.word	0xfffffefd
 8003080:	fffe0219 	.word	0xfffe0219
 8003084:	833fffe7 	.word	0x833fffe7

08003088 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8003088:	2300      	movs	r3, #0
{
 800308a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800308c:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 800308e:	9301      	str	r3, [sp, #4]
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003090:	3334      	adds	r3, #52	@ 0x34
 8003092:	5cc2      	ldrb	r2, [r0, r3]
{
 8003094:	0004      	movs	r4, r0
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003096:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
  __HAL_LOCK(hadc);
 8003098:	2a01      	cmp	r2, #1
 800309a:	d059      	beq.n	8003150 <HAL_ADC_ConfigChannel+0xc8>
 800309c:	2201      	movs	r2, #1
 800309e:	54c2      	strb	r2, [r0, r3]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80030a0:	6803      	ldr	r3, [r0, #0]
 80030a2:	6898      	ldr	r0, [r3, #8]
 80030a4:	0740      	lsls	r0, r0, #29
 80030a6:	d509      	bpl.n	80030bc <HAL_ADC_ConfigChannel+0x34>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030a8:	2220      	movs	r2, #32
    
    tmp_hal_status = HAL_ERROR;
 80030aa:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030ac:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80030ae:	4313      	orrs	r3, r2
 80030b0:	63a3      	str	r3, [r4, #56]	@ 0x38
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030b2:	2334      	movs	r3, #52	@ 0x34
 80030b4:	2200      	movs	r2, #0
 80030b6:	54e2      	strb	r2, [r4, r3]
  
  /* Return function status */
  return tmp_hal_status;
}
 80030b8:	b003      	add	sp, #12
 80030ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80030bc:	2610      	movs	r6, #16
 80030be:	4276      	negs	r6, r6
 80030c0:	46b4      	mov	ip, r6
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80030c2:	6808      	ldr	r0, [r1, #0]
    if (sConfig->Rank != ADC_RANK_NONE)
 80030c4:	4e32      	ldr	r6, [pc, #200]	@ (8003190 <HAL_ADC_ConfigChannel+0x108>)
 80030c6:	684f      	ldr	r7, [r1, #4]
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80030c8:	4082      	lsls	r2, r0
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80030ca:	4484      	add	ip, r0
    if (sConfig->Rank != ADC_RANK_NONE)
 80030cc:	42b7      	cmp	r7, r6
 80030ce:	d027      	beq.n	8003120 <HAL_ADC_ConfigChannel+0x98>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80030d0:	6a9e      	ldr	r6, [r3, #40]	@ 0x28
 80030d2:	4332      	orrs	r2, r6
 80030d4:	629a      	str	r2, [r3, #40]	@ 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80030d6:	2d07      	cmp	r5, #7
 80030d8:	d91f      	bls.n	800311a <HAL_ADC_ConfigChannel+0x92>
 80030da:	2280      	movs	r2, #128	@ 0x80
 80030dc:	0552      	lsls	r2, r2, #21
 80030de:	4295      	cmp	r5, r2
 80030e0:	d00c      	beq.n	80030fc <HAL_ADC_ConfigChannel+0x74>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80030e2:	2207      	movs	r2, #7
 80030e4:	688d      	ldr	r5, [r1, #8]
 80030e6:	6959      	ldr	r1, [r3, #20]
 80030e8:	4011      	ands	r1, r2
 80030ea:	428d      	cmp	r5, r1
 80030ec:	d006      	beq.n	80030fc <HAL_ADC_ConfigChannel+0x74>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80030ee:	6959      	ldr	r1, [r3, #20]
 80030f0:	4391      	bics	r1, r2
 80030f2:	6159      	str	r1, [r3, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80030f4:	6959      	ldr	r1, [r3, #20]
 80030f6:	402a      	ands	r2, r5
 80030f8:	430a      	orrs	r2, r1
 80030fa:	615a      	str	r2, [r3, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80030fc:	4663      	mov	r3, ip
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d809      	bhi.n	8003116 <HAL_ADC_ConfigChannel+0x8e>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003102:	4b24      	ldr	r3, [pc, #144]	@ (8003194 <HAL_ADC_ConfigChannel+0x10c>)
 8003104:	2180      	movs	r1, #128	@ 0x80
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	2810      	cmp	r0, #16
 800310a:	d025      	beq.n	8003158 <HAL_ADC_ConfigChannel+0xd0>
 800310c:	2811      	cmp	r0, #17
 800310e:	d03a      	beq.n	8003186 <HAL_ADC_ConfigChannel+0xfe>
 8003110:	0449      	lsls	r1, r1, #17
 8003112:	430a      	orrs	r2, r1
 8003114:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003116:	2000      	movs	r0, #0
 8003118:	e7cb      	b.n	80030b2 <HAL_ADC_ConfigChannel+0x2a>
 800311a:	2d00      	cmp	r5, #0
 800311c:	d1ee      	bne.n	80030fc <HAL_ADC_ConfigChannel+0x74>
 800311e:	e7e0      	b.n	80030e2 <HAL_ADC_ConfigChannel+0x5a>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003120:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8003122:	4391      	bics	r1, r2
 8003124:	6299      	str	r1, [r3, #40]	@ 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003126:	4663      	mov	r3, ip
 8003128:	2b02      	cmp	r3, #2
 800312a:	d8f4      	bhi.n	8003116 <HAL_ADC_ConfigChannel+0x8e>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800312c:	4b19      	ldr	r3, [pc, #100]	@ (8003194 <HAL_ADC_ConfigChannel+0x10c>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2810      	cmp	r0, #16
 8003132:	d00f      	beq.n	8003154 <HAL_ADC_ConfigChannel+0xcc>
 8003134:	3811      	subs	r0, #17
 8003136:	1e42      	subs	r2, r0, #1
 8003138:	4190      	sbcs	r0, r2
 800313a:	4a17      	ldr	r2, [pc, #92]	@ (8003198 <HAL_ADC_ConfigChannel+0x110>)
 800313c:	4240      	negs	r0, r0
 800313e:	4010      	ands	r0, r2
 8003140:	4a16      	ldr	r2, [pc, #88]	@ (800319c <HAL_ADC_ConfigChannel+0x114>)
 8003142:	4694      	mov	ip, r2
 8003144:	4460      	add	r0, ip
 8003146:	4018      	ands	r0, r3
 8003148:	4b12      	ldr	r3, [pc, #72]	@ (8003194 <HAL_ADC_ConfigChannel+0x10c>)
 800314a:	6018      	str	r0, [r3, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800314c:	2000      	movs	r0, #0
 800314e:	e7b0      	b.n	80030b2 <HAL_ADC_ConfigChannel+0x2a>
  __HAL_LOCK(hadc);
 8003150:	2002      	movs	r0, #2
 8003152:	e7b1      	b.n	80030b8 <HAL_ADC_ConfigChannel+0x30>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003154:	4812      	ldr	r0, [pc, #72]	@ (80031a0 <HAL_ADC_ConfigChannel+0x118>)
 8003156:	e7f6      	b.n	8003146 <HAL_ADC_ConfigChannel+0xbe>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003158:	0409      	lsls	r1, r1, #16
 800315a:	430a      	orrs	r2, r1
 800315c:	601a      	str	r2, [r3, #0]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800315e:	4b11      	ldr	r3, [pc, #68]	@ (80031a4 <HAL_ADC_ConfigChannel+0x11c>)
 8003160:	4911      	ldr	r1, [pc, #68]	@ (80031a8 <HAL_ADC_ConfigChannel+0x120>)
 8003162:	6818      	ldr	r0, [r3, #0]
 8003164:	f7fc ffd0 	bl	8000108 <__udivsi3>
 8003168:	0083      	lsls	r3, r0, #2
 800316a:	181b      	adds	r3, r3, r0
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8003170:	9b01      	ldr	r3, [sp, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d0cf      	beq.n	8003116 <HAL_ADC_ConfigChannel+0x8e>
            wait_loop_index--;
 8003176:	9b01      	ldr	r3, [sp, #4]
 8003178:	3b01      	subs	r3, #1
 800317a:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800317c:	9b01      	ldr	r3, [sp, #4]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1f9      	bne.n	8003176 <HAL_ADC_ConfigChannel+0xee>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003182:	2000      	movs	r0, #0
 8003184:	e795      	b.n	80030b2 <HAL_ADC_ConfigChannel+0x2a>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003186:	03c9      	lsls	r1, r1, #15
 8003188:	430a      	orrs	r2, r1
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800318a:	2000      	movs	r0, #0
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800318c:	601a      	str	r2, [r3, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800318e:	e790      	b.n	80030b2 <HAL_ADC_ConfigChannel+0x2a>
 8003190:	00001001 	.word	0x00001001
 8003194:	40012708 	.word	0x40012708
 8003198:	ff400000 	.word	0xff400000
 800319c:	ffbfffff 	.word	0xffbfffff
 80031a0:	ff7fffff 	.word	0xff7fffff
 80031a4:	2000038c 	.word	0x2000038c
 80031a8:	000f4240 	.word	0x000f4240

080031ac <HAL_NVIC_SetPriority>:
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80031ac:	22ff      	movs	r2, #255	@ 0xff
 80031ae:	2303      	movs	r3, #3
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031b0:	b510      	push	{r4, lr}
 80031b2:	0014      	movs	r4, r2
 80031b4:	4003      	ands	r3, r0
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	409c      	lsls	r4, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80031ba:	0189      	lsls	r1, r1, #6
 80031bc:	400a      	ands	r2, r1
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80031be:	43e4      	mvns	r4, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80031c0:	409a      	lsls	r2, r3
  if ((int32_t)(IRQn) >= 0)
 80031c2:	2800      	cmp	r0, #0
 80031c4:	db0b      	blt.n	80031de <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80031c6:	4b0c      	ldr	r3, [pc, #48]	@ (80031f8 <HAL_NVIC_SetPriority+0x4c>)
 80031c8:	21c0      	movs	r1, #192	@ 0xc0
 80031ca:	469c      	mov	ip, r3
 80031cc:	0880      	lsrs	r0, r0, #2
 80031ce:	0080      	lsls	r0, r0, #2
 80031d0:	4460      	add	r0, ip
 80031d2:	0089      	lsls	r1, r1, #2
 80031d4:	5843      	ldr	r3, [r0, r1]
 80031d6:	4023      	ands	r3, r4
 80031d8:	4313      	orrs	r3, r2
 80031da:	5043      	str	r3, [r0, r1]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80031dc:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80031de:	230f      	movs	r3, #15
 80031e0:	4906      	ldr	r1, [pc, #24]	@ (80031fc <HAL_NVIC_SetPriority+0x50>)
 80031e2:	4003      	ands	r3, r0
 80031e4:	468c      	mov	ip, r1
 80031e6:	3b08      	subs	r3, #8
 80031e8:	089b      	lsrs	r3, r3, #2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	4463      	add	r3, ip
 80031ee:	69d9      	ldr	r1, [r3, #28]
 80031f0:	400c      	ands	r4, r1
 80031f2:	4314      	orrs	r4, r2
 80031f4:	61dc      	str	r4, [r3, #28]
 80031f6:	e7f1      	b.n	80031dc <HAL_NVIC_SetPriority+0x30>
 80031f8:	e000e100 	.word	0xe000e100
 80031fc:	e000ed00 	.word	0xe000ed00

08003200 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003200:	2800      	cmp	r0, #0
 8003202:	db05      	blt.n	8003210 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003204:	221f      	movs	r2, #31
 8003206:	2301      	movs	r3, #1
 8003208:	4002      	ands	r2, r0
 800320a:	4093      	lsls	r3, r2
 800320c:	4a01      	ldr	r2, [pc, #4]	@ (8003214 <HAL_NVIC_EnableIRQ+0x14>)
 800320e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003210:	4770      	bx	lr
 8003212:	46c0      	nop			@ (mov r8, r8)
 8003214:	e000e100 	.word	0xe000e100

08003218 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003218:	2280      	movs	r2, #128	@ 0x80
 800321a:	1e43      	subs	r3, r0, #1
 800321c:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 800321e:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003220:	4293      	cmp	r3, r2
 8003222:	d20e      	bcs.n	8003242 <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003224:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003226:	4a07      	ldr	r2, [pc, #28]	@ (8003244 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003228:	4807      	ldr	r0, [pc, #28]	@ (8003248 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800322a:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800322c:	6a03      	ldr	r3, [r0, #32]
 800322e:	0609      	lsls	r1, r1, #24
 8003230:	021b      	lsls	r3, r3, #8
 8003232:	0a1b      	lsrs	r3, r3, #8
 8003234:	430b      	orrs	r3, r1
 8003236:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003238:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800323a:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800323c:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800323e:	3307      	adds	r3, #7
 8003240:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003242:	4770      	bx	lr
 8003244:	e000e010 	.word	0xe000e010
 8003248:	e000ed00 	.word	0xe000ed00

0800324c <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800324c:	4770      	bx	lr
 800324e:	46c0      	nop			@ (mov r8, r8)

08003250 <HAL_SYSTICK_IRQHandler>:
{
 8003250:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 8003252:	f7ff fffb 	bl	800324c <HAL_SYSTICK_Callback>
}
 8003256:	bd10      	pop	{r4, pc}

08003258 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003258:	b570      	push	{r4, r5, r6, lr}
 800325a:	1e04      	subs	r4, r0, #0
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 800325c:	d027      	beq.n	80032ae <HAL_DMA_Init+0x56>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800325e:	2521      	movs	r5, #33	@ 0x21
 8003260:	2302      	movs	r3, #2
 8003262:	5543      	strb	r3, [r0, r5]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003264:	6800      	ldr	r0, [r0, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003266:	4b13      	ldr	r3, [pc, #76]	@ (80032b4 <HAL_DMA_Init+0x5c>)
  tmp = hdma->Instance->CCR;
 8003268:	6802      	ldr	r2, [r0, #0]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800326a:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800326c:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 800326e:	6863      	ldr	r3, [r4, #4]
 8003270:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003272:	68e1      	ldr	r1, [r4, #12]
 8003274:	430b      	orrs	r3, r1
 8003276:	6921      	ldr	r1, [r4, #16]
 8003278:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800327a:	6961      	ldr	r1, [r4, #20]
 800327c:	430b      	orrs	r3, r1
 800327e:	69a1      	ldr	r1, [r4, #24]
 8003280:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8003282:	69e1      	ldr	r1, [r4, #28]
 8003284:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 8003286:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003288:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800328a:	4b0b      	ldr	r3, [pc, #44]	@ (80032b8 <HAL_DMA_Init+0x60>)
 800328c:	2114      	movs	r1, #20
 800328e:	469c      	mov	ip, r3
 8003290:	4460      	add	r0, ip
 8003292:	f7fc ff39 	bl	8000108 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8003296:	4b09      	ldr	r3, [pc, #36]	@ (80032bc <HAL_DMA_Init+0x64>)
  hdma->State = HAL_DMA_STATE_READY;
 8003298:	2201      	movs	r2, #1
  hdma->DmaBaseAddress = DMA1;
 800329a:	63e3      	str	r3, [r4, #60]	@ 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800329c:	2300      	movs	r3, #0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800329e:	0080      	lsls	r0, r0, #2
 80032a0:	6420      	str	r0, [r4, #64]	@ 0x40
  return HAL_OK;
 80032a2:	2000      	movs	r0, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032a4:	63a3      	str	r3, [r4, #56]	@ 0x38
  hdma->State = HAL_DMA_STATE_READY;
 80032a6:	5562      	strb	r2, [r4, r5]
  hdma->Lock = HAL_UNLOCKED;
 80032a8:	321f      	adds	r2, #31
 80032aa:	54a3      	strb	r3, [r4, r2]
}
 80032ac:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80032ae:	2001      	movs	r0, #1
 80032b0:	e7fc      	b.n	80032ac <HAL_DMA_Init+0x54>
 80032b2:	46c0      	nop			@ (mov r8, r8)
 80032b4:	ffffc00f 	.word	0xffffc00f
 80032b8:	bffdfff8 	.word	0xbffdfff8
 80032bc:	40020000 	.word	0x40020000

080032c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032c2:	46de      	mov	lr, fp
 80032c4:	4657      	mov	r7, sl
 80032c6:	464e      	mov	r6, r9
 80032c8:	4645      	mov	r5, r8
 80032ca:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032cc:	680a      	ldr	r2, [r1, #0]
{
 80032ce:	468b      	mov	fp, r1
 80032d0:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032d2:	2a00      	cmp	r2, #0
 80032d4:	d071      	beq.n	80033ba <HAL_GPIO_Init+0xfa>
 80032d6:	2190      	movs	r1, #144	@ 0x90
  uint32_t position = 0x00u;
 80032d8:	2300      	movs	r3, #0
 80032da:	05c9      	lsls	r1, r1, #23
 80032dc:	4288      	cmp	r0, r1
 80032de:	d100      	bne.n	80032e2 <HAL_GPIO_Init+0x22>
 80032e0:	e0ce      	b.n	8003480 <HAL_GPIO_Init+0x1c0>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032e2:	49d5      	ldr	r1, [pc, #852]	@ (8003638 <HAL_GPIO_Init+0x378>)
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032e4:	4fd5      	ldr	r7, [pc, #852]	@ (800363c <HAL_GPIO_Init+0x37c>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032e6:	468c      	mov	ip, r1
 80032e8:	4659      	mov	r1, fp
 80032ea:	9102      	str	r1, [sp, #8]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80032ec:	2101      	movs	r1, #1
 80032ee:	4099      	lsls	r1, r3
 80032f0:	4688      	mov	r8, r1
 80032f2:	4011      	ands	r1, r2
 80032f4:	9100      	str	r1, [sp, #0]
    if (iocurrent != 0x00u)
 80032f6:	4641      	mov	r1, r8
 80032f8:	420a      	tst	r2, r1
 80032fa:	d05a      	beq.n	80033b2 <HAL_GPIO_Init+0xf2>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80032fc:	9c02      	ldr	r4, [sp, #8]
 80032fe:	005d      	lsls	r5, r3, #1
 8003300:	6861      	ldr	r1, [r4, #4]
 8003302:	468b      	mov	fp, r1
 8003304:	2103      	movs	r1, #3
 8003306:	465c      	mov	r4, fp
 8003308:	4021      	ands	r1, r4
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800330a:	2403      	movs	r4, #3
 800330c:	40ac      	lsls	r4, r5
 800330e:	43e4      	mvns	r4, r4
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003310:	1e4e      	subs	r6, r1, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003312:	9401      	str	r4, [sp, #4]
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003314:	2e01      	cmp	r6, #1
 8003316:	d957      	bls.n	80033c8 <HAL_GPIO_Init+0x108>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003318:	2903      	cmp	r1, #3
 800331a:	d000      	beq.n	800331e <HAL_GPIO_Init+0x5e>
 800331c:	e16b      	b.n	80035f6 <HAL_GPIO_Init+0x336>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800331e:	40a9      	lsls	r1, r5
      temp = GPIOx->MODER;
 8003320:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003322:	9c01      	ldr	r4, [sp, #4]
 8003324:	4034      	ands	r4, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003326:	4321      	orrs	r1, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003328:	24c0      	movs	r4, #192	@ 0xc0
      GPIOx->MODER = temp;
 800332a:	6001      	str	r1, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800332c:	4659      	mov	r1, fp
 800332e:	02a4      	lsls	r4, r4, #10
 8003330:	4221      	tst	r1, r4
 8003332:	d03e      	beq.n	80033b2 <HAL_GPIO_Init+0xf2>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003334:	4661      	mov	r1, ip
 8003336:	2401      	movs	r4, #1
 8003338:	4665      	mov	r5, ip
 800333a:	6989      	ldr	r1, [r1, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800333c:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800333e:	4321      	orrs	r1, r4
 8003340:	61a9      	str	r1, [r5, #24]
 8003342:	69a9      	ldr	r1, [r5, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003344:	2503      	movs	r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003346:	4021      	ands	r1, r4
 8003348:	4cbd      	ldr	r4, [pc, #756]	@ (8003640 <HAL_GPIO_Init+0x380>)
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800334a:	401d      	ands	r5, r3
 800334c:	46a0      	mov	r8, r4
 800334e:	00ad      	lsls	r5, r5, #2
 8003350:	40ae      	lsls	r6, r5
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003352:	9105      	str	r1, [sp, #20]
 8003354:	9905      	ldr	r1, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2u];
 8003356:	0899      	lsrs	r1, r3, #2
 8003358:	0089      	lsls	r1, r1, #2
 800335a:	4441      	add	r1, r8
 800335c:	688c      	ldr	r4, [r1, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800335e:	43b4      	bics	r4, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003360:	4eb8      	ldr	r6, [pc, #736]	@ (8003644 <HAL_GPIO_Init+0x384>)
 8003362:	42b0      	cmp	r0, r6
 8003364:	d100      	bne.n	8003368 <HAL_GPIO_Init+0xa8>
 8003366:	e087      	b.n	8003478 <HAL_GPIO_Init+0x1b8>
 8003368:	4eb7      	ldr	r6, [pc, #732]	@ (8003648 <HAL_GPIO_Init+0x388>)
 800336a:	42b0      	cmp	r0, r6
 800336c:	d100      	bne.n	8003370 <HAL_GPIO_Init+0xb0>
 800336e:	e071      	b.n	8003454 <HAL_GPIO_Init+0x194>
 8003370:	2605      	movs	r6, #5
 8003372:	40ae      	lsls	r6, r5
 8003374:	4334      	orrs	r4, r6
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003376:	2680      	movs	r6, #128	@ 0x80
 8003378:	465d      	mov	r5, fp
        SYSCFG->EXTICR[position >> 2u] = temp;
 800337a:	608c      	str	r4, [r1, #8]
        temp &= ~(iocurrent);
 800337c:	9c00      	ldr	r4, [sp, #0]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800337e:	0376      	lsls	r6, r6, #13
        temp &= ~(iocurrent);
 8003380:	43e4      	mvns	r4, r4
        temp = EXTI->RTSR;
 8003382:	68b9      	ldr	r1, [r7, #8]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003384:	4235      	tst	r5, r6
 8003386:	d000      	beq.n	800338a <HAL_GPIO_Init+0xca>
 8003388:	e073      	b.n	8003472 <HAL_GPIO_Init+0x1b2>
        temp &= ~(iocurrent);
 800338a:	4021      	ands	r1, r4
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800338c:	465d      	mov	r5, fp
        EXTI->RTSR = temp;
 800338e:	60b9      	str	r1, [r7, #8]
        temp = EXTI->FTSR;
 8003390:	68f9      	ldr	r1, [r7, #12]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003392:	02ad      	lsls	r5, r5, #10
 8003394:	d46a      	bmi.n	800346c <HAL_GPIO_Init+0x1ac>
        temp &= ~(iocurrent);
 8003396:	4021      	ands	r1, r4
        EXTI->FTSR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003398:	465d      	mov	r5, fp
        EXTI->FTSR = temp;
 800339a:	60f9      	str	r1, [r7, #12]
        temp = EXTI->EMR;
 800339c:	6879      	ldr	r1, [r7, #4]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800339e:	03ad      	lsls	r5, r5, #14
 80033a0:	d461      	bmi.n	8003466 <HAL_GPIO_Init+0x1a6>
        temp &= ~(iocurrent);
 80033a2:	4021      	ands	r1, r4
        }
        EXTI->EMR = temp;

        temp = EXTI->IMR;
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80033a4:	465d      	mov	r5, fp
        EXTI->EMR = temp;
 80033a6:	6079      	str	r1, [r7, #4]
        temp = EXTI->IMR;
 80033a8:	6839      	ldr	r1, [r7, #0]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80033aa:	03ed      	lsls	r5, r5, #15
 80033ac:	d456      	bmi.n	800345c <HAL_GPIO_Init+0x19c>
        temp &= ~(iocurrent);
 80033ae:	4021      	ands	r1, r4
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 80033b0:	6039      	str	r1, [r7, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033b2:	0011      	movs	r1, r2
      }
    }

    position++;
 80033b4:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033b6:	40d9      	lsrs	r1, r3
 80033b8:	d198      	bne.n	80032ec <HAL_GPIO_Init+0x2c>
  } 
}
 80033ba:	b007      	add	sp, #28
 80033bc:	bcf0      	pop	{r4, r5, r6, r7}
 80033be:	46bb      	mov	fp, r7
 80033c0:	46b2      	mov	sl, r6
 80033c2:	46a9      	mov	r9, r5
 80033c4:	46a0      	mov	r8, r4
 80033c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->OSPEEDR;
 80033c8:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80033ca:	4026      	ands	r6, r4
 80033cc:	46b2      	mov	sl, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 80033ce:	9e02      	ldr	r6, [sp, #8]
 80033d0:	68f6      	ldr	r6, [r6, #12]
 80033d2:	40ae      	lsls	r6, r5
 80033d4:	46b1      	mov	r9, r6
 80033d6:	4656      	mov	r6, sl
 80033d8:	464c      	mov	r4, r9
 80033da:	4326      	orrs	r6, r4
        GPIOx->OSPEEDR = temp;
 80033dc:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80033de:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033e0:	0026      	movs	r6, r4
 80033e2:	4644      	mov	r4, r8
 80033e4:	43a6      	bics	r6, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033e6:	465c      	mov	r4, fp
 80033e8:	0924      	lsrs	r4, r4, #4
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033ea:	46b1      	mov	r9, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033ec:	0026      	movs	r6, r4
 80033ee:	2401      	movs	r4, #1
 80033f0:	4026      	ands	r6, r4
 80033f2:	409e      	lsls	r6, r3
 80033f4:	46b0      	mov	r8, r6
 80033f6:	464e      	mov	r6, r9
 80033f8:	4644      	mov	r4, r8
 80033fa:	4326      	orrs	r6, r4
        GPIOx->OTYPER = temp;
 80033fc:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 80033fe:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003400:	0026      	movs	r6, r4
 8003402:	9c01      	ldr	r4, [sp, #4]
 8003404:	4026      	ands	r6, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003406:	9c02      	ldr	r4, [sp, #8]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003408:	46b1      	mov	r9, r6
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800340a:	68a4      	ldr	r4, [r4, #8]
 800340c:	0026      	movs	r6, r4
 800340e:	40ae      	lsls	r6, r5
 8003410:	46b0      	mov	r8, r6
 8003412:	464e      	mov	r6, r9
 8003414:	4644      	mov	r4, r8
 8003416:	4326      	orrs	r6, r4
        GPIOx->PUPDR = temp;
 8003418:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800341a:	2902      	cmp	r1, #2
 800341c:	d000      	beq.n	8003420 <HAL_GPIO_Init+0x160>
 800341e:	e77e      	b.n	800331e <HAL_GPIO_Init+0x5e>
        temp = GPIOx->AFR[position >> 3u];
 8003420:	08dc      	lsrs	r4, r3, #3
 8003422:	00a4      	lsls	r4, r4, #2
 8003424:	46a0      	mov	r8, r4
 8003426:	4480      	add	r8, r0
 8003428:	4644      	mov	r4, r8
 800342a:	6a26      	ldr	r6, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800342c:	2407      	movs	r4, #7
 800342e:	401c      	ands	r4, r3
 8003430:	00a4      	lsls	r4, r4, #2
 8003432:	46a1      	mov	r9, r4
        temp = GPIOx->AFR[position >> 3u];
 8003434:	9603      	str	r6, [sp, #12]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003436:	240f      	movs	r4, #15
 8003438:	464e      	mov	r6, r9
 800343a:	40b4      	lsls	r4, r6
 800343c:	9e03      	ldr	r6, [sp, #12]
 800343e:	43a6      	bics	r6, r4
 8003440:	9603      	str	r6, [sp, #12]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003442:	464e      	mov	r6, r9
 8003444:	9c02      	ldr	r4, [sp, #8]
 8003446:	6924      	ldr	r4, [r4, #16]
 8003448:	40b4      	lsls	r4, r6
 800344a:	9e03      	ldr	r6, [sp, #12]
 800344c:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3u] = temp;
 800344e:	4644      	mov	r4, r8
 8003450:	6226      	str	r6, [r4, #32]
 8003452:	e764      	b.n	800331e <HAL_GPIO_Init+0x5e>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003454:	2602      	movs	r6, #2
 8003456:	40ae      	lsls	r6, r5
 8003458:	4334      	orrs	r4, r6
 800345a:	e78c      	b.n	8003376 <HAL_GPIO_Init+0xb6>
          temp |= iocurrent;
 800345c:	9c00      	ldr	r4, [sp, #0]
 800345e:	430c      	orrs	r4, r1
 8003460:	0021      	movs	r1, r4
        EXTI->IMR = temp;
 8003462:	6039      	str	r1, [r7, #0]
 8003464:	e7a5      	b.n	80033b2 <HAL_GPIO_Init+0xf2>
          temp |= iocurrent;
 8003466:	9d00      	ldr	r5, [sp, #0]
 8003468:	4329      	orrs	r1, r5
 800346a:	e79b      	b.n	80033a4 <HAL_GPIO_Init+0xe4>
          temp |= iocurrent;
 800346c:	9d00      	ldr	r5, [sp, #0]
 800346e:	4329      	orrs	r1, r5
 8003470:	e792      	b.n	8003398 <HAL_GPIO_Init+0xd8>
          temp |= iocurrent;
 8003472:	9d00      	ldr	r5, [sp, #0]
 8003474:	4329      	orrs	r1, r5
 8003476:	e789      	b.n	800338c <HAL_GPIO_Init+0xcc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003478:	2601      	movs	r6, #1
 800347a:	40ae      	lsls	r6, r5
 800347c:	4334      	orrs	r4, r6
 800347e:	e77a      	b.n	8003376 <HAL_GPIO_Init+0xb6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003480:	496d      	ldr	r1, [pc, #436]	@ (8003638 <HAL_GPIO_Init+0x378>)
  uint32_t position = 0x00u;
 8003482:	2300      	movs	r3, #0
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003484:	468a      	mov	sl, r1
        temp = EXTI->RTSR;
 8003486:	4659      	mov	r1, fp
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003488:	2701      	movs	r7, #1
        temp = EXTI->RTSR;
 800348a:	9102      	str	r1, [sp, #8]
 800348c:	e048      	b.n	8003520 <HAL_GPIO_Init+0x260>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800348e:	2903      	cmp	r1, #3
 8003490:	d000      	beq.n	8003494 <HAL_GPIO_Init+0x1d4>
 8003492:	e0bd      	b.n	8003610 <HAL_GPIO_Init+0x350>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003494:	40a9      	lsls	r1, r5
      temp = GPIOx->MODER;
 8003496:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003498:	9c01      	ldr	r4, [sp, #4]
 800349a:	4034      	ands	r4, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800349c:	4321      	orrs	r1, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800349e:	24c0      	movs	r4, #192	@ 0xc0
      GPIOx->MODER = temp;
 80034a0:	6001      	str	r1, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034a2:	4659      	mov	r1, fp
 80034a4:	02a4      	lsls	r4, r4, #10
 80034a6:	4221      	tst	r1, r4
 80034a8:	d035      	beq.n	8003516 <HAL_GPIO_Init+0x256>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034aa:	4651      	mov	r1, sl
 80034ac:	4654      	mov	r4, sl
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80034ae:	2503      	movs	r5, #3
 80034b0:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034b2:	6989      	ldr	r1, [r1, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80034b4:	401d      	ands	r5, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034b6:	4339      	orrs	r1, r7
 80034b8:	61a1      	str	r1, [r4, #24]
 80034ba:	69a1      	ldr	r1, [r4, #24]
 80034bc:	4c60      	ldr	r4, [pc, #384]	@ (8003640 <HAL_GPIO_Init+0x380>)
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80034be:	00ad      	lsls	r5, r5, #2
 80034c0:	46a4      	mov	ip, r4
 80034c2:	40ae      	lsls	r6, r5
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80034c4:	465d      	mov	r5, fp
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034c6:	4039      	ands	r1, r7
 80034c8:	9105      	str	r1, [sp, #20]
 80034ca:	9905      	ldr	r1, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2u];
 80034cc:	0899      	lsrs	r1, r3, #2
 80034ce:	0089      	lsls	r1, r1, #2
 80034d0:	4461      	add	r1, ip
 80034d2:	688c      	ldr	r4, [r1, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80034d4:	43b4      	bics	r4, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 80034d6:	608c      	str	r4, [r1, #8]
        temp = EXTI->RTSR;
 80034d8:	4958      	ldr	r1, [pc, #352]	@ (800363c <HAL_GPIO_Init+0x37c>)
        temp &= ~(iocurrent);
 80034da:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->RTSR;
 80034dc:	6889      	ldr	r1, [r1, #8]
        temp &= ~(iocurrent);
 80034de:	43e4      	mvns	r4, r4
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80034e0:	02ed      	lsls	r5, r5, #11
 80034e2:	d500      	bpl.n	80034e6 <HAL_GPIO_Init+0x226>
 80034e4:	e084      	b.n	80035f0 <HAL_GPIO_Init+0x330>
        temp &= ~(iocurrent);
 80034e6:	4021      	ands	r1, r4
        EXTI->RTSR = temp;
 80034e8:	4d54      	ldr	r5, [pc, #336]	@ (800363c <HAL_GPIO_Init+0x37c>)
 80034ea:	60a9      	str	r1, [r5, #8]
        temp = EXTI->FTSR;
 80034ec:	68e9      	ldr	r1, [r5, #12]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80034ee:	465d      	mov	r5, fp
 80034f0:	02ad      	lsls	r5, r5, #10
 80034f2:	d47a      	bmi.n	80035ea <HAL_GPIO_Init+0x32a>
        temp &= ~(iocurrent);
 80034f4:	4021      	ands	r1, r4
        EXTI->FTSR = temp;
 80034f6:	4d51      	ldr	r5, [pc, #324]	@ (800363c <HAL_GPIO_Init+0x37c>)
 80034f8:	60e9      	str	r1, [r5, #12]
        temp = EXTI->EMR;
 80034fa:	6869      	ldr	r1, [r5, #4]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80034fc:	465d      	mov	r5, fp
 80034fe:	03ad      	lsls	r5, r5, #14
 8003500:	d470      	bmi.n	80035e4 <HAL_GPIO_Init+0x324>
        temp &= ~(iocurrent);
 8003502:	4021      	ands	r1, r4
        EXTI->EMR = temp;
 8003504:	4d4d      	ldr	r5, [pc, #308]	@ (800363c <HAL_GPIO_Init+0x37c>)
 8003506:	6069      	str	r1, [r5, #4]
        temp = EXTI->IMR;
 8003508:	6829      	ldr	r1, [r5, #0]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800350a:	465d      	mov	r5, fp
 800350c:	03ed      	lsls	r5, r5, #15
 800350e:	d465      	bmi.n	80035dc <HAL_GPIO_Init+0x31c>
        temp &= ~(iocurrent);
 8003510:	4021      	ands	r1, r4
        EXTI->IMR = temp;
 8003512:	4c4a      	ldr	r4, [pc, #296]	@ (800363c <HAL_GPIO_Init+0x37c>)
 8003514:	6021      	str	r1, [r4, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003516:	0011      	movs	r1, r2
    position++;
 8003518:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800351a:	40d9      	lsrs	r1, r3
 800351c:	d100      	bne.n	8003520 <HAL_GPIO_Init+0x260>
 800351e:	e74c      	b.n	80033ba <HAL_GPIO_Init+0xfa>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003520:	0039      	movs	r1, r7
 8003522:	4099      	lsls	r1, r3
 8003524:	468c      	mov	ip, r1
 8003526:	4011      	ands	r1, r2
 8003528:	9100      	str	r1, [sp, #0]
    if (iocurrent != 0x00u)
 800352a:	4661      	mov	r1, ip
 800352c:	4211      	tst	r1, r2
 800352e:	d0f2      	beq.n	8003516 <HAL_GPIO_Init+0x256>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003530:	9902      	ldr	r1, [sp, #8]
 8003532:	005d      	lsls	r5, r3, #1
 8003534:	6849      	ldr	r1, [r1, #4]
 8003536:	468b      	mov	fp, r1
 8003538:	2103      	movs	r1, #3
 800353a:	465c      	mov	r4, fp
 800353c:	4021      	ands	r1, r4
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800353e:	2403      	movs	r4, #3
 8003540:	40ac      	lsls	r4, r5
 8003542:	43e4      	mvns	r4, r4
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003544:	1e4e      	subs	r6, r1, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003546:	9401      	str	r4, [sp, #4]
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003548:	2e01      	cmp	r6, #1
 800354a:	d8a0      	bhi.n	800348e <HAL_GPIO_Init+0x1ce>
        temp = GPIOx->OSPEEDR;
 800354c:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800354e:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003550:	9c02      	ldr	r4, [sp, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003552:	46b1      	mov	r9, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003554:	68e6      	ldr	r6, [r4, #12]
 8003556:	40ae      	lsls	r6, r5
 8003558:	46b0      	mov	r8, r6
 800355a:	464e      	mov	r6, r9
 800355c:	4644      	mov	r4, r8
 800355e:	4326      	orrs	r6, r4
        GPIOx->OSPEEDR = temp;
 8003560:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8003562:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003564:	0026      	movs	r6, r4
 8003566:	4664      	mov	r4, ip
 8003568:	43a6      	bics	r6, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800356a:	465c      	mov	r4, fp
 800356c:	0924      	lsrs	r4, r4, #4
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800356e:	46b0      	mov	r8, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003570:	0026      	movs	r6, r4
 8003572:	403e      	ands	r6, r7
 8003574:	409e      	lsls	r6, r3
 8003576:	46b4      	mov	ip, r6
 8003578:	4646      	mov	r6, r8
 800357a:	4664      	mov	r4, ip
 800357c:	4326      	orrs	r6, r4
        GPIOx->OTYPER = temp;
 800357e:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 8003580:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003582:	0026      	movs	r6, r4
 8003584:	9c01      	ldr	r4, [sp, #4]
 8003586:	4026      	ands	r6, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003588:	9c02      	ldr	r4, [sp, #8]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800358a:	46b0      	mov	r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800358c:	68a4      	ldr	r4, [r4, #8]
 800358e:	0026      	movs	r6, r4
 8003590:	40ae      	lsls	r6, r5
 8003592:	46b4      	mov	ip, r6
 8003594:	4646      	mov	r6, r8
 8003596:	4664      	mov	r4, ip
 8003598:	4326      	orrs	r6, r4
        GPIOx->PUPDR = temp;
 800359a:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800359c:	2902      	cmp	r1, #2
 800359e:	d000      	beq.n	80035a2 <HAL_GPIO_Init+0x2e2>
 80035a0:	e778      	b.n	8003494 <HAL_GPIO_Init+0x1d4>
        temp = GPIOx->AFR[position >> 3u];
 80035a2:	08dc      	lsrs	r4, r3, #3
 80035a4:	00a4      	lsls	r4, r4, #2
 80035a6:	46a4      	mov	ip, r4
 80035a8:	2490      	movs	r4, #144	@ 0x90
 80035aa:	05e4      	lsls	r4, r4, #23
 80035ac:	46a0      	mov	r8, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80035ae:	44c4      	add	ip, r8
        temp = GPIOx->AFR[position >> 3u];
 80035b0:	4664      	mov	r4, ip
 80035b2:	6a26      	ldr	r6, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80035b4:	2407      	movs	r4, #7
 80035b6:	401c      	ands	r4, r3
 80035b8:	00a4      	lsls	r4, r4, #2
 80035ba:	46a1      	mov	r9, r4
        temp = GPIOx->AFR[position >> 3u];
 80035bc:	9603      	str	r6, [sp, #12]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80035be:	240f      	movs	r4, #15
 80035c0:	464e      	mov	r6, r9
 80035c2:	40b4      	lsls	r4, r6
 80035c4:	9e03      	ldr	r6, [sp, #12]
 80035c6:	43a6      	bics	r6, r4
 80035c8:	9603      	str	r6, [sp, #12]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80035ca:	464e      	mov	r6, r9
 80035cc:	9c02      	ldr	r4, [sp, #8]
 80035ce:	6924      	ldr	r4, [r4, #16]
 80035d0:	40b4      	lsls	r4, r6
 80035d2:	9e03      	ldr	r6, [sp, #12]
 80035d4:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3u] = temp;
 80035d6:	4664      	mov	r4, ip
 80035d8:	6226      	str	r6, [r4, #32]
 80035da:	e75b      	b.n	8003494 <HAL_GPIO_Init+0x1d4>
          temp |= iocurrent;
 80035dc:	9c00      	ldr	r4, [sp, #0]
 80035de:	430c      	orrs	r4, r1
 80035e0:	0021      	movs	r1, r4
 80035e2:	e796      	b.n	8003512 <HAL_GPIO_Init+0x252>
          temp |= iocurrent;
 80035e4:	9d00      	ldr	r5, [sp, #0]
 80035e6:	4329      	orrs	r1, r5
 80035e8:	e78c      	b.n	8003504 <HAL_GPIO_Init+0x244>
          temp |= iocurrent;
 80035ea:	9d00      	ldr	r5, [sp, #0]
 80035ec:	4329      	orrs	r1, r5
 80035ee:	e782      	b.n	80034f6 <HAL_GPIO_Init+0x236>
          temp |= iocurrent;
 80035f0:	9d00      	ldr	r5, [sp, #0]
 80035f2:	4329      	orrs	r1, r5
 80035f4:	e778      	b.n	80034e8 <HAL_GPIO_Init+0x228>
 80035f6:	0026      	movs	r6, r4
        temp = GPIOx->PUPDR;
 80035f8:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80035fa:	4034      	ands	r4, r6
 80035fc:	46a1      	mov	r9, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80035fe:	9c02      	ldr	r4, [sp, #8]
 8003600:	68a4      	ldr	r4, [r4, #8]
 8003602:	40ac      	lsls	r4, r5
 8003604:	46a0      	mov	r8, r4
 8003606:	464c      	mov	r4, r9
 8003608:	4646      	mov	r6, r8
 800360a:	4334      	orrs	r4, r6
        GPIOx->PUPDR = temp;
 800360c:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800360e:	e686      	b.n	800331e <HAL_GPIO_Init+0x5e>
 8003610:	0026      	movs	r6, r4
        temp = GPIOx->PUPDR;
 8003612:	2490      	movs	r4, #144	@ 0x90
 8003614:	05e4      	lsls	r4, r4, #23
 8003616:	46a0      	mov	r8, r4
 8003618:	68e4      	ldr	r4, [r4, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800361a:	4034      	ands	r4, r6
 800361c:	46a1      	mov	r9, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800361e:	9c02      	ldr	r4, [sp, #8]
 8003620:	68a4      	ldr	r4, [r4, #8]
 8003622:	40ac      	lsls	r4, r5
 8003624:	46a4      	mov	ip, r4
 8003626:	464c      	mov	r4, r9
 8003628:	4666      	mov	r6, ip
 800362a:	4334      	orrs	r4, r6
 800362c:	46a4      	mov	ip, r4
        GPIOx->PUPDR = temp;
 800362e:	4644      	mov	r4, r8
 8003630:	4666      	mov	r6, ip
 8003632:	60e6      	str	r6, [r4, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003634:	e72e      	b.n	8003494 <HAL_GPIO_Init+0x1d4>
 8003636:	46c0      	nop			@ (mov r8, r8)
 8003638:	40021000 	.word	0x40021000
 800363c:	40010400 	.word	0x40010400
 8003640:	40010000 	.word	0x40010000
 8003644:	48000400 	.word	0x48000400
 8003648:	48000800 	.word	0x48000800

0800364c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800364c:	2a00      	cmp	r2, #0
 800364e:	d001      	beq.n	8003654 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003650:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003652:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003654:	6281      	str	r1, [r0, #40]	@ 0x28
}
 8003656:	e7fc      	b.n	8003652 <HAL_GPIO_WritePin+0x6>

08003658 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800365a:	46ce      	mov	lr, r9
 800365c:	4647      	mov	r7, r8
 800365e:	b580      	push	{r7, lr}
 8003660:	0004      	movs	r4, r0
 8003662:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003664:	2800      	cmp	r0, #0
 8003666:	d100      	bne.n	800366a <HAL_RCC_OscConfig+0x12>
 8003668:	e0f2      	b.n	8003850 <HAL_RCC_OscConfig+0x1f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800366a:	6803      	ldr	r3, [r0, #0]
 800366c:	07da      	lsls	r2, r3, #31
 800366e:	d535      	bpl.n	80036dc <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003670:	210c      	movs	r1, #12
 8003672:	48c3      	ldr	r0, [pc, #780]	@ (8003980 <HAL_RCC_OscConfig+0x328>)
 8003674:	6842      	ldr	r2, [r0, #4]
 8003676:	400a      	ands	r2, r1
 8003678:	2a04      	cmp	r2, #4
 800367a:	d100      	bne.n	800367e <HAL_RCC_OscConfig+0x26>
 800367c:	e101      	b.n	8003882 <HAL_RCC_OscConfig+0x22a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800367e:	6842      	ldr	r2, [r0, #4]
 8003680:	4011      	ands	r1, r2
 8003682:	2908      	cmp	r1, #8
 8003684:	d100      	bne.n	8003688 <HAL_RCC_OscConfig+0x30>
 8003686:	e0f8      	b.n	800387a <HAL_RCC_OscConfig+0x222>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003688:	6863      	ldr	r3, [r4, #4]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d00f      	beq.n	80036ae <HAL_RCC_OscConfig+0x56>
 800368e:	2b00      	cmp	r3, #0
 8003690:	d100      	bne.n	8003694 <HAL_RCC_OscConfig+0x3c>
 8003692:	e11e      	b.n	80038d2 <HAL_RCC_OscConfig+0x27a>
 8003694:	2b05      	cmp	r3, #5
 8003696:	d100      	bne.n	800369a <HAL_RCC_OscConfig+0x42>
 8003698:	e1a7      	b.n	80039ea <HAL_RCC_OscConfig+0x392>
 800369a:	4bb9      	ldr	r3, [pc, #740]	@ (8003980 <HAL_RCC_OscConfig+0x328>)
 800369c:	49b9      	ldr	r1, [pc, #740]	@ (8003984 <HAL_RCC_OscConfig+0x32c>)
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	400a      	ands	r2, r1
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	49b8      	ldr	r1, [pc, #736]	@ (8003988 <HAL_RCC_OscConfig+0x330>)
 80036a8:	400a      	ands	r2, r1
 80036aa:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036ac:	e005      	b.n	80036ba <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036ae:	2380      	movs	r3, #128	@ 0x80
 80036b0:	4ab3      	ldr	r2, [pc, #716]	@ (8003980 <HAL_RCC_OscConfig+0x328>)
 80036b2:	025b      	lsls	r3, r3, #9
 80036b4:	6811      	ldr	r1, [r2, #0]
 80036b6:	430b      	orrs	r3, r1
 80036b8:	6013      	str	r3, [r2, #0]
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ba:	f7ff fc29 	bl	8002f10 <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036be:	2680      	movs	r6, #128	@ 0x80
        tickstart = HAL_GetTick();
 80036c0:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036c2:	4faf      	ldr	r7, [pc, #700]	@ (8003980 <HAL_RCC_OscConfig+0x328>)
 80036c4:	02b6      	lsls	r6, r6, #10
 80036c6:	e005      	b.n	80036d4 <HAL_RCC_OscConfig+0x7c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036c8:	f7ff fc22 	bl	8002f10 <HAL_GetTick>
 80036cc:	1b40      	subs	r0, r0, r5
 80036ce:	2864      	cmp	r0, #100	@ 0x64
 80036d0:	d900      	bls.n	80036d4 <HAL_RCC_OscConfig+0x7c>
 80036d2:	e0fc      	b.n	80038ce <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	4233      	tst	r3, r6
 80036d8:	d0f6      	beq.n	80036c8 <HAL_RCC_OscConfig+0x70>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036da:	6823      	ldr	r3, [r4, #0]
 80036dc:	079a      	lsls	r2, r3, #30
 80036de:	d529      	bpl.n	8003734 <HAL_RCC_OscConfig+0xdc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80036e0:	220c      	movs	r2, #12
 80036e2:	49a7      	ldr	r1, [pc, #668]	@ (8003980 <HAL_RCC_OscConfig+0x328>)
 80036e4:	6848      	ldr	r0, [r1, #4]
 80036e6:	4202      	tst	r2, r0
 80036e8:	d100      	bne.n	80036ec <HAL_RCC_OscConfig+0x94>
 80036ea:	e0aa      	b.n	8003842 <HAL_RCC_OscConfig+0x1ea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80036ec:	6848      	ldr	r0, [r1, #4]
 80036ee:	4002      	ands	r2, r0
 80036f0:	2a08      	cmp	r2, #8
 80036f2:	d100      	bne.n	80036f6 <HAL_RCC_OscConfig+0x9e>
 80036f4:	e0a1      	b.n	800383a <HAL_RCC_OscConfig+0x1e2>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036f6:	68e3      	ldr	r3, [r4, #12]
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036f8:	4da1      	ldr	r5, [pc, #644]	@ (8003980 <HAL_RCC_OscConfig+0x328>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d100      	bne.n	8003700 <HAL_RCC_OscConfig+0xa8>
 80036fe:	e11f      	b.n	8003940 <HAL_RCC_OscConfig+0x2e8>
        __HAL_RCC_HSI_ENABLE();
 8003700:	2201      	movs	r2, #1
 8003702:	682b      	ldr	r3, [r5, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003704:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 8003706:	4313      	orrs	r3, r2
 8003708:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800370a:	f7ff fc01 	bl	8002f10 <HAL_GetTick>
 800370e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003710:	e005      	b.n	800371e <HAL_RCC_OscConfig+0xc6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003712:	f7ff fbfd 	bl	8002f10 <HAL_GetTick>
 8003716:	1b80      	subs	r0, r0, r6
 8003718:	2802      	cmp	r0, #2
 800371a:	d900      	bls.n	800371e <HAL_RCC_OscConfig+0xc6>
 800371c:	e0d7      	b.n	80038ce <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800371e:	682b      	ldr	r3, [r5, #0]
 8003720:	421f      	tst	r7, r3
 8003722:	d0f6      	beq.n	8003712 <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003724:	21f8      	movs	r1, #248	@ 0xf8
 8003726:	682a      	ldr	r2, [r5, #0]
 8003728:	6923      	ldr	r3, [r4, #16]
 800372a:	438a      	bics	r2, r1
 800372c:	00db      	lsls	r3, r3, #3
 800372e:	4313      	orrs	r3, r2
 8003730:	602b      	str	r3, [r5, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003732:	6823      	ldr	r3, [r4, #0]
 8003734:	071a      	lsls	r2, r3, #28
 8003736:	d42d      	bmi.n	8003794 <HAL_RCC_OscConfig+0x13c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003738:	075a      	lsls	r2, r3, #29
 800373a:	d544      	bpl.n	80037c6 <HAL_RCC_OscConfig+0x16e>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800373c:	2280      	movs	r2, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 800373e:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003740:	4b8f      	ldr	r3, [pc, #572]	@ (8003980 <HAL_RCC_OscConfig+0x328>)
 8003742:	0552      	lsls	r2, r2, #21
 8003744:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 8003746:	4681      	mov	r9, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003748:	4211      	tst	r1, r2
 800374a:	d108      	bne.n	800375e <HAL_RCC_OscConfig+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800374c:	69d9      	ldr	r1, [r3, #28]
 800374e:	4311      	orrs	r1, r2
 8003750:	61d9      	str	r1, [r3, #28]
 8003752:	69db      	ldr	r3, [r3, #28]
 8003754:	4013      	ands	r3, r2
 8003756:	9301      	str	r3, [sp, #4]
 8003758:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800375a:	2301      	movs	r3, #1
 800375c:	4699      	mov	r9, r3
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800375e:	2780      	movs	r7, #128	@ 0x80
 8003760:	4e8a      	ldr	r6, [pc, #552]	@ (800398c <HAL_RCC_OscConfig+0x334>)
 8003762:	007f      	lsls	r7, r7, #1
 8003764:	6833      	ldr	r3, [r6, #0]
 8003766:	423b      	tst	r3, r7
 8003768:	d100      	bne.n	800376c <HAL_RCC_OscConfig+0x114>
 800376a:	e094      	b.n	8003896 <HAL_RCC_OscConfig+0x23e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800376c:	68a3      	ldr	r3, [r4, #8]
 800376e:	2b01      	cmp	r3, #1
 8003770:	d100      	bne.n	8003774 <HAL_RCC_OscConfig+0x11c>
 8003772:	e0f8      	b.n	8003966 <HAL_RCC_OscConfig+0x30e>
 8003774:	2b00      	cmp	r3, #0
 8003776:	d100      	bne.n	800377a <HAL_RCC_OscConfig+0x122>
 8003778:	e0c4      	b.n	8003904 <HAL_RCC_OscConfig+0x2ac>
 800377a:	2b05      	cmp	r3, #5
 800377c:	d100      	bne.n	8003780 <HAL_RCC_OscConfig+0x128>
 800377e:	e140      	b.n	8003a02 <HAL_RCC_OscConfig+0x3aa>
 8003780:	2101      	movs	r1, #1
 8003782:	4b7f      	ldr	r3, [pc, #508]	@ (8003980 <HAL_RCC_OscConfig+0x328>)
 8003784:	6a1a      	ldr	r2, [r3, #32]
 8003786:	438a      	bics	r2, r1
 8003788:	621a      	str	r2, [r3, #32]
 800378a:	6a1a      	ldr	r2, [r3, #32]
 800378c:	3103      	adds	r1, #3
 800378e:	438a      	bics	r2, r1
 8003790:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003792:	e0ec      	b.n	800396e <HAL_RCC_OscConfig+0x316>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003794:	69e3      	ldr	r3, [r4, #28]
      __HAL_RCC_LSI_ENABLE();
 8003796:	4d7a      	ldr	r5, [pc, #488]	@ (8003980 <HAL_RCC_OscConfig+0x328>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003798:	2b00      	cmp	r3, #0
 800379a:	d05b      	beq.n	8003854 <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_LSI_ENABLE();
 800379c:	2201      	movs	r2, #1
 800379e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037a0:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 80037a2:	4313      	orrs	r3, r2
 80037a4:	626b      	str	r3, [r5, #36]	@ 0x24
      tickstart = HAL_GetTick();
 80037a6:	f7ff fbb3 	bl	8002f10 <HAL_GetTick>
 80037aa:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ac:	e005      	b.n	80037ba <HAL_RCC_OscConfig+0x162>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037ae:	f7ff fbaf 	bl	8002f10 <HAL_GetTick>
 80037b2:	1b80      	subs	r0, r0, r6
 80037b4:	2802      	cmp	r0, #2
 80037b6:	d900      	bls.n	80037ba <HAL_RCC_OscConfig+0x162>
 80037b8:	e089      	b.n	80038ce <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ba:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80037bc:	421f      	tst	r7, r3
 80037be:	d0f6      	beq.n	80037ae <HAL_RCC_OscConfig+0x156>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037c0:	6823      	ldr	r3, [r4, #0]
 80037c2:	075a      	lsls	r2, r3, #29
 80037c4:	d4ba      	bmi.n	800373c <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80037c6:	06db      	lsls	r3, r3, #27
 80037c8:	d512      	bpl.n	80037f0 <HAL_RCC_OscConfig+0x198>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80037ca:	6963      	ldr	r3, [r4, #20]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d100      	bne.n	80037d2 <HAL_RCC_OscConfig+0x17a>
 80037d0:	e13c      	b.n	8003a4c <HAL_RCC_OscConfig+0x3f4>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80037d2:	3305      	adds	r3, #5
 80037d4:	d000      	beq.n	80037d8 <HAL_RCC_OscConfig+0x180>
 80037d6:	e0e9      	b.n	80039ac <HAL_RCC_OscConfig+0x354>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80037d8:	2104      	movs	r1, #4

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80037da:	20f8      	movs	r0, #248	@ 0xf8
      __HAL_RCC_HSI14ADC_ENABLE();
 80037dc:	4a68      	ldr	r2, [pc, #416]	@ (8003980 <HAL_RCC_OscConfig+0x328>)
 80037de:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 80037e0:	438b      	bics	r3, r1
 80037e2:	6353      	str	r3, [r2, #52]	@ 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80037e4:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 80037e6:	69a3      	ldr	r3, [r4, #24]
 80037e8:	4381      	bics	r1, r0
 80037ea:	00db      	lsls	r3, r3, #3
 80037ec:	430b      	orrs	r3, r1
 80037ee:	6353      	str	r3, [r2, #52]	@ 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037f0:	6a23      	ldr	r3, [r4, #32]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d01b      	beq.n	800382e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037f6:	220c      	movs	r2, #12
 80037f8:	4d61      	ldr	r5, [pc, #388]	@ (8003980 <HAL_RCC_OscConfig+0x328>)
 80037fa:	6869      	ldr	r1, [r5, #4]
 80037fc:	400a      	ands	r2, r1
 80037fe:	2a08      	cmp	r2, #8
 8003800:	d100      	bne.n	8003804 <HAL_RCC_OscConfig+0x1ac>
 8003802:	e108      	b.n	8003a16 <HAL_RCC_OscConfig+0x3be>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003804:	2b02      	cmp	r3, #2
 8003806:	d100      	bne.n	800380a <HAL_RCC_OscConfig+0x1b2>
 8003808:	e13e      	b.n	8003a88 <HAL_RCC_OscConfig+0x430>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800380a:	682b      	ldr	r3, [r5, #0]
 800380c:	4a60      	ldr	r2, [pc, #384]	@ (8003990 <HAL_RCC_OscConfig+0x338>)
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800380e:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8003810:	4013      	ands	r3, r2
 8003812:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003814:	f7ff fb7c 	bl	8002f10 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003818:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 800381a:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800381c:	e004      	b.n	8003828 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800381e:	f7ff fb77 	bl	8002f10 <HAL_GetTick>
 8003822:	1b00      	subs	r0, r0, r4
 8003824:	2802      	cmp	r0, #2
 8003826:	d852      	bhi.n	80038ce <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003828:	682b      	ldr	r3, [r5, #0]
 800382a:	4233      	tst	r3, r6
 800382c:	d1f7      	bne.n	800381e <HAL_RCC_OscConfig+0x1c6>
        }
      }
    }
  }

  return HAL_OK;
 800382e:	2000      	movs	r0, #0
}
 8003830:	b003      	add	sp, #12
 8003832:	bcc0      	pop	{r6, r7}
 8003834:	46b9      	mov	r9, r7
 8003836:	46b0      	mov	r8, r6
 8003838:	bdf0      	pop	{r4, r5, r6, r7, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800383a:	684a      	ldr	r2, [r1, #4]
 800383c:	03d2      	lsls	r2, r2, #15
 800383e:	d500      	bpl.n	8003842 <HAL_RCC_OscConfig+0x1ea>
 8003840:	e759      	b.n	80036f6 <HAL_RCC_OscConfig+0x9e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003842:	4a4f      	ldr	r2, [pc, #316]	@ (8003980 <HAL_RCC_OscConfig+0x328>)
 8003844:	6812      	ldr	r2, [r2, #0]
 8003846:	0792      	lsls	r2, r2, #30
 8003848:	d535      	bpl.n	80038b6 <HAL_RCC_OscConfig+0x25e>
 800384a:	68e2      	ldr	r2, [r4, #12]
 800384c:	2a01      	cmp	r2, #1
 800384e:	d032      	beq.n	80038b6 <HAL_RCC_OscConfig+0x25e>
    return HAL_ERROR;
 8003850:	2001      	movs	r0, #1
 8003852:	e7ed      	b.n	8003830 <HAL_RCC_OscConfig+0x1d8>
      __HAL_RCC_LSI_DISABLE();
 8003854:	2201      	movs	r2, #1
 8003856:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003858:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 800385a:	4393      	bics	r3, r2
 800385c:	626b      	str	r3, [r5, #36]	@ 0x24
      tickstart = HAL_GetTick();
 800385e:	f7ff fb57 	bl	8002f10 <HAL_GetTick>
 8003862:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003864:	e004      	b.n	8003870 <HAL_RCC_OscConfig+0x218>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003866:	f7ff fb53 	bl	8002f10 <HAL_GetTick>
 800386a:	1b80      	subs	r0, r0, r6
 800386c:	2802      	cmp	r0, #2
 800386e:	d82e      	bhi.n	80038ce <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003870:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8003872:	421f      	tst	r7, r3
 8003874:	d1f7      	bne.n	8003866 <HAL_RCC_OscConfig+0x20e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003876:	6823      	ldr	r3, [r4, #0]
 8003878:	e7a3      	b.n	80037c2 <HAL_RCC_OscConfig+0x16a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800387a:	6842      	ldr	r2, [r0, #4]
 800387c:	03d2      	lsls	r2, r2, #15
 800387e:	d400      	bmi.n	8003882 <HAL_RCC_OscConfig+0x22a>
 8003880:	e702      	b.n	8003688 <HAL_RCC_OscConfig+0x30>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003882:	4a3f      	ldr	r2, [pc, #252]	@ (8003980 <HAL_RCC_OscConfig+0x328>)
 8003884:	6812      	ldr	r2, [r2, #0]
 8003886:	0392      	lsls	r2, r2, #14
 8003888:	d400      	bmi.n	800388c <HAL_RCC_OscConfig+0x234>
 800388a:	e727      	b.n	80036dc <HAL_RCC_OscConfig+0x84>
 800388c:	6862      	ldr	r2, [r4, #4]
 800388e:	2a00      	cmp	r2, #0
 8003890:	d000      	beq.n	8003894 <HAL_RCC_OscConfig+0x23c>
 8003892:	e723      	b.n	80036dc <HAL_RCC_OscConfig+0x84>
 8003894:	e7dc      	b.n	8003850 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003896:	6833      	ldr	r3, [r6, #0]
 8003898:	433b      	orrs	r3, r7
 800389a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800389c:	f7ff fb38 	bl	8002f10 <HAL_GetTick>
 80038a0:	0005      	movs	r5, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038a2:	e004      	b.n	80038ae <HAL_RCC_OscConfig+0x256>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038a4:	f7ff fb34 	bl	8002f10 <HAL_GetTick>
 80038a8:	1b40      	subs	r0, r0, r5
 80038aa:	2864      	cmp	r0, #100	@ 0x64
 80038ac:	d80f      	bhi.n	80038ce <HAL_RCC_OscConfig+0x276>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ae:	6833      	ldr	r3, [r6, #0]
 80038b0:	423b      	tst	r3, r7
 80038b2:	d0f7      	beq.n	80038a4 <HAL_RCC_OscConfig+0x24c>
 80038b4:	e75a      	b.n	800376c <HAL_RCC_OscConfig+0x114>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038b6:	25f8      	movs	r5, #248	@ 0xf8
 80038b8:	4831      	ldr	r0, [pc, #196]	@ (8003980 <HAL_RCC_OscConfig+0x328>)
 80038ba:	6922      	ldr	r2, [r4, #16]
 80038bc:	6801      	ldr	r1, [r0, #0]
 80038be:	00d2      	lsls	r2, r2, #3
 80038c0:	43a9      	bics	r1, r5
 80038c2:	430a      	orrs	r2, r1
 80038c4:	6002      	str	r2, [r0, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038c6:	071a      	lsls	r2, r3, #28
 80038c8:	d400      	bmi.n	80038cc <HAL_RCC_OscConfig+0x274>
 80038ca:	e735      	b.n	8003738 <HAL_RCC_OscConfig+0xe0>
 80038cc:	e762      	b.n	8003794 <HAL_RCC_OscConfig+0x13c>
            return HAL_TIMEOUT;
 80038ce:	2003      	movs	r0, #3
 80038d0:	e7ae      	b.n	8003830 <HAL_RCC_OscConfig+0x1d8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038d2:	4d2b      	ldr	r5, [pc, #172]	@ (8003980 <HAL_RCC_OscConfig+0x328>)
 80038d4:	4a2b      	ldr	r2, [pc, #172]	@ (8003984 <HAL_RCC_OscConfig+0x32c>)
 80038d6:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038d8:	2780      	movs	r7, #128	@ 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038da:	4013      	ands	r3, r2
 80038dc:	602b      	str	r3, [r5, #0]
 80038de:	682b      	ldr	r3, [r5, #0]
 80038e0:	4a29      	ldr	r2, [pc, #164]	@ (8003988 <HAL_RCC_OscConfig+0x330>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038e2:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038e4:	4013      	ands	r3, r2
 80038e6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80038e8:	f7ff fb12 	bl	8002f10 <HAL_GetTick>
 80038ec:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038ee:	e004      	b.n	80038fa <HAL_RCC_OscConfig+0x2a2>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038f0:	f7ff fb0e 	bl	8002f10 <HAL_GetTick>
 80038f4:	1b80      	subs	r0, r0, r6
 80038f6:	2864      	cmp	r0, #100	@ 0x64
 80038f8:	d8e9      	bhi.n	80038ce <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038fa:	682b      	ldr	r3, [r5, #0]
 80038fc:	423b      	tst	r3, r7
 80038fe:	d1f7      	bne.n	80038f0 <HAL_RCC_OscConfig+0x298>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003900:	6823      	ldr	r3, [r4, #0]
 8003902:	e6eb      	b.n	80036dc <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003904:	2201      	movs	r2, #1
 8003906:	4e1e      	ldr	r6, [pc, #120]	@ (8003980 <HAL_RCC_OscConfig+0x328>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003908:	4d22      	ldr	r5, [pc, #136]	@ (8003994 <HAL_RCC_OscConfig+0x33c>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800390a:	6a33      	ldr	r3, [r6, #32]
 800390c:	4393      	bics	r3, r2
 800390e:	6233      	str	r3, [r6, #32]
 8003910:	6a33      	ldr	r3, [r6, #32]
 8003912:	3203      	adds	r2, #3
 8003914:	4393      	bics	r3, r2
 8003916:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 8003918:	f7ff fafa 	bl	8002f10 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800391c:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 800391e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003920:	4698      	mov	r8, r3
 8003922:	e004      	b.n	800392e <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003924:	f7ff faf4 	bl	8002f10 <HAL_GetTick>
 8003928:	1bc0      	subs	r0, r0, r7
 800392a:	42a8      	cmp	r0, r5
 800392c:	d8cf      	bhi.n	80038ce <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800392e:	4642      	mov	r2, r8
 8003930:	6a33      	ldr	r3, [r6, #32]
 8003932:	421a      	tst	r2, r3
 8003934:	d1f6      	bne.n	8003924 <HAL_RCC_OscConfig+0x2cc>
    if(pwrclkchanged == SET)
 8003936:	464b      	mov	r3, r9
 8003938:	2b01      	cmp	r3, #1
 800393a:	d04f      	beq.n	80039dc <HAL_RCC_OscConfig+0x384>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800393c:	6823      	ldr	r3, [r4, #0]
 800393e:	e742      	b.n	80037c6 <HAL_RCC_OscConfig+0x16e>
        __HAL_RCC_HSI_DISABLE();
 8003940:	2201      	movs	r2, #1
 8003942:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003944:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 8003946:	4393      	bics	r3, r2
 8003948:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800394a:	f7ff fae1 	bl	8002f10 <HAL_GetTick>
 800394e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003950:	e004      	b.n	800395c <HAL_RCC_OscConfig+0x304>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003952:	f7ff fadd 	bl	8002f10 <HAL_GetTick>
 8003956:	1b80      	subs	r0, r0, r6
 8003958:	2802      	cmp	r0, #2
 800395a:	d8b8      	bhi.n	80038ce <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800395c:	682b      	ldr	r3, [r5, #0]
 800395e:	421f      	tst	r7, r3
 8003960:	d1f7      	bne.n	8003952 <HAL_RCC_OscConfig+0x2fa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003962:	6823      	ldr	r3, [r4, #0]
 8003964:	e6e6      	b.n	8003734 <HAL_RCC_OscConfig+0xdc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003966:	4906      	ldr	r1, [pc, #24]	@ (8003980 <HAL_RCC_OscConfig+0x328>)
 8003968:	6a0a      	ldr	r2, [r1, #32]
 800396a:	4313      	orrs	r3, r2
 800396c:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 800396e:	f7ff facf 	bl	8002f10 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003972:	4b03      	ldr	r3, [pc, #12]	@ (8003980 <HAL_RCC_OscConfig+0x328>)
      tickstart = HAL_GetTick();
 8003974:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003976:	4698      	mov	r8, r3
 8003978:	2702      	movs	r7, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800397a:	4d06      	ldr	r5, [pc, #24]	@ (8003994 <HAL_RCC_OscConfig+0x33c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800397c:	e011      	b.n	80039a2 <HAL_RCC_OscConfig+0x34a>
 800397e:	46c0      	nop			@ (mov r8, r8)
 8003980:	40021000 	.word	0x40021000
 8003984:	fffeffff 	.word	0xfffeffff
 8003988:	fffbffff 	.word	0xfffbffff
 800398c:	40007000 	.word	0x40007000
 8003990:	feffffff 	.word	0xfeffffff
 8003994:	00001388 	.word	0x00001388
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003998:	f7ff faba 	bl	8002f10 <HAL_GetTick>
 800399c:	1b80      	subs	r0, r0, r6
 800399e:	42a8      	cmp	r0, r5
 80039a0:	d895      	bhi.n	80038ce <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039a2:	4643      	mov	r3, r8
 80039a4:	6a1b      	ldr	r3, [r3, #32]
 80039a6:	421f      	tst	r7, r3
 80039a8:	d0f6      	beq.n	8003998 <HAL_RCC_OscConfig+0x340>
 80039aa:	e7c4      	b.n	8003936 <HAL_RCC_OscConfig+0x2de>
      __HAL_RCC_HSI14ADC_DISABLE();
 80039ac:	2204      	movs	r2, #4
 80039ae:	4d52      	ldr	r5, [pc, #328]	@ (8003af8 <HAL_RCC_OscConfig+0x4a0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80039b0:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80039b2:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80039b4:	4313      	orrs	r3, r2
 80039b6:	636b      	str	r3, [r5, #52]	@ 0x34
      __HAL_RCC_HSI14_DISABLE();
 80039b8:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80039ba:	3a03      	subs	r2, #3
 80039bc:	4393      	bics	r3, r2
 80039be:	636b      	str	r3, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 80039c0:	f7ff faa6 	bl	8002f10 <HAL_GetTick>
 80039c4:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80039c6:	e005      	b.n	80039d4 <HAL_RCC_OscConfig+0x37c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80039c8:	f7ff faa2 	bl	8002f10 <HAL_GetTick>
 80039cc:	1b80      	subs	r0, r0, r6
 80039ce:	2802      	cmp	r0, #2
 80039d0:	d900      	bls.n	80039d4 <HAL_RCC_OscConfig+0x37c>
 80039d2:	e77c      	b.n	80038ce <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80039d4:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80039d6:	421f      	tst	r7, r3
 80039d8:	d1f6      	bne.n	80039c8 <HAL_RCC_OscConfig+0x370>
 80039da:	e709      	b.n	80037f0 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_DISABLE();
 80039dc:	4a46      	ldr	r2, [pc, #280]	@ (8003af8 <HAL_RCC_OscConfig+0x4a0>)
 80039de:	4947      	ldr	r1, [pc, #284]	@ (8003afc <HAL_RCC_OscConfig+0x4a4>)
 80039e0:	69d3      	ldr	r3, [r2, #28]
 80039e2:	400b      	ands	r3, r1
 80039e4:	61d3      	str	r3, [r2, #28]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80039e6:	6823      	ldr	r3, [r4, #0]
 80039e8:	e6ed      	b.n	80037c6 <HAL_RCC_OscConfig+0x16e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039ea:	2280      	movs	r2, #128	@ 0x80
 80039ec:	4b42      	ldr	r3, [pc, #264]	@ (8003af8 <HAL_RCC_OscConfig+0x4a0>)
 80039ee:	02d2      	lsls	r2, r2, #11
 80039f0:	6819      	ldr	r1, [r3, #0]
 80039f2:	430a      	orrs	r2, r1
 80039f4:	601a      	str	r2, [r3, #0]
 80039f6:	2280      	movs	r2, #128	@ 0x80
 80039f8:	6819      	ldr	r1, [r3, #0]
 80039fa:	0252      	lsls	r2, r2, #9
 80039fc:	430a      	orrs	r2, r1
 80039fe:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a00:	e65b      	b.n	80036ba <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a02:	2104      	movs	r1, #4
 8003a04:	4b3c      	ldr	r3, [pc, #240]	@ (8003af8 <HAL_RCC_OscConfig+0x4a0>)
 8003a06:	6a1a      	ldr	r2, [r3, #32]
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	621a      	str	r2, [r3, #32]
 8003a0c:	6a1a      	ldr	r2, [r3, #32]
 8003a0e:	3903      	subs	r1, #3
 8003a10:	430a      	orrs	r2, r1
 8003a12:	621a      	str	r2, [r3, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a14:	e7ab      	b.n	800396e <HAL_RCC_OscConfig+0x316>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d100      	bne.n	8003a1c <HAL_RCC_OscConfig+0x3c4>
 8003a1a:	e719      	b.n	8003850 <HAL_RCC_OscConfig+0x1f8>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a1c:	2280      	movs	r2, #128	@ 0x80
        pll_config  = RCC->CFGR;
 8003a1e:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a20:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003a22:	0252      	lsls	r2, r2, #9
        pll_config2 = RCC->CFGR2;
 8003a24:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a26:	401a      	ands	r2, r3
 8003a28:	428a      	cmp	r2, r1
 8003a2a:	d000      	beq.n	8003a2e <HAL_RCC_OscConfig+0x3d6>
 8003a2c:	e710      	b.n	8003850 <HAL_RCC_OscConfig+0x1f8>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003a2e:	220f      	movs	r2, #15
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a30:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003a32:	4002      	ands	r2, r0
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a34:	428a      	cmp	r2, r1
 8003a36:	d000      	beq.n	8003a3a <HAL_RCC_OscConfig+0x3e2>
 8003a38:	e70a      	b.n	8003850 <HAL_RCC_OscConfig+0x1f8>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003a3a:	22f0      	movs	r2, #240	@ 0xf0
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003a3c:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003a3e:	0392      	lsls	r2, r2, #14
 8003a40:	4013      	ands	r3, r2
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003a42:	1a18      	subs	r0, r3, r0
 8003a44:	1e43      	subs	r3, r0, #1
 8003a46:	4198      	sbcs	r0, r3
 8003a48:	b2c0      	uxtb	r0, r0
 8003a4a:	e6f1      	b.n	8003830 <HAL_RCC_OscConfig+0x1d8>
      __HAL_RCC_HSI14ADC_DISABLE();
 8003a4c:	2104      	movs	r1, #4
 8003a4e:	4d2a      	ldr	r5, [pc, #168]	@ (8003af8 <HAL_RCC_OscConfig+0x4a0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003a50:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8003a52:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8003a54:	430a      	orrs	r2, r1
 8003a56:	636a      	str	r2, [r5, #52]	@ 0x34
      __HAL_RCC_HSI14_ENABLE();
 8003a58:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	636b      	str	r3, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 8003a5e:	f7ff fa57 	bl	8002f10 <HAL_GetTick>
 8003a62:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003a64:	e005      	b.n	8003a72 <HAL_RCC_OscConfig+0x41a>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003a66:	f7ff fa53 	bl	8002f10 <HAL_GetTick>
 8003a6a:	1b80      	subs	r0, r0, r6
 8003a6c:	2802      	cmp	r0, #2
 8003a6e:	d900      	bls.n	8003a72 <HAL_RCC_OscConfig+0x41a>
 8003a70:	e72d      	b.n	80038ce <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003a72:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8003a74:	421f      	tst	r7, r3
 8003a76:	d0f6      	beq.n	8003a66 <HAL_RCC_OscConfig+0x40e>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003a78:	21f8      	movs	r1, #248	@ 0xf8
 8003a7a:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8003a7c:	69a3      	ldr	r3, [r4, #24]
 8003a7e:	438a      	bics	r2, r1
 8003a80:	00db      	lsls	r3, r3, #3
 8003a82:	4313      	orrs	r3, r2
 8003a84:	636b      	str	r3, [r5, #52]	@ 0x34
 8003a86:	e6b3      	b.n	80037f0 <HAL_RCC_OscConfig+0x198>
        __HAL_RCC_PLL_DISABLE();
 8003a88:	682b      	ldr	r3, [r5, #0]
 8003a8a:	4a1d      	ldr	r2, [pc, #116]	@ (8003b00 <HAL_RCC_OscConfig+0x4a8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a8c:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8003a8e:	4013      	ands	r3, r2
 8003a90:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003a92:	f7ff fa3d 	bl	8002f10 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a96:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 8003a98:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a9a:	e005      	b.n	8003aa8 <HAL_RCC_OscConfig+0x450>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a9c:	f7ff fa38 	bl	8002f10 <HAL_GetTick>
 8003aa0:	1b80      	subs	r0, r0, r6
 8003aa2:	2802      	cmp	r0, #2
 8003aa4:	d900      	bls.n	8003aa8 <HAL_RCC_OscConfig+0x450>
 8003aa6:	e712      	b.n	80038ce <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003aa8:	682b      	ldr	r3, [r5, #0]
 8003aaa:	423b      	tst	r3, r7
 8003aac:	d1f6      	bne.n	8003a9c <HAL_RCC_OscConfig+0x444>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003aae:	220f      	movs	r2, #15
 8003ab0:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ab2:	4e11      	ldr	r6, [pc, #68]	@ (8003af8 <HAL_RCC_OscConfig+0x4a0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ab4:	4393      	bics	r3, r2
 8003ab6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8003abc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003abe:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003ac0:	686a      	ldr	r2, [r5, #4]
 8003ac2:	430b      	orrs	r3, r1
 8003ac4:	490f      	ldr	r1, [pc, #60]	@ (8003b04 <HAL_RCC_OscConfig+0x4ac>)
 8003ac6:	400a      	ands	r2, r1
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003acc:	2380      	movs	r3, #128	@ 0x80
 8003ace:	682a      	ldr	r2, [r5, #0]
 8003ad0:	045b      	lsls	r3, r3, #17
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003ad6:	f7ff fa1b 	bl	8002f10 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ada:	2580      	movs	r5, #128	@ 0x80
        tickstart = HAL_GetTick();
 8003adc:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ade:	04ad      	lsls	r5, r5, #18
 8003ae0:	e005      	b.n	8003aee <HAL_RCC_OscConfig+0x496>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ae2:	f7ff fa15 	bl	8002f10 <HAL_GetTick>
 8003ae6:	1b00      	subs	r0, r0, r4
 8003ae8:	2802      	cmp	r0, #2
 8003aea:	d900      	bls.n	8003aee <HAL_RCC_OscConfig+0x496>
 8003aec:	e6ef      	b.n	80038ce <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003aee:	6833      	ldr	r3, [r6, #0]
 8003af0:	422b      	tst	r3, r5
 8003af2:	d0f6      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x48a>
 8003af4:	e69b      	b.n	800382e <HAL_RCC_OscConfig+0x1d6>
 8003af6:	46c0      	nop			@ (mov r8, r8)
 8003af8:	40021000 	.word	0x40021000
 8003afc:	efffffff 	.word	0xefffffff
 8003b00:	feffffff 	.word	0xfeffffff
 8003b04:	ffc2ffff 	.word	0xffc2ffff

08003b08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b0a:	46ce      	mov	lr, r9
 8003b0c:	4647      	mov	r7, r8
 8003b0e:	0004      	movs	r4, r0
 8003b10:	000d      	movs	r5, r1
 8003b12:	b580      	push	{r7, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b14:	2800      	cmp	r0, #0
 8003b16:	d00d      	beq.n	8003b34 <HAL_RCC_ClockConfig+0x2c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b18:	2301      	movs	r3, #1
 8003b1a:	494a      	ldr	r1, [pc, #296]	@ (8003c44 <HAL_RCC_ClockConfig+0x13c>)
 8003b1c:	680a      	ldr	r2, [r1, #0]
 8003b1e:	401a      	ands	r2, r3
 8003b20:	42aa      	cmp	r2, r5
 8003b22:	d20c      	bcs.n	8003b3e <HAL_RCC_ClockConfig+0x36>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b24:	680a      	ldr	r2, [r1, #0]
 8003b26:	439a      	bics	r2, r3
 8003b28:	432a      	orrs	r2, r5
 8003b2a:	600a      	str	r2, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b2c:	680a      	ldr	r2, [r1, #0]
 8003b2e:	4013      	ands	r3, r2
 8003b30:	42ab      	cmp	r3, r5
 8003b32:	d004      	beq.n	8003b3e <HAL_RCC_ClockConfig+0x36>
    return HAL_ERROR;
 8003b34:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 8003b36:	bcc0      	pop	{r6, r7}
 8003b38:	46b9      	mov	r9, r7
 8003b3a:	46b0      	mov	r8, r6
 8003b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b3e:	6823      	ldr	r3, [r4, #0]
 8003b40:	079a      	lsls	r2, r3, #30
 8003b42:	d50e      	bpl.n	8003b62 <HAL_RCC_ClockConfig+0x5a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b44:	075a      	lsls	r2, r3, #29
 8003b46:	d505      	bpl.n	8003b54 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003b48:	22e0      	movs	r2, #224	@ 0xe0
 8003b4a:	493f      	ldr	r1, [pc, #252]	@ (8003c48 <HAL_RCC_ClockConfig+0x140>)
 8003b4c:	00d2      	lsls	r2, r2, #3
 8003b4e:	6848      	ldr	r0, [r1, #4]
 8003b50:	4302      	orrs	r2, r0
 8003b52:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b54:	20f0      	movs	r0, #240	@ 0xf0
 8003b56:	493c      	ldr	r1, [pc, #240]	@ (8003c48 <HAL_RCC_ClockConfig+0x140>)
 8003b58:	684a      	ldr	r2, [r1, #4]
 8003b5a:	4382      	bics	r2, r0
 8003b5c:	68a0      	ldr	r0, [r4, #8]
 8003b5e:	4302      	orrs	r2, r0
 8003b60:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b62:	07db      	lsls	r3, r3, #31
 8003b64:	d522      	bpl.n	8003bac <HAL_RCC_ClockConfig+0xa4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b66:	4b38      	ldr	r3, [pc, #224]	@ (8003c48 <HAL_RCC_ClockConfig+0x140>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b68:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b6a:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b6c:	2a01      	cmp	r2, #1
 8003b6e:	d05b      	beq.n	8003c28 <HAL_RCC_ClockConfig+0x120>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b70:	2a02      	cmp	r2, #2
 8003b72:	d056      	beq.n	8003c22 <HAL_RCC_ClockConfig+0x11a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b74:	079b      	lsls	r3, r3, #30
 8003b76:	d5dd      	bpl.n	8003b34 <HAL_RCC_ClockConfig+0x2c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b78:	2103      	movs	r1, #3
 8003b7a:	4e33      	ldr	r6, [pc, #204]	@ (8003c48 <HAL_RCC_ClockConfig+0x140>)
 8003b7c:	6873      	ldr	r3, [r6, #4]
 8003b7e:	438b      	bics	r3, r1
 8003b80:	4313      	orrs	r3, r2
 8003b82:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8003b84:	f7ff f9c4 	bl	8002f10 <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b88:	230c      	movs	r3, #12
 8003b8a:	4698      	mov	r8, r3
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b8c:	4b2f      	ldr	r3, [pc, #188]	@ (8003c4c <HAL_RCC_ClockConfig+0x144>)
    tickstart = HAL_GetTick();
 8003b8e:	0007      	movs	r7, r0
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b90:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b92:	e004      	b.n	8003b9e <HAL_RCC_ClockConfig+0x96>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b94:	f7ff f9bc 	bl	8002f10 <HAL_GetTick>
 8003b98:	1bc0      	subs	r0, r0, r7
 8003b9a:	4548      	cmp	r0, r9
 8003b9c:	d847      	bhi.n	8003c2e <HAL_RCC_ClockConfig+0x126>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b9e:	4643      	mov	r3, r8
 8003ba0:	6872      	ldr	r2, [r6, #4]
 8003ba2:	401a      	ands	r2, r3
 8003ba4:	6863      	ldr	r3, [r4, #4]
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d1f3      	bne.n	8003b94 <HAL_RCC_ClockConfig+0x8c>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bac:	2101      	movs	r1, #1
 8003bae:	4a25      	ldr	r2, [pc, #148]	@ (8003c44 <HAL_RCC_ClockConfig+0x13c>)
 8003bb0:	6813      	ldr	r3, [r2, #0]
 8003bb2:	400b      	ands	r3, r1
 8003bb4:	42ab      	cmp	r3, r5
 8003bb6:	d905      	bls.n	8003bc4 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bb8:	6813      	ldr	r3, [r2, #0]
 8003bba:	438b      	bics	r3, r1
 8003bbc:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bbe:	6813      	ldr	r3, [r2, #0]
 8003bc0:	4219      	tst	r1, r3
 8003bc2:	d1b7      	bne.n	8003b34 <HAL_RCC_ClockConfig+0x2c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bc4:	6823      	ldr	r3, [r4, #0]
 8003bc6:	075b      	lsls	r3, r3, #29
 8003bc8:	d506      	bpl.n	8003bd8 <HAL_RCC_ClockConfig+0xd0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003bca:	4a1f      	ldr	r2, [pc, #124]	@ (8003c48 <HAL_RCC_ClockConfig+0x140>)
 8003bcc:	4920      	ldr	r1, [pc, #128]	@ (8003c50 <HAL_RCC_ClockConfig+0x148>)
 8003bce:	6853      	ldr	r3, [r2, #4]
 8003bd0:	400b      	ands	r3, r1
 8003bd2:	68e1      	ldr	r1, [r4, #12]
 8003bd4:	430b      	orrs	r3, r1
 8003bd6:	6053      	str	r3, [r2, #4]
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003bd8:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 8003bda:	491b      	ldr	r1, [pc, #108]	@ (8003c48 <HAL_RCC_ClockConfig+0x140>)
 8003bdc:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003bde:	4013      	ands	r3, r2
 8003be0:	2b08      	cmp	r3, #8
 8003be2:	d00e      	beq.n	8003c02 <HAL_RCC_ClockConfig+0xfa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003be4:	481b      	ldr	r0, [pc, #108]	@ (8003c54 <HAL_RCC_ClockConfig+0x14c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003be6:	4b18      	ldr	r3, [pc, #96]	@ (8003c48 <HAL_RCC_ClockConfig+0x140>)
 8003be8:	4a1b      	ldr	r2, [pc, #108]	@ (8003c58 <HAL_RCC_ClockConfig+0x150>)
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	491b      	ldr	r1, [pc, #108]	@ (8003c5c <HAL_RCC_ClockConfig+0x154>)
 8003bee:	061b      	lsls	r3, r3, #24
 8003bf0:	0f1b      	lsrs	r3, r3, #28
 8003bf2:	5cd3      	ldrb	r3, [r2, r3]
 8003bf4:	40d8      	lsrs	r0, r3
 8003bf6:	6008      	str	r0, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8003bf8:	2002      	movs	r0, #2
 8003bfa:	f7ff f947 	bl	8002e8c <HAL_InitTick>
  return HAL_OK;
 8003bfe:	2000      	movs	r0, #0
 8003c00:	e799      	b.n	8003b36 <HAL_RCC_ClockConfig+0x2e>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003c02:	250f      	movs	r5, #15
 8003c04:	4816      	ldr	r0, [pc, #88]	@ (8003c60 <HAL_RCC_ClockConfig+0x158>)
 8003c06:	0c93      	lsrs	r3, r2, #18
 8003c08:	402b      	ands	r3, r5
 8003c0a:	5cc4      	ldrb	r4, [r0, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003c0c:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003c0e:	03d2      	lsls	r2, r2, #15
 8003c10:	d50f      	bpl.n	8003c32 <HAL_RCC_ClockConfig+0x12a>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003c12:	4b14      	ldr	r3, [pc, #80]	@ (8003c64 <HAL_RCC_ClockConfig+0x15c>)
 8003c14:	400d      	ands	r5, r1
 8003c16:	5d59      	ldrb	r1, [r3, r5]
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003c18:	480e      	ldr	r0, [pc, #56]	@ (8003c54 <HAL_RCC_ClockConfig+0x14c>)
 8003c1a:	f7fc fa75 	bl	8000108 <__udivsi3>
 8003c1e:	4360      	muls	r0, r4
 8003c20:	e7e1      	b.n	8003be6 <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c22:	019b      	lsls	r3, r3, #6
 8003c24:	d4a8      	bmi.n	8003b78 <HAL_RCC_ClockConfig+0x70>
 8003c26:	e785      	b.n	8003b34 <HAL_RCC_ClockConfig+0x2c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c28:	039b      	lsls	r3, r3, #14
 8003c2a:	d4a5      	bmi.n	8003b78 <HAL_RCC_ClockConfig+0x70>
 8003c2c:	e782      	b.n	8003b34 <HAL_RCC_ClockConfig+0x2c>
        return HAL_TIMEOUT;
 8003c2e:	2003      	movs	r0, #3
 8003c30:	e781      	b.n	8003b36 <HAL_RCC_ClockConfig+0x2e>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003c32:	0163      	lsls	r3, r4, #5
 8003c34:	1b1b      	subs	r3, r3, r4
 8003c36:	0198      	lsls	r0, r3, #6
 8003c38:	1ac0      	subs	r0, r0, r3
 8003c3a:	00c0      	lsls	r0, r0, #3
 8003c3c:	1900      	adds	r0, r0, r4
 8003c3e:	0200      	lsls	r0, r0, #8
 8003c40:	e7d1      	b.n	8003be6 <HAL_RCC_ClockConfig+0xde>
 8003c42:	46c0      	nop			@ (mov r8, r8)
 8003c44:	40022000 	.word	0x40022000
 8003c48:	40021000 	.word	0x40021000
 8003c4c:	00001388 	.word	0x00001388
 8003c50:	fffff8ff 	.word	0xfffff8ff
 8003c54:	007a1200 	.word	0x007a1200
 8003c58:	08004ddc 	.word	0x08004ddc
 8003c5c:	2000038c 	.word	0x2000038c
 8003c60:	08004dfc 	.word	0x08004dfc
 8003c64:	08004dec 	.word	0x08004dec

08003c68 <HAL_RCC_EnableCSS>:
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8003c68:	2380      	movs	r3, #128	@ 0x80
 8003c6a:	4a03      	ldr	r2, [pc, #12]	@ (8003c78 <HAL_RCC_EnableCSS+0x10>)
 8003c6c:	031b      	lsls	r3, r3, #12
 8003c6e:	6811      	ldr	r1, [r2, #0]
 8003c70:	430b      	orrs	r3, r1
 8003c72:	6013      	str	r3, [r2, #0]
}
 8003c74:	4770      	bx	lr
 8003c76:	46c0      	nop			@ (mov r8, r8)
 8003c78:	40021000 	.word	0x40021000

08003c7c <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8003c7c:	4b01      	ldr	r3, [pc, #4]	@ (8003c84 <HAL_RCC_GetHCLKFreq+0x8>)
 8003c7e:	6818      	ldr	r0, [r3, #0]
}
 8003c80:	4770      	bx	lr
 8003c82:	46c0      	nop			@ (mov r8, r8)
 8003c84:	2000038c 	.word	0x2000038c

08003c88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c88:	b570      	push	{r4, r5, r6, lr}
 8003c8a:	1e04      	subs	r4, r0, #0
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c8c:	d05f      	beq.n	8003d4e <HAL_TIM_PWM_Init+0xc6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c8e:	233d      	movs	r3, #61	@ 0x3d
 8003c90:	5cc3      	ldrb	r3, [r0, r3]
 8003c92:	b2da      	uxtb	r2, r3
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d04c      	beq.n	8003d32 <HAL_TIM_PWM_Init+0xaa>
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c98:	233d      	movs	r3, #61	@ 0x3d
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	54e2      	strb	r2, [r4, r3]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c9e:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ca0:	4e31      	ldr	r6, [pc, #196]	@ (8003d68 <HAL_TIM_PWM_Init+0xe0>)
  tmpcr1 = TIMx->CR1;
 8003ca2:	6813      	ldr	r3, [r2, #0]
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ca4:	69a5      	ldr	r5, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ca6:	68e0      	ldr	r0, [r4, #12]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ca8:	6861      	ldr	r1, [r4, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003caa:	42b2      	cmp	r2, r6
 8003cac:	d016      	beq.n	8003cdc <HAL_TIM_PWM_Init+0x54>
 8003cae:	2680      	movs	r6, #128	@ 0x80
 8003cb0:	05f6      	lsls	r6, r6, #23
 8003cb2:	42b2      	cmp	r2, r6
 8003cb4:	d012      	beq.n	8003cdc <HAL_TIM_PWM_Init+0x54>
 8003cb6:	4e2d      	ldr	r6, [pc, #180]	@ (8003d6c <HAL_TIM_PWM_Init+0xe4>)
 8003cb8:	42b2      	cmp	r2, r6
 8003cba:	d03f      	beq.n	8003d3c <HAL_TIM_PWM_Init+0xb4>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cbc:	4e2c      	ldr	r6, [pc, #176]	@ (8003d70 <HAL_TIM_PWM_Init+0xe8>)
 8003cbe:	42b2      	cmp	r2, r6
 8003cc0:	d040      	beq.n	8003d44 <HAL_TIM_PWM_Init+0xbc>
 8003cc2:	4e2c      	ldr	r6, [pc, #176]	@ (8003d74 <HAL_TIM_PWM_Init+0xec>)
 8003cc4:	42b2      	cmp	r2, r6
 8003cc6:	d044      	beq.n	8003d52 <HAL_TIM_PWM_Init+0xca>
 8003cc8:	4e2b      	ldr	r6, [pc, #172]	@ (8003d78 <HAL_TIM_PWM_Init+0xf0>)
 8003cca:	42b2      	cmp	r2, r6
 8003ccc:	d041      	beq.n	8003d52 <HAL_TIM_PWM_Init+0xca>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cce:	2680      	movs	r6, #128	@ 0x80
 8003cd0:	43b3      	bics	r3, r6
 8003cd2:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8003cd4:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cd6:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003cd8:	6291      	str	r1, [r2, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cda:	e012      	b.n	8003d02 <HAL_TIM_PWM_Init+0x7a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cdc:	2670      	movs	r6, #112	@ 0x70
 8003cde:	43b3      	bics	r3, r6
    tmpcr1 |= Structure->CounterMode;
 8003ce0:	68a6      	ldr	r6, [r4, #8]
 8003ce2:	4333      	orrs	r3, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ce4:	4e25      	ldr	r6, [pc, #148]	@ (8003d7c <HAL_TIM_PWM_Init+0xf4>)
 8003ce6:	4033      	ands	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ce8:	6926      	ldr	r6, [r4, #16]
 8003cea:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cec:	2680      	movs	r6, #128	@ 0x80
 8003cee:	43b3      	bics	r3, r6
 8003cf0:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8003cf2:	6013      	str	r3, [r2, #0]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cf4:	4b1c      	ldr	r3, [pc, #112]	@ (8003d68 <HAL_TIM_PWM_Init+0xe0>)
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cf6:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003cf8:	6291      	str	r1, [r2, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d101      	bne.n	8003d02 <HAL_TIM_PWM_Init+0x7a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cfe:	6963      	ldr	r3, [r4, #20]
 8003d00:	6313      	str	r3, [r2, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d02:	2301      	movs	r3, #1
 8003d04:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d06:	2246      	movs	r2, #70	@ 0x46
  return HAL_OK;
 8003d08:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d0a:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d0c:	3a08      	subs	r2, #8
 8003d0e:	54a3      	strb	r3, [r4, r2]
 8003d10:	3201      	adds	r2, #1
 8003d12:	54a3      	strb	r3, [r4, r2]
 8003d14:	3201      	adds	r2, #1
 8003d16:	54a3      	strb	r3, [r4, r2]
 8003d18:	3201      	adds	r2, #1
 8003d1a:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d1c:	3201      	adds	r2, #1
 8003d1e:	54a3      	strb	r3, [r4, r2]
 8003d20:	3201      	adds	r2, #1
 8003d22:	54a3      	strb	r3, [r4, r2]
 8003d24:	3201      	adds	r2, #1
 8003d26:	54a3      	strb	r3, [r4, r2]
 8003d28:	3201      	adds	r2, #1
 8003d2a:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8003d2c:	3a08      	subs	r2, #8
 8003d2e:	54a3      	strb	r3, [r4, r2]
}
 8003d30:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8003d32:	333c      	adds	r3, #60	@ 0x3c
 8003d34:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 8003d36:	f7fe ff49 	bl	8002bcc <HAL_TIM_PWM_MspInit>
 8003d3a:	e7ad      	b.n	8003c98 <HAL_TIM_PWM_Init+0x10>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d3c:	2670      	movs	r6, #112	@ 0x70
 8003d3e:	43b3      	bics	r3, r6
    tmpcr1 |= Structure->CounterMode;
 8003d40:	68a6      	ldr	r6, [r4, #8]
 8003d42:	4333      	orrs	r3, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d44:	4e0d      	ldr	r6, [pc, #52]	@ (8003d7c <HAL_TIM_PWM_Init+0xf4>)
 8003d46:	4033      	ands	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d48:	6926      	ldr	r6, [r4, #16]
 8003d4a:	4333      	orrs	r3, r6
 8003d4c:	e7bf      	b.n	8003cce <HAL_TIM_PWM_Init+0x46>
    return HAL_ERROR;
 8003d4e:	2001      	movs	r0, #1
 8003d50:	e7ee      	b.n	8003d30 <HAL_TIM_PWM_Init+0xa8>
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d52:	4e0a      	ldr	r6, [pc, #40]	@ (8003d7c <HAL_TIM_PWM_Init+0xf4>)
 8003d54:	4033      	ands	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d56:	6926      	ldr	r6, [r4, #16]
 8003d58:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d5a:	2680      	movs	r6, #128	@ 0x80
 8003d5c:	43b3      	bics	r3, r6
 8003d5e:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8003d60:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d62:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003d64:	6291      	str	r1, [r2, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d66:	e7ca      	b.n	8003cfe <HAL_TIM_PWM_Init+0x76>
 8003d68:	40012c00 	.word	0x40012c00
 8003d6c:	40000400 	.word	0x40000400
 8003d70:	40002000 	.word	0x40002000
 8003d74:	40014400 	.word	0x40014400
 8003d78:	40014800 	.word	0x40014800
 8003d7c:	fffffcff 	.word	0xfffffcff

08003d80 <HAL_TIM_Encoder_Init>:
{
 8003d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d82:	46c6      	mov	lr, r8
 8003d84:	0004      	movs	r4, r0
 8003d86:	000d      	movs	r5, r1
 8003d88:	b500      	push	{lr}
  if (htim == NULL)
 8003d8a:	2800      	cmp	r0, #0
 8003d8c:	d100      	bne.n	8003d90 <HAL_TIM_Encoder_Init+0x10>
 8003d8e:	e083      	b.n	8003e98 <HAL_TIM_Encoder_Init+0x118>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003d90:	233d      	movs	r3, #61	@ 0x3d
 8003d92:	5cc3      	ldrb	r3, [r0, r3]
 8003d94:	b2da      	uxtb	r2, r3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d100      	bne.n	8003d9c <HAL_TIM_Encoder_Init+0x1c>
 8003d9a:	e06f      	b.n	8003e7c <HAL_TIM_Encoder_Init+0xfc>
  htim->State = HAL_TIM_STATE_BUSY;
 8003d9c:	233d      	movs	r3, #61	@ 0x3d
 8003d9e:	2202      	movs	r2, #2
 8003da0:	54e2      	strb	r2, [r4, r3]
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003da2:	6823      	ldr	r3, [r4, #0]
 8003da4:	4943      	ldr	r1, [pc, #268]	@ (8003eb4 <HAL_TIM_Encoder_Init+0x134>)
 8003da6:	689a      	ldr	r2, [r3, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003da8:	4f43      	ldr	r7, [pc, #268]	@ (8003eb8 <HAL_TIM_Encoder_Init+0x138>)
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003daa:	400a      	ands	r2, r1
 8003dac:	609a      	str	r2, [r3, #8]
  tmpcr1 = TIMx->CR1;
 8003dae:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003db0:	69a6      	ldr	r6, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003db2:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8003db4:	6861      	ldr	r1, [r4, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003db6:	42bb      	cmp	r3, r7
 8003db8:	d016      	beq.n	8003de8 <HAL_TIM_Encoder_Init+0x68>
 8003dba:	2780      	movs	r7, #128	@ 0x80
 8003dbc:	05ff      	lsls	r7, r7, #23
 8003dbe:	42bb      	cmp	r3, r7
 8003dc0:	d012      	beq.n	8003de8 <HAL_TIM_Encoder_Init+0x68>
 8003dc2:	4f3e      	ldr	r7, [pc, #248]	@ (8003ebc <HAL_TIM_Encoder_Init+0x13c>)
 8003dc4:	42bb      	cmp	r3, r7
 8003dc6:	d05e      	beq.n	8003e86 <HAL_TIM_Encoder_Init+0x106>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dc8:	4f3d      	ldr	r7, [pc, #244]	@ (8003ec0 <HAL_TIM_Encoder_Init+0x140>)
 8003dca:	42bb      	cmp	r3, r7
 8003dcc:	d05f      	beq.n	8003e8e <HAL_TIM_Encoder_Init+0x10e>
 8003dce:	4f3d      	ldr	r7, [pc, #244]	@ (8003ec4 <HAL_TIM_Encoder_Init+0x144>)
 8003dd0:	42bb      	cmp	r3, r7
 8003dd2:	d063      	beq.n	8003e9c <HAL_TIM_Encoder_Init+0x11c>
 8003dd4:	4f3c      	ldr	r7, [pc, #240]	@ (8003ec8 <HAL_TIM_Encoder_Init+0x148>)
 8003dd6:	42bb      	cmp	r3, r7
 8003dd8:	d060      	beq.n	8003e9c <HAL_TIM_Encoder_Init+0x11c>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dda:	2780      	movs	r7, #128	@ 0x80
 8003ddc:	43ba      	bics	r2, r7
 8003dde:	4332      	orrs	r2, r6
  TIMx->CR1 = tmpcr1;
 8003de0:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003de2:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003de4:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003de6:	e012      	b.n	8003e0e <HAL_TIM_Encoder_Init+0x8e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003de8:	2770      	movs	r7, #112	@ 0x70
 8003dea:	43ba      	bics	r2, r7
    tmpcr1 |= Structure->CounterMode;
 8003dec:	68a7      	ldr	r7, [r4, #8]
 8003dee:	433a      	orrs	r2, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8003df0:	4f36      	ldr	r7, [pc, #216]	@ (8003ecc <HAL_TIM_Encoder_Init+0x14c>)
 8003df2:	403a      	ands	r2, r7
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003df4:	6927      	ldr	r7, [r4, #16]
 8003df6:	433a      	orrs	r2, r7
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003df8:	2780      	movs	r7, #128	@ 0x80
 8003dfa:	43ba      	bics	r2, r7
 8003dfc:	4332      	orrs	r2, r6
  TIMx->CR1 = tmpcr1;
 8003dfe:	601a      	str	r2, [r3, #0]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e00:	4a2d      	ldr	r2, [pc, #180]	@ (8003eb8 <HAL_TIM_Encoder_Init+0x138>)
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e02:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003e04:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d101      	bne.n	8003e0e <HAL_TIM_Encoder_Init+0x8e>
    TIMx->RCR = Structure->RepetitionCounter;
 8003e0a:	6962      	ldr	r2, [r4, #20]
 8003e0c:	631a      	str	r2, [r3, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003e0e:	2001      	movs	r0, #1
 8003e10:	6158      	str	r0, [r3, #20]
  tmpsmcr = htim->Instance->SMCR;
 8003e12:	689e      	ldr	r6, [r3, #8]
  tmpsmcr |= sConfig->EncoderMode;
 8003e14:	6829      	ldr	r1, [r5, #0]
  tmpccmr1 = htim->Instance->CCMR1;
 8003e16:	699a      	ldr	r2, [r3, #24]
  tmpsmcr |= sConfig->EncoderMode;
 8003e18:	430e      	orrs	r6, r1
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003e1a:	492d      	ldr	r1, [pc, #180]	@ (8003ed0 <HAL_TIM_Encoder_Init+0x150>)
  tmpsmcr |= sConfig->EncoderMode;
 8003e1c:	46b0      	mov	r8, r6
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003e1e:	400a      	ands	r2, r1
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003e20:	69a9      	ldr	r1, [r5, #24]
 8003e22:	68ae      	ldr	r6, [r5, #8]
 8003e24:	0209      	lsls	r1, r1, #8
 8003e26:	4331      	orrs	r1, r6
 8003e28:	4311      	orrs	r1, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003e2a:	4a2a      	ldr	r2, [pc, #168]	@ (8003ed4 <HAL_TIM_Encoder_Init+0x154>)
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003e2c:	692e      	ldr	r6, [r5, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003e2e:	4011      	ands	r1, r2
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003e30:	69ea      	ldr	r2, [r5, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003e32:	0136      	lsls	r6, r6, #4
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003e34:	0212      	lsls	r2, r2, #8
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003e36:	4332      	orrs	r2, r6
 8003e38:	68ee      	ldr	r6, [r5, #12]
  tmpccer = htim->Instance->CCER;
 8003e3a:	6a1f      	ldr	r7, [r3, #32]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003e3c:	4332      	orrs	r2, r6
 8003e3e:	6a2e      	ldr	r6, [r5, #32]
 8003e40:	0336      	lsls	r6, r6, #12
 8003e42:	4332      	orrs	r2, r6
 8003e44:	430a      	orrs	r2, r1
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003e46:	21aa      	movs	r1, #170	@ 0xaa
 8003e48:	438f      	bics	r7, r1
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003e4a:	6969      	ldr	r1, [r5, #20]
 8003e4c:	686d      	ldr	r5, [r5, #4]
 8003e4e:	0109      	lsls	r1, r1, #4
 8003e50:	4329      	orrs	r1, r5
  htim->Instance->SMCR = tmpsmcr;
 8003e52:	4645      	mov	r5, r8
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003e54:	4339      	orrs	r1, r7
  htim->Instance->SMCR = tmpsmcr;
 8003e56:	609d      	str	r5, [r3, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 8003e58:	619a      	str	r2, [r3, #24]
  htim->Instance->CCER = tmpccer;
 8003e5a:	6219      	str	r1, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e5c:	2346      	movs	r3, #70	@ 0x46
 8003e5e:	54e0      	strb	r0, [r4, r3]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e60:	3b08      	subs	r3, #8
 8003e62:	54e0      	strb	r0, [r4, r3]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e64:	3301      	adds	r3, #1
 8003e66:	54e0      	strb	r0, [r4, r3]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e68:	3303      	adds	r3, #3
 8003e6a:	54e0      	strb	r0, [r4, r3]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	54e0      	strb	r0, [r4, r3]
  htim->State = HAL_TIM_STATE_READY;
 8003e70:	3b06      	subs	r3, #6
 8003e72:	54e0      	strb	r0, [r4, r3]
  return HAL_OK;
 8003e74:	2000      	movs	r0, #0
}
 8003e76:	bc80      	pop	{r7}
 8003e78:	46b8      	mov	r8, r7
 8003e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 8003e7c:	333c      	adds	r3, #60	@ 0x3c
 8003e7e:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Encoder_MspInit(htim);
 8003e80:	f7fe ff1e 	bl	8002cc0 <HAL_TIM_Encoder_MspInit>
 8003e84:	e78a      	b.n	8003d9c <HAL_TIM_Encoder_Init+0x1c>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e86:	2770      	movs	r7, #112	@ 0x70
 8003e88:	43ba      	bics	r2, r7
    tmpcr1 |= Structure->CounterMode;
 8003e8a:	68a7      	ldr	r7, [r4, #8]
 8003e8c:	433a      	orrs	r2, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e8e:	4f0f      	ldr	r7, [pc, #60]	@ (8003ecc <HAL_TIM_Encoder_Init+0x14c>)
 8003e90:	403a      	ands	r2, r7
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e92:	6927      	ldr	r7, [r4, #16]
 8003e94:	433a      	orrs	r2, r7
 8003e96:	e7a0      	b.n	8003dda <HAL_TIM_Encoder_Init+0x5a>
    return HAL_ERROR;
 8003e98:	2001      	movs	r0, #1
 8003e9a:	e7ec      	b.n	8003e76 <HAL_TIM_Encoder_Init+0xf6>
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e9c:	4f0b      	ldr	r7, [pc, #44]	@ (8003ecc <HAL_TIM_Encoder_Init+0x14c>)
 8003e9e:	403a      	ands	r2, r7
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ea0:	6927      	ldr	r7, [r4, #16]
 8003ea2:	433a      	orrs	r2, r7
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ea4:	2780      	movs	r7, #128	@ 0x80
 8003ea6:	43ba      	bics	r2, r7
 8003ea8:	4332      	orrs	r2, r6
  TIMx->CR1 = tmpcr1;
 8003eaa:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003eac:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003eae:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003eb0:	e7ab      	b.n	8003e0a <HAL_TIM_Encoder_Init+0x8a>
 8003eb2:	46c0      	nop			@ (mov r8, r8)
 8003eb4:	ffffbff8 	.word	0xffffbff8
 8003eb8:	40012c00 	.word	0x40012c00
 8003ebc:	40000400 	.word	0x40000400
 8003ec0:	40002000 	.word	0x40002000
 8003ec4:	40014400 	.word	0x40014400
 8003ec8:	40014800 	.word	0x40014800
 8003ecc:	fffffcff 	.word	0xfffffcff
 8003ed0:	fffffcfc 	.word	0xfffffcfc
 8003ed4:	ffff0303 	.word	0xffff0303

08003ed8 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8003ed8:	233c      	movs	r3, #60	@ 0x3c
{
 8003eda:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8003edc:	5cc4      	ldrb	r4, [r0, r3]
{
 8003ede:	0005      	movs	r5, r0
  __HAL_LOCK(htim);
 8003ee0:	2c01      	cmp	r4, #1
 8003ee2:	d100      	bne.n	8003ee6 <HAL_TIM_PWM_ConfigChannel+0xe>
 8003ee4:	e0ca      	b.n	800407c <HAL_TIM_PWM_ConfigChannel+0x1a4>
 8003ee6:	2001      	movs	r0, #1
 8003ee8:	54e8      	strb	r0, [r5, r3]
  switch (Channel)
 8003eea:	2a08      	cmp	r2, #8
 8003eec:	d100      	bne.n	8003ef0 <HAL_TIM_PWM_ConfigChannel+0x18>
 8003eee:	e098      	b.n	8004022 <HAL_TIM_PWM_ConfigChannel+0x14a>
 8003ef0:	d839      	bhi.n	8003f66 <HAL_TIM_PWM_ConfigChannel+0x8e>
 8003ef2:	2a00      	cmp	r2, #0
 8003ef4:	d06a      	beq.n	8003fcc <HAL_TIM_PWM_ConfigChannel+0xf4>
 8003ef6:	2a04      	cmp	r2, #4
 8003ef8:	d131      	bne.n	8003f5e <HAL_TIM_PWM_ConfigChannel+0x86>
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003efa:	2010      	movs	r0, #16
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003efc:	682b      	ldr	r3, [r5, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003efe:	4c79      	ldr	r4, [pc, #484]	@ (80040e4 <HAL_TIM_PWM_ConfigChannel+0x20c>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f00:	6a1a      	ldr	r2, [r3, #32]
 8003f02:	4382      	bics	r2, r0
 8003f04:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8003f06:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003f08:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8003f0a:	6998      	ldr	r0, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f0c:	4020      	ands	r0, r4

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f0e:	680c      	ldr	r4, [r1, #0]
 8003f10:	0224      	lsls	r4, r4, #8
 8003f12:	4304      	orrs	r4, r0

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f14:	2020      	movs	r0, #32
 8003f16:	4382      	bics	r2, r0
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f18:	6888      	ldr	r0, [r1, #8]
 8003f1a:	0100      	lsls	r0, r0, #4
 8003f1c:	4310      	orrs	r0, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f1e:	4a72      	ldr	r2, [pc, #456]	@ (80040e8 <HAL_TIM_PWM_ConfigChannel+0x210>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d100      	bne.n	8003f26 <HAL_TIM_PWM_ConfigChannel+0x4e>
 8003f24:	e0bf      	b.n	80040a6 <HAL_TIM_PWM_ConfigChannel+0x1ce>
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f26:	4a71      	ldr	r2, [pc, #452]	@ (80040ec <HAL_TIM_PWM_ConfigChannel+0x214>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d100      	bne.n	8003f2e <HAL_TIM_PWM_ConfigChannel+0x56>
 8003f2c:	e0c2      	b.n	80040b4 <HAL_TIM_PWM_ConfigChannel+0x1dc>
 8003f2e:	4a70      	ldr	r2, [pc, #448]	@ (80040f0 <HAL_TIM_PWM_ConfigChannel+0x218>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d100      	bne.n	8003f36 <HAL_TIM_PWM_ConfigChannel+0x5e>
 8003f34:	e0be      	b.n	80040b4 <HAL_TIM_PWM_ConfigChannel+0x1dc>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f36:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003f38:	605e      	str	r6, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003f3a:	619c      	str	r4, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003f3c:	639a      	str	r2, [r3, #56]	@ 0x38
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f3e:	2280      	movs	r2, #128	@ 0x80

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f40:	6218      	str	r0, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f42:	6998      	ldr	r0, [r3, #24]
 8003f44:	0112      	lsls	r2, r2, #4
 8003f46:	4302      	orrs	r2, r0
 8003f48:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f4a:	699a      	ldr	r2, [r3, #24]
 8003f4c:	4869      	ldr	r0, [pc, #420]	@ (80040f4 <HAL_TIM_PWM_ConfigChannel+0x21c>)
 8003f4e:	4002      	ands	r2, r0
 8003f50:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f52:	690a      	ldr	r2, [r1, #16]
 8003f54:	6998      	ldr	r0, [r3, #24]
 8003f56:	0212      	lsls	r2, r2, #8
 8003f58:	4302      	orrs	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
 8003f5a:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f5c:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8003f5e:	233c      	movs	r3, #60	@ 0x3c
 8003f60:	2200      	movs	r2, #0
 8003f62:	54ea      	strb	r2, [r5, r3]
}
 8003f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (Channel)
 8003f66:	2001      	movs	r0, #1
 8003f68:	2a0c      	cmp	r2, #12
 8003f6a:	d1f8      	bne.n	8003f5e <HAL_TIM_PWM_ConfigChannel+0x86>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f6c:	682b      	ldr	r3, [r5, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f6e:	4862      	ldr	r0, [pc, #392]	@ (80040f8 <HAL_TIM_PWM_ConfigChannel+0x220>)
 8003f70:	6a1a      	ldr	r2, [r3, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f72:	4c5c      	ldr	r4, [pc, #368]	@ (80040e4 <HAL_TIM_PWM_ConfigChannel+0x20c>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f74:	4002      	ands	r2, r0
 8003f76:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8003f78:	6a18      	ldr	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003f7a:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8003f7c:	69da      	ldr	r2, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f7e:	4022      	ands	r2, r4

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f80:	680c      	ldr	r4, [r1, #0]
 8003f82:	0224      	lsls	r4, r4, #8
 8003f84:	4314      	orrs	r4, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f86:	4a5d      	ldr	r2, [pc, #372]	@ (80040fc <HAL_TIM_PWM_ConfigChannel+0x224>)
 8003f88:	4010      	ands	r0, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f8a:	688a      	ldr	r2, [r1, #8]
 8003f8c:	0312      	lsls	r2, r2, #12
 8003f8e:	4302      	orrs	r2, r0

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f90:	4855      	ldr	r0, [pc, #340]	@ (80040e8 <HAL_TIM_PWM_ConfigChannel+0x210>)
 8003f92:	4283      	cmp	r3, r0
 8003f94:	d074      	beq.n	8004080 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8003f96:	4855      	ldr	r0, [pc, #340]	@ (80040ec <HAL_TIM_PWM_ConfigChannel+0x214>)
 8003f98:	4283      	cmp	r3, r0
 8003f9a:	d071      	beq.n	8004080 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8003f9c:	4854      	ldr	r0, [pc, #336]	@ (80040f0 <HAL_TIM_PWM_ConfigChannel+0x218>)
 8003f9e:	4283      	cmp	r3, r0
 8003fa0:	d06e      	beq.n	8004080 <HAL_TIM_PWM_ConfigChannel+0x1a8>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003fa2:	6848      	ldr	r0, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003fa4:	605e      	str	r6, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003fa6:	61dc      	str	r4, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8003fa8:	6418      	str	r0, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003faa:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003fac:	2280      	movs	r2, #128	@ 0x80
 8003fae:	69d8      	ldr	r0, [r3, #28]
 8003fb0:	0112      	lsls	r2, r2, #4
 8003fb2:	4302      	orrs	r2, r0
 8003fb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003fb6:	69da      	ldr	r2, [r3, #28]
 8003fb8:	484e      	ldr	r0, [pc, #312]	@ (80040f4 <HAL_TIM_PWM_ConfigChannel+0x21c>)
 8003fba:	4002      	ands	r2, r0
 8003fbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003fbe:	690a      	ldr	r2, [r1, #16]
 8003fc0:	69d8      	ldr	r0, [r3, #28]
 8003fc2:	0212      	lsls	r2, r2, #8
 8003fc4:	4302      	orrs	r2, r0
 8003fc6:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003fc8:	2000      	movs	r0, #0
 8003fca:	e7c8      	b.n	8003f5e <HAL_TIM_PWM_ConfigChannel+0x86>
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003fcc:	2473      	movs	r4, #115	@ 0x73
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003fce:	682b      	ldr	r3, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fd0:	6a1a      	ldr	r2, [r3, #32]
 8003fd2:	4382      	bics	r2, r0
 8003fd4:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8003fd6:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003fd8:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8003fda:	6998      	ldr	r0, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003fdc:	43a0      	bics	r0, r4
  tmpccmrx |= OC_Config->OCMode;
 8003fde:	680c      	ldr	r4, [r1, #0]
 8003fe0:	4320      	orrs	r0, r4
  tmpccer &= ~TIM_CCER_CC1P;
 8003fe2:	2402      	movs	r4, #2
 8003fe4:	43a2      	bics	r2, r4
  tmpccer |= OC_Config->OCPolarity;
 8003fe6:	688c      	ldr	r4, [r1, #8]
 8003fe8:	4322      	orrs	r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003fea:	4c3f      	ldr	r4, [pc, #252]	@ (80040e8 <HAL_TIM_PWM_ConfigChannel+0x210>)
 8003fec:	42a3      	cmp	r3, r4
 8003fee:	d04d      	beq.n	800408c <HAL_TIM_PWM_ConfigChannel+0x1b4>
 8003ff0:	4c3e      	ldr	r4, [pc, #248]	@ (80040ec <HAL_TIM_PWM_ConfigChannel+0x214>)
 8003ff2:	42a3      	cmp	r3, r4
 8003ff4:	d04a      	beq.n	800408c <HAL_TIM_PWM_ConfigChannel+0x1b4>
 8003ff6:	4c3e      	ldr	r4, [pc, #248]	@ (80040f0 <HAL_TIM_PWM_ConfigChannel+0x218>)
 8003ff8:	42a3      	cmp	r3, r4
 8003ffa:	d047      	beq.n	800408c <HAL_TIM_PWM_ConfigChannel+0x1b4>
  TIMx->CR2 = tmpcr2;
 8003ffc:	605e      	str	r6, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003ffe:	6198      	str	r0, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8004000:	6848      	ldr	r0, [r1, #4]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004002:	6909      	ldr	r1, [r1, #16]
  TIMx->CCR1 = OC_Config->Pulse;
 8004004:	6358      	str	r0, [r3, #52]	@ 0x34
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004006:	2008      	movs	r0, #8
  TIMx->CCER = tmpccer;
 8004008:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800400a:	699a      	ldr	r2, [r3, #24]
 800400c:	4302      	orrs	r2, r0
 800400e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004010:	699a      	ldr	r2, [r3, #24]
 8004012:	3804      	subs	r0, #4
 8004014:	4382      	bics	r2, r0
 8004016:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004018:	699a      	ldr	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800401a:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800401c:	430a      	orrs	r2, r1
 800401e:	619a      	str	r2, [r3, #24]
      break;
 8004020:	e79d      	b.n	8003f5e <HAL_TIM_PWM_ConfigChannel+0x86>
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004022:	2473      	movs	r4, #115	@ 0x73
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004024:	682b      	ldr	r3, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004026:	4836      	ldr	r0, [pc, #216]	@ (8004100 <HAL_TIM_PWM_ConfigChannel+0x228>)
 8004028:	6a1a      	ldr	r2, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 800402a:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800402c:	4002      	ands	r2, r0
 800402e:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8004030:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004032:	685f      	ldr	r7, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8004034:	69d8      	ldr	r0, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004036:	43a0      	bics	r0, r4
  tmpccmrx |= OC_Config->OCMode;
 8004038:	4306      	orrs	r6, r0
  tmpccer &= ~TIM_CCER_CC3P;
 800403a:	4832      	ldr	r0, [pc, #200]	@ (8004104 <HAL_TIM_PWM_ConfigChannel+0x22c>)
 800403c:	4002      	ands	r2, r0
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800403e:	6888      	ldr	r0, [r1, #8]
 8004040:	0200      	lsls	r0, r0, #8
 8004042:	4310      	orrs	r0, r2
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004044:	4a28      	ldr	r2, [pc, #160]	@ (80040e8 <HAL_TIM_PWM_ConfigChannel+0x210>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d03c      	beq.n	80040c4 <HAL_TIM_PWM_ConfigChannel+0x1ec>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800404a:	4a28      	ldr	r2, [pc, #160]	@ (80040ec <HAL_TIM_PWM_ConfigChannel+0x214>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d040      	beq.n	80040d2 <HAL_TIM_PWM_ConfigChannel+0x1fa>
 8004050:	4a27      	ldr	r2, [pc, #156]	@ (80040f0 <HAL_TIM_PWM_ConfigChannel+0x218>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d03d      	beq.n	80040d2 <HAL_TIM_PWM_ConfigChannel+0x1fa>
  TIMx->CCR3 = OC_Config->Pulse;
 8004056:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004058:	605f      	str	r7, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 800405a:	61de      	str	r6, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800405c:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIMx->CCER = tmpccer;
 800405e:	6218      	str	r0, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004060:	2008      	movs	r0, #8
 8004062:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004064:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004066:	4302      	orrs	r2, r0
 8004068:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800406a:	69da      	ldr	r2, [r3, #28]
 800406c:	3804      	subs	r0, #4
 800406e:	4382      	bics	r2, r0
 8004070:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004072:	69da      	ldr	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8004074:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004076:	430a      	orrs	r2, r1
 8004078:	61da      	str	r2, [r3, #28]
      break;
 800407a:	e770      	b.n	8003f5e <HAL_TIM_PWM_ConfigChannel+0x86>
  __HAL_LOCK(htim);
 800407c:	2002      	movs	r0, #2
 800407e:	e771      	b.n	8003f64 <HAL_TIM_PWM_ConfigChannel+0x8c>
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004080:	4821      	ldr	r0, [pc, #132]	@ (8004108 <HAL_TIM_PWM_ConfigChannel+0x230>)
 8004082:	4030      	ands	r0, r6
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004084:	694e      	ldr	r6, [r1, #20]
 8004086:	01b6      	lsls	r6, r6, #6
 8004088:	4306      	orrs	r6, r0
 800408a:	e78a      	b.n	8003fa2 <HAL_TIM_PWM_ConfigChannel+0xca>
    tmpccer &= ~TIM_CCER_CC1NP;
 800408c:	2408      	movs	r4, #8
 800408e:	43a2      	bics	r2, r4
    tmpccer |= OC_Config->OCNPolarity;
 8004090:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8004092:	698f      	ldr	r7, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 8004094:	4322      	orrs	r2, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 8004096:	2404      	movs	r4, #4
 8004098:	43a2      	bics	r2, r4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800409a:	4c1c      	ldr	r4, [pc, #112]	@ (800410c <HAL_TIM_PWM_ConfigChannel+0x234>)
 800409c:	4034      	ands	r4, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 800409e:	694e      	ldr	r6, [r1, #20]
 80040a0:	433e      	orrs	r6, r7
 80040a2:	4326      	orrs	r6, r4
 80040a4:	e7aa      	b.n	8003ffc <HAL_TIM_PWM_ConfigChannel+0x124>
    tmpccer &= ~TIM_CCER_CC2NP;
 80040a6:	2280      	movs	r2, #128	@ 0x80
 80040a8:	4390      	bics	r0, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040aa:	68ca      	ldr	r2, [r1, #12]
 80040ac:	0112      	lsls	r2, r2, #4
 80040ae:	4310      	orrs	r0, r2
    tmpccer &= ~TIM_CCER_CC2NE;
 80040b0:	2240      	movs	r2, #64	@ 0x40
 80040b2:	4390      	bics	r0, r2
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040b4:	4a16      	ldr	r2, [pc, #88]	@ (8004110 <HAL_TIM_PWM_ConfigChannel+0x238>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040b6:	698f      	ldr	r7, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040b8:	4032      	ands	r2, r6
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040ba:	694e      	ldr	r6, [r1, #20]
 80040bc:	433e      	orrs	r6, r7
 80040be:	00b6      	lsls	r6, r6, #2
 80040c0:	4316      	orrs	r6, r2
 80040c2:	e738      	b.n	8003f36 <HAL_TIM_PWM_ConfigChannel+0x5e>
    tmpccer &= ~TIM_CCER_CC3NP;
 80040c4:	4a13      	ldr	r2, [pc, #76]	@ (8004114 <HAL_TIM_PWM_ConfigChannel+0x23c>)
 80040c6:	4002      	ands	r2, r0
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80040c8:	68c8      	ldr	r0, [r1, #12]
 80040ca:	0200      	lsls	r0, r0, #8
 80040cc:	4310      	orrs	r0, r2
    tmpccer &= ~TIM_CCER_CC3NE;
 80040ce:	4a09      	ldr	r2, [pc, #36]	@ (80040f4 <HAL_TIM_PWM_ConfigChannel+0x21c>)
 80040d0:	4010      	ands	r0, r2
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80040d2:	4c11      	ldr	r4, [pc, #68]	@ (8004118 <HAL_TIM_PWM_ConfigChannel+0x240>)
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80040d4:	694a      	ldr	r2, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80040d6:	403c      	ands	r4, r7
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80040d8:	698f      	ldr	r7, [r1, #24]
 80040da:	4317      	orrs	r7, r2
 80040dc:	013f      	lsls	r7, r7, #4
 80040de:	4327      	orrs	r7, r4
 80040e0:	e7b9      	b.n	8004056 <HAL_TIM_PWM_ConfigChannel+0x17e>
 80040e2:	46c0      	nop			@ (mov r8, r8)
 80040e4:	ffff8cff 	.word	0xffff8cff
 80040e8:	40012c00 	.word	0x40012c00
 80040ec:	40014400 	.word	0x40014400
 80040f0:	40014800 	.word	0x40014800
 80040f4:	fffffbff 	.word	0xfffffbff
 80040f8:	ffffefff 	.word	0xffffefff
 80040fc:	ffffdfff 	.word	0xffffdfff
 8004100:	fffffeff 	.word	0xfffffeff
 8004104:	fffffdff 	.word	0xfffffdff
 8004108:	ffffbfff 	.word	0xffffbfff
 800410c:	fffffcff 	.word	0xfffffcff
 8004110:	fffff3ff 	.word	0xfffff3ff
 8004114:	fffff7ff 	.word	0xfffff7ff
 8004118:	ffffcfff 	.word	0xffffcfff

0800411c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800411c:	233c      	movs	r3, #60	@ 0x3c
{
 800411e:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8004120:	5cc3      	ldrb	r3, [r0, r3]
 8004122:	2b01      	cmp	r3, #1
 8004124:	d021      	beq.n	800416a <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004126:	233d      	movs	r3, #61	@ 0x3d
 8004128:	2202      	movs	r2, #2

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800412a:	2570      	movs	r5, #112	@ 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 800412c:	54c2      	strb	r2, [r0, r3]
  tmpcr2 = htim->Instance->CR2;
 800412e:	6803      	ldr	r3, [r0, #0]
 8004130:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8004132:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8004134:	43aa      	bics	r2, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004136:	680d      	ldr	r5, [r1, #0]
 8004138:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800413a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800413c:	4a0c      	ldr	r2, [pc, #48]	@ (8004170 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d006      	beq.n	8004150 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 8004142:	2280      	movs	r2, #128	@ 0x80
 8004144:	05d2      	lsls	r2, r2, #23
 8004146:	4293      	cmp	r3, r2
 8004148:	d002      	beq.n	8004150 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 800414a:	4a0a      	ldr	r2, [pc, #40]	@ (8004174 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d104      	bne.n	800415a <HAL_TIMEx_MasterConfigSynchronization+0x3e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004150:	2280      	movs	r2, #128	@ 0x80
 8004152:	4394      	bics	r4, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004154:	684a      	ldr	r2, [r1, #4]
 8004156:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004158:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800415a:	233d      	movs	r3, #61	@ 0x3d
 800415c:	2201      	movs	r2, #1
 800415e:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 8004160:	2200      	movs	r2, #0
 8004162:	3b01      	subs	r3, #1
 8004164:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8004166:	2000      	movs	r0, #0
}
 8004168:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 800416a:	2002      	movs	r0, #2
 800416c:	e7fc      	b.n	8004168 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800416e:	46c0      	nop			@ (mov r8, r8)
 8004170:	40012c00 	.word	0x40012c00
 8004174:	40000400 	.word	0x40000400

08004178 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004178:	223c      	movs	r2, #60	@ 0x3c
{
 800417a:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 800417c:	5c83      	ldrb	r3, [r0, r2]
 800417e:	2b01      	cmp	r3, #1
 8004180:	d01e      	beq.n	80041c0 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004182:	68cb      	ldr	r3, [r1, #12]
 8004184:	4c0f      	ldr	r4, [pc, #60]	@ (80041c4 <HAL_TIMEx_ConfigBreakDeadTime+0x4c>)
 8004186:	4023      	ands	r3, r4
 8004188:	688c      	ldr	r4, [r1, #8]
 800418a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800418c:	4c0e      	ldr	r4, [pc, #56]	@ (80041c8 <HAL_TIMEx_ConfigBreakDeadTime+0x50>)
 800418e:	4023      	ands	r3, r4
 8004190:	684c      	ldr	r4, [r1, #4]
 8004192:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004194:	4c0d      	ldr	r4, [pc, #52]	@ (80041cc <HAL_TIMEx_ConfigBreakDeadTime+0x54>)
 8004196:	4023      	ands	r3, r4
 8004198:	680c      	ldr	r4, [r1, #0]
 800419a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800419c:	4c0c      	ldr	r4, [pc, #48]	@ (80041d0 <HAL_TIMEx_ConfigBreakDeadTime+0x58>)
 800419e:	4023      	ands	r3, r4
 80041a0:	690c      	ldr	r4, [r1, #16]
 80041a2:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80041a4:	4c0b      	ldr	r4, [pc, #44]	@ (80041d4 <HAL_TIMEx_ConfigBreakDeadTime+0x5c>)
 80041a6:	4023      	ands	r3, r4
 80041a8:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80041aa:	69c9      	ldr	r1, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80041ac:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80041ae:	4c0a      	ldr	r4, [pc, #40]	@ (80041d8 <HAL_TIMEx_ConfigBreakDeadTime+0x60>)
 80041b0:	4023      	ands	r3, r4
 80041b2:	430b      	orrs	r3, r1


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80041b4:	6801      	ldr	r1, [r0, #0]
 80041b6:	644b      	str	r3, [r1, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80041b8:	2300      	movs	r3, #0
 80041ba:	5483      	strb	r3, [r0, r2]

  return HAL_OK;
 80041bc:	2000      	movs	r0, #0
}
 80041be:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 80041c0:	2002      	movs	r0, #2
 80041c2:	e7fc      	b.n	80041be <HAL_TIMEx_ConfigBreakDeadTime+0x46>
 80041c4:	fffffcff 	.word	0xfffffcff
 80041c8:	fffffbff 	.word	0xfffffbff
 80041cc:	fffff7ff 	.word	0xfffff7ff
 80041d0:	ffffefff 	.word	0xffffefff
 80041d4:	ffffdfff 	.word	0xffffdfff
 80041d8:	ffffbfff 	.word	0xffffbfff

080041dc <Circle_Limitation>:
  *  @f$v_q = \sqrt(MaxModule^2-v_d^2\ ) @f$

  *
  */
__weak qd_t Circle_Limitation(const CircleLimitation_Handle_t *pHandle, qd_t Vqd)
{
 80041dc:	b530      	push	{r4, r5, lr}
 80041de:	b20b      	sxth	r3, r1
 80041e0:	1409      	asrs	r1, r1, #16
    int32_t square_limit;
    int32_t vd_square_limit;
    int32_t new_q;
    int32_t new_d;

    maxModule = (int32_t)pHandle->MaxModule;
 80041e2:	8802      	ldrh	r2, [r0, #0]

    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
    square_d = ((int32_t)(Vqd.d)) * Vqd.d;
 80041e4:	000c      	movs	r4, r1
    square_limit = maxModule * maxModule;
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
 80041e6:	8845      	ldrh	r5, [r0, #2]
    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
 80041e8:	0018      	movs	r0, r3
    square_d = ((int32_t)(Vqd.d)) * Vqd.d;
 80041ea:	434c      	muls	r4, r1
    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
 80041ec:	4358      	muls	r0, r3
    square_limit = maxModule * maxModule;
 80041ee:	4352      	muls	r2, r2
    square_sum = square_q + square_d;
 80041f0:	1900      	adds	r0, r0, r4
{
 80041f2:	b085      	sub	sp, #20

    if (square_sum > square_limit)
 80041f4:	4282      	cmp	r2, r0
 80041f6:	da0f      	bge.n	8004218 <Circle_Limitation+0x3c>
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
 80041f8:	0028      	movs	r0, r5
 80041fa:	436d      	muls	r5, r5
    {
      if (square_d <= vd_square_limit)
 80041fc:	42ac      	cmp	r4, r5
 80041fe:	dc11      	bgt.n	8004224 <Circle_Limitation+0x48>
      {
#if defined CIRCLE_LIMITATION_SQRT_M0
        square_temp = (square_limit - square_d) / 1048576;
 8004200:	1b12      	subs	r2, r2, r4
 8004202:	17d4      	asrs	r4, r2, #31
 8004204:	0324      	lsls	r4, r4, #12
 8004206:	0b24      	lsrs	r4, r4, #12
 8004208:	18a2      	adds	r2, r4, r2
        new_q = SqrtTable[square_temp];
 800420a:	4810      	ldr	r0, [pc, #64]	@ (800424c <Circle_Limitation+0x70>)
        square_temp = (square_limit - square_d) / 1048576;
 800420c:	1512      	asrs	r2, r2, #20
        new_q = SqrtTable[square_temp];
 800420e:	0052      	lsls	r2, r2, #1
 8004210:	5a12      	ldrh	r2, [r2, r0]
#else
        square_temp = square_limit - square_d;
        new_q = MCM_Sqrt(square_temp);
#endif
        if (Vqd.q < 0)
 8004212:	2b00      	cmp	r3, #0
 8004214:	db14      	blt.n	8004240 <Circle_Limitation+0x64>
        if (Vqd.q < 0)
        {
          new_q = - new_q;
        }
      }
      Local_Vqd.q = (int16_t)new_q;
 8004216:	b213      	sxth	r3, r2
      Local_Vqd.d = (int16_t)new_d;
    }
#ifdef NULL_PTR_CHECK_CRC_LIM
  }
#endif
  return (Local_Vqd);
 8004218:	0418      	lsls	r0, r3, #16
 800421a:	0409      	lsls	r1, r1, #16
 800421c:	0c00      	lsrs	r0, r0, #16
 800421e:	4308      	orrs	r0, r1
}
 8004220:	b005      	add	sp, #20
 8004222:	bd30      	pop	{r4, r5, pc}
        if (Vqd.d < 0)
 8004224:	2900      	cmp	r1, #0
 8004226:	db0e      	blt.n	8004246 <Circle_Limitation+0x6a>
        square_temp = (square_limit - vd_square_limit) / 1048576;
 8004228:	1b52      	subs	r2, r2, r5
 800422a:	17d4      	asrs	r4, r2, #31
 800422c:	0324      	lsls	r4, r4, #12
 800422e:	0b24      	lsrs	r4, r4, #12
 8004230:	18a2      	adds	r2, r4, r2
        new_q = SqrtTable[square_temp];
 8004232:	4906      	ldr	r1, [pc, #24]	@ (800424c <Circle_Limitation+0x70>)
        square_temp = (square_limit - vd_square_limit) / 1048576;
 8004234:	1512      	asrs	r2, r2, #20
        new_q = SqrtTable[square_temp];
 8004236:	0052      	lsls	r2, r2, #1
 8004238:	5a52      	ldrh	r2, [r2, r1]
      Local_Vqd.d = (int16_t)new_d;
 800423a:	b201      	sxth	r1, r0
        if (Vqd.q < 0)
 800423c:	2b00      	cmp	r3, #0
 800423e:	daea      	bge.n	8004216 <Circle_Limitation+0x3a>
          new_q = - new_q;
 8004240:	4252      	negs	r2, r2
      Local_Vqd.q = (int16_t)new_q;
 8004242:	b213      	sxth	r3, r2
      Local_Vqd.d = (int16_t)new_d;
 8004244:	e7e8      	b.n	8004218 <Circle_Limitation+0x3c>
          new_d = -new_d;
 8004246:	4240      	negs	r0, r0
 8004248:	e7ee      	b.n	8004228 <Circle_Limitation+0x4c>
 800424a:	46c0      	nop			@ (mov r8, r8)
 800424c:	08004e0c 	.word	0x08004e0c

08004250 <EAC_Init>:
  else
  {
#endif
    pHandle->pSTC = pSTC;
    pHandle->pVSS = pVSS;
    pHandle->pENC = pENC;
 8004250:	6083      	str	r3, [r0, #8]
    pHandle->EncAligned = false;
 8004252:	2300      	movs	r3, #0
    pHandle->pSTC = pSTC;
 8004254:	6001      	str	r1, [r0, #0]
    pHandle->pVSS = pVSS;
 8004256:	6042      	str	r2, [r0, #4]
    pHandle->EncAligned = false;
 8004258:	81c3      	strh	r3, [r0, #14]
    pHandle->EncRestart = false;
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  }
#endif
}
 800425a:	4770      	bx	lr

0800425c <EAC_StartAlignment>:
  * It configures the VSS (Virtual Speed Sensor) with the required angle and sets the
  * STC (Speed and Torque Controller) to execute the required torque ramp.
  * @param  pHandle: handler of the current instance of the EncAlignCtrl component.
  */
__weak void EAC_StartAlignment(EncAlign_Handle_t *pHandle)
{
 800425c:	b510      	push	{r4, lr}
 800425e:	0004      	movs	r4, r0
  {
#endif
    uint32_t wAux;

    /* Set pVSS mechanical speed to zero.*/
    VSS_SetMecAcceleration(pHandle->pVSS, 0, 0U);
 8004260:	2200      	movs	r2, #0
 8004262:	2100      	movs	r1, #0
 8004264:	6840      	ldr	r0, [r0, #4]
 8004266:	f000 fbd5 	bl	8004a14 <VSS_SetMecAcceleration>

    /* Set pVSS mechanical angle.*/
    VSS_SetMecAngle(pHandle->pVSS, pHandle->hElAngle);
 800426a:	2314      	movs	r3, #20
 800426c:	5ee1      	ldrsh	r1, [r4, r3]
 800426e:	6860      	ldr	r0, [r4, #4]
 8004270:	f000 fbc4 	bl	80049fc <VSS_SetMecAngle>

    /* Set pSTC in MCM_TORQUE_MODE.*/
    STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 8004274:	6820      	ldr	r0, [r4, #0]
 8004276:	2104      	movs	r1, #4
 8004278:	f000 fb1e 	bl	80048b8 <STC_SetControlMode>

    /* Set starting torque to Zero */
    (void)STC_ExecRamp(pHandle->pSTC, 0, 0U);
 800427c:	2200      	movs	r2, #0
 800427e:	2100      	movs	r1, #0
 8004280:	6820      	ldr	r0, [r4, #0]
 8004282:	f000 fb1d 	bl	80048c0 <STC_ExecRamp>

    /* Execute the torque ramp.*/
    (void)STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, (uint32_t)pHandle->hDurationms);
 8004286:	2312      	movs	r3, #18
 8004288:	5ee1      	ldrsh	r1, [r4, r3]
 800428a:	8ae2      	ldrh	r2, [r4, #22]
 800428c:	6820      	ldr	r0, [r4, #0]
 800428e:	f000 fb17 	bl	80048c0 <STC_ExecRamp>
    /* Compute hRemainingTicks, the number of thick of alignment phase.*/
    wAux = ((uint32_t)pHandle->hDurationms) * ((uint32_t)pHandle->hEACFrequencyHz);
    wAux /= 1000U;
 8004292:	21fa      	movs	r1, #250	@ 0xfa
    wAux = ((uint32_t)pHandle->hDurationms) * ((uint32_t)pHandle->hEACFrequencyHz);
 8004294:	8ae3      	ldrh	r3, [r4, #22]
 8004296:	8a20      	ldrh	r0, [r4, #16]
    wAux /= 1000U;
 8004298:	0089      	lsls	r1, r1, #2
    wAux = ((uint32_t)pHandle->hDurationms) * ((uint32_t)pHandle->hEACFrequencyHz);
 800429a:	4358      	muls	r0, r3
    wAux /= 1000U;
 800429c:	f7fb ff34 	bl	8000108 <__udivsi3>
    pHandle->hRemainingTicks = (uint16_t)wAux;
    pHandle->hRemainingTicks++;
 80042a0:	3001      	adds	r0, #1
 80042a2:	81a0      	strh	r0, [r4, #12]
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  }
#endif
}
 80042a4:	bd10      	pop	{r4, pc}
 80042a6:	46c0      	nop			@ (mov r8, r8)

080042a8 <EAC_Exec>:
  * @param  pHandle: handler of the current instance of the EncAlignCtrl component.
  * @retval bool It returns true when the programmed alignment has been
  *         completed.
  */
__weak bool EAC_Exec(EncAlign_Handle_t *pHandle)
{
 80042a8:	b510      	push	{r4, lr}
    retVal = false;
  }
  else
  {
#endif
    if (pHandle->hRemainingTicks > 0U)
 80042aa:	8983      	ldrh	r3, [r0, #12]
{
 80042ac:	0004      	movs	r4, r0
    if (pHandle->hRemainingTicks > 0U)
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d011      	beq.n	80042d6 <EAC_Exec+0x2e>
    {
      pHandle->hRemainingTicks--;
 80042b2:	3b01      	subs	r3, #1
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	8183      	strh	r3, [r0, #12]
        pHandle->EncAligned = true;
        retVal = true;
      }
      else
      {
        retVal = false;
 80042b8:	2000      	movs	r0, #0
      if (0U == pHandle->hRemainingTicks)
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d000      	beq.n	80042c0 <EAC_Exec+0x18>
    }
#endif
  }

  return (retVal);
}
 80042be:	bd10      	pop	{r4, pc}
        ENC_SetMecAngle(pHandle->pENC, pHandle->hElAngle / ((int16_t)pHandle->bElToMecRatio));
 80042c0:	2314      	movs	r3, #20
 80042c2:	5ee0      	ldrsh	r0, [r4, r3]
 80042c4:	7e21      	ldrb	r1, [r4, #24]
 80042c6:	f7fb ffa9 	bl	800021c <__divsi3>
 80042ca:	b201      	sxth	r1, r0
 80042cc:	68a0      	ldr	r0, [r4, #8]
 80042ce:	f000 f929 	bl	8004524 <ENC_SetMecAngle>
        pHandle->EncAligned = true;
 80042d2:	2301      	movs	r3, #1
 80042d4:	73a3      	strb	r3, [r4, #14]
  bool retVal = true;
 80042d6:	2001      	movs	r0, #1
 80042d8:	e7f1      	b.n	80042be <EAC_Exec+0x16>
 80042da:	46c0      	nop			@ (mov r8, r8)

080042dc <EAC_IsAligned>:
__weak bool EAC_IsAligned(EncAlign_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  return ((NULL == pHandle) ? false : pHandle->EncAligned);
#else
  return (pHandle->EncAligned);
 80042dc:	7b80      	ldrb	r0, [r0, #14]
#endif
}
 80042de:	4770      	bx	lr

080042e0 <EAC_SetRestartState>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->EncRestart = restart;
 80042e0:	73c1      	strb	r1, [r0, #15]
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  }
#endif
}
 80042e2:	4770      	bx	lr

080042e4 <ENC_Init>:
  WRITE_REG(TIMx->CNT, Counter);
 80042e4:	2300      	movs	r3, #0
            required for the speed position sensor management using ENCODER
            sensors.
  * @param  pHandle: handler of the current instance of the encoder component
  */
__weak void ENC_Init(ENCODER_Handle_t *pHandle)
{
 80042e6:	b570      	push	{r4, r5, r6, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    TIM_TypeDef *TIMx = pHandle->TIMx;
 80042e8:	6a05      	ldr	r5, [r0, #32]
{
 80042ea:	0004      	movs	r4, r0
 80042ec:	626b      	str	r3, [r5, #36]	@ 0x24
#endif
    /* Reset counter */
    LL_TIM_SetCounter(TIMx, 0);

    /*Calculations of convenience*/
    pHandle->U32MAXdivPulseNumber = UINT32_MAX / ((uint32_t) pHandle->PulseNumber);
 80042ee:	336e      	adds	r3, #110	@ 0x6e
 80042f0:	5ac1      	ldrh	r1, [r0, r3]
 80042f2:	2001      	movs	r0, #1
 80042f4:	4240      	negs	r0, r0
 80042f6:	f7fb ff07 	bl	8000108 <__udivsi3>
    pHandle->SpeedSamplingFreqUnit = ((uint32_t)pHandle->SpeedSamplingFreqHz * (uint32_t)SPEED_UNIT);
 80042fa:	236c      	movs	r3, #108	@ 0x6c
    pHandle->U32MAXdivPulseNumber = UINT32_MAX / ((uint32_t) pHandle->PulseNumber);
 80042fc:	66a0      	str	r0, [r4, #104]	@ 0x68
    pHandle->SpeedSamplingFreqUnit = ((uint32_t)pHandle->SpeedSamplingFreqHz * (uint32_t)SPEED_UNIT);
 80042fe:	5ae2      	ldrh	r2, [r4, r3]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8004300:	21f0      	movs	r1, #240	@ 0xf0
 8004302:	0093      	lsls	r3, r2, #2
 8004304:	189b      	adds	r3, r3, r2
 8004306:	005b      	lsls	r3, r3, #1
 8004308:	6263      	str	r3, [r4, #36]	@ 0x24

    /* Set IC filter for both channel 1 & 2*/
    LL_TIM_IC_SetFilter(TIMx, LL_TIM_CHANNEL_CH1, ((uint32_t)pHandle->ICx_Filter << 20U));
 800430a:	2376      	movs	r3, #118	@ 0x76
 800430c:	69aa      	ldr	r2, [r5, #24]
 800430e:	5ce3      	ldrb	r3, [r4, r3]
 8004310:	438a      	bics	r2, r1
 8004312:	011b      	lsls	r3, r3, #4
 8004314:	431a      	orrs	r2, r3
 8004316:	61aa      	str	r2, [r5, #24]
 8004318:	69aa      	ldr	r2, [r5, #24]
 800431a:	490d      	ldr	r1, [pc, #52]	@ (8004350 <ENC_Init+0x6c>)
 800431c:	021b      	lsls	r3, r3, #8
 800431e:	400a      	ands	r2, r1
 8004320:	4313      	orrs	r3, r2
 8004322:	61ab      	str	r3, [r5, #24]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004324:	2302      	movs	r3, #2
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8004326:	2201      	movs	r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004328:	425b      	negs	r3, r3
 800432a:	612b      	str	r3, [r5, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800432c:	68eb      	ldr	r3, [r5, #12]
 800432e:	4313      	orrs	r3, r2
 8004330:	60eb      	str	r3, [r5, #12]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004332:	682b      	ldr	r3, [r5, #0]
 8004334:	4313      	orrs	r3, r2
 8004336:	602b      	str	r3, [r5, #0]

    /* Enable the counting timer*/
    LL_TIM_EnableCounter(TIMx);

    /* Erase speed buffer */
    bufferSize = pHandle->SpeedBufferSize;
 8004338:	2374      	movs	r3, #116	@ 0x74
 800433a:	5ce2      	ldrb	r2, [r4, r3]

    for (index = 0U; index < bufferSize; index++)
 800433c:	2a00      	cmp	r2, #0
 800433e:	d005      	beq.n	800434c <ENC_Init+0x68>
    {
      pHandle->DeltaCapturesBuffer[index] = 0;
 8004340:	0020      	movs	r0, r4
 8004342:	2100      	movs	r1, #0
 8004344:	0092      	lsls	r2, r2, #2
 8004346:	3028      	adds	r0, #40	@ 0x28
 8004348:	f000 fbac 	bl	8004aa4 <memset>
    }
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
}
 800434c:	bd70      	pop	{r4, r5, r6, pc}
 800434e:	46c0      	nop			@ (mov r8, r8)
 8004350:	ffff0fff 	.word	0xffff0fff

08004354 <ENC_Clear>:
  else
  {
#endif
    uint8_t index;

    for (index = 0u; index < pHandle->SpeedBufferSize; index++)
 8004354:	2374      	movs	r3, #116	@ 0x74
{
 8004356:	b510      	push	{r4, lr}
    for (index = 0u; index < pHandle->SpeedBufferSize; index++)
 8004358:	5cc2      	ldrb	r2, [r0, r3]
{
 800435a:	0004      	movs	r4, r0
    for (index = 0u; index < pHandle->SpeedBufferSize; index++)
 800435c:	2a00      	cmp	r2, #0
 800435e:	d004      	beq.n	800436a <ENC_Clear+0x16>
    {
      pHandle->DeltaCapturesBuffer[index] = 0;
 8004360:	2100      	movs	r1, #0
 8004362:	0092      	lsls	r2, r2, #2
 8004364:	3028      	adds	r0, #40	@ 0x28
 8004366:	f000 fb9d 	bl	8004aa4 <memset>
    }
    pHandle->SensorIsReliable = true;
 800436a:	2375      	movs	r3, #117	@ 0x75
 800436c:	2201      	movs	r2, #1
 800436e:	54e2      	strb	r2, [r4, r3]
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
}
 8004370:	bd10      	pop	{r4, pc}
 8004372:	46c0      	nop			@ (mov r8, r8)

08004374 <ENC_CalcAngle>:
  *         of the instantaneous value of the timer counter.
  * @param  pHandle: handler of the current instance of the encoder component
  * @retval Measured electrical angle in [s16degree](measurement_units.md) format.
  */
__weak int16_t ENC_CalcAngle(ENCODER_Handle_t *pHandle)
{
 8004374:	0002      	movs	r2, r0
    int16_t mecAngle; /* s16degree format */
    uint32_t uwtemp1;
    int32_t wtemp1;
    /* PR 52926 We need to keep only the 16 LSB, bit 31 could be at 1
     if the overflow occurs just after the entry in the High frequency task */
    uwtemp1 = (LL_TIM_GetCounter(pHandle->TIMx) & 0xffffU) * (pHandle->U32MAXdivPulseNumber);
 8004376:	6a03      	ldr	r3, [r0, #32]
  return (uint32_t)(READ_REG(TIMx->CNT));
 8004378:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800437a:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800437c:	0409      	lsls	r1, r1, #16
 800437e:	0c09      	lsrs	r1, r1, #16
 8004380:	434b      	muls	r3, r1
    wtemp1 = (int32_t)uwtemp1 / 65536;
#endif
    /*Computes and stores the rotor mechanical angle*/
    mecAngle = (int16_t)wtemp1;

    int16_t hMecAnglePrev = pHandle->_Super.hMecAngle;
 8004382:	2006      	movs	r0, #6
 8004384:	5e11      	ldrsh	r1, [r2, r0]
    wtemp1 = (int32_t)uwtemp1 >> 16U;  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8004386:	141b      	asrs	r3, r3, #16

    pHandle->_Super.hMecAngle = mecAngle;

    /*Computes and stores the rotor electrical angle*/
    elAngle = mecAngle * (int16_t)(pHandle->_Super.bElToMecRatio);
 8004388:	7850      	ldrb	r0, [r2, #1]
    pHandle->_Super.hMecAngle = mecAngle;
 800438a:	80d3      	strh	r3, [r2, #6]
    elAngle = mecAngle * (int16_t)(pHandle->_Super.bElToMecRatio);
 800438c:	b29b      	uxth	r3, r3
 800438e:	4358      	muls	r0, r3

    pHandle->_Super.hElAngle = elAngle;

    int16_t hMecSpeedDpp = mecAngle - hMecAnglePrev;
 8004390:	1a5b      	subs	r3, r3, r1
    pHandle->_Super.wMecAngle += ((int32_t)hMecSpeedDpp);
 8004392:	6891      	ldr	r1, [r2, #8]
 8004394:	b21b      	sxth	r3, r3
    elAngle = mecAngle * (int16_t)(pHandle->_Super.bElToMecRatio);
 8004396:	b200      	sxth	r0, r0
    pHandle->_Super.wMecAngle += ((int32_t)hMecSpeedDpp);
 8004398:	18cb      	adds	r3, r1, r3
    pHandle->_Super.hElAngle = elAngle;
 800439a:	8090      	strh	r0, [r2, #4]
    pHandle->_Super.wMecAngle += ((int32_t)hMecSpeedDpp);
 800439c:	6093      	str	r3, [r2, #8]
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
  /*Returns rotor electrical angle*/
  return (elAngle);
}
 800439e:	4770      	bx	lr

080043a0 <ENC_CalcAvrgMecSpeedUnit>:
  * @param  pMecSpeedUnit pointer used to return the rotor average mechanical speed
  *         expressed in the unit defined by #SPEED_UNIT
  * @retval true = sensor information is reliable. false = sensor information is not reliable
  */
__weak bool ENC_CalcAvrgMecSpeedUnit(ENCODER_Handle_t *pHandle, int16_t *pMecSpeedUnit)
{
 80043a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043a2:	46c6      	mov	lr, r8
    uint32_t OverflowCntSample;
    uint32_t CntCapture;
    uint32_t directionSample;
    int32_t wOverallAngleVariation = 0;
    TIM_TypeDef *TIMx = pHandle->TIMx;
    uint8_t bBufferSize = pHandle->SpeedBufferSize;
 80043a4:	2274      	movs	r2, #116	@ 0x74
{
 80043a6:	b500      	push	{lr}
    TIM_TypeDef *TIMx = pHandle->TIMx;
 80043a8:	6a03      	ldr	r3, [r0, #32]
    uint8_t bBufferSize = pHandle->SpeedBufferSize;
 80043aa:	5c85      	ldrb	r5, [r0, r2]
#ifdef TIM_CNT_UIFCPY
    /* disable Interrupt generation */
    LL_TIM_DisableIT_UPDATE(TIMx);
#endif
    CntCapture = LL_TIM_GetCounter(TIMx);
    OverflowCntSample = pHandle->TimerOverflowNb;
 80043ac:	3a04      	subs	r2, #4
 80043ae:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
{
 80043b0:	0004      	movs	r4, r0
 80043b2:	000f      	movs	r7, r1
    OverflowCntSample = pHandle->TimerOverflowNb;
 80043b4:	5a81      	ldrh	r1, [r0, r2]
    pHandle->TimerOverflowNb = 0;
 80043b6:	2000      	movs	r0, #0
 80043b8:	52a0      	strh	r0, [r4, r2]
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	3a60      	subs	r2, #96	@ 0x60
 80043be:	401a      	ands	r2, r3
    speed computation, but we still use it to check that we do not exceed one overflow
    (sample frequency not less than mechanical motor speed */

    if ((OverflowCntSample + OFbit) > ENC_MAX_OVERFLOW_NB)
    {
      pHandle->TimerOverflowError = true;
 80043c0:	2378      	movs	r3, #120	@ 0x78
    if ((OverflowCntSample + OFbit) > ENC_MAX_OVERFLOW_NB)
 80043c2:	2901      	cmp	r1, #1
 80043c4:	d800      	bhi.n	80043c8 <ENC_CalcAvrgMecSpeedUnit+0x28>
 80043c6:	e0a2      	b.n	800450e <ENC_CalcAvrgMecSpeedUnit+0x16e>
      pHandle->TimerOverflowError = true;
 80043c8:	2101      	movs	r1, #1
 80043ca:	54e1      	strb	r1, [r4, r3]
 80043cc:	3b77      	subs	r3, #119	@ 0x77
 80043ce:	4698      	mov	r8, r3
    if (LL_TIM_COUNTERDIRECTION_DOWN == directionSample)
    {
      /* encoder timer down-counting*/
      /* if UIFCPY not present Overflow counter can not be safely used -> limitation to 1 OF. */
#ifndef TIM_CNT_UIFCPY
      OverflowCntSample = (CntCapture > pHandle->PreviousCapture) ? 1 : 0;
 80043d0:	2372      	movs	r3, #114	@ 0x72
#endif
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
        ((int32_t)CntCapture) - ((int32_t)pHandle->PreviousCapture)
        - ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 80043d2:	216e      	movs	r1, #110	@ 0x6e
      OverflowCntSample = (CntCapture > pHandle->PreviousCapture) ? 1 : 0;
 80043d4:	5ae3      	ldrh	r3, [r4, r3]
        - ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 80043d6:	5a61      	ldrh	r1, [r4, r1]
        ((int32_t)CntCapture) - ((int32_t)pHandle->PreviousCapture)
 80043d8:	1af0      	subs	r0, r6, r3
    if (LL_TIM_COUNTERDIRECTION_DOWN == directionSample)
 80043da:	2a00      	cmp	r2, #0
 80043dc:	d100      	bne.n	80043e0 <ENC_CalcAvrgMecSpeedUnit+0x40>
 80043de:	e087      	b.n	80044f0 <ENC_CalcAvrgMecSpeedUnit+0x150>
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 80043e0:	2277      	movs	r2, #119	@ 0x77
        - ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 80043e2:	42b3      	cmp	r3, r6
 80043e4:	419b      	sbcs	r3, r3
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 80043e6:	5ca2      	ldrb	r2, [r4, r2]
        - ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 80043e8:	400b      	ands	r3, r1
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 80043ea:	320a      	adds	r2, #10
 80043ec:	0092      	lsls	r2, r2, #2
        - ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 80043ee:	1ac3      	subs	r3, r0, r3
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 80043f0:	5113      	str	r3, [r2, r4]
        + ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
    }


    /*Computes & returns average mechanical speed */
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80043f2:	2d00      	cmp	r5, #0
 80043f4:	d100      	bne.n	80043f8 <ENC_CalcAvrgMecSpeedUnit+0x58>
 80043f6:	e087      	b.n	8004508 <ENC_CalcAvrgMecSpeedUnit+0x168>
    {
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80043f8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80043fa:	2d01      	cmp	r5, #1
 80043fc:	d039      	beq.n	8004472 <ENC_CalcAvrgMecSpeedUnit+0xd2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80043fe:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8004400:	189b      	adds	r3, r3, r2
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8004402:	2d02      	cmp	r5, #2
 8004404:	d035      	beq.n	8004472 <ENC_CalcAvrgMecSpeedUnit+0xd2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8004406:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8004408:	189b      	adds	r3, r3, r2
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 800440a:	2d03      	cmp	r5, #3
 800440c:	d031      	beq.n	8004472 <ENC_CalcAvrgMecSpeedUnit+0xd2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800440e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8004410:	189b      	adds	r3, r3, r2
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8004412:	2d04      	cmp	r5, #4
 8004414:	d02d      	beq.n	8004472 <ENC_CalcAvrgMecSpeedUnit+0xd2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8004416:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004418:	189b      	adds	r3, r3, r2
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 800441a:	2d05      	cmp	r5, #5
 800441c:	d029      	beq.n	8004472 <ENC_CalcAvrgMecSpeedUnit+0xd2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800441e:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8004420:	189b      	adds	r3, r3, r2
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8004422:	2d06      	cmp	r5, #6
 8004424:	d025      	beq.n	8004472 <ENC_CalcAvrgMecSpeedUnit+0xd2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8004426:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8004428:	189b      	adds	r3, r3, r2
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 800442a:	2d07      	cmp	r5, #7
 800442c:	d021      	beq.n	8004472 <ENC_CalcAvrgMecSpeedUnit+0xd2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800442e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8004430:	189b      	adds	r3, r3, r2
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8004432:	2d08      	cmp	r5, #8
 8004434:	d01d      	beq.n	8004472 <ENC_CalcAvrgMecSpeedUnit+0xd2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8004436:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8004438:	189b      	adds	r3, r3, r2
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 800443a:	2d09      	cmp	r5, #9
 800443c:	d019      	beq.n	8004472 <ENC_CalcAvrgMecSpeedUnit+0xd2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800443e:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 8004440:	189b      	adds	r3, r3, r2
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8004442:	2d0a      	cmp	r5, #10
 8004444:	d015      	beq.n	8004472 <ENC_CalcAvrgMecSpeedUnit+0xd2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8004446:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8004448:	189b      	adds	r3, r3, r2
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 800444a:	2d0b      	cmp	r5, #11
 800444c:	d011      	beq.n	8004472 <ENC_CalcAvrgMecSpeedUnit+0xd2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800444e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004450:	189b      	adds	r3, r3, r2
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8004452:	2d0c      	cmp	r5, #12
 8004454:	d00d      	beq.n	8004472 <ENC_CalcAvrgMecSpeedUnit+0xd2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8004456:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8004458:	189b      	adds	r3, r3, r2
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 800445a:	2d0d      	cmp	r5, #13
 800445c:	d009      	beq.n	8004472 <ENC_CalcAvrgMecSpeedUnit+0xd2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800445e:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8004460:	189b      	adds	r3, r3, r2
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8004462:	2d0e      	cmp	r5, #14
 8004464:	d005      	beq.n	8004472 <ENC_CalcAvrgMecSpeedUnit+0xd2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8004466:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8004468:	189b      	adds	r3, r3, r2
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 800446a:	2d0f      	cmp	r5, #15
 800446c:	d001      	beq.n	8004472 <ENC_CalcAvrgMecSpeedUnit+0xd2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800446e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004470:	189b      	adds	r3, r3, r2
    }
    wtemp1 = wOverallAngleVariation * ((int32_t)pHandle->SpeedSamplingFreqUnit);
    wtemp2 = ((int32_t)pHandle->PulseNumber) * ((int32_t)pHandle->SpeedBufferSize);
 8004472:	4369      	muls	r1, r5
    wtemp1 = wOverallAngleVariation * ((int32_t)pHandle->SpeedSamplingFreqUnit);
 8004474:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8004476:	4358      	muls	r0, r3
    wtemp1 = ((0 == wtemp2) ? wtemp1 : (wtemp1 / wtemp2));
 8004478:	2900      	cmp	r1, #0
 800447a:	d001      	beq.n	8004480 <ENC_CalcAvrgMecSpeedUnit+0xe0>
 800447c:	f7fb fece 	bl	800021c <__divsi3>

    *pMecSpeedUnit = (int16_t)wtemp1;
 8004480:	b203      	sxth	r3, r0

    /*Computes & stores average mechanical acceleration */
    pHandle->_Super.hMecAccelUnitP = (int16_t)(wtemp1 - pHandle->_Super.hAvrMecSpeedUnit);
 8004482:	b280      	uxth	r0, r0
    *pMecSpeedUnit = (int16_t)wtemp1;
 8004484:	803b      	strh	r3, [r7, #0]
    pHandle->_Super.hMecAccelUnitP = (int16_t)(wtemp1 - pHandle->_Super.hAvrMecSpeedUnit);
 8004486:	89a2      	ldrh	r2, [r4, #12]

    /*Stores average mechanical speed */
    pHandle->_Super.hAvrMecSpeedUnit = (int16_t)wtemp1;
 8004488:	81a3      	strh	r3, [r4, #12]

    /*Computes & stores the instantaneous electrical speed [dpp], var wtemp1*/
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 800448a:	2377      	movs	r3, #119	@ 0x77
    pHandle->_Super.hMecAccelUnitP = (int16_t)(wtemp1 - pHandle->_Super.hAvrMecSpeedUnit);
 800448c:	1a80      	subs	r0, r0, r2
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 800448e:	226c      	movs	r2, #108	@ 0x6c
    pHandle->_Super.hMecAccelUnitP = (int16_t)(wtemp1 - pHandle->_Super.hAvrMecSpeedUnit);
 8004490:	8260      	strh	r0, [r4, #18]
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 8004492:	5ce3      	ldrb	r3, [r4, r3]
 8004494:	5aa2      	ldrh	r2, [r4, r2]
 8004496:	330a      	adds	r3, #10
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	591b      	ldr	r3, [r3, r4]
             * ((int32_t)pHandle->_Super.bElToMecRatio);
 800449c:	7860      	ldrb	r0, [r4, #1]
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 800449e:	4353      	muls	r3, r2
 80044a0:	4358      	muls	r0, r3
    wtemp1 /= ((int32_t)pHandle->PulseNumber);
 80044a2:	236e      	movs	r3, #110	@ 0x6e
 80044a4:	5ae1      	ldrh	r1, [r4, r3]
 80044a6:	f7fb feb9 	bl	800021c <__divsi3>
    wtemp1 *= ((int32_t)pHandle->_Super.DPPConvFactor);
 80044aa:	69e3      	ldr	r3, [r4, #28]
    wtemp1 /= ((int32_t)pHandle->_Super.hMeasurementFrequency);
 80044ac:	8b61      	ldrh	r1, [r4, #26]
    wtemp1 *= ((int32_t)pHandle->_Super.DPPConvFactor);
 80044ae:	4358      	muls	r0, r3
    wtemp1 /= ((int32_t)pHandle->_Super.hMeasurementFrequency);
 80044b0:	f7fb feb4 	bl	800021c <__divsi3>

    pHandle->_Super.hElSpeedDpp = (int16_t)wtemp1;

    /*last captured value update*/
    pHandle->PreviousCapture = (CntCapture >= (uint32_t)65535) ? 65535U : (uint16_t)CntCapture;
 80044b4:	2380      	movs	r3, #128	@ 0x80
    pHandle->_Super.hElSpeedDpp = (int16_t)wtemp1;
 80044b6:	81e0      	strh	r0, [r4, #14]
    pHandle->PreviousCapture = (CntCapture >= (uint32_t)65535) ? 65535U : (uint16_t)CntCapture;
 80044b8:	025b      	lsls	r3, r3, #9
 80044ba:	429e      	cmp	r6, r3
 80044bc:	d300      	bcc.n	80044c0 <ENC_CalcAvrgMecSpeedUnit+0x120>
 80044be:	4e18      	ldr	r6, [pc, #96]	@ (8004520 <ENC_CalcAvrgMecSpeedUnit+0x180>)
 80044c0:	2372      	movs	r3, #114	@ 0x72
    /*Buffer index update*/
    pHandle->DeltaCapturesIndex++;
 80044c2:	2277      	movs	r2, #119	@ 0x77
    pHandle->PreviousCapture = (CntCapture >= (uint32_t)65535) ? 65535U : (uint16_t)CntCapture;
 80044c4:	52e6      	strh	r6, [r4, r3]
    pHandle->DeltaCapturesIndex++;
 80044c6:	5ca3      	ldrb	r3, [r4, r2]
 80044c8:	3301      	adds	r3, #1
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	54a3      	strb	r3, [r4, r2]

    if (pHandle->DeltaCapturesIndex >= pHandle->SpeedBufferSize)
 80044ce:	5ca3      	ldrb	r3, [r4, r2]
 80044d0:	42ab      	cmp	r3, r5
 80044d2:	d301      	bcc.n	80044d8 <ENC_CalcAvrgMecSpeedUnit+0x138>
    {
      pHandle->DeltaCapturesIndex = 0U;
 80044d4:	2300      	movs	r3, #0
 80044d6:	54a3      	strb	r3, [r4, r2]
    {
      /* nothing to do */
    }

    /*Checks the reliability status, then stores and returns it*/
    if (pHandle->TimerOverflowError)
 80044d8:	4643      	mov	r3, r8
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d01a      	beq.n	8004514 <ENC_CalcAvrgMecSpeedUnit+0x174>
    {
      bReliability = false;
      pHandle->SensorIsReliable = false;
 80044de:	2375      	movs	r3, #117	@ 0x75
 80044e0:	2200      	movs	r2, #0
      bReliability = false;
 80044e2:	2000      	movs	r0, #0
      pHandle->SensorIsReliable = false;
 80044e4:	54e2      	strb	r2, [r4, r3]
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 80044e6:	78e3      	ldrb	r3, [r4, #3]
 80044e8:	7023      	strb	r3, [r4, #0]
    }
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
  return (bReliability);
}
 80044ea:	bc80      	pop	{r7}
 80044ec:	46b8      	mov	r8, r7
 80044ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 80044f0:	2277      	movs	r2, #119	@ 0x77
        + ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 80044f2:	429e      	cmp	r6, r3
 80044f4:	419b      	sbcs	r3, r3
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 80044f6:	5ca2      	ldrb	r2, [r4, r2]
        + ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 80044f8:	400b      	ands	r3, r1
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 80044fa:	320a      	adds	r2, #10
 80044fc:	0092      	lsls	r2, r2, #2
        + ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 80044fe:	181b      	adds	r3, r3, r0
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8004500:	5113      	str	r3, [r2, r4]
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8004502:	2d00      	cmp	r5, #0
 8004504:	d000      	beq.n	8004508 <ENC_CalcAvrgMecSpeedUnit+0x168>
 8004506:	e777      	b.n	80043f8 <ENC_CalcAvrgMecSpeedUnit+0x58>
 8004508:	2000      	movs	r0, #0
 800450a:	2300      	movs	r3, #0
 800450c:	e7ba      	b.n	8004484 <ENC_CalcAvrgMecSpeedUnit+0xe4>
    if (pHandle->TimerOverflowError)
 800450e:	5ce3      	ldrb	r3, [r4, r3]
 8004510:	4698      	mov	r8, r3
 8004512:	e75d      	b.n	80043d0 <ENC_CalcAvrgMecSpeedUnit+0x30>
      bReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, pMecSpeedUnit);
 8004514:	0039      	movs	r1, r7
 8004516:	0020      	movs	r0, r4
 8004518:	f000 f97e 	bl	8004818 <SPD_IsMecSpeedReliable>
 800451c:	e7e5      	b.n	80044ea <ENC_CalcAvrgMecSpeedUnit+0x14a>
 800451e:	46c0      	nop			@ (mov r8, r8)
 8004520:	0000ffff 	.word	0x0000ffff

08004524 <ENC_SetMecAngle>:
  *         As a consequence, timer counter is computed and updated.
  * @param  pHandle: handler of the current instance of the encoder component
  * @param  hMecAngle new value of rotor mechanical angle in [s16degree](measurement_units.md) format.
  */
__weak void ENC_SetMecAngle(ENCODER_Handle_t *pHandle, int16_t hMecAngle)
{
 8004524:	0003      	movs	r3, r0
 8004526:	b510      	push	{r4, lr}

    uint16_t hAngleCounts;
    uint16_t hMecAngleuint;
    int16_t localhMecAngle = hMecAngle;

    pHandle->_Super.hMecAngle = localhMecAngle;
 8004528:	80c1      	strh	r1, [r0, #6]
    pHandle->_Super.hElAngle = localhMecAngle * (int16_t)pHandle->_Super.bElToMecRatio;
 800452a:	785a      	ldrb	r2, [r3, #1]
    TIM_TypeDef *TIMx = pHandle->TIMx;
 800452c:	6a04      	ldr	r4, [r0, #32]
    pHandle->_Super.hElAngle = localhMecAngle * (int16_t)pHandle->_Super.bElToMecRatio;
 800452e:	b288      	uxth	r0, r1
 8004530:	4342      	muls	r2, r0
 8004532:	809a      	strh	r2, [r3, #4]
    if (localhMecAngle < 0)
 8004534:	2900      	cmp	r1, #0
 8004536:	da01      	bge.n	800453c <ENC_SetMecAngle+0x18>
    {
      localhMecAngle *= -1;
      hMecAngleuint = 65535U - ((uint16_t)localhMecAngle);
 8004538:	3801      	subs	r0, #1
 800453a:	b280      	uxth	r0, r0
    else
    {
      hMecAngleuint = (uint16_t)localhMecAngle;
    }

    hAngleCounts = (uint16_t)((((uint32_t)hMecAngleuint) * ((uint32_t)pHandle->PulseNumber)) / 65535U);
 800453c:	226e      	movs	r2, #110	@ 0x6e
 800453e:	5a9b      	ldrh	r3, [r3, r2]
 8004540:	4902      	ldr	r1, [pc, #8]	@ (800454c <ENC_SetMecAngle+0x28>)
 8004542:	4358      	muls	r0, r3
 8004544:	f7fb fde0 	bl	8000108 <__udivsi3>

    TIMx->CNT = (uint16_t)hAngleCounts;
 8004548:	6260      	str	r0, [r4, #36]	@ 0x24
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
}
 800454a:	bd10      	pop	{r4, pc}
 800454c:	0000ffff 	.word	0x0000ffff

08004550 <ENC_IRQHandler>:
{
  ENCODER_Handle_t *pHandle = (ENCODER_Handle_t *)pHandleVoid; //cstat !MISRAC2012-Rule-11.5

  /*Updates the number of overflows occurred*/
  /* the handling of overflow error is done in ENC_CalcAvrgMecSpeedUnit */
  pHandle->TimerOverflowNb += 1U;
 8004550:	2270      	movs	r2, #112	@ 0x70
 8004552:	5a83      	ldrh	r3, [r0, r2]
 8004554:	3301      	adds	r3, #1
 8004556:	b29b      	uxth	r3, r3
 8004558:	5283      	strh	r3, [r0, r2]

  return (MC_NULL);
}
 800455a:	2000      	movs	r0, #0
 800455c:	4770      	bx	lr
 800455e:	46c0      	nop			@ (mov r8, r8)

08004560 <NTC_SetFaultState>:
    hFault = MC_SW_ERROR;
  }
  else
  {
#endif
    if (pHandle->hAvTemp_d > pHandle->hOverTempThreshold)
 8004560:	8a02      	ldrh	r2, [r0, #16]
 8004562:	8b41      	ldrh	r1, [r0, #26]
{
 8004564:	0003      	movs	r3, r0
    if (pHandle->hAvTemp_d > pHandle->hOverTempThreshold)
 8004566:	4291      	cmp	r1, r2
 8004568:	d306      	bcc.n	8004578 <NTC_SetFaultState+0x18>
    {
      hFault = MC_OVER_TEMP;
    }
    else if (pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold)
 800456a:	8b81      	ldrh	r1, [r0, #28]
    {
      hFault = MC_NO_ERROR;
 800456c:	2000      	movs	r0, #0
    else if (pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold)
 800456e:	4291      	cmp	r1, r2
 8004570:	d900      	bls.n	8004574 <NTC_SetFaultState+0x14>
    }
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return hFault;
}
 8004572:	4770      	bx	lr
      hFault = pHandle->hFaultState;
 8004574:	8ad8      	ldrh	r0, [r3, #22]
 8004576:	e7fc      	b.n	8004572 <NTC_SetFaultState+0x12>
      hFault = MC_OVER_TEMP;
 8004578:	2008      	movs	r0, #8
 800457a:	e7fa      	b.n	8004572 <NTC_SetFaultState+0x12>

0800457c <NTC_Clear>:
    /* nothing to do */
  }
  else
  {
#endif
    pHandle->hAvTemp_d = 0U;
 800457c:	2300      	movs	r3, #0
 800457e:	8203      	strh	r3, [r0, #16]
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
}
 8004580:	4770      	bx	lr
 8004582:	46c0      	nop			@ (mov r8, r8)

08004584 <NTC_Init>:
    if (REAL_SENSOR == pHandle->bSensorType)
 8004584:	7803      	ldrb	r3, [r0, #0]
{
 8004586:	b510      	push	{r4, lr}
 8004588:	0004      	movs	r4, r0
    if (REAL_SENSOR == pHandle->bSensorType)
 800458a:	2b00      	cmp	r3, #0
 800458c:	d004      	beq.n	8004598 <NTC_Init+0x14>
      pHandle->hFaultState = MC_NO_ERROR;
 800458e:	2300      	movs	r3, #0
 8004590:	82c3      	strh	r3, [r0, #22]
      pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8004592:	8a43      	ldrh	r3, [r0, #18]
 8004594:	8203      	strh	r3, [r0, #16]
}
 8004596:	bd10      	pop	{r4, pc}
      pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 8004598:	3004      	adds	r0, #4
 800459a:	f7fe f86d 	bl	8002678 <RCM_RegisterRegConv>
 800459e:	2326      	movs	r3, #38	@ 0x26
 80045a0:	54e0      	strb	r0, [r4, r3]
      NTC_Clear(pHandle);
 80045a2:	0020      	movs	r0, r4
 80045a4:	f7ff ffea 	bl	800457c <NTC_Clear>
 80045a8:	e7f5      	b.n	8004596 <NTC_Init+0x12>
 80045aa:	46c0      	nop			@ (mov r8, r8)

080045ac <NTC_CalcAvTemp>:
    returnValue = 0U;
  }
  else
  {
#endif
    if (REAL_SENSOR == pHandle->bSensorType)
 80045ac:	7803      	ldrb	r3, [r0, #0]
{
 80045ae:	b510      	push	{r4, lr}
 80045b0:	0004      	movs	r4, r0
 80045b2:	2000      	movs	r0, #0
    if (REAL_SENSOR == pHandle->bSensorType)
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d001      	beq.n	80045bc <NTC_CalcAvTemp+0x10>
        wtemp /= ((uint32_t)pHandle->hLowPassFilterBW);

        pHandle->hAvTemp_d = (uint16_t)wtemp;
      }

      pHandle->hFaultState = NTC_SetFaultState(pHandle);
 80045b8:	82e0      	strh	r0, [r4, #22]
    returnValue = pHandle->hFaultState;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
}
 80045ba:	bd10      	pop	{r4, pc}
      hAux = RCM_ExecRegularConv(pHandle->convHandle);
 80045bc:	3326      	adds	r3, #38	@ 0x26
 80045be:	5ce0      	ldrb	r0, [r4, r3]
 80045c0:	f7fe f93c 	bl	800283c <RCM_ExecRegularConv>
      if (0xFFFFU == hAux)
 80045c4:	4b07      	ldr	r3, [pc, #28]	@ (80045e4 <NTC_CalcAvTemp+0x38>)
 80045c6:	4298      	cmp	r0, r3
 80045c8:	d007      	beq.n	80045da <NTC_CalcAvTemp+0x2e>
        wtemp = (uint32_t)(pHandle->hLowPassFilterBW) - 1U;
 80045ca:	8b21      	ldrh	r1, [r4, #24]
        wtemp *= ((uint32_t)pHandle->hAvTemp_d);
 80045cc:	8a22      	ldrh	r2, [r4, #16]
        wtemp = (uint32_t)(pHandle->hLowPassFilterBW) - 1U;
 80045ce:	1e4b      	subs	r3, r1, #1
        wtemp *= ((uint32_t)pHandle->hAvTemp_d);
 80045d0:	4353      	muls	r3, r2
        wtemp += hAux;
 80045d2:	18c0      	adds	r0, r0, r3
        wtemp /= ((uint32_t)pHandle->hLowPassFilterBW);
 80045d4:	f7fb fd98 	bl	8000108 <__udivsi3>
        pHandle->hAvTemp_d = (uint16_t)wtemp;
 80045d8:	8220      	strh	r0, [r4, #16]
      pHandle->hFaultState = NTC_SetFaultState(pHandle);
 80045da:	0020      	movs	r0, r4
 80045dc:	f7ff ffc0 	bl	8004560 <NTC_SetFaultState>
 80045e0:	e7ea      	b.n	80045b8 <NTC_CalcAvTemp+0xc>
 80045e2:	46c0      	nop			@ (mov r8, r8)
 80045e4:	0000ffff 	.word	0x0000ffff

080045e8 <OL_UpdateVoltage>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hVoltage = hNewVoltage;
 80045e8:	8101      	strh	r1, [r0, #8]
#ifdef NULL_PTR_CHECK_OPEN_LOOP
  }
#endif
}
 80045ea:	4770      	bx	lr

080045ec <PID_HandleInit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKpGain =  pHandle->hDefKpGain;
 80045ec:	6803      	ldr	r3, [r0, #0]
 80045ee:	6043      	str	r3, [r0, #4]
    pHandle->hKiGain =  pHandle->hDefKiGain;
    pHandle->hKdGain =  pHandle->hDefKdGain;
 80045f0:	8c03      	ldrh	r3, [r0, #32]
 80045f2:	8443      	strh	r3, [r0, #34]	@ 0x22
    pHandle->wIntegralTerm = 0;
 80045f4:	2300      	movs	r3, #0
 80045f6:	6083      	str	r3, [r0, #8]
    pHandle->wPrevProcessVarError = 0;
 80045f8:	6283      	str	r3, [r0, #40]	@ 0x28
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80045fa:	4770      	bx	lr

080045fc <PID_SetIntegralTerm>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wIntegralTerm = wIntegralTermValue;
 80045fc:	6081      	str	r1, [r0, #8]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return;
}
 80045fe:	4770      	bx	lr

08004600 <PI_Controller>:
  * 
  * The resulting value is then saturated by the upper and lower output limit values before 
  * being returned.
  */
__weak int16_t PI_Controller(PID_Handle_t *pHandle, int32_t wProcessVarError)
{
 8004600:	0003      	movs	r3, r0
 8004602:	b5f0      	push	{r4, r5, r6, r7, lr}
    int32_t wIntegral_Term;
    int32_t wOutput_32;
    int32_t wIntegral_sum_temp;
    int32_t wDischarge = 0;
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8004604:	2216      	movs	r2, #22
 8004606:	5e9e      	ldrsh	r6, [r3, r2]
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8004608:	2214      	movs	r2, #20
 800460a:	5e80      	ldrsh	r0, [r0, r2]

    /* Proportional term computation*/
    wProportional_Term = pHandle->hKpGain * wProcessVarError;

    /* Integral term computation */
    if (0 == pHandle->hKiGain)
 800460c:	2406      	movs	r4, #6
 800460e:	5f1d      	ldrsh	r5, [r3, r4]
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8004610:	2404      	movs	r4, #4
 8004612:	5f1a      	ldrsh	r2, [r3, r4]
 8004614:	2400      	movs	r4, #0
 8004616:	434a      	muls	r2, r1
    if (0 == pHandle->hKiGain)
 8004618:	2d00      	cmp	r5, #0
 800461a:	d00b      	beq.n	8004634 <PI_Controller+0x34>
    {
      pHandle->wIntegralTerm = 0;
    }
    else
    {
      wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 800461c:	4369      	muls	r1, r5
      wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 800461e:	689d      	ldr	r5, [r3, #8]
        {
          /* Nothing to do */
        }
      }

      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8004620:	68dc      	ldr	r4, [r3, #12]
      if (wIntegral_sum_temp < 0)
 8004622:	186f      	adds	r7, r5, r1
 8004624:	d41a      	bmi.n	800465c <PI_Controller+0x5c>
        if (pHandle->wIntegralTerm < 0)
 8004626:	4029      	ands	r1, r5
 8004628:	d422      	bmi.n	8004670 <PI_Controller+0x70>
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 800462a:	42a7      	cmp	r7, r4
 800462c:	dc02      	bgt.n	8004634 <PI_Controller+0x34>
      {
        pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
      }
      else if (wIntegral_sum_temp < pHandle->wLowerIntegralLimit)
 800462e:	691c      	ldr	r4, [r3, #16]
 8004630:	42bc      	cmp	r4, r7
 8004632:	dd1b      	ble.n	800466c <PI_Controller+0x6c>
    /* WARNING: the below instruction is not MISRA compliant, user should verify
               that Cortex-M3 assembly instruction ASR (arithmetic shift right)
               is used by the compiler to perform the shifts (instead of LSR
               logical shift right)*/
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    wOutput_32 = (wProportional_Term >> pHandle->hKpDivisorPOW2) + (pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2);
 8004634:	0025      	movs	r5, r4
 8004636:	8b99      	ldrh	r1, [r3, #28]
 8004638:	410a      	asrs	r2, r1
 800463a:	8bd9      	ldrh	r1, [r3, #30]
 800463c:	410d      	asrs	r5, r1
 800463e:	1952      	adds	r2, r2, r5
#else
    wOutput_32 = (wProportional_Term / (int32_t)pHandle->hKpDivisor)
              + (pHandle->wIntegralTerm / (int32_t)pHandle->hKiDivisor);
#endif

    if (wOutput_32 > hUpperOutputLimit)
 8004640:	4290      	cmp	r0, r2
 8004642:	da03      	bge.n	800464c <PI_Controller+0x4c>
    {
      wDischarge = hUpperOutputLimit - wOutput_32;
 8004644:	1a82      	subs	r2, r0, r2
    else
    {
      /* Nothing to do here */
    }

    pHandle->wIntegralTerm += wDischarge;
 8004646:	18a4      	adds	r4, r4, r2
 8004648:	609c      	str	r4, [r3, #8]
    returnValue = (int16_t)wOutput_32;
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return (returnValue);
}
 800464a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (wOutput_32 < hLowerOutputLimit)
 800464c:	4296      	cmp	r6, r2
 800464e:	dd03      	ble.n	8004658 <PI_Controller+0x58>
      wDischarge = hLowerOutputLimit - wOutput_32;
 8004650:	1ab2      	subs	r2, r6, r2
 8004652:	0030      	movs	r0, r6
    pHandle->wIntegralTerm += wDischarge;
 8004654:	18a4      	adds	r4, r4, r2
 8004656:	e7f7      	b.n	8004648 <PI_Controller+0x48>
    returnValue = (int16_t)wOutput_32;
 8004658:	b210      	sxth	r0, r2
 800465a:	e7f5      	b.n	8004648 <PI_Controller+0x48>
        if (pHandle->wIntegralTerm > 0)
 800465c:	2d00      	cmp	r5, #0
 800465e:	dde4      	ble.n	800462a <PI_Controller+0x2a>
          if (wIntegral_Term > 0)
 8004660:	2900      	cmp	r1, #0
 8004662:	dde2      	ble.n	800462a <PI_Controller+0x2a>
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8004664:	4903      	ldr	r1, [pc, #12]	@ (8004674 <PI_Controller+0x74>)
            wIntegral_sum_temp = INT32_MAX;
 8004666:	0027      	movs	r7, r4
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8004668:	428c      	cmp	r4, r1
 800466a:	d1e3      	bne.n	8004634 <PI_Controller+0x34>
        pHandle->wIntegralTerm = wIntegral_sum_temp;
 800466c:	003c      	movs	r4, r7
 800466e:	e7e1      	b.n	8004634 <PI_Controller+0x34>
            wIntegral_sum_temp = -INT32_MAX;
 8004670:	4f01      	ldr	r7, [pc, #4]	@ (8004678 <PI_Controller+0x78>)
 8004672:	e7da      	b.n	800462a <PI_Controller+0x2a>
 8004674:	7fffffff 	.word	0x7fffffff
 8004678:	80000001 	.word	0x80000001

0800467c <PQD_CalcElMotorPower>:
  * computed as an int16_t value.
  * 
  * @param pHandle Handle on the related PQD Motor Power Measurement component instance.
  */
__weak void PQD_CalcElMotorPower(PQD_MotorPowMeas_Handle_t *pHandle)
{
 800467c:	b510      	push	{r4, lr}
  }
  else
  {
#endif
    int32_t wAux;
    qd_t Iqd = pHandle->pFOCVars->Iqd;
 800467e:	6883      	ldr	r3, [r0, #8]
    qd_t Vqd = pHandle->pFOCVars->Vqd;

    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
 8004680:	220c      	movs	r2, #12
 8004682:	5e99      	ldrsh	r1, [r3, r2]
 8004684:	2416      	movs	r4, #22
 8004686:	5f1a      	ldrsh	r2, [r3, r4]
 8004688:	434a      	muls	r2, r1
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 800468a:	240e      	movs	r4, #14
 800468c:	5f19      	ldrsh	r1, [r3, r4]
 800468e:	2418      	movs	r4, #24
 8004690:	5f1b      	ldrsh	r3, [r3, r4]
 8004692:	434b      	muls	r3, r1
    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
 8004694:	18d2      	adds	r2, r2, r3
    wAux /= 65536;

    pHandle->hAvrgElMotorPower += (wAux - pHandle->hAvrgElMotorPower) >> 4;
 8004696:	2300      	movs	r3, #0
 8004698:	5ec1      	ldrsh	r1, [r0, r3]
    wAux /= 65536;
 800469a:	17d3      	asrs	r3, r2, #31
 800469c:	041b      	lsls	r3, r3, #16
 800469e:	0c1b      	lsrs	r3, r3, #16
 80046a0:	189b      	adds	r3, r3, r2
 80046a2:	141b      	asrs	r3, r3, #16
    pHandle->hAvrgElMotorPower += (wAux - pHandle->hAvrgElMotorPower) >> 4;
 80046a4:	1a5b      	subs	r3, r3, r1
 80046a6:	111b      	asrs	r3, r3, #4
 80046a8:	185b      	adds	r3, r3, r1
 80046aa:	8003      	strh	r3, [r0, #0]

#ifdef NULL_PTR_MOT_POW_MEAS
  }
#endif
}
 80046ac:	bd10      	pop	{r4, pc}
 80046ae:	46c0      	nop			@ (mov r8, r8)

080046b0 <PQD_Clear>:
    /* nothing to do */
  }
  else
  {
#endif
    pHandle->hAvrgElMotorPower = 0;
 80046b0:	2300      	movs	r3, #0
 80046b2:	8003      	strh	r3, [r0, #0]
#ifdef NULL_PTR_CHECK_MOT_POW_MES
  }
#endif
}
 80046b4:	4770      	bx	lr
 80046b6:	46c0      	nop			@ (mov r8, r8)

080046b8 <waitForPolarizationEnd>:
  * @param  SWerror Variable used to report a SW error.
  * @param  repCnt Repetition counter value.
  * @param  cnt Polarization counter value.
  */
__weak void waitForPolarizationEnd(TIM_TypeDef *TIMx, uint16_t  *SWerror, uint8_t repCnt, volatile uint8_t *cnt)
{
 80046b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80046ba:	2703      	movs	r7, #3
  {
#endif
    uint16_t hCalibrationPeriodCounter;
    uint16_t hMaxPeriodsNumber;

    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 80046bc:	3201      	adds	r2, #1
 80046be:	0856      	lsrs	r6, r2, #1
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 80046c0:	2502      	movs	r5, #2

    /* Wait for NB_CONVERSIONS to be executed */
    LL_TIM_ClearFlag_CC1(TIMx);
    hCalibrationPeriodCounter = 0u;
 80046c2:	2200      	movs	r2, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80046c4:	427f      	negs	r7, r7
    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 80046c6:	0176      	lsls	r6, r6, #5
 80046c8:	6107      	str	r7, [r0, #16]
    while (*cnt < NB_CONVERSIONS)
 80046ca:	781c      	ldrb	r4, [r3, #0]
 80046cc:	2c0f      	cmp	r4, #15
 80046ce:	d80c      	bhi.n	80046ea <waitForPolarizationEnd+0x32>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 80046d0:	6904      	ldr	r4, [r0, #16]
 80046d2:	4225      	tst	r5, r4
 80046d4:	d0f9      	beq.n	80046ca <waitForPolarizationEnd+0x12>
    {
      if ((uint32_t)ERROR == LL_TIM_IsActiveFlag_CC1(TIMx))
      {
        LL_TIM_ClearFlag_CC1(TIMx);
        hCalibrationPeriodCounter++;
 80046d6:	3201      	adds	r2, #1
 80046d8:	b292      	uxth	r2, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80046da:	6107      	str	r7, [r0, #16]
        if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 80046dc:	4296      	cmp	r6, r2
 80046de:	d8f4      	bhi.n	80046ca <waitForPolarizationEnd+0x12>
        {
          if (*cnt < NB_CONVERSIONS)
 80046e0:	781c      	ldrb	r4, [r3, #0]
 80046e2:	2c0f      	cmp	r4, #15
 80046e4:	d8f1      	bhi.n	80046ca <waitForPolarizationEnd+0x12>
          {
            *SWerror = 1u;
 80046e6:	2301      	movs	r3, #1
 80046e8:	800b      	strh	r3, [r1, #0]
      }
    }
#ifdef NULL_POW_COM
  }
#endif
  }
 80046ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080046ec <RVBS_Clear>:
  * @brief  It clears bus voltage FW variable containing average bus voltage
  *         value
  * @param  pHandle related RDivider_Handle_t
  */
__weak void RVBS_Clear(RDivider_Handle_t *pHandle)
{
 80046ec:	b530      	push	{r4, r5, lr}
  {
#endif
    uint16_t aux;
    uint16_t index;

    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 80046ee:	8c03      	ldrh	r3, [r0, #32]
 80046f0:	8b44      	ldrh	r4, [r0, #26]
 80046f2:	18e4      	adds	r4, r4, r3
 80046f4:	0864      	lsrs	r4, r4, #1
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 80046f6:	8b03      	ldrh	r3, [r0, #24]
 80046f8:	0425      	lsls	r5, r4, #16
 80046fa:	4325      	orrs	r5, r4
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d008      	beq.n	8004712 <RVBS_Clear+0x26>
 8004700:	2300      	movs	r3, #0
 8004702:	6a42      	ldr	r2, [r0, #36]	@ 0x24
    {
      pHandle->aBuffer[index] = aux;
 8004704:	8014      	strh	r4, [r2, #0]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8004706:	3301      	adds	r3, #1
 8004708:	8b01      	ldrh	r1, [r0, #24]
 800470a:	b29b      	uxth	r3, r3
 800470c:	3202      	adds	r2, #2
 800470e:	4299      	cmp	r1, r3
 8004710:	d8f8      	bhi.n	8004704 <RVBS_Clear+0x18>
    }
    pHandle->_Super.LatestConv = aux;
    pHandle->_Super.AvBusVoltage_d = aux;
    pHandle->index = 0U;
 8004712:	2329      	movs	r3, #41	@ 0x29
 8004714:	2200      	movs	r2, #0
    pHandle->_Super.LatestConv = aux;
 8004716:	6045      	str	r5, [r0, #4]
    pHandle->index = 0U;
 8004718:	54c2      	strb	r2, [r0, r3]
#ifdef NULL_PTR_RDIV_BUS_VLT_SNS
  }
#endif
}
 800471a:	bd30      	pop	{r4, r5, pc}

0800471c <RVBS_Init>:
{
 800471c:	b510      	push	{r4, lr}
 800471e:	0004      	movs	r4, r0
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 8004720:	300c      	adds	r0, #12
 8004722:	f7fd ffa9 	bl	8002678 <RCM_RegisterRegConv>
 8004726:	232a      	movs	r3, #42	@ 0x2a
 8004728:	54e0      	strb	r0, [r4, r3]
    RVBS_Clear(pHandle);
 800472a:	0020      	movs	r0, r4
 800472c:	f7ff ffde 	bl	80046ec <RVBS_Clear>
}
 8004730:	bd10      	pop	{r4, pc}
 8004732:	46c0      	nop			@ (mov r8, r8)

08004734 <RVBS_CheckFaultState>:
  *         bus voltage and protection threshold values
  * @param  pHandle related RDivider_Handle_t
  * @retval uint16_t Fault code error
  */
__weak uint16_t RVBS_CheckFaultState(RDivider_Handle_t *pHandle)
{
 8004734:	b510      	push	{r4, lr}
  }
  else
  {
#endif
	/* If both thresholds are equal, single threshold feature is used */
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 8004736:	8b42      	ldrh	r2, [r0, #26]
 8004738:	8b81      	ldrh	r1, [r0, #28]
	{
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 800473a:	88c3      	ldrh	r3, [r0, #6]
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 800473c:	428a      	cmp	r2, r1
 800473e:	d00d      	beq.n	800475c <RVBS_CheckFaultState+0x28>
      }
	}
    else
    {
      /* If both thresholds are different, hysteresis feature is used (Brake mode) */
      if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 8004740:	8c04      	ldrh	r4, [r0, #32]
 8004742:	429c      	cmp	r4, r3
 8004744:	d808      	bhi.n	8004758 <RVBS_CheckFaultState+0x24>
      {
        fault = MC_UNDER_VOLT;
      }
      else if ( false == pHandle->OverVoltageHysteresisUpDir )
 8004746:	7f84      	ldrb	r4, [r0, #30]
 8004748:	2c00      	cmp	r4, #0
 800474a:	d10f      	bne.n	800476c <RVBS_CheckFaultState+0x38>
      {
        if (pHandle->_Super.AvBusVoltage_d < pHandle->OverVoltageThresholdLow)
 800474c:	4299      	cmp	r1, r3
 800474e:	d911      	bls.n	8004774 <RVBS_CheckFaultState+0x40>
        {
          pHandle->OverVoltageHysteresisUpDir = true;
 8004750:	2301      	movs	r3, #1
 8004752:	7783      	strb	r3, [r0, #30]
        {
          pHandle->OverVoltageHysteresisUpDir = false;
          fault = MC_OVER_VOLT;
        }
        else{
          fault = MC_NO_ERROR;
 8004754:	2000      	movs	r0, #0
 8004756:	e000      	b.n	800475a <RVBS_CheckFaultState+0x26>
        fault = MC_UNDER_VOLT;
 8004758:	2004      	movs	r0, #4
    }
#ifdef NULL_PTR_RDIV_BUS_VLT_SNS
  }
#endif
  return (fault);
}
 800475a:	bd10      	pop	{r4, pc}
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 800475c:	429a      	cmp	r2, r3
 800475e:	d309      	bcc.n	8004774 <RVBS_CheckFaultState+0x40>
      else if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 8004760:	8c00      	ldrh	r0, [r0, #32]
 8004762:	4283      	cmp	r3, r0
 8004764:	4180      	sbcs	r0, r0
 8004766:	4240      	negs	r0, r0
 8004768:	0080      	lsls	r0, r0, #2
 800476a:	e7f6      	b.n	800475a <RVBS_CheckFaultState+0x26>
        if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 800476c:	429a      	cmp	r2, r3
 800476e:	d2f1      	bcs.n	8004754 <RVBS_CheckFaultState+0x20>
          pHandle->OverVoltageHysteresisUpDir = false;
 8004770:	2300      	movs	r3, #0
 8004772:	7783      	strb	r3, [r0, #30]
          fault = MC_OVER_VOLT;
 8004774:	2002      	movs	r0, #2
 8004776:	e7f0      	b.n	800475a <RVBS_CheckFaultState+0x26>

08004778 <RVBS_CalcAvVbus>:
{
 8004778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800477a:	46c6      	mov	lr, r8
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 800477c:	232a      	movs	r3, #42	@ 0x2a
{
 800477e:	b500      	push	{lr}
 8004780:	0004      	movs	r4, r0
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8004782:	5cc0      	ldrb	r0, [r0, r3]
 8004784:	f7fe f85a 	bl	800283c <RCM_ExecRegularConv>
    if (0xFFFFU == hAux)
 8004788:	4b18      	ldr	r3, [pc, #96]	@ (80047ec <RVBS_CalcAvVbus+0x74>)
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 800478a:	0005      	movs	r5, r0
    if (0xFFFFU == hAux)
 800478c:	4298      	cmp	r0, r3
 800478e:	d01f      	beq.n	80047d0 <RVBS_CalcAvVbus+0x58>
      pHandle->aBuffer[pHandle->index] = hAux;
 8004790:	2329      	movs	r3, #41	@ 0x29
 8004792:	5ce7      	ldrb	r7, [r4, r3]
 8004794:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8004796:	007b      	lsls	r3, r7, #1
 8004798:	5298      	strh	r0, [r3, r2]
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 800479a:	8b23      	ldrh	r3, [r4, #24]
 800479c:	7e26      	ldrb	r6, [r4, #24]
 800479e:	4698      	mov	r8, r3
 80047a0:	2e00      	cmp	r6, #0
 80047a2:	d020      	beq.n	80047e6 <RVBS_CalcAvVbus+0x6e>
 80047a4:	2300      	movs	r3, #0
      wtemp = 0u;
 80047a6:	2000      	movs	r0, #0
        wtemp += pHandle->aBuffer[i];
 80047a8:	8811      	ldrh	r1, [r2, #0]
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 80047aa:	3301      	adds	r3, #1
 80047ac:	b2db      	uxtb	r3, r3
        wtemp += pHandle->aBuffer[i];
 80047ae:	1840      	adds	r0, r0, r1
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 80047b0:	3202      	adds	r2, #2
 80047b2:	42b3      	cmp	r3, r6
 80047b4:	d1f8      	bne.n	80047a8 <RVBS_CalcAvVbus+0x30>
      wtemp /= pHandle->LowPassFilterBW;
 80047b6:	4641      	mov	r1, r8
 80047b8:	f7fb fca6 	bl	8000108 <__udivsi3>
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 80047bc:	b280      	uxth	r0, r0
      if ((uint16_t)pHandle->index < (pHandle->LowPassFilterBW - 1U))
 80047be:	4646      	mov	r6, r8
 80047c0:	3e01      	subs	r6, #1
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 80047c2:	80e0      	strh	r0, [r4, #6]
      pHandle->_Super.LatestConv = hAux;
 80047c4:	80a5      	strh	r5, [r4, #4]
      if ((uint16_t)pHandle->index < (pHandle->LowPassFilterBW - 1U))
 80047c6:	42b7      	cmp	r7, r6
 80047c8:	d209      	bcs.n	80047de <RVBS_CalcAvVbus+0x66>
        pHandle->index++;
 80047ca:	2329      	movs	r3, #41	@ 0x29
 80047cc:	3701      	adds	r7, #1
 80047ce:	54e7      	strb	r7, [r4, r3]
    pHandle->_Super.FaultState = RVBS_CheckFaultState(pHandle);
 80047d0:	0020      	movs	r0, r4
 80047d2:	f7ff ffaf 	bl	8004734 <RVBS_CheckFaultState>
 80047d6:	8120      	strh	r0, [r4, #8]
}
 80047d8:	bc80      	pop	{r7}
 80047da:	46b8      	mov	r8, r7
 80047dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        pHandle->index = 0U;
 80047de:	2329      	movs	r3, #41	@ 0x29
 80047e0:	2200      	movs	r2, #0
 80047e2:	54e2      	strb	r2, [r4, r3]
 80047e4:	e7f4      	b.n	80047d0 <RVBS_CalcAvVbus+0x58>
      wtemp /= pHandle->LowPassFilterBW;
 80047e6:	2000      	movs	r0, #0
 80047e8:	e7e9      	b.n	80047be <RVBS_CalcAvVbus+0x46>
 80047ea:	46c0      	nop			@ (mov r8, r8)
 80047ec:	0000ffff 	.word	0x0000ffff

080047f0 <REMNG_Init>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->Ext = 0;
 80047f0:	2300      	movs	r3, #0
 80047f2:	6083      	str	r3, [r0, #8]
    pHandle->TargetFinal = 0;
 80047f4:	6043      	str	r3, [r0, #4]
    pHandle->RampRemainingStep = 0U;
 80047f6:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 80047f8:	6103      	str	r3, [r0, #16]
    pHandle->ScalingFactor = 1U;
 80047fa:	3301      	adds	r3, #1
 80047fc:	6143      	str	r3, [r0, #20]
#ifdef NULL_RMP_EXT_MNG
  }
#endif
}
 80047fe:	4770      	bx	lr

08004800 <SPD_GetElAngle>:
__weak int16_t SPD_GetElAngle(const SpeednPosFdbk_Handle_t *pHandle)
{
#ifdef NULL_PTR_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hElAngle);
#else
  return (pHandle->hElAngle);
 8004800:	2304      	movs	r3, #4
 8004802:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 8004804:	4770      	bx	lr
 8004806:	46c0      	nop			@ (mov r8, r8)

08004808 <SPD_GetAvrgMecSpeedUnit>:
__weak int16_t SPD_GetAvrgMecSpeedUnit(const SpeednPosFdbk_Handle_t *pHandle)
{
#ifdef NULL_PTR_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hAvrMecSpeedUnit);
#else
  return (pHandle->hAvrMecSpeedUnit);
 8004808:	230c      	movs	r3, #12
 800480a:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 800480c:	4770      	bx	lr
 800480e:	46c0      	nop			@ (mov r8, r8)

08004810 <SPD_GetInstElSpeedDpp>:
__weak int16_t SPD_GetInstElSpeedDpp(const SpeednPosFdbk_Handle_t *pHandle)
{
#ifdef NULL_PTR_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->InstantaneousElSpeedDpp);
#else
  return (pHandle->InstantaneousElSpeedDpp);
 8004810:	2310      	movs	r3, #16
 8004812:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 8004814:	4770      	bx	lr
 8004816:	46c0      	nop			@ (mov r8, r8)

08004818 <SPD_IsMecSpeedReliable>:
  * @param  pMecSpeedUnit pointer to int16_t, used to return the rotor average
  *         mechanical speed (expressed in the unit defined by #SPEED_UNIT)
  * @retval none
  */
__weak bool SPD_IsMecSpeedReliable(SpeednPosFdbk_Handle_t *pHandle, const int16_t *pMecSpeedUnit)
{
 8004818:	0003      	movs	r3, r0
 800481a:	b570      	push	{r4, r5, r6, lr}
    bool SpeedError = false;

    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

    /* Compute absoulte value of mechanical speed */
    if (*pMecSpeedUnit < 0)
 800481c:	2500      	movs	r5, #0
 800481e:	5f4c      	ldrsh	r4, [r1, r5]
    uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 8004820:	78c0      	ldrb	r0, [r0, #3]
    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 8004822:	781a      	ldrb	r2, [r3, #0]
    {
      hAux = -(*pMecSpeedUnit);
 8004824:	8809      	ldrh	r1, [r1, #0]
    if (*pMecSpeedUnit < 0)
 8004826:	2c00      	cmp	r4, #0
 8004828:	da01      	bge.n	800482e <SPD_IsMecSpeedReliable+0x16>
      hAux = -(*pMecSpeedUnit);
 800482a:	4249      	negs	r1, r1
 800482c:	b289      	uxth	r1, r1
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
    {
      SpeedError = true;
    }

    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 800482e:	8adc      	ldrh	r4, [r3, #22]
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 8004830:	8a9d      	ldrh	r5, [r3, #20]
    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 8004832:	428c      	cmp	r4, r1
 8004834:	d811      	bhi.n	800485a <SPD_IsMecSpeedReliable+0x42>
    {
      SpeedError = true;
    }

    /* Compute absoulte value of mechanical acceleration */
    if (pHandle->hMecAccelUnitP < 0)
 8004836:	2412      	movs	r4, #18
 8004838:	5f1e      	ldrsh	r6, [r3, r4]
    {
      hAux = -(pHandle->hMecAccelUnitP);
 800483a:	8a5c      	ldrh	r4, [r3, #18]
    if (pHandle->hMecAccelUnitP < 0)
 800483c:	2e00      	cmp	r6, #0
 800483e:	db11      	blt.n	8004864 <SPD_IsMecSpeedReliable+0x4c>
    else
    {
      hAbsMecAccelUnitP = (uint16_t)pHandle->hMecAccelUnitP;
    }

    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 8004840:	8b1e      	ldrh	r6, [r3, #24]
 8004842:	42a6      	cmp	r6, r4
 8004844:	d309      	bcc.n	800485a <SPD_IsMecSpeedReliable+0x42>
    {
      SpeedError = true;
    }

    if (true == SpeedError)
 8004846:	428d      	cmp	r5, r1
 8004848:	d307      	bcc.n	800485a <SPD_IsMecSpeedReliable+0x42>
        bSpeedErrorNumber++;
      }
    }
    else
    {
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 800484a:	4290      	cmp	r0, r2
 800484c:	d80d      	bhi.n	800486a <SPD_IsMecSpeedReliable+0x52>
      {
        bSpeedErrorNumber = 0u;
      }
    }

    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
 800484e:	1a10      	subs	r0, r2, r0
 8004850:	1e41      	subs	r1, r0, #1
 8004852:	4188      	sbcs	r0, r1
 8004854:	b2c0      	uxtb	r0, r0
    {
      SpeedSensorReliability = false;
    }

    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8004856:	701a      	strb	r2, [r3, #0]
#ifdef NULL_PTR_SPD_POS_FBK
  }
#endif
  return (SpeedSensorReliability);
}
 8004858:	bd70      	pop	{r4, r5, r6, pc}
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 800485a:	4290      	cmp	r0, r2
 800485c:	d9f7      	bls.n	800484e <SPD_IsMecSpeedReliable+0x36>
        bSpeedErrorNumber++;
 800485e:	3201      	adds	r2, #1
 8004860:	b2d2      	uxtb	r2, r2
 8004862:	e7f4      	b.n	800484e <SPD_IsMecSpeedReliable+0x36>
      hAux = -(pHandle->hMecAccelUnitP);
 8004864:	4264      	negs	r4, r4
 8004866:	b2a4      	uxth	r4, r4
      hAbsMecAccelUnitP = (uint16_t)hAux;
 8004868:	e7ea      	b.n	8004840 <SPD_IsMecSpeedReliable+0x28>
        bSpeedErrorNumber = 0u;
 800486a:	2200      	movs	r2, #0
  bool SpeedSensorReliability = true;
 800486c:	2001      	movs	r0, #1
 800486e:	e7f2      	b.n	8004856 <SPD_IsMecSpeedReliable+0x3e>

08004870 <STC_Init>:
  else
  {
#endif
    pHandle->PISpeed = pPI;
    pHandle->SPD = SPD_Handle;
    pHandle->Mode = pHandle->ModeDefault;
 8004870:	232a      	movs	r3, #42	@ 0x2a
    pHandle->SPD = SPD_Handle;
 8004872:	6142      	str	r2, [r0, #20]
    pHandle->PISpeed = pPI;
 8004874:	6101      	str	r1, [r0, #16]
    pHandle->Mode = pHandle->ModeDefault;
 8004876:	5cc3      	ldrb	r3, [r0, r3]
 8004878:	7003      	strb	r3, [r0, #0]
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 800487a:	222c      	movs	r2, #44	@ 0x2c
 800487c:	5e83      	ldrsh	r3, [r0, r2]
 800487e:	041b      	lsls	r3, r3, #16
 8004880:	6043      	str	r3, [r0, #4]
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 8004882:	222e      	movs	r2, #46	@ 0x2e
 8004884:	5e83      	ldrsh	r3, [r0, r2]
 8004886:	041b      	lsls	r3, r3, #16
 8004888:	6083      	str	r3, [r0, #8]
    pHandle->TargetFinal = 0;
 800488a:	2300      	movs	r3, #0
 800488c:	8043      	strh	r3, [r0, #2]
    pHandle->RampRemainingStep = 0U;
 800488e:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 8004890:	6183      	str	r3, [r0, #24]
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 8004892:	4770      	bx	lr

08004894 <STC_SetSpeedSensor>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SPD = SPD_Handle;
 8004894:	6141      	str	r1, [r0, #20]
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 8004896:	4770      	bx	lr

08004898 <STC_GetSpeedSensor>:
__weak SpeednPosFdbk_Handle_t *STC_GetSpeedSensor(SpeednTorqCtrl_Handle_t *pHandle)
{
#ifdef NULL_PTR_SPD_TRQ_CTL
  return ((MC_NULL ==  pHandle) ? MC_NULL : pHandle->SPD);
#else
  return (pHandle->SPD);
 8004898:	6940      	ldr	r0, [r0, #20]
#endif
}
 800489a:	4770      	bx	lr

0800489c <STC_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (MCM_SPEED_MODE == pHandle->Mode)
 800489c:	7803      	ldrb	r3, [r0, #0]
{
 800489e:	b510      	push	{r4, lr}
    if (MCM_SPEED_MODE == pHandle->Mode)
 80048a0:	2b03      	cmp	r3, #3
 80048a2:	d000      	beq.n	80048a6 <STC_Clear+0xa>
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
    }
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 80048a4:	bd10      	pop	{r4, pc}
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
 80048a6:	2100      	movs	r1, #0
 80048a8:	6900      	ldr	r0, [r0, #16]
 80048aa:	f7ff fea7 	bl	80045fc <PID_SetIntegralTerm>
}
 80048ae:	e7f9      	b.n	80048a4 <STC_Clear+0x8>

080048b0 <STC_GetTorqueRef>:
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
#ifdef NULL_PTR_SPD_TRQ_CTL
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->TorqueRef >> 16));
#else
  return ((int16_t)(pHandle->TorqueRef >> 16));
 80048b0:	230a      	movs	r3, #10
 80048b2:	5ec0      	ldrsh	r0, [r0, r3]
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->TorqueRef / 65536));
#else
  return ((int16_t)(pHandle->TorqueRef / 65536));
#endif
#endif
}
 80048b4:	4770      	bx	lr
 80048b6:	46c0      	nop			@ (mov r8, r8)

080048b8 <STC_SetControlMode>:
  }
  else
  {
#endif
    pHandle->Mode = bMode;
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 80048b8:	2300      	movs	r3, #0
    pHandle->Mode = bMode;
 80048ba:	7001      	strb	r1, [r0, #0]
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 80048bc:	60c3      	str	r3, [r0, #12]
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 80048be:	4770      	bx	lr

080048c0 <STC_ExecRamp>:
  * @ref EncAlignCtrl "Encoder Alignment Control",
  * @ref PositionControl "Position Control" loop or
  * speed regulation with @ref SpeedRegulatorPotentiometer Speed potentiometer.
  */
__weak bool STC_ExecRamp(SpeednTorqCtrl_Handle_t *pHandle, int16_t hTargetFinal, uint32_t hDurationms)
{
 80048c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t wAux;
    int32_t wAux1;
    int16_t hCurrentReference;

    /* Check if the hTargetFinal is out of the bound of application. */
    if (MCM_TORQUE_MODE == pHandle->Mode)
 80048c2:	7803      	ldrb	r3, [r0, #0]
{
 80048c4:	0004      	movs	r4, r0
 80048c6:	000d      	movs	r5, r1
 80048c8:	0016      	movs	r6, r2
    if (MCM_TORQUE_MODE == pHandle->Mode)
 80048ca:	2b04      	cmp	r3, #4
 80048cc:	d012      	beq.n	80048f4 <STC_ExecRamp+0x34>
    }
    else
    {
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
 80048ce:	2306      	movs	r3, #6
 80048d0:	5ec7      	ldrsh	r7, [r0, r3]
#else
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt / 65536);
#endif

#ifdef CHECK_BOUNDARY
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 80048d2:	8bc3      	ldrh	r3, [r0, #30]
 80048d4:	428b      	cmp	r3, r1
 80048d6:	da01      	bge.n	80048dc <STC_ExecRamp+0x1c>
{
 80048d8:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
  return (allowedRange);
}
 80048da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      else if (hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit)
 80048dc:	2224      	movs	r2, #36	@ 0x24
 80048de:	5e83      	ldrsh	r3, [r0, r2]
 80048e0:	428b      	cmp	r3, r1
 80048e2:	dcf9      	bgt.n	80048d8 <STC_ExecRamp+0x18>
      else if ((int32_t)hTargetFinal < (int32_t)pHandle->MinAppPositiveMecSpeedUnit)
 80048e4:	8c03      	ldrh	r3, [r0, #32]
 80048e6:	428b      	cmp	r3, r1
 80048e8:	dd0e      	ble.n	8004908 <STC_ExecRamp+0x48>
        if (hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit)
 80048ea:	2222      	movs	r2, #34	@ 0x22
 80048ec:	5e83      	ldrsh	r3, [r0, r2]
 80048ee:	428b      	cmp	r3, r1
 80048f0:	dbf2      	blt.n	80048d8 <STC_ExecRamp+0x18>
 80048f2:	e009      	b.n	8004908 <STC_ExecRamp+0x48>
      hCurrentReference = STC_GetTorqueRef(pHandle);
 80048f4:	f7ff ffdc 	bl	80048b0 <STC_GetTorqueRef>
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxPositiveTorque)
 80048f8:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
      hCurrentReference = STC_GetTorqueRef(pHandle);
 80048fa:	0007      	movs	r7, r0
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxPositiveTorque)
 80048fc:	42ab      	cmp	r3, r5
 80048fe:	dbeb      	blt.n	80048d8 <STC_ExecRamp+0x18>
      if ((int32_t)hTargetFinal < (int32_t)pHandle->MinNegativeTorque)
 8004900:	2228      	movs	r2, #40	@ 0x28
 8004902:	5ea3      	ldrsh	r3, [r4, r2]
 8004904:	42ab      	cmp	r3, r5
 8004906:	dce7      	bgt.n	80048d8 <STC_ExecRamp+0x18>
      if (0U == hDurationms)
 8004908:	2e00      	cmp	r6, #0
 800490a:	d109      	bne.n	8004920 <STC_ExecRamp+0x60>
        if (MCM_SPEED_MODE == pHandle->Mode)
 800490c:	7823      	ldrb	r3, [r4, #0]
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 800490e:	042d      	lsls	r5, r5, #16
        if (MCM_SPEED_MODE == pHandle->Mode)
 8004910:	2b03      	cmp	r3, #3
 8004912:	d015      	beq.n	8004940 <STC_ExecRamp+0x80>
          pHandle->TorqueRef = ((int32_t)hTargetFinal) * 65536;
 8004914:	60a5      	str	r5, [r4, #8]
        pHandle->RampRemainingStep = 0U;
 8004916:	2300      	movs	r3, #0
{
 8004918:	2001      	movs	r0, #1
        pHandle->RampRemainingStep = 0U;
 800491a:	60e3      	str	r3, [r4, #12]
        pHandle->IncDecAmount = 0;
 800491c:	61a3      	str	r3, [r4, #24]
 800491e:	e7dc      	b.n	80048da <STC_ExecRamp+0x1a>
        wAux /= 1000U;
 8004920:	21fa      	movs	r1, #250	@ 0xfa
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 8004922:	8ba0      	ldrh	r0, [r4, #28]
        pHandle->TargetFinal = hTargetFinal;
 8004924:	8065      	strh	r5, [r4, #2]
        wAux /= 1000U;
 8004926:	0089      	lsls	r1, r1, #2
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 8004928:	4370      	muls	r0, r6
        wAux /= 1000U;
 800492a:	f7fb fbed 	bl	8000108 <__udivsi3>
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 800492e:	1bed      	subs	r5, r5, r7
        pHandle->RampRemainingStep++;
 8004930:	1c41      	adds	r1, r0, #1
 8004932:	60e1      	str	r1, [r4, #12]
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 8004934:	0428      	lsls	r0, r5, #16
        wAux1 /= ((int32_t)pHandle->RampRemainingStep);
 8004936:	f7fb fc71 	bl	800021c <__divsi3>
        pHandle->IncDecAmount = wAux1;
 800493a:	61a0      	str	r0, [r4, #24]
{
 800493c:	2001      	movs	r0, #1
 800493e:	e7cc      	b.n	80048da <STC_ExecRamp+0x1a>
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 8004940:	6065      	str	r5, [r4, #4]
 8004942:	e7e8      	b.n	8004916 <STC_ExecRamp+0x56>

08004944 <STC_CalcTorqueReference>:
    int32_t wCurrentReference;
    int16_t hMeasuredSpeed;
    int16_t hTargetSpeed;
    int16_t hError;

    if (MCM_TORQUE_MODE == pHandle->Mode)
 8004944:	7802      	ldrb	r2, [r0, #0]
{
 8004946:	b570      	push	{r4, r5, r6, lr}
      wCurrentReference = pHandle->SpeedRefUnitExt;
    }

    /* Update the speed reference or the torque reference according to the mode
       and terminates the ramp if needed. */
    if (pHandle->RampRemainingStep > 1U)
 8004948:	68c3      	ldr	r3, [r0, #12]
{
 800494a:	0004      	movs	r4, r0
    if (MCM_TORQUE_MODE == pHandle->Mode)
 800494c:	2a04      	cmp	r2, #4
 800494e:	d01f      	beq.n	8004990 <STC_CalcTorqueReference+0x4c>
      wCurrentReference = pHandle->SpeedRefUnitExt;
 8004950:	6845      	ldr	r5, [r0, #4]
    if (pHandle->RampRemainingStep > 1U)
 8004952:	2b01      	cmp	r3, #1
 8004954:	d908      	bls.n	8004968 <STC_CalcTorqueReference+0x24>
    {
      /* Increment/decrement the reference value. */
      wCurrentReference += pHandle->IncDecAmount;
 8004956:	6981      	ldr	r1, [r0, #24]

      /* Decrement the number of remaining steps */
      pHandle->RampRemainingStep--;
 8004958:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 800495a:	186d      	adds	r5, r5, r1
      pHandle->RampRemainingStep--;
 800495c:	60c3      	str	r3, [r0, #12]
    else
    {
      /* Do nothing. */
    }

    if (MCM_SPEED_MODE == pHandle->Mode)
 800495e:	2a03      	cmp	r2, #3
 8004960:	d00a      	beq.n	8004978 <STC_CalcTorqueReference+0x34>
    else
    {
      pHandle->TorqueRef = wCurrentReference;
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hTorqueReference = (int16_t)(wCurrentReference >> 16);
 8004962:	1428      	asrs	r0, r5, #16
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 8004964:	60a5      	str	r5, [r4, #8]
    }
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
  return (hTorqueReference);
}
 8004966:	bd70      	pop	{r4, r5, r6, pc}
    else if (1U == pHandle->RampRemainingStep)
 8004968:	2b01      	cmp	r3, #1
 800496a:	d1f8      	bne.n	800495e <STC_CalcTorqueReference+0x1a>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 800496c:	2302      	movs	r3, #2
 800496e:	5ec5      	ldrsh	r5, [r0, r3]
      pHandle->RampRemainingStep = 0U;
 8004970:	2300      	movs	r3, #0
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8004972:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep = 0U;
 8004974:	60c3      	str	r3, [r0, #12]
 8004976:	e7f2      	b.n	800495e <STC_CalcTorqueReference+0x1a>
      hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit(pHandle->SPD);
 8004978:	6960      	ldr	r0, [r4, #20]
 800497a:	f7ff ff45 	bl	8004808 <SPD_GetAvrgMecSpeedUnit>
      hTargetSpeed = (int16_t)(wCurrentReference >> 16);
 800497e:	1429      	asrs	r1, r5, #16
      hError = hTargetSpeed - hMeasuredSpeed;
 8004980:	1a09      	subs	r1, r1, r0
      hTorqueReference = PI_Controller(pHandle->PISpeed, (int32_t)hError);
 8004982:	b209      	sxth	r1, r1
 8004984:	6920      	ldr	r0, [r4, #16]
 8004986:	f7ff fe3b 	bl	8004600 <PI_Controller>
      pHandle->SpeedRefUnitExt = wCurrentReference;
 800498a:	6065      	str	r5, [r4, #4]
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 800498c:	0405      	lsls	r5, r0, #16
 800498e:	e7e9      	b.n	8004964 <STC_CalcTorqueReference+0x20>
      wCurrentReference = pHandle->TorqueRef;
 8004990:	6885      	ldr	r5, [r0, #8]
    if (pHandle->RampRemainingStep > 1U)
 8004992:	2b01      	cmp	r3, #1
 8004994:	d904      	bls.n	80049a0 <STC_CalcTorqueReference+0x5c>
      wCurrentReference += pHandle->IncDecAmount;
 8004996:	6982      	ldr	r2, [r0, #24]
      pHandle->RampRemainingStep--;
 8004998:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 800499a:	18ad      	adds	r5, r5, r2
      pHandle->RampRemainingStep--;
 800499c:	60c3      	str	r3, [r0, #12]
    if (MCM_SPEED_MODE == pHandle->Mode)
 800499e:	e7e0      	b.n	8004962 <STC_CalcTorqueReference+0x1e>
    else if (1U == pHandle->RampRemainingStep)
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d1de      	bne.n	8004962 <STC_CalcTorqueReference+0x1e>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 80049a4:	2302      	movs	r3, #2
 80049a6:	5ec5      	ldrsh	r5, [r0, r3]
      pHandle->RampRemainingStep = 0U;
 80049a8:	2300      	movs	r3, #0
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 80049aa:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep = 0U;
 80049ac:	60c3      	str	r3, [r0, #12]
    if (MCM_SPEED_MODE == pHandle->Mode)
 80049ae:	e7d8      	b.n	8004962 <STC_CalcTorqueReference+0x1e>

080049b0 <STC_GetMecSpeedRefUnitDefault>:
__weak int16_t STC_GetMecSpeedRefUnitDefault(SpeednTorqCtrl_Handle_t *pHandle)
{
#ifdef NULL_PTR_SPD_TRQ_CTL
  return ((MC_NULL == pHandle) ? 0 : pHandle->MecSpeedRefUnitDefault);
#else
  return (pHandle->MecSpeedRefUnitDefault);
 80049b0:	232c      	movs	r3, #44	@ 0x2c
 80049b2:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 80049b4:	4770      	bx	lr
 80049b6:	46c0      	nop			@ (mov r8, r8)

080049b8 <STC_GetDefaultIqdref>:
    IqdRefDefault.q = pHandle->TorqueRefDefault;
    IqdRefDefault.d = pHandle->IdrefDefault;
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
  return (IqdRefDefault);
 80049b8:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 80049ba:	8dc0      	ldrh	r0, [r0, #46]	@ 0x2e
 80049bc:	041b      	lsls	r3, r3, #16
{
 80049be:	b082      	sub	sp, #8
  return (IqdRefDefault);
 80049c0:	4318      	orrs	r0, r3
}
 80049c2:	b002      	add	sp, #8
 80049c4:	4770      	bx	lr
 80049c6:	46c0      	nop			@ (mov r8, r8)

080049c8 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *
  * - Called during the CHARGE_BOOT_CAP, SWITCH_OVER and WAIT_STOP_MOTOR states of the MC state machine
  * into MediumFrequencyTask to initialize the speed reference.
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed(SpeednTorqCtrl_Handle_t *pHandle)
{
 80049c8:	b510      	push	{r4, lr}
 80049ca:	0004      	movs	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SpeedRefUnitExt = ((int32_t)SPD_GetAvrgMecSpeedUnit(pHandle->SPD)) * (int32_t)65536;
 80049cc:	6940      	ldr	r0, [r0, #20]
 80049ce:	f7ff ff1b 	bl	8004808 <SPD_GetAvrgMecSpeedUnit>
 80049d2:	0400      	lsls	r0, r0, #16
 80049d4:	6060      	str	r0, [r4, #4]
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 80049d6:	bd10      	pop	{r4, pc}

080049d8 <VSS_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->_Super.bSpeedErrorNumber = 0U;
 80049d8:	2300      	movs	r3, #0
    pHandle->hRemainingStep = 0U;
    pHandle->hElAngleAccu = 0;

    pHandle->bTransitionStarted = false;
    pHandle->bTransitionEnded = false;
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 80049da:	8ec2      	ldrh	r2, [r0, #54]	@ 0x36
    pHandle->_Super.bSpeedErrorNumber = 0U;
 80049dc:	7003      	strb	r3, [r0, #0]
    pHandle->_Super.hElAngle = 0;
 80049de:	6043      	str	r3, [r0, #4]
    pHandle->_Super.hAvrMecSpeedUnit = 0;
 80049e0:	60c3      	str	r3, [r0, #12]
    pHandle->_Super.hMecAccelUnitP = 0;
 80049e2:	8243      	strh	r3, [r0, #18]
    pHandle->wElAccDppP32 = 0;
 80049e4:	6203      	str	r3, [r0, #32]
    pHandle->wElSpeedDpp32 = 0;
 80049e6:	6243      	str	r3, [r0, #36]	@ 0x24
    pHandle->hRemainingStep = 0U;
 80049e8:	8503      	strh	r3, [r0, #40]	@ 0x28
    pHandle->bTransitionStarted = false;
 80049ea:	8583      	strh	r3, [r0, #44]	@ 0x2c
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 80049ec:	85c2      	strh	r2, [r0, #46]	@ 0x2e
    pHandle->hElAngleAccu = 0;
 80049ee:	6303      	str	r3, [r0, #48]	@ 0x30

    pHandle->bCopyObserver = false;
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
}
 80049f0:	4770      	bx	lr
 80049f2:	46c0      	nop			@ (mov r8, r8)

080049f4 <VSS_Init>:
{
 80049f4:	b510      	push	{r4, lr}
  VSS_Clear(pHandle);
 80049f6:	f7ff ffef 	bl	80049d8 <VSS_Clear>
}
 80049fa:	bd10      	pop	{r4, pc}

080049fc <VSS_SetMecAngle>:
  *
  * - Called during @ref RevUpCtrl "Rev-Up Control" and
  * @ref EncAlignCtrl "Encoder Alignment Controller procedure" initialization.
  */
__weak void VSS_SetMecAngle(VirtualSpeedSensor_Handle_t *pHandle, int16_t hMecAngle)
{
 80049fc:	b570      	push	{r4, r5, r6, lr}
 80049fe:	000d      	movs	r5, r1
 8004a00:	0004      	movs	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hElAngleAccu = hMecAngle;
 8004a02:	8601      	strh	r1, [r0, #48]	@ 0x30
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 8004a04:	7841      	ldrb	r1, [r0, #1]
 8004a06:	0028      	movs	r0, r5
 8004a08:	f7fb fc08 	bl	800021c <__divsi3>
    pHandle->_Super.hElAngle = hMecAngle;
 8004a0c:	80a5      	strh	r5, [r4, #4]
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 8004a0e:	80e0      	strh	r0, [r4, #6]
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
}
 8004a10:	bd70      	pop	{r4, r5, r6, pc}
 8004a12:	46c0      	nop			@ (mov r8, r8)

08004a14 <VSS_SetMecAcceleration>:
  * - Called during @ref RevUpCtrl "Rev-Up Control" and
  * @ref EncAlignCtrl "Encoder Alignment Controller procedure" initialization.
  */
__weak void  VSS_SetMecAcceleration(VirtualSpeedSensor_Handle_t *pHandle, int16_t hFinalMecSpeedUnit,
                                    uint16_t hDurationms)
{
 8004a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a16:	46ce      	mov	lr, r9
 8004a18:	4647      	mov	r7, r8
    int32_t wMecAccDppP32;
    uint16_t hNbrStep;
    int16_t hCurrentMecSpeedDpp;
    int16_t hFinalMecSpeedDpp;

    if (false == pHandle->bTransitionStarted)
 8004a1a:	232c      	movs	r3, #44	@ 0x2c
{
 8004a1c:	b580      	push	{r7, lr}
    if (false == pHandle->bTransitionStarted)
 8004a1e:	5cc3      	ldrb	r3, [r0, r3]
{
 8004a20:	0004      	movs	r4, r0
 8004a22:	000e      	movs	r6, r1
 8004a24:	0015      	movs	r5, r2
    if (false == pHandle->bTransitionStarted)
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d112      	bne.n	8004a50 <VSS_SetMecAcceleration+0x3c>
        pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)hFinalMecSpeedUnit)
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
                                              / (((int32_t)SPEED_UNIT)
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));

        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8004a2a:	7843      	ldrb	r3, [r0, #1]
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 8004a2c:	69c0      	ldr	r0, [r0, #28]
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8004a2e:	4698      	mov	r8, r3
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8004a30:	8b63      	ldrh	r3, [r4, #26]
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 8004a32:	4348      	muls	r0, r1
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8004a34:	0099      	lsls	r1, r3, #2
 8004a36:	18c9      	adds	r1, r1, r3
 8004a38:	0049      	lsls	r1, r1, #1
                                              / (((int32_t)SPEED_UNIT)
 8004a3a:	f7fb fbef 	bl	800021c <__divsi3>
 8004a3e:	0007      	movs	r7, r0
      if (0U == hDurationms)
 8004a40:	2d00      	cmp	r5, #0
 8004a42:	d109      	bne.n	8004a58 <VSS_SetMecAcceleration+0x44>
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8004a44:	4643      	mov	r3, r8
 8004a46:	435f      	muls	r7, r3
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 8004a48:	81a6      	strh	r6, [r4, #12]
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8004a4a:	81e7      	strh	r7, [r4, #14]

        pHandle->hRemainingStep = 0U;
 8004a4c:	8525      	strh	r5, [r4, #40]	@ 0x28

        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8004a4e:	8566      	strh	r6, [r4, #42]	@ 0x2a
      }
    }
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
}
 8004a50:	bcc0      	pop	{r6, r7}
 8004a52:	46b9      	mov	r9, r7
 8004a54:	46b0      	mov	r8, r6
 8004a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hNbrStep = (uint16_t)((((uint32_t)hDurationms) * ((uint32_t)pHandle->hSpeedSamplingFreqHz)) / 1000U);
 8004a58:	21fa      	movs	r1, #250	@ 0xfa
 8004a5a:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 8004a5c:	0089      	lsls	r1, r1, #2
 8004a5e:	4368      	muls	r0, r5
 8004a60:	f7fb fb52 	bl	8000108 <__udivsi3>
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 8004a64:	220e      	movs	r2, #14
 8004a66:	5ea3      	ldrsh	r3, [r4, r2]
        hNbrStep++;
 8004a68:	3001      	adds	r0, #1
 8004a6a:	b285      	uxth	r5, r0
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 8004a6c:	4699      	mov	r9, r3
        pHandle->hRemainingStep = hNbrStep;
 8004a6e:	8525      	strh	r5, [r4, #40]	@ 0x28
        if (0U == hNbrStep)
 8004a70:	2d00      	cmp	r5, #0
 8004a72:	d104      	bne.n	8004a7e <VSS_SetMecAcceleration+0x6a>
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 8004a74:	464b      	mov	r3, r9
 8004a76:	041b      	lsls	r3, r3, #16
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8004a78:	8566      	strh	r6, [r4, #42]	@ 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 8004a7a:	6263      	str	r3, [r4, #36]	@ 0x24
}
 8004a7c:	e7e8      	b.n	8004a50 <VSS_SetMecAcceleration+0x3c>
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 8004a7e:	0018      	movs	r0, r3
 8004a80:	4641      	mov	r1, r8
 8004a82:	f7fb fbcb 	bl	800021c <__divsi3>
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 8004a86:	b23f      	sxth	r7, r7
 8004a88:	1a38      	subs	r0, r7, r0
 8004a8a:	0029      	movs	r1, r5
                         * ((int32_t)65536)) / ((int32_t )hNbrStep);
 8004a8c:	0400      	lsls	r0, r0, #16
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 8004a8e:	f7fb fbc5 	bl	800021c <__divsi3>
          pHandle->wElAccDppP32 = wMecAccDppP32 * ((int16_t)pHandle->_Super.bElToMecRatio);
 8004a92:	4643      	mov	r3, r8
 8004a94:	4343      	muls	r3, r0
 8004a96:	6223      	str	r3, [r4, #32]
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 8004a98:	464b      	mov	r3, r9
 8004a9a:	041b      	lsls	r3, r3, #16
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8004a9c:	8566      	strh	r6, [r4, #42]	@ 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 8004a9e:	6263      	str	r3, [r4, #36]	@ 0x24
 8004aa0:	e7d6      	b.n	8004a50 <VSS_SetMecAcceleration+0x3c>
 8004aa2:	46c0      	nop			@ (mov r8, r8)

08004aa4 <memset>:
 8004aa4:	0003      	movs	r3, r0
 8004aa6:	1882      	adds	r2, r0, r2
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d100      	bne.n	8004aae <memset+0xa>
 8004aac:	4770      	bx	lr
 8004aae:	7019      	strb	r1, [r3, #0]
 8004ab0:	3301      	adds	r3, #1
 8004ab2:	e7f9      	b.n	8004aa8 <memset+0x4>

08004ab4 <__libc_init_array>:
 8004ab4:	b570      	push	{r4, r5, r6, lr}
 8004ab6:	2600      	movs	r6, #0
 8004ab8:	4c0c      	ldr	r4, [pc, #48]	@ (8004aec <__libc_init_array+0x38>)
 8004aba:	4d0d      	ldr	r5, [pc, #52]	@ (8004af0 <__libc_init_array+0x3c>)
 8004abc:	1b64      	subs	r4, r4, r5
 8004abe:	10a4      	asrs	r4, r4, #2
 8004ac0:	42a6      	cmp	r6, r4
 8004ac2:	d109      	bne.n	8004ad8 <__libc_init_array+0x24>
 8004ac4:	2600      	movs	r6, #0
 8004ac6:	f000 f823 	bl	8004b10 <_init>
 8004aca:	4c0a      	ldr	r4, [pc, #40]	@ (8004af4 <__libc_init_array+0x40>)
 8004acc:	4d0a      	ldr	r5, [pc, #40]	@ (8004af8 <__libc_init_array+0x44>)
 8004ace:	1b64      	subs	r4, r4, r5
 8004ad0:	10a4      	asrs	r4, r4, #2
 8004ad2:	42a6      	cmp	r6, r4
 8004ad4:	d105      	bne.n	8004ae2 <__libc_init_array+0x2e>
 8004ad6:	bd70      	pop	{r4, r5, r6, pc}
 8004ad8:	00b3      	lsls	r3, r6, #2
 8004ada:	58eb      	ldr	r3, [r5, r3]
 8004adc:	4798      	blx	r3
 8004ade:	3601      	adds	r6, #1
 8004ae0:	e7ee      	b.n	8004ac0 <__libc_init_array+0xc>
 8004ae2:	00b3      	lsls	r3, r6, #2
 8004ae4:	58eb      	ldr	r3, [r5, r3]
 8004ae6:	4798      	blx	r3
 8004ae8:	3601      	adds	r6, #1
 8004aea:	e7f2      	b.n	8004ad2 <__libc_init_array+0x1e>
 8004aec:	08005610 	.word	0x08005610
 8004af0:	08005610 	.word	0x08005610
 8004af4:	08005614 	.word	0x08005614
 8004af8:	08005610 	.word	0x08005610

08004afc <memcpy>:
 8004afc:	2300      	movs	r3, #0
 8004afe:	b510      	push	{r4, lr}
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d100      	bne.n	8004b06 <memcpy+0xa>
 8004b04:	bd10      	pop	{r4, pc}
 8004b06:	5ccc      	ldrb	r4, [r1, r3]
 8004b08:	54c4      	strb	r4, [r0, r3]
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	e7f8      	b.n	8004b00 <memcpy+0x4>
	...

08004b10 <_init>:
 8004b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b12:	46c0      	nop			@ (mov r8, r8)
 8004b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b16:	bc08      	pop	{r3}
 8004b18:	469e      	mov	lr, r3
 8004b1a:	4770      	bx	lr

08004b1c <_fini>:
 8004b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b1e:	46c0      	nop			@ (mov r8, r8)
 8004b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b22:	bc08      	pop	{r3}
 8004b24:	469e      	mov	lr, r3
 8004b26:	4770      	bx	lr
