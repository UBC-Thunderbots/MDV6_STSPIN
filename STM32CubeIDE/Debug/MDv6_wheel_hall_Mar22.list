
MDv6_wheel_hall_Mar22.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006054  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bbc  08006114  08006114  00016114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006cd0  08006cd0  00020380  2**0
                  CONTENTS
  4 .ARM          00000000  08006cd0  08006cd0  00020380  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006cd0  08006cd0  00020380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006cd0  08006cd0  00016cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006cd4  08006cd4  00016cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000380  20000000  08006cd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a8  20000380  08007058  00020380  2**2
                  ALLOC
 10 ._user_heap_stack 00000480  20000828  08007058  00020828  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020380  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000203a8  2**0
                  CONTENTS, READONLY
 13 .debug_line   0003028d  00000000  00000000  000203eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 00000081  00000000  00000000  00050678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   0002dd8b  00000000  00000000  000506f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00006575  00000000  00000000  0007e484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000016b0  00000000  00000000  00084a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084015  00000000  00000000  000860b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00001be0  00000000  00000000  0010a0c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loclists 0000f484  00000000  00000000  0010bca5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00019780  00000000  00000000  0011b129  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00003f18  00000000  00000000  001348ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000380 	.word	0x20000380
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080060fc 	.word	0x080060fc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000384 	.word	0x20000384
 8000104:	080060fc 	.word	0x080060fc

08000108 <__gnu_thumb1_case_sqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5609      	ldrsb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__gnu_thumb1_case_uqi>:
 800011c:	b402      	push	{r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	5c09      	ldrb	r1, [r1, r0]
 8000126:	0049      	lsls	r1, r1, #1
 8000128:	448e      	add	lr, r1
 800012a:	bc02      	pop	{r1}
 800012c:	4770      	bx	lr
 800012e:	46c0      	nop			; (mov r8, r8)

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	; 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f8f0 	bl	8000418 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			; (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__divsi3>:
 8000244:	4603      	mov	r3, r0
 8000246:	430b      	orrs	r3, r1
 8000248:	d47f      	bmi.n	800034a <__divsi3+0x106>
 800024a:	2200      	movs	r2, #0
 800024c:	0843      	lsrs	r3, r0, #1
 800024e:	428b      	cmp	r3, r1
 8000250:	d374      	bcc.n	800033c <__divsi3+0xf8>
 8000252:	0903      	lsrs	r3, r0, #4
 8000254:	428b      	cmp	r3, r1
 8000256:	d35f      	bcc.n	8000318 <__divsi3+0xd4>
 8000258:	0a03      	lsrs	r3, r0, #8
 800025a:	428b      	cmp	r3, r1
 800025c:	d344      	bcc.n	80002e8 <__divsi3+0xa4>
 800025e:	0b03      	lsrs	r3, r0, #12
 8000260:	428b      	cmp	r3, r1
 8000262:	d328      	bcc.n	80002b6 <__divsi3+0x72>
 8000264:	0c03      	lsrs	r3, r0, #16
 8000266:	428b      	cmp	r3, r1
 8000268:	d30d      	bcc.n	8000286 <__divsi3+0x42>
 800026a:	22ff      	movs	r2, #255	; 0xff
 800026c:	0209      	lsls	r1, r1, #8
 800026e:	ba12      	rev	r2, r2
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d302      	bcc.n	800027c <__divsi3+0x38>
 8000276:	1212      	asrs	r2, r2, #8
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	d065      	beq.n	8000348 <__divsi3+0x104>
 800027c:	0b03      	lsrs	r3, r0, #12
 800027e:	428b      	cmp	r3, r1
 8000280:	d319      	bcc.n	80002b6 <__divsi3+0x72>
 8000282:	e000      	b.n	8000286 <__divsi3+0x42>
 8000284:	0a09      	lsrs	r1, r1, #8
 8000286:	0bc3      	lsrs	r3, r0, #15
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x4c>
 800028c:	03cb      	lsls	r3, r1, #15
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b83      	lsrs	r3, r0, #14
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x58>
 8000298:	038b      	lsls	r3, r1, #14
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b43      	lsrs	r3, r0, #13
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x64>
 80002a4:	034b      	lsls	r3, r1, #13
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b03      	lsrs	r3, r0, #12
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x70>
 80002b0:	030b      	lsls	r3, r1, #12
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0ac3      	lsrs	r3, r0, #11
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x7c>
 80002bc:	02cb      	lsls	r3, r1, #11
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a83      	lsrs	r3, r0, #10
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x88>
 80002c8:	028b      	lsls	r3, r1, #10
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a43      	lsrs	r3, r0, #9
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x94>
 80002d4:	024b      	lsls	r3, r1, #9
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a03      	lsrs	r3, r0, #8
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0xa0>
 80002e0:	020b      	lsls	r3, r1, #8
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	d2cd      	bcs.n	8000284 <__divsi3+0x40>
 80002e8:	09c3      	lsrs	r3, r0, #7
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xae>
 80002ee:	01cb      	lsls	r3, r1, #7
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0983      	lsrs	r3, r0, #6
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xba>
 80002fa:	018b      	lsls	r3, r1, #6
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0943      	lsrs	r3, r0, #5
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xc6>
 8000306:	014b      	lsls	r3, r1, #5
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0903      	lsrs	r3, r0, #4
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xd2>
 8000312:	010b      	lsls	r3, r1, #4
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	08c3      	lsrs	r3, r0, #3
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xde>
 800031e:	00cb      	lsls	r3, r1, #3
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0883      	lsrs	r3, r0, #2
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xea>
 800032a:	008b      	lsls	r3, r1, #2
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0843      	lsrs	r3, r0, #1
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xf6>
 8000336:	004b      	lsls	r3, r1, #1
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	1a41      	subs	r1, r0, r1
 800033e:	d200      	bcs.n	8000342 <__divsi3+0xfe>
 8000340:	4601      	mov	r1, r0
 8000342:	4152      	adcs	r2, r2
 8000344:	4610      	mov	r0, r2
 8000346:	4770      	bx	lr
 8000348:	e05d      	b.n	8000406 <__divsi3+0x1c2>
 800034a:	0fca      	lsrs	r2, r1, #31
 800034c:	d000      	beq.n	8000350 <__divsi3+0x10c>
 800034e:	4249      	negs	r1, r1
 8000350:	1003      	asrs	r3, r0, #32
 8000352:	d300      	bcc.n	8000356 <__divsi3+0x112>
 8000354:	4240      	negs	r0, r0
 8000356:	4053      	eors	r3, r2
 8000358:	2200      	movs	r2, #0
 800035a:	469c      	mov	ip, r3
 800035c:	0903      	lsrs	r3, r0, #4
 800035e:	428b      	cmp	r3, r1
 8000360:	d32d      	bcc.n	80003be <__divsi3+0x17a>
 8000362:	0a03      	lsrs	r3, r0, #8
 8000364:	428b      	cmp	r3, r1
 8000366:	d312      	bcc.n	800038e <__divsi3+0x14a>
 8000368:	22fc      	movs	r2, #252	; 0xfc
 800036a:	0189      	lsls	r1, r1, #6
 800036c:	ba12      	rev	r2, r2
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d30c      	bcc.n	800038e <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d308      	bcc.n	800038e <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d304      	bcc.n	800038e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	d03a      	beq.n	80003fe <__divsi3+0x1ba>
 8000388:	1192      	asrs	r2, r2, #6
 800038a:	e000      	b.n	800038e <__divsi3+0x14a>
 800038c:	0989      	lsrs	r1, r1, #6
 800038e:	09c3      	lsrs	r3, r0, #7
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x154>
 8000394:	01cb      	lsls	r3, r1, #7
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0983      	lsrs	r3, r0, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x160>
 80003a0:	018b      	lsls	r3, r1, #6
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0943      	lsrs	r3, r0, #5
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x16c>
 80003ac:	014b      	lsls	r3, r1, #5
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0903      	lsrs	r3, r0, #4
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x178>
 80003b8:	010b      	lsls	r3, r1, #4
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	08c3      	lsrs	r3, r0, #3
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x184>
 80003c4:	00cb      	lsls	r3, r1, #3
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0883      	lsrs	r3, r0, #2
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x190>
 80003d0:	008b      	lsls	r3, r1, #2
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	d2d9      	bcs.n	800038c <__divsi3+0x148>
 80003d8:	0843      	lsrs	r3, r0, #1
 80003da:	428b      	cmp	r3, r1
 80003dc:	d301      	bcc.n	80003e2 <__divsi3+0x19e>
 80003de:	004b      	lsls	r3, r1, #1
 80003e0:	1ac0      	subs	r0, r0, r3
 80003e2:	4152      	adcs	r2, r2
 80003e4:	1a41      	subs	r1, r0, r1
 80003e6:	d200      	bcs.n	80003ea <__divsi3+0x1a6>
 80003e8:	4601      	mov	r1, r0
 80003ea:	4663      	mov	r3, ip
 80003ec:	4152      	adcs	r2, r2
 80003ee:	105b      	asrs	r3, r3, #1
 80003f0:	4610      	mov	r0, r2
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x1b4>
 80003f4:	4240      	negs	r0, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d500      	bpl.n	80003fc <__divsi3+0x1b8>
 80003fa:	4249      	negs	r1, r1
 80003fc:	4770      	bx	lr
 80003fe:	4663      	mov	r3, ip
 8000400:	105b      	asrs	r3, r3, #1
 8000402:	d300      	bcc.n	8000406 <__divsi3+0x1c2>
 8000404:	4240      	negs	r0, r0
 8000406:	b501      	push	{r0, lr}
 8000408:	2000      	movs	r0, #0
 800040a:	f000 f805 	bl	8000418 <__aeabi_idiv0>
 800040e:	bd02      	pop	{r1, pc}

08000410 <__aeabi_idivmod>:
 8000410:	2900      	cmp	r1, #0
 8000412:	d0f8      	beq.n	8000406 <__divsi3+0x1c2>
 8000414:	e716      	b.n	8000244 <__divsi3>
 8000416:	4770      	bx	lr

08000418 <__aeabi_idiv0>:
 8000418:	4770      	bx	lr
 800041a:	46c0      	nop			; (mov r8, r8)

0800041c <__aeabi_fmul>:
 800041c:	0243      	lsls	r3, r0, #9
 800041e:	0a5b      	lsrs	r3, r3, #9
 8000420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000422:	464f      	mov	r7, r9
 8000424:	4646      	mov	r6, r8
 8000426:	4699      	mov	r9, r3
 8000428:	46d6      	mov	lr, sl
 800042a:	0fc3      	lsrs	r3, r0, #31
 800042c:	0045      	lsls	r5, r0, #1
 800042e:	4698      	mov	r8, r3
 8000430:	b5c0      	push	{r6, r7, lr}
 8000432:	464b      	mov	r3, r9
 8000434:	1c0f      	adds	r7, r1, #0
 8000436:	0e2d      	lsrs	r5, r5, #24
 8000438:	d100      	bne.n	800043c <__aeabi_fmul+0x20>
 800043a:	e0cb      	b.n	80005d4 <__aeabi_fmul+0x1b8>
 800043c:	2dff      	cmp	r5, #255	; 0xff
 800043e:	d100      	bne.n	8000442 <__aeabi_fmul+0x26>
 8000440:	e0cf      	b.n	80005e2 <__aeabi_fmul+0x1c6>
 8000442:	2280      	movs	r2, #128	; 0x80
 8000444:	00db      	lsls	r3, r3, #3
 8000446:	04d2      	lsls	r2, r2, #19
 8000448:	431a      	orrs	r2, r3
 800044a:	2300      	movs	r3, #0
 800044c:	4691      	mov	r9, r2
 800044e:	2600      	movs	r6, #0
 8000450:	469a      	mov	sl, r3
 8000452:	3d7f      	subs	r5, #127	; 0x7f
 8000454:	027c      	lsls	r4, r7, #9
 8000456:	007b      	lsls	r3, r7, #1
 8000458:	0a64      	lsrs	r4, r4, #9
 800045a:	0e1b      	lsrs	r3, r3, #24
 800045c:	0fff      	lsrs	r7, r7, #31
 800045e:	2b00      	cmp	r3, #0
 8000460:	d100      	bne.n	8000464 <__aeabi_fmul+0x48>
 8000462:	e0a9      	b.n	80005b8 <__aeabi_fmul+0x19c>
 8000464:	2bff      	cmp	r3, #255	; 0xff
 8000466:	d011      	beq.n	800048c <__aeabi_fmul+0x70>
 8000468:	2280      	movs	r2, #128	; 0x80
 800046a:	00e4      	lsls	r4, r4, #3
 800046c:	04d2      	lsls	r2, r2, #19
 800046e:	4314      	orrs	r4, r2
 8000470:	4642      	mov	r2, r8
 8000472:	3b7f      	subs	r3, #127	; 0x7f
 8000474:	195b      	adds	r3, r3, r5
 8000476:	407a      	eors	r2, r7
 8000478:	2000      	movs	r0, #0
 800047a:	b2d2      	uxtb	r2, r2
 800047c:	1c5d      	adds	r5, r3, #1
 800047e:	2e0a      	cmp	r6, #10
 8000480:	dd13      	ble.n	80004aa <__aeabi_fmul+0x8e>
 8000482:	003a      	movs	r2, r7
 8000484:	2e0b      	cmp	r6, #11
 8000486:	d047      	beq.n	8000518 <__aeabi_fmul+0xfc>
 8000488:	4647      	mov	r7, r8
 800048a:	e03f      	b.n	800050c <__aeabi_fmul+0xf0>
 800048c:	002b      	movs	r3, r5
 800048e:	33ff      	adds	r3, #255	; 0xff
 8000490:	2c00      	cmp	r4, #0
 8000492:	d11e      	bne.n	80004d2 <__aeabi_fmul+0xb6>
 8000494:	2202      	movs	r2, #2
 8000496:	4316      	orrs	r6, r2
 8000498:	4642      	mov	r2, r8
 800049a:	3501      	adds	r5, #1
 800049c:	407a      	eors	r2, r7
 800049e:	b2d2      	uxtb	r2, r2
 80004a0:	35ff      	adds	r5, #255	; 0xff
 80004a2:	2e0a      	cmp	r6, #10
 80004a4:	dd00      	ble.n	80004a8 <__aeabi_fmul+0x8c>
 80004a6:	e0e4      	b.n	8000672 <__aeabi_fmul+0x256>
 80004a8:	2002      	movs	r0, #2
 80004aa:	2e02      	cmp	r6, #2
 80004ac:	dc1c      	bgt.n	80004e8 <__aeabi_fmul+0xcc>
 80004ae:	3e01      	subs	r6, #1
 80004b0:	2e01      	cmp	r6, #1
 80004b2:	d842      	bhi.n	800053a <__aeabi_fmul+0x11e>
 80004b4:	2802      	cmp	r0, #2
 80004b6:	d03d      	beq.n	8000534 <__aeabi_fmul+0x118>
 80004b8:	2801      	cmp	r0, #1
 80004ba:	d166      	bne.n	800058a <__aeabi_fmul+0x16e>
 80004bc:	2000      	movs	r0, #0
 80004be:	2100      	movs	r1, #0
 80004c0:	05c0      	lsls	r0, r0, #23
 80004c2:	4308      	orrs	r0, r1
 80004c4:	07d2      	lsls	r2, r2, #31
 80004c6:	4310      	orrs	r0, r2
 80004c8:	bce0      	pop	{r5, r6, r7}
 80004ca:	46ba      	mov	sl, r7
 80004cc:	46b1      	mov	r9, r6
 80004ce:	46a8      	mov	r8, r5
 80004d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d2:	2203      	movs	r2, #3
 80004d4:	4316      	orrs	r6, r2
 80004d6:	4642      	mov	r2, r8
 80004d8:	3501      	adds	r5, #1
 80004da:	407a      	eors	r2, r7
 80004dc:	b2d2      	uxtb	r2, r2
 80004de:	35ff      	adds	r5, #255	; 0xff
 80004e0:	2e0a      	cmp	r6, #10
 80004e2:	dd00      	ble.n	80004e6 <__aeabi_fmul+0xca>
 80004e4:	e0e4      	b.n	80006b0 <__aeabi_fmul+0x294>
 80004e6:	2003      	movs	r0, #3
 80004e8:	2101      	movs	r1, #1
 80004ea:	40b1      	lsls	r1, r6
 80004ec:	26a6      	movs	r6, #166	; 0xa6
 80004ee:	00f6      	lsls	r6, r6, #3
 80004f0:	4231      	tst	r1, r6
 80004f2:	d10a      	bne.n	800050a <__aeabi_fmul+0xee>
 80004f4:	2690      	movs	r6, #144	; 0x90
 80004f6:	00b6      	lsls	r6, r6, #2
 80004f8:	4231      	tst	r1, r6
 80004fa:	d116      	bne.n	800052a <__aeabi_fmul+0x10e>
 80004fc:	3eb9      	subs	r6, #185	; 0xb9
 80004fe:	3eff      	subs	r6, #255	; 0xff
 8000500:	420e      	tst	r6, r1
 8000502:	d01a      	beq.n	800053a <__aeabi_fmul+0x11e>
 8000504:	46a1      	mov	r9, r4
 8000506:	4682      	mov	sl, r0
 8000508:	e000      	b.n	800050c <__aeabi_fmul+0xf0>
 800050a:	0017      	movs	r7, r2
 800050c:	4653      	mov	r3, sl
 800050e:	003a      	movs	r2, r7
 8000510:	2b02      	cmp	r3, #2
 8000512:	d00f      	beq.n	8000534 <__aeabi_fmul+0x118>
 8000514:	464c      	mov	r4, r9
 8000516:	4650      	mov	r0, sl
 8000518:	2803      	cmp	r0, #3
 800051a:	d1cd      	bne.n	80004b8 <__aeabi_fmul+0x9c>
 800051c:	2180      	movs	r1, #128	; 0x80
 800051e:	03c9      	lsls	r1, r1, #15
 8000520:	4321      	orrs	r1, r4
 8000522:	0249      	lsls	r1, r1, #9
 8000524:	20ff      	movs	r0, #255	; 0xff
 8000526:	0a49      	lsrs	r1, r1, #9
 8000528:	e7ca      	b.n	80004c0 <__aeabi_fmul+0xa4>
 800052a:	2180      	movs	r1, #128	; 0x80
 800052c:	2200      	movs	r2, #0
 800052e:	20ff      	movs	r0, #255	; 0xff
 8000530:	03c9      	lsls	r1, r1, #15
 8000532:	e7c5      	b.n	80004c0 <__aeabi_fmul+0xa4>
 8000534:	20ff      	movs	r0, #255	; 0xff
 8000536:	2100      	movs	r1, #0
 8000538:	e7c2      	b.n	80004c0 <__aeabi_fmul+0xa4>
 800053a:	0c20      	lsrs	r0, r4, #16
 800053c:	4649      	mov	r1, r9
 800053e:	0424      	lsls	r4, r4, #16
 8000540:	0c24      	lsrs	r4, r4, #16
 8000542:	0027      	movs	r7, r4
 8000544:	0c0e      	lsrs	r6, r1, #16
 8000546:	0409      	lsls	r1, r1, #16
 8000548:	0c09      	lsrs	r1, r1, #16
 800054a:	4374      	muls	r4, r6
 800054c:	434f      	muls	r7, r1
 800054e:	4346      	muls	r6, r0
 8000550:	4348      	muls	r0, r1
 8000552:	0c39      	lsrs	r1, r7, #16
 8000554:	1900      	adds	r0, r0, r4
 8000556:	1809      	adds	r1, r1, r0
 8000558:	428c      	cmp	r4, r1
 800055a:	d903      	bls.n	8000564 <__aeabi_fmul+0x148>
 800055c:	2080      	movs	r0, #128	; 0x80
 800055e:	0240      	lsls	r0, r0, #9
 8000560:	4684      	mov	ip, r0
 8000562:	4466      	add	r6, ip
 8000564:	043f      	lsls	r7, r7, #16
 8000566:	0408      	lsls	r0, r1, #16
 8000568:	0c3f      	lsrs	r7, r7, #16
 800056a:	19c0      	adds	r0, r0, r7
 800056c:	0184      	lsls	r4, r0, #6
 800056e:	1e67      	subs	r7, r4, #1
 8000570:	41bc      	sbcs	r4, r7
 8000572:	0c09      	lsrs	r1, r1, #16
 8000574:	0e80      	lsrs	r0, r0, #26
 8000576:	1989      	adds	r1, r1, r6
 8000578:	4304      	orrs	r4, r0
 800057a:	0189      	lsls	r1, r1, #6
 800057c:	430c      	orrs	r4, r1
 800057e:	0109      	lsls	r1, r1, #4
 8000580:	d571      	bpl.n	8000666 <__aeabi_fmul+0x24a>
 8000582:	2301      	movs	r3, #1
 8000584:	0861      	lsrs	r1, r4, #1
 8000586:	401c      	ands	r4, r3
 8000588:	430c      	orrs	r4, r1
 800058a:	002b      	movs	r3, r5
 800058c:	337f      	adds	r3, #127	; 0x7f
 800058e:	2b00      	cmp	r3, #0
 8000590:	dd51      	ble.n	8000636 <__aeabi_fmul+0x21a>
 8000592:	0761      	lsls	r1, r4, #29
 8000594:	d004      	beq.n	80005a0 <__aeabi_fmul+0x184>
 8000596:	210f      	movs	r1, #15
 8000598:	4021      	ands	r1, r4
 800059a:	2904      	cmp	r1, #4
 800059c:	d000      	beq.n	80005a0 <__aeabi_fmul+0x184>
 800059e:	3404      	adds	r4, #4
 80005a0:	0121      	lsls	r1, r4, #4
 80005a2:	d503      	bpl.n	80005ac <__aeabi_fmul+0x190>
 80005a4:	4b43      	ldr	r3, [pc, #268]	; (80006b4 <__aeabi_fmul+0x298>)
 80005a6:	401c      	ands	r4, r3
 80005a8:	002b      	movs	r3, r5
 80005aa:	3380      	adds	r3, #128	; 0x80
 80005ac:	2bfe      	cmp	r3, #254	; 0xfe
 80005ae:	dcc1      	bgt.n	8000534 <__aeabi_fmul+0x118>
 80005b0:	01a1      	lsls	r1, r4, #6
 80005b2:	0a49      	lsrs	r1, r1, #9
 80005b4:	b2d8      	uxtb	r0, r3
 80005b6:	e783      	b.n	80004c0 <__aeabi_fmul+0xa4>
 80005b8:	2c00      	cmp	r4, #0
 80005ba:	d12c      	bne.n	8000616 <__aeabi_fmul+0x1fa>
 80005bc:	2301      	movs	r3, #1
 80005be:	4642      	mov	r2, r8
 80005c0:	431e      	orrs	r6, r3
 80005c2:	002b      	movs	r3, r5
 80005c4:	407a      	eors	r2, r7
 80005c6:	2001      	movs	r0, #1
 80005c8:	b2d2      	uxtb	r2, r2
 80005ca:	1c5d      	adds	r5, r3, #1
 80005cc:	2e0a      	cmp	r6, #10
 80005ce:	dd00      	ble.n	80005d2 <__aeabi_fmul+0x1b6>
 80005d0:	e757      	b.n	8000482 <__aeabi_fmul+0x66>
 80005d2:	e76a      	b.n	80004aa <__aeabi_fmul+0x8e>
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d110      	bne.n	80005fa <__aeabi_fmul+0x1de>
 80005d8:	2301      	movs	r3, #1
 80005da:	2604      	movs	r6, #4
 80005dc:	2500      	movs	r5, #0
 80005de:	469a      	mov	sl, r3
 80005e0:	e738      	b.n	8000454 <__aeabi_fmul+0x38>
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d104      	bne.n	80005f0 <__aeabi_fmul+0x1d4>
 80005e6:	2302      	movs	r3, #2
 80005e8:	2608      	movs	r6, #8
 80005ea:	25ff      	movs	r5, #255	; 0xff
 80005ec:	469a      	mov	sl, r3
 80005ee:	e731      	b.n	8000454 <__aeabi_fmul+0x38>
 80005f0:	2303      	movs	r3, #3
 80005f2:	260c      	movs	r6, #12
 80005f4:	25ff      	movs	r5, #255	; 0xff
 80005f6:	469a      	mov	sl, r3
 80005f8:	e72c      	b.n	8000454 <__aeabi_fmul+0x38>
 80005fa:	4648      	mov	r0, r9
 80005fc:	f000 f8f6 	bl	80007ec <__clzsi2>
 8000600:	464a      	mov	r2, r9
 8000602:	1f43      	subs	r3, r0, #5
 8000604:	2576      	movs	r5, #118	; 0x76
 8000606:	409a      	lsls	r2, r3
 8000608:	2300      	movs	r3, #0
 800060a:	426d      	negs	r5, r5
 800060c:	4691      	mov	r9, r2
 800060e:	2600      	movs	r6, #0
 8000610:	469a      	mov	sl, r3
 8000612:	1a2d      	subs	r5, r5, r0
 8000614:	e71e      	b.n	8000454 <__aeabi_fmul+0x38>
 8000616:	0020      	movs	r0, r4
 8000618:	f000 f8e8 	bl	80007ec <__clzsi2>
 800061c:	4642      	mov	r2, r8
 800061e:	1f43      	subs	r3, r0, #5
 8000620:	409c      	lsls	r4, r3
 8000622:	1a2b      	subs	r3, r5, r0
 8000624:	3b76      	subs	r3, #118	; 0x76
 8000626:	407a      	eors	r2, r7
 8000628:	2000      	movs	r0, #0
 800062a:	b2d2      	uxtb	r2, r2
 800062c:	1c5d      	adds	r5, r3, #1
 800062e:	2e0a      	cmp	r6, #10
 8000630:	dd00      	ble.n	8000634 <__aeabi_fmul+0x218>
 8000632:	e726      	b.n	8000482 <__aeabi_fmul+0x66>
 8000634:	e739      	b.n	80004aa <__aeabi_fmul+0x8e>
 8000636:	2101      	movs	r1, #1
 8000638:	1acb      	subs	r3, r1, r3
 800063a:	2b1b      	cmp	r3, #27
 800063c:	dd00      	ble.n	8000640 <__aeabi_fmul+0x224>
 800063e:	e73d      	b.n	80004bc <__aeabi_fmul+0xa0>
 8000640:	359e      	adds	r5, #158	; 0x9e
 8000642:	0021      	movs	r1, r4
 8000644:	40ac      	lsls	r4, r5
 8000646:	40d9      	lsrs	r1, r3
 8000648:	1e63      	subs	r3, r4, #1
 800064a:	419c      	sbcs	r4, r3
 800064c:	4321      	orrs	r1, r4
 800064e:	074b      	lsls	r3, r1, #29
 8000650:	d004      	beq.n	800065c <__aeabi_fmul+0x240>
 8000652:	230f      	movs	r3, #15
 8000654:	400b      	ands	r3, r1
 8000656:	2b04      	cmp	r3, #4
 8000658:	d000      	beq.n	800065c <__aeabi_fmul+0x240>
 800065a:	3104      	adds	r1, #4
 800065c:	014b      	lsls	r3, r1, #5
 800065e:	d504      	bpl.n	800066a <__aeabi_fmul+0x24e>
 8000660:	2001      	movs	r0, #1
 8000662:	2100      	movs	r1, #0
 8000664:	e72c      	b.n	80004c0 <__aeabi_fmul+0xa4>
 8000666:	001d      	movs	r5, r3
 8000668:	e78f      	b.n	800058a <__aeabi_fmul+0x16e>
 800066a:	0189      	lsls	r1, r1, #6
 800066c:	2000      	movs	r0, #0
 800066e:	0a49      	lsrs	r1, r1, #9
 8000670:	e726      	b.n	80004c0 <__aeabi_fmul+0xa4>
 8000672:	2302      	movs	r3, #2
 8000674:	2e0f      	cmp	r6, #15
 8000676:	d10c      	bne.n	8000692 <__aeabi_fmul+0x276>
 8000678:	2180      	movs	r1, #128	; 0x80
 800067a:	464b      	mov	r3, r9
 800067c:	03c9      	lsls	r1, r1, #15
 800067e:	420b      	tst	r3, r1
 8000680:	d00d      	beq.n	800069e <__aeabi_fmul+0x282>
 8000682:	420c      	tst	r4, r1
 8000684:	d10b      	bne.n	800069e <__aeabi_fmul+0x282>
 8000686:	4321      	orrs	r1, r4
 8000688:	0249      	lsls	r1, r1, #9
 800068a:	003a      	movs	r2, r7
 800068c:	20ff      	movs	r0, #255	; 0xff
 800068e:	0a49      	lsrs	r1, r1, #9
 8000690:	e716      	b.n	80004c0 <__aeabi_fmul+0xa4>
 8000692:	2e0b      	cmp	r6, #11
 8000694:	d000      	beq.n	8000698 <__aeabi_fmul+0x27c>
 8000696:	e6f7      	b.n	8000488 <__aeabi_fmul+0x6c>
 8000698:	46a1      	mov	r9, r4
 800069a:	469a      	mov	sl, r3
 800069c:	e736      	b.n	800050c <__aeabi_fmul+0xf0>
 800069e:	2180      	movs	r1, #128	; 0x80
 80006a0:	464b      	mov	r3, r9
 80006a2:	03c9      	lsls	r1, r1, #15
 80006a4:	4319      	orrs	r1, r3
 80006a6:	0249      	lsls	r1, r1, #9
 80006a8:	4642      	mov	r2, r8
 80006aa:	20ff      	movs	r0, #255	; 0xff
 80006ac:	0a49      	lsrs	r1, r1, #9
 80006ae:	e707      	b.n	80004c0 <__aeabi_fmul+0xa4>
 80006b0:	2303      	movs	r3, #3
 80006b2:	e7df      	b.n	8000674 <__aeabi_fmul+0x258>
 80006b4:	f7ffffff 	.word	0xf7ffffff

080006b8 <__aeabi_i2f>:
 80006b8:	b570      	push	{r4, r5, r6, lr}
 80006ba:	2800      	cmp	r0, #0
 80006bc:	d013      	beq.n	80006e6 <__aeabi_i2f+0x2e>
 80006be:	17c3      	asrs	r3, r0, #31
 80006c0:	18c5      	adds	r5, r0, r3
 80006c2:	405d      	eors	r5, r3
 80006c4:	0fc4      	lsrs	r4, r0, #31
 80006c6:	0028      	movs	r0, r5
 80006c8:	f000 f890 	bl	80007ec <__clzsi2>
 80006cc:	239e      	movs	r3, #158	; 0x9e
 80006ce:	0001      	movs	r1, r0
 80006d0:	1a1b      	subs	r3, r3, r0
 80006d2:	2b96      	cmp	r3, #150	; 0x96
 80006d4:	dc0f      	bgt.n	80006f6 <__aeabi_i2f+0x3e>
 80006d6:	2808      	cmp	r0, #8
 80006d8:	d031      	beq.n	800073e <__aeabi_i2f+0x86>
 80006da:	3908      	subs	r1, #8
 80006dc:	408d      	lsls	r5, r1
 80006de:	026d      	lsls	r5, r5, #9
 80006e0:	0a6d      	lsrs	r5, r5, #9
 80006e2:	b2d8      	uxtb	r0, r3
 80006e4:	e002      	b.n	80006ec <__aeabi_i2f+0x34>
 80006e6:	2400      	movs	r4, #0
 80006e8:	2000      	movs	r0, #0
 80006ea:	2500      	movs	r5, #0
 80006ec:	05c0      	lsls	r0, r0, #23
 80006ee:	4328      	orrs	r0, r5
 80006f0:	07e4      	lsls	r4, r4, #31
 80006f2:	4320      	orrs	r0, r4
 80006f4:	bd70      	pop	{r4, r5, r6, pc}
 80006f6:	2b99      	cmp	r3, #153	; 0x99
 80006f8:	dd0c      	ble.n	8000714 <__aeabi_i2f+0x5c>
 80006fa:	2205      	movs	r2, #5
 80006fc:	1a12      	subs	r2, r2, r0
 80006fe:	0028      	movs	r0, r5
 8000700:	40d0      	lsrs	r0, r2
 8000702:	0002      	movs	r2, r0
 8000704:	0008      	movs	r0, r1
 8000706:	301b      	adds	r0, #27
 8000708:	4085      	lsls	r5, r0
 800070a:	0028      	movs	r0, r5
 800070c:	1e45      	subs	r5, r0, #1
 800070e:	41a8      	sbcs	r0, r5
 8000710:	4302      	orrs	r2, r0
 8000712:	0015      	movs	r5, r2
 8000714:	2905      	cmp	r1, #5
 8000716:	dc16      	bgt.n	8000746 <__aeabi_i2f+0x8e>
 8000718:	002a      	movs	r2, r5
 800071a:	480f      	ldr	r0, [pc, #60]	; (8000758 <__aeabi_i2f+0xa0>)
 800071c:	4002      	ands	r2, r0
 800071e:	076e      	lsls	r6, r5, #29
 8000720:	d009      	beq.n	8000736 <__aeabi_i2f+0x7e>
 8000722:	260f      	movs	r6, #15
 8000724:	4035      	ands	r5, r6
 8000726:	2d04      	cmp	r5, #4
 8000728:	d005      	beq.n	8000736 <__aeabi_i2f+0x7e>
 800072a:	3204      	adds	r2, #4
 800072c:	0155      	lsls	r5, r2, #5
 800072e:	d502      	bpl.n	8000736 <__aeabi_i2f+0x7e>
 8000730:	239f      	movs	r3, #159	; 0x9f
 8000732:	4002      	ands	r2, r0
 8000734:	1a5b      	subs	r3, r3, r1
 8000736:	0192      	lsls	r2, r2, #6
 8000738:	0a55      	lsrs	r5, r2, #9
 800073a:	b2d8      	uxtb	r0, r3
 800073c:	e7d6      	b.n	80006ec <__aeabi_i2f+0x34>
 800073e:	026d      	lsls	r5, r5, #9
 8000740:	2096      	movs	r0, #150	; 0x96
 8000742:	0a6d      	lsrs	r5, r5, #9
 8000744:	e7d2      	b.n	80006ec <__aeabi_i2f+0x34>
 8000746:	1f4a      	subs	r2, r1, #5
 8000748:	4095      	lsls	r5, r2
 800074a:	002a      	movs	r2, r5
 800074c:	4802      	ldr	r0, [pc, #8]	; (8000758 <__aeabi_i2f+0xa0>)
 800074e:	4002      	ands	r2, r0
 8000750:	076e      	lsls	r6, r5, #29
 8000752:	d0f0      	beq.n	8000736 <__aeabi_i2f+0x7e>
 8000754:	e7e5      	b.n	8000722 <__aeabi_i2f+0x6a>
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	fbffffff 	.word	0xfbffffff

0800075c <__aeabi_ui2f>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	1e04      	subs	r4, r0, #0
 8000760:	d00e      	beq.n	8000780 <__aeabi_ui2f+0x24>
 8000762:	f000 f843 	bl	80007ec <__clzsi2>
 8000766:	239e      	movs	r3, #158	; 0x9e
 8000768:	0001      	movs	r1, r0
 800076a:	1a1b      	subs	r3, r3, r0
 800076c:	2b96      	cmp	r3, #150	; 0x96
 800076e:	dc0c      	bgt.n	800078a <__aeabi_ui2f+0x2e>
 8000770:	2808      	cmp	r0, #8
 8000772:	d02c      	beq.n	80007ce <__aeabi_ui2f+0x72>
 8000774:	3908      	subs	r1, #8
 8000776:	408c      	lsls	r4, r1
 8000778:	0264      	lsls	r4, r4, #9
 800077a:	0a64      	lsrs	r4, r4, #9
 800077c:	b2d8      	uxtb	r0, r3
 800077e:	e001      	b.n	8000784 <__aeabi_ui2f+0x28>
 8000780:	2000      	movs	r0, #0
 8000782:	2400      	movs	r4, #0
 8000784:	05c0      	lsls	r0, r0, #23
 8000786:	4320      	orrs	r0, r4
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	2b99      	cmp	r3, #153	; 0x99
 800078c:	dd0a      	ble.n	80007a4 <__aeabi_ui2f+0x48>
 800078e:	0002      	movs	r2, r0
 8000790:	0020      	movs	r0, r4
 8000792:	321b      	adds	r2, #27
 8000794:	4090      	lsls	r0, r2
 8000796:	0002      	movs	r2, r0
 8000798:	1e50      	subs	r0, r2, #1
 800079a:	4182      	sbcs	r2, r0
 800079c:	2005      	movs	r0, #5
 800079e:	1a40      	subs	r0, r0, r1
 80007a0:	40c4      	lsrs	r4, r0
 80007a2:	4314      	orrs	r4, r2
 80007a4:	2905      	cmp	r1, #5
 80007a6:	dc16      	bgt.n	80007d6 <__aeabi_ui2f+0x7a>
 80007a8:	0022      	movs	r2, r4
 80007aa:	480f      	ldr	r0, [pc, #60]	; (80007e8 <__aeabi_ui2f+0x8c>)
 80007ac:	4002      	ands	r2, r0
 80007ae:	0765      	lsls	r5, r4, #29
 80007b0:	d009      	beq.n	80007c6 <__aeabi_ui2f+0x6a>
 80007b2:	250f      	movs	r5, #15
 80007b4:	402c      	ands	r4, r5
 80007b6:	2c04      	cmp	r4, #4
 80007b8:	d005      	beq.n	80007c6 <__aeabi_ui2f+0x6a>
 80007ba:	3204      	adds	r2, #4
 80007bc:	0154      	lsls	r4, r2, #5
 80007be:	d502      	bpl.n	80007c6 <__aeabi_ui2f+0x6a>
 80007c0:	239f      	movs	r3, #159	; 0x9f
 80007c2:	4002      	ands	r2, r0
 80007c4:	1a5b      	subs	r3, r3, r1
 80007c6:	0192      	lsls	r2, r2, #6
 80007c8:	0a54      	lsrs	r4, r2, #9
 80007ca:	b2d8      	uxtb	r0, r3
 80007cc:	e7da      	b.n	8000784 <__aeabi_ui2f+0x28>
 80007ce:	0264      	lsls	r4, r4, #9
 80007d0:	2096      	movs	r0, #150	; 0x96
 80007d2:	0a64      	lsrs	r4, r4, #9
 80007d4:	e7d6      	b.n	8000784 <__aeabi_ui2f+0x28>
 80007d6:	1f4a      	subs	r2, r1, #5
 80007d8:	4094      	lsls	r4, r2
 80007da:	0022      	movs	r2, r4
 80007dc:	4802      	ldr	r0, [pc, #8]	; (80007e8 <__aeabi_ui2f+0x8c>)
 80007de:	4002      	ands	r2, r0
 80007e0:	0765      	lsls	r5, r4, #29
 80007e2:	d0f0      	beq.n	80007c6 <__aeabi_ui2f+0x6a>
 80007e4:	e7e5      	b.n	80007b2 <__aeabi_ui2f+0x56>
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	fbffffff 	.word	0xfbffffff

080007ec <__clzsi2>:
 80007ec:	211c      	movs	r1, #28
 80007ee:	2301      	movs	r3, #1
 80007f0:	041b      	lsls	r3, r3, #16
 80007f2:	4298      	cmp	r0, r3
 80007f4:	d301      	bcc.n	80007fa <__clzsi2+0xe>
 80007f6:	0c00      	lsrs	r0, r0, #16
 80007f8:	3910      	subs	r1, #16
 80007fa:	0a1b      	lsrs	r3, r3, #8
 80007fc:	4298      	cmp	r0, r3
 80007fe:	d301      	bcc.n	8000804 <__clzsi2+0x18>
 8000800:	0a00      	lsrs	r0, r0, #8
 8000802:	3908      	subs	r1, #8
 8000804:	091b      	lsrs	r3, r3, #4
 8000806:	4298      	cmp	r0, r3
 8000808:	d301      	bcc.n	800080e <__clzsi2+0x22>
 800080a:	0900      	lsrs	r0, r0, #4
 800080c:	3904      	subs	r1, #4
 800080e:	a202      	add	r2, pc, #8	; (adr r2, 8000818 <__clzsi2+0x2c>)
 8000810:	5c10      	ldrb	r0, [r2, r0]
 8000812:	1840      	adds	r0, r0, r1
 8000814:	4770      	bx	lr
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	02020304 	.word	0x02020304
 800081c:	01010101 	.word	0x01010101
	...

08000828 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000828:	480d      	ldr	r0, [pc, #52]	; (8000860 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800082a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800082c:	f003 fe86 	bl	800453c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000830:	480c      	ldr	r0, [pc, #48]	; (8000864 <LoopForever+0x6>)
  ldr r1, =_edata
 8000832:	490d      	ldr	r1, [pc, #52]	; (8000868 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000834:	4a0d      	ldr	r2, [pc, #52]	; (800086c <LoopForever+0xe>)
  movs r3, #0
 8000836:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000838:	e002      	b.n	8000840 <LoopCopyDataInit>

0800083a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800083a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800083c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800083e:	3304      	adds	r3, #4

08000840 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000840:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000842:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000844:	d3f9      	bcc.n	800083a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000846:	4a0a      	ldr	r2, [pc, #40]	; (8000870 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000848:	4c0a      	ldr	r4, [pc, #40]	; (8000874 <LoopForever+0x16>)
  movs r3, #0
 800084a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800084c:	e001      	b.n	8000852 <LoopFillZerobss>

0800084e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800084e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000850:	3204      	adds	r2, #4

08000852 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000852:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000854:	d3fb      	bcc.n	800084e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000856:	f005 fc23 	bl	80060a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800085a:	f000 fde5 	bl	8001428 <main>

0800085e <LoopForever>:

LoopForever:
    b LoopForever
 800085e:	e7fe      	b.n	800085e <LoopForever>
  ldr   r0, =_estack
 8000860:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000864:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000868:	20000380 	.word	0x20000380
  ldr r2, =_sidata
 800086c:	08006cd8 	.word	0x08006cd8
  ldr r2, =_sbss
 8000870:	20000380 	.word	0x20000380
  ldr r4, =_ebss
 8000874:	20000828 	.word	0x20000828

08000878 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000878:	e7fe      	b.n	8000878 <ADC1_IRQHandler>
	...

0800087c <ASPEP_TXframeProcess>:
  * @param  bufferLength Size of the packet to be sent : Header + Data
  *
  * @return Returns an ASPEP response defined in aspep.h
  */
uint8_t ASPEP_TXframeProcess(ASPEP_Handle_t *pHandle, uint8_t dataType, void *txBuffer, uint16_t bufferLength)
{
 800087c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800087e:	9301      	str	r3, [sp, #4]
  uint32_t header = *headerPtr;
 8000880:	6813      	ldr	r3, [r2, #0]
{
 8000882:	000d      	movs	r5, r1
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000884:	b2df      	uxtb	r7, r3
 8000886:	46bc      	mov	ip, r7
{
 8000888:	0011      	movs	r1, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 800088a:	4662      	mov	r2, ip
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 800088c:	4e22      	ldr	r6, [pc, #136]	; (8000918 <ASPEP_TXframeProcess+0x9c>)
{
 800088e:	0004      	movs	r4, r0
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000890:	5cb2      	ldrb	r2, [r6, r2]
  header &= 0x0fffffffU;
 8000892:	0118      	lsls	r0, r3, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000894:	0b07      	lsrs	r7, r0, #12
 8000896:	4057      	eors	r7, r2
 8000898:	b2ff      	uxtb	r7, r7
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 800089a:	5df7      	ldrb	r7, [r6, r7]
 800089c:	0d02      	lsrs	r2, r0, #20
 800089e:	4057      	eors	r7, r2
 80008a0:	b2ff      	uxtb	r7, r7
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 80008a2:	5df6      	ldrb	r6, [r6, r7]
 80008a4:	0f00      	lsrs	r0, r0, #28
 80008a6:	4070      	eors	r0, r6
 80008a8:	4e1c      	ldr	r6, [pc, #112]	; (800091c <ASPEP_TXframeProcess+0xa0>)
  *headerPtr |= (uint32_t)crc << 28;
 80008aa:	5c30      	ldrb	r0, [r6, r0]
 80008ac:	0700      	lsls	r0, r0, #28
 80008ae:	4318      	orrs	r0, r3
 80008b0:	6008      	str	r0, [r1, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b2:	b672      	cpsid	i
  {
#endif
    /* Insert CRC header in the packet to send */
    ASPEP_ComputeHeaderCRC((uint32_t *)txBuffer); //cstat !MISRAC2012-Rule-11.5
    __disable_irq(); /*TODO: Disable High frequency task is enough */
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 80008b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d114      	bne.n	80008e4 <ASPEP_TXframeProcess+0x68>
    {
      if (MCTL_SYNC == dataType)
 80008ba:	3303      	adds	r3, #3
 80008bc:	2d0a      	cmp	r5, #10
 80008be:	d10c      	bne.n	80008da <ASPEP_TXframeProcess+0x5e>
      {
        pHandle->syncBuffer.state = readLock;
 80008c0:	0020      	movs	r0, r4
 80008c2:	302e      	adds	r0, #46	; 0x2e
 80008c4:	7003      	strb	r3, [r0, #0]
        pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 80008c6:	0023      	movs	r3, r4
 80008c8:	3328      	adds	r3, #40	; 0x28
 80008ca:	6323      	str	r3, [r4, #48]	; 0x30
  __ASM volatile ("cpsie i" : : : "memory");
 80008cc:	b662      	cpsie	i
        pHandle->ctrlBuffer.state = readLock;
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
      }
      /* Enable HF task It */
      __enable_irq(); /*TODO: Enable High frequency task is enough */
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 80008ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80008d0:	9a01      	ldr	r2, [sp, #4]
 80008d2:	6960      	ldr	r0, [r4, #20]
 80008d4:	4798      	blx	r3
  uint8_t result = ASPEP_OK;
 80008d6:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
  return (result);
}
 80008d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        pHandle->ctrlBuffer.state = readLock;
 80008da:	1d60      	adds	r0, r4, #5
 80008dc:	77c3      	strb	r3, [r0, #31]
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 80008de:	0023      	movs	r3, r4
 80008e0:	3320      	adds	r3, #32
 80008e2:	e7f2      	b.n	80008ca <ASPEP_TXframeProcess+0x4e>
 80008e4:	b662      	cpsie	i
      if (MCTL_SYNC == dataType)
 80008e6:	2d0a      	cmp	r5, #10
 80008e8:	d10a      	bne.n	8000900 <ASPEP_TXframeProcess+0x84>
        if (pHandle -> syncBuffer.state != writeLock)
 80008ea:	0023      	movs	r3, r4
 80008ec:	332e      	adds	r3, #46	; 0x2e
 80008ee:	7819      	ldrb	r1, [r3, #0]
          result = ASPEP_BUFFER_ERROR;
 80008f0:	2003      	movs	r0, #3
        if (pHandle -> syncBuffer.state != writeLock)
 80008f2:	2901      	cmp	r1, #1
 80008f4:	d1f0      	bne.n	80008d8 <ASPEP_TXframeProcess+0x5c>
          pHandle->syncBuffer.state = pending;
 80008f6:	3101      	adds	r1, #1
 80008f8:	7019      	strb	r1, [r3, #0]
          pHandle->syncBuffer.length = bufferLength;
 80008fa:	9b01      	ldr	r3, [sp, #4]
 80008fc:	85a3      	strh	r3, [r4, #44]	; 0x2c
 80008fe:	e7ea      	b.n	80008d6 <ASPEP_TXframeProcess+0x5a>
  uint8_t result = ASPEP_OK;
 8000900:	2000      	movs	r0, #0
      else if(ASPEP_CTRL == dataType)
 8000902:	4285      	cmp	r5, r0
 8000904:	d1e8      	bne.n	80008d8 <ASPEP_TXframeProcess+0x5c>
        if (pHandle->ctrlBuffer.state != available)
 8000906:	3405      	adds	r4, #5
 8000908:	7fe0      	ldrb	r0, [r4, #31]
 800090a:	2800      	cmp	r0, #0
 800090c:	d102      	bne.n	8000914 <ASPEP_TXframeProcess+0x98>
          pHandle->ctrlBuffer.state = pending;
 800090e:	2302      	movs	r3, #2
 8000910:	77e3      	strb	r3, [r4, #31]
 8000912:	e7e1      	b.n	80008d8 <ASPEP_TXframeProcess+0x5c>
          result = ASPEP_BUFFER_ERROR;
 8000914:	2003      	movs	r0, #3
 8000916:	e7df      	b.n	80008d8 <ASPEP_TXframeProcess+0x5c>
 8000918:	08006124 	.word	0x08006124
 800091c:	08006114 	.word	0x08006114

08000920 <ASPEP_CheckBeacon.constprop.0>:
  uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
 8000920:	69c2      	ldr	r2, [r0, #28]
bool ASPEP_CheckBeacon (ASPEP_Handle_t *pHandle)
 8000922:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
 8000924:	4694      	mov	ip, r2
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000926:	223f      	movs	r2, #63	; 0x3f
 8000928:	7f41      	ldrb	r1, [r0, #29]
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 800092a:	4665      	mov	r5, ip
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 800092c:	4011      	ands	r1, r2
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 800092e:	4662      	mov	r2, ip
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000930:	7f04      	ldrb	r4, [r0, #28]
bool ASPEP_CheckBeacon (ASPEP_Handle_t *pHandle)
 8000932:	0003      	movs	r3, r0
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000934:	207f      	movs	r0, #127	; 0x7f
 8000936:	0b92      	lsrs	r2, r2, #14
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8000938:	0d6d      	lsrs	r5, r5, #21
 800093a:	4005      	ands	r5, r0
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 800093c:	4002      	ands	r2, r0
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800093e:	0018      	movs	r0, r3
bool ASPEP_CheckBeacon (ASPEP_Handle_t *pHandle)
 8000940:	b087      	sub	sp, #28
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8000942:	9503      	str	r5, [sp, #12]
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000944:	9202      	str	r2, [sp, #8]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000946:	3054      	adds	r0, #84	; 0x54
 8000948:	7807      	ldrb	r7, [r0, #0]
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 800094a:	09e4      	lsrs	r4, r4, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800094c:	1c25      	adds	r5, r4, #0
 800094e:	42bc      	cmp	r4, r7
 8000950:	d900      	bls.n	8000954 <ASPEP_CheckBeacon.constprop.0+0x34>
 8000952:	1c3d      	adds	r5, r7, #0
 8000954:	7005      	strb	r5, [r0, #0]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000956:	001d      	movs	r5, r3
 8000958:	3555      	adds	r5, #85	; 0x55
 800095a:	782e      	ldrb	r6, [r5, #0]
 800095c:	1c30      	adds	r0, r6, #0
 800095e:	428e      	cmp	r6, r1
 8000960:	d900      	bls.n	8000964 <ASPEP_CheckBeacon.constprop.0+0x44>
 8000962:	1c08      	adds	r0, r1, #0
 8000964:	b2c6      	uxtb	r6, r0
 8000966:	7028      	strb	r0, [r5, #0]
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000968:	0018      	movs	r0, r3
 800096a:	aa02      	add	r2, sp, #8
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 800096c:	9605      	str	r6, [sp, #20]
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 800096e:	3056      	adds	r0, #86	; 0x56
 8000970:	7815      	ldrb	r5, [r2, #0]
 8000972:	7806      	ldrb	r6, [r0, #0]
 8000974:	9a02      	ldr	r2, [sp, #8]
 8000976:	42b2      	cmp	r2, r6
 8000978:	d900      	bls.n	800097c <ASPEP_CheckBeacon.constprop.0+0x5c>
 800097a:	1c35      	adds	r5, r6, #0
 800097c:	7005      	strb	r5, [r0, #0]
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 800097e:	0018      	movs	r0, r3
 8000980:	3057      	adds	r0, #87	; 0x57
 8000982:	9001      	str	r0, [sp, #4]
 8000984:	7805      	ldrb	r5, [r0, #0]
 8000986:	9803      	ldr	r0, [sp, #12]
 8000988:	aa02      	add	r2, sp, #8
 800098a:	72d0      	strb	r0, [r2, #11]
 800098c:	42a8      	cmp	r0, r5
 800098e:	d900      	bls.n	8000992 <ASPEP_CheckBeacon.constprop.0+0x72>
 8000990:	72d5      	strb	r5, [r2, #11]
 8000992:	a802      	add	r0, sp, #8
 8000994:	7ac0      	ldrb	r0, [r0, #11]
 8000996:	9a01      	ldr	r2, [sp, #4]
 8000998:	7010      	strb	r0, [r2, #0]
    result = false;
 800099a:	2000      	movs	r0, #0
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 800099c:	42bc      	cmp	r4, r7
 800099e:	d811      	bhi.n	80009c4 <ASPEP_CheckBeacon.constprop.0+0xa4>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 80009a0:	9c05      	ldr	r4, [sp, #20]
 80009a2:	42a1      	cmp	r1, r4
 80009a4:	d80e      	bhi.n	80009c4 <ASPEP_CheckBeacon.constprop.0+0xa4>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 80009a6:	9a02      	ldr	r2, [sp, #8]
 80009a8:	42b2      	cmp	r2, r6
 80009aa:	d80b      	bhi.n	80009c4 <ASPEP_CheckBeacon.constprop.0+0xa4>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 80009ac:	9a03      	ldr	r2, [sp, #12]
 80009ae:	42aa      	cmp	r2, r5
 80009b0:	d808      	bhi.n	80009c4 <ASPEP_CheckBeacon.constprop.0+0xa4>
  MasterCapabilities.version = (uint8_t)((packetHeader &0x70U)>> 4U);           /*Bits 4 to 6*/
 80009b2:	4662      	mov	r2, ip
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 80009b4:	3358      	adds	r3, #88	; 0x58
 80009b6:	7818      	ldrb	r0, [r3, #0]
  MasterCapabilities.version = (uint8_t)((packetHeader &0x70U)>> 4U);           /*Bits 4 to 6*/
 80009b8:	0652      	lsls	r2, r2, #25
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 80009ba:	0f52      	lsrs	r2, r2, #29
 80009bc:	1a80      	subs	r0, r0, r2
 80009be:	4243      	negs	r3, r0
 80009c0:	4158      	adcs	r0, r3
 80009c2:	b2c0      	uxtb	r0, r0
}
 80009c4:	b007      	add	sp, #28
 80009c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080009c8 <ASPEP_start>:
{
 80009c8:	b510      	push	{r4, lr}
 80009ca:	0004      	movs	r4, r0
    pHandle->fASPEP_HWInit(pHandle->HWIp);
 80009cc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80009ce:	6940      	ldr	r0, [r0, #20]
 80009d0:	4798      	blx	r3
    pHandle->ASPEP_State = ASPEP_IDLE;
 80009d2:	0022      	movs	r2, r4
 80009d4:	2300      	movs	r3, #0
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 80009d6:	0021      	movs	r1, r4
    pHandle->ASPEP_State = ASPEP_IDLE;
 80009d8:	324c      	adds	r2, #76	; 0x4c
 80009da:	8013      	strh	r3, [r2, #0]
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/
 80009dc:	3a04      	subs	r2, #4
 80009de:	7013      	strb	r3, [r2, #0]
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 80009e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80009e2:	2204      	movs	r2, #4
 80009e4:	6960      	ldr	r0, [r4, #20]
 80009e6:	311c      	adds	r1, #28
 80009e8:	4798      	blx	r3
}
 80009ea:	bd10      	pop	{r4, pc}

080009ec <ASPEP_sendBeacon>:
{
 80009ec:	b510      	push	{r4, lr}
             | (((uint32_t)capabilities->version) << 4U)
 80009ee:	790b      	ldrb	r3, [r1, #4]
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 80009f0:	78ca      	ldrb	r2, [r1, #3]
             | (((uint32_t)capabilities->version) << 4U)
 80009f2:	011b      	lsls	r3, r3, #4
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 80009f4:	0552      	lsls	r2, r2, #21
 80009f6:	4313      	orrs	r3, r2
             | (((uint32_t)capabilities->DATA_CRC) << 7U)
 80009f8:	780a      	ldrb	r2, [r1, #0]
 80009fa:	01d2      	lsls	r2, r2, #7
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 80009fc:	4313      	orrs	r3, r2
             | (((uint32_t)capabilities->RX_maxSize) << 8U)
 80009fe:	784a      	ldrb	r2, [r1, #1]
 8000a00:	0212      	lsls	r2, r2, #8
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 8000a02:	4313      	orrs	r3, r2
             | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 8000a04:	788a      	ldrb	r2, [r1, #2]
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000a06:	2100      	movs	r1, #0
             | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 8000a08:	0392      	lsls	r2, r2, #14
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	2205      	movs	r2, #5
 8000a0e:	4313      	orrs	r3, r2
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000a10:	0002      	movs	r2, r0
    *packet = (BEACON
 8000a12:	6203      	str	r3, [r0, #32]
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000a14:	3220      	adds	r2, #32
 8000a16:	2304      	movs	r3, #4
 8000a18:	f7ff ff30 	bl	800087c <ASPEP_TXframeProcess>
}
 8000a1c:	bd10      	pop	{r4, pc}

08000a1e <ASPEP_sendPing>:
    uint8_t Nbit = pHandle->syncPacketCount & 0x1U; /* Keep only LSB */
 8000a1e:	0003      	movs	r3, r0
{
 8000a20:	b570      	push	{r4, r5, r6, lr}
    uint8_t Nbit = pHandle->syncPacketCount & 0x1U; /* Keep only LSB */
 8000a22:	3348      	adds	r3, #72	; 0x48
 8000a24:	781c      	ldrb	r4, [r3, #0]
                   | (uint32_t)((uint32_t)Nbit << 6U)
 8000a26:	2301      	movs	r3, #1
 8000a28:	401c      	ands	r4, r3
    uint8_t ipID = pHandle->liid & 0xFU;
 8000a2a:	0003      	movs	r3, r0
                   | (uint32_t)((uint32_t)ipID << 8U)
 8000a2c:	250f      	movs	r5, #15
    uint8_t ipID = pHandle->liid & 0xFU;
 8000a2e:	334b      	adds	r3, #75	; 0x4b
 8000a30:	781b      	ldrb	r3, [r3, #0]
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000a32:	0312      	lsls	r2, r2, #12
                   | (uint32_t)((uint32_t)ipID << 8U)
 8000a34:	402b      	ands	r3, r5
 8000a36:	021b      	lsls	r3, r3, #8
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000a38:	4313      	orrs	r3, r2
    *packet = PING | (uint32_t)((uint32_t)cBit << 4U)
 8000a3a:	010a      	lsls	r2, r1, #4
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000a3c:	4313      	orrs	r3, r2
                   | (uint32_t)((uint32_t)cBit << 5U)
 8000a3e:	0149      	lsls	r1, r1, #5
                   | (uint32_t)((uint32_t)Nbit << 6U)
 8000a40:	01a2      	lsls	r2, r4, #6
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000a42:	430b      	orrs	r3, r1
 8000a44:	4313      	orrs	r3, r2
 8000a46:	2206      	movs	r2, #6
                   | (uint32_t)((uint32_t)Nbit << 7U)
 8000a48:	01e4      	lsls	r4, r4, #7
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000a4a:	4323      	orrs	r3, r4
 8000a4c:	4313      	orrs	r3, r2
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000a4e:	0002      	movs	r2, r0
 8000a50:	2100      	movs	r1, #0
    *packet = PING | (uint32_t)((uint32_t)cBit << 4U)
 8000a52:	6203      	str	r3, [r0, #32]
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000a54:	3220      	adds	r2, #32
 8000a56:	2304      	movs	r3, #4
 8000a58:	f7ff ff10 	bl	800087c <ASPEP_TXframeProcess>
}
 8000a5c:	bd70      	pop	{r4, r5, r6, pc}

08000a5e <ASPEP_getBuffer>:
{
 8000a5e:	0003      	movs	r3, r0
 8000a60:	b510      	push	{r4, lr}
     result = false; /* Async packets are not supported */
 8000a62:	2000      	movs	r0, #0
    if (MCTL_SYNC == syncAsync)
 8000a64:	2a0a      	cmp	r2, #10
 8000a66:	d109      	bne.n	8000a7c <ASPEP_getBuffer+0x1e>
      if (pHandle->syncBuffer.state <= writeLock) /* Possible values are free or writeLock*/
 8000a68:	001a      	movs	r2, r3
 8000a6a:	322e      	adds	r2, #46	; 0x2e
 8000a6c:	7814      	ldrb	r4, [r2, #0]
 8000a6e:	2c01      	cmp	r4, #1
 8000a70:	d804      	bhi.n	8000a7c <ASPEP_getBuffer+0x1e>
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 8000a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pHandle->syncBuffer.state = writeLock;
 8000a74:	3001      	adds	r0, #1
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 8000a76:	3304      	adds	r3, #4
 8000a78:	600b      	str	r3, [r1, #0]
        pHandle->syncBuffer.state = writeLock;
 8000a7a:	7010      	strb	r0, [r2, #0]
}
 8000a7c:	bd10      	pop	{r4, pc}

08000a7e <ASPEP_sendPacket>:
{
 8000a7e:	b570      	push	{r4, r5, r6, lr}
 8000a80:	000e      	movs	r6, r1
 8000a82:	0019      	movs	r1, r3
    if (ASPEP_CONNECTED == pHandle-> ASPEP_State)
 8000a84:	0003      	movs	r3, r0
{
 8000a86:	0005      	movs	r5, r0
      result = ASPEP_NOT_CONNECTED;
 8000a88:	2002      	movs	r0, #2
    if (ASPEP_CONNECTED == pHandle-> ASPEP_State)
 8000a8a:	334c      	adds	r3, #76	; 0x4c
 8000a8c:	781b      	ldrb	r3, [r3, #0]
{
 8000a8e:	0014      	movs	r4, r2
    if (ASPEP_CONNECTED == pHandle-> ASPEP_State)
 8000a90:	4283      	cmp	r3, r0
 8000a92:	d11c      	bne.n	8000ace <ASPEP_sendPacket+0x50>
      tmpHeader = ((uint32_t)((uint32_t)txDataLengthTemp << (uint32_t)4) | (uint32_t)syncAsync);
 8000a94:	0123      	lsls	r3, r4, #4
 8000a96:	430b      	orrs	r3, r1
      *header = tmpHeader;
 8000a98:	1f32      	subs	r2, r6, #4
 8000a9a:	6013      	str	r3, [r2, #0]
      if (1U == pHandle->Capabilities.DATA_CRC)
 8000a9c:	002b      	movs	r3, r5
 8000a9e:	3354      	adds	r3, #84	; 0x54
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	2b01      	cmp	r3, #1
 8000aa4:	d106      	bne.n	8000ab4 <ASPEP_sendPacket+0x36>
        packet[txDataLengthTemp] = (uint8_t)0xCA; /* Dummy CRC */
 8000aa6:	33c9      	adds	r3, #201	; 0xc9
 8000aa8:	5533      	strb	r3, [r6, r4]
        packet[txDataLengthTemp + 1U] = (uint8_t)0xFE; /* Dummy CRC */
 8000aaa:	1936      	adds	r6, r6, r4
 8000aac:	3334      	adds	r3, #52	; 0x34
        txDataLengthTemp += (uint16_t)ASPEP_DATACRC_SIZE;
 8000aae:	1824      	adds	r4, r4, r0
        packet[txDataLengthTemp + 1U] = (uint8_t)0xFE; /* Dummy CRC */
 8000ab0:	7073      	strb	r3, [r6, #1]
        txDataLengthTemp += (uint16_t)ASPEP_DATACRC_SIZE;
 8000ab2:	b2a4      	uxth	r4, r4
      if (MCTL_SYNC == syncAsync)
 8000ab4:	290a      	cmp	r1, #10
 8000ab6:	d105      	bne.n	8000ac4 <ASPEP_sendPacket+0x46>
        if (pSupHandle->MCP_PacketAvailable)
 8000ab8:	7c2b      	ldrb	r3, [r5, #16]
          result = MCTL_SYNC_NOT_EXPECTED;
 8000aba:	2001      	movs	r0, #1
        if (pSupHandle->MCP_PacketAvailable)
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d006      	beq.n	8000ace <ASPEP_sendPacket+0x50>
          pSupHandle->MCP_PacketAvailable = false; /* CMD from controller is processed*/
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	742b      	strb	r3, [r5, #16]
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 8000ac4:	3404      	adds	r4, #4
 8000ac6:	0028      	movs	r0, r5
 8000ac8:	b2a3      	uxth	r3, r4
 8000aca:	f7ff fed7 	bl	800087c <ASPEP_TXframeProcess>
}
 8000ace:	bd70      	pop	{r4, r5, r6, pc}

08000ad0 <ASPEP_HWDataTransmittedIT>:
  * Therefore, there is no need to protect this ISR against another higher priority ISR (HF Task).
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDataTransmittedIT(ASPEP_Handle_t *pHandle)
{
 8000ad0:	b570      	push	{r4, r5, r6, lr}
  }
  else
  {
#endif
    /* First free previous readLock buffer */
    if (pHandle->ctrlBuffer.state == readLock)
 8000ad2:	1d44      	adds	r4, r0, #5
 8000ad4:	7fe2      	ldrb	r2, [r4, #31]
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	2a03      	cmp	r2, #3
 8000ada:	d110      	bne.n	8000afe <ASPEP_HWDataTransmittedIT+0x2e>
    {
      pHandle->ctrlBuffer.state = available;
 8000adc:	77e3      	strb	r3, [r4, #31]
    else /* if previous buffer was not ASPEP_CTRL, then the buffer locked is a MCTL_Buff_t */
    {
      MCTL_Buff_t *tempBuff = (MCTL_Buff_t *)pHandle->lockBuffer; //cstat !MISRAC2012-Rule-11.5
      tempBuff->state = available;
    }
    if (pHandle->syncBuffer.state == pending)
 8000ade:	0005      	movs	r5, r0
 8000ae0:	352e      	adds	r5, #46	; 0x2e
 8000ae2:	782b      	ldrb	r3, [r5, #0]
 8000ae4:	2b02      	cmp	r3, #2
 8000ae6:	d10d      	bne.n	8000b04 <ASPEP_HWDataTransmittedIT+0x34>
    {
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8000ae8:	0003      	movs	r3, r0
 8000aea:	3328      	adds	r3, #40	; 0x28
 8000aec:	6303      	str	r3, [r0, #48]	; 0x30
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 8000aee:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8000af0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000af2:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8000af4:	6940      	ldr	r0, [r0, #20]
 8000af6:	4798      	blx	r3
      pHandle->syncBuffer.state = readLock;
 8000af8:	2303      	movs	r3, #3
 8000afa:	702b      	strb	r3, [r5, #0]
      pHandle->lockBuffer = NULL;
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8000afc:	bd70      	pop	{r4, r5, r6, pc}
      tempBuff->state = available;
 8000afe:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8000b00:	7193      	strb	r3, [r2, #6]
 8000b02:	e7ec      	b.n	8000ade <ASPEP_HWDataTransmittedIT+0xe>
    else if (pHandle->ctrlBuffer.state == pending)
 8000b04:	7fe3      	ldrb	r3, [r4, #31]
 8000b06:	2b02      	cmp	r3, #2
 8000b08:	d109      	bne.n	8000b1e <ASPEP_HWDataTransmittedIT+0x4e>
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 8000b0a:	0001      	movs	r1, r0
 8000b0c:	3120      	adds	r1, #32
      pHandle->fASPEP_send(pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 8000b0e:	6c03      	ldr	r3, [r0, #64]	; 0x40
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 8000b10:	6301      	str	r1, [r0, #48]	; 0x30
      pHandle->fASPEP_send(pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 8000b12:	2204      	movs	r2, #4
 8000b14:	6940      	ldr	r0, [r0, #20]
 8000b16:	4798      	blx	r3
      pHandle->ctrlBuffer.state = readLock;
 8000b18:	2303      	movs	r3, #3
 8000b1a:	77e3      	strb	r3, [r4, #31]
 8000b1c:	e7ee      	b.n	8000afc <ASPEP_HWDataTransmittedIT+0x2c>
      pHandle->lockBuffer = NULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	6303      	str	r3, [r0, #48]	; 0x30
}
 8000b22:	e7eb      	b.n	8000afc <ASPEP_HWDataTransmittedIT+0x2c>

08000b24 <ASPEP_RXframeProcess>:
  * @param  *packetLength Length of the packet to be processed
  *
  * @return Returns the buffer of data transmitted by the MCP controller device
  */
uint8_t *ASPEP_RXframeProcess(MCTL_Handle_t *pSupHandle, uint16_t *packetLength)
{
 8000b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
    uint16_t packetNumber;
#if VALID_CRC_DATA
    bool validCRCData = true;
#endif
    *packetLength = 0;
 8000b26:	2700      	movs	r7, #0
{
 8000b28:	000b      	movs	r3, r1
    uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
 8000b2a:	69c2      	ldr	r2, [r0, #28]
    *packetLength = 0;
 8000b2c:	800f      	strh	r7, [r1, #0]
    if (pHandle->NewPacketAvailable)
 8000b2e:	0001      	movs	r1, r0
 8000b30:	3149      	adds	r1, #73	; 0x49
 8000b32:	780d      	ldrb	r5, [r1, #0]
{
 8000b34:	0004      	movs	r4, r0
    if (pHandle->NewPacketAvailable)
 8000b36:	42bd      	cmp	r5, r7
 8000b38:	d100      	bne.n	8000b3c <ASPEP_RXframeProcess+0x18>
 8000b3a:	e06d      	b.n	8000c18 <ASPEP_RXframeProcess+0xf4>
    {
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
      switch (pHandle->ASPEP_State)
 8000b3c:	0006      	movs	r6, r0
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
 8000b3e:	700f      	strb	r7, [r1, #0]
      switch (pHandle->ASPEP_State)
 8000b40:	364c      	adds	r6, #76	; 0x4c
 8000b42:	7831      	ldrb	r1, [r6, #0]
 8000b44:	2901      	cmp	r1, #1
 8000b46:	d036      	beq.n	8000bb6 <ASPEP_RXframeProcess+0x92>
 8000b48:	2902      	cmp	r1, #2
 8000b4a:	d046      	beq.n	8000bda <ASPEP_RXframeProcess+0xb6>
 8000b4c:	42b9      	cmp	r1, r7
 8000b4e:	d121      	bne.n	8000b94 <ASPEP_RXframeProcess+0x70>
      {
        case ASPEP_IDLE:
        {
          if (BEACON == pHandle->rxPacketType)
 8000b50:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8000b52:	2b05      	cmp	r3, #5
 8000b54:	d126      	bne.n	8000ba4 <ASPEP_RXframeProcess+0x80>
          {
            if (ASPEP_CheckBeacon(pHandle) == true)
 8000b56:	f7ff fee3 	bl	8000920 <ASPEP_CheckBeacon.constprop.0>
 8000b5a:	42b8      	cmp	r0, r7
 8000b5c:	d014      	beq.n	8000b88 <ASPEP_RXframeProcess+0x64>
            {
              /* Controller capabilities match performer capabilities.*/
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b5e:	0023      	movs	r3, r4
 8000b60:	3356      	adds	r3, #86	; 0x56
 8000b62:	781b      	ldrb	r3, [r3, #0]
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b64:	0022      	movs	r2, r4
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b66:	3301      	adds	r3, #1
 8000b68:	015b      	lsls	r3, r3, #5
 8000b6a:	81a3      	strh	r3, [r4, #12]
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 8000b6c:	0023      	movs	r3, r4
 8000b6e:	3357      	adds	r3, #87	; 0x57
 8000b70:	781b      	ldrb	r3, [r3, #0]
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b72:	3208      	adds	r2, #8
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 8000b74:	019b      	lsls	r3, r3, #6
 8000b76:	81e3      	strh	r3, [r4, #14]
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b78:	0023      	movs	r3, r4
 8000b7a:	3355      	adds	r3, #85	; 0x55
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	3301      	adds	r3, #1
 8000b80:	015b      	lsls	r3, r3, #5
 8000b82:	87d3      	strh	r3, [r2, #62]	; 0x3e
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8000b84:	2301      	movs	r3, #1
 8000b86:	7033      	strb	r3, [r6, #0]
            else
            {
              /* Nothing to do, controller has to send back new beacon with matching capabilities */
            }
            /* Beacon Packet must be answered*/
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 8000b88:	0021      	movs	r1, r4
 8000b8a:	0020      	movs	r0, r4
 8000b8c:	3154      	adds	r1, #84	; 0x54
 8000b8e:	f7ff ff2d 	bl	80009ec <ASPEP_sendBeacon>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 8000b92:	2700      	movs	r7, #0

        default:
          break;
      }
      /* The valid received packet is now safely consumes, we are ready to receive a new packet */
      pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000b94:	0021      	movs	r1, r4
 8000b96:	2204      	movs	r2, #4
 8000b98:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000b9a:	6960      	ldr	r0, [r4, #20]
 8000b9c:	311c      	adds	r1, #28
 8000b9e:	4798      	blx	r3
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
  return (result);
}
 8000ba0:	0038      	movs	r0, r7
 8000ba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          else if (PING == pHandle->rxPacketType)
 8000ba4:	2b06      	cmp	r3, #6
 8000ba6:	d1f5      	bne.n	8000b94 <ASPEP_RXframeProcess+0x70>
            ASPEP_sendPing(pHandle, ASPEP_PING_RESET, packetNumber);
 8000ba8:	0039      	movs	r1, r7
            packetNumber = (uint16_t)((packetHeader & 0x0FFFF000U) >> (uint16_t)12U);
 8000baa:	0b12      	lsrs	r2, r2, #12
            ASPEP_sendPing(pHandle, ASPEP_PING_RESET, packetNumber);
 8000bac:	b292      	uxth	r2, r2
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8000bae:	0020      	movs	r0, r4
 8000bb0:	f7ff ff35 	bl	8000a1e <ASPEP_sendPing>
 8000bb4:	e7ee      	b.n	8000b94 <ASPEP_RXframeProcess+0x70>
          if (BEACON == pHandle->rxPacketType)
 8000bb6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8000bb8:	2b05      	cmp	r3, #5
 8000bba:	d105      	bne.n	8000bc8 <ASPEP_RXframeProcess+0xa4>
            if (ASPEP_CheckBeacon(pHandle) == false)
 8000bbc:	f7ff feb0 	bl	8000920 <ASPEP_CheckBeacon.constprop.0>
 8000bc0:	2800      	cmp	r0, #0
 8000bc2:	d1e1      	bne.n	8000b88 <ASPEP_RXframeProcess+0x64>
              pHandle->ASPEP_State = ASPEP_IDLE;
 8000bc4:	7030      	strb	r0, [r6, #0]
 8000bc6:	e7df      	b.n	8000b88 <ASPEP_RXframeProcess+0x64>
          else if (PING == pHandle->rxPacketType)
 8000bc8:	2b06      	cmp	r3, #6
 8000bca:	d1e3      	bne.n	8000b94 <ASPEP_RXframeProcess+0x70>
            packetNumber = (uint16_t)((packetHeader & 0x0FFFF000U) >> (uint16_t)12U);
 8000bcc:	0b12      	lsrs	r2, r2, #12
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8000bce:	b292      	uxth	r2, r2
 8000bd0:	f7ff ff25 	bl	8000a1e <ASPEP_sendPing>
            pHandle->ASPEP_State = ASPEP_CONNECTED;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	7033      	strb	r3, [r6, #0]
 8000bd8:	e7dc      	b.n	8000b94 <ASPEP_RXframeProcess+0x70>
          if (BEACON == pHandle->rxPacketType)
 8000bda:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8000bdc:	2a05      	cmp	r2, #5
 8000bde:	d108      	bne.n	8000bf2 <ASPEP_RXframeProcess+0xce>
            if (ASPEP_CheckBeacon(pHandle) == false)
 8000be0:	f7ff fe9e 	bl	8000920 <ASPEP_CheckBeacon.constprop.0>
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 8000be4:	0021      	movs	r1, r4
 8000be6:	7030      	strb	r0, [r6, #0]
 8000be8:	3154      	adds	r1, #84	; 0x54
 8000bea:	0020      	movs	r0, r4
 8000bec:	f7ff fefe 	bl	80009ec <ASPEP_sendBeacon>
 8000bf0:	e7d0      	b.n	8000b94 <ASPEP_RXframeProcess+0x70>
          else if (PING == pHandle->rxPacketType)
 8000bf2:	2a06      	cmp	r2, #6
 8000bf4:	d102      	bne.n	8000bfc <ASPEP_RXframeProcess+0xd8>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	7f42      	ldrb	r2, [r0, #29]
 8000bfa:	e7d8      	b.n	8000bae <ASPEP_RXframeProcess+0x8a>
          else if (DATA_PACKET == pHandle->rxPacketType)
 8000bfc:	2a09      	cmp	r2, #9
 8000bfe:	d1c9      	bne.n	8000b94 <ASPEP_RXframeProcess+0x70>
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 8000c00:	0001      	movs	r1, r0
 8000c02:	3148      	adds	r1, #72	; 0x48
 8000c04:	780a      	ldrb	r2, [r1, #0]
 8000c06:	3201      	adds	r2, #1
 8000c08:	700a      	strb	r2, [r1, #0]
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	7402      	strb	r2, [r0, #16]
              *packetLength = pHandle->rxLength;
 8000c0e:	1d82      	adds	r2, r0, #6
 8000c10:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
              result = pHandle->rxBuffer;
 8000c12:	6987      	ldr	r7, [r0, #24]
              *packetLength = pHandle->rxLength;
 8000c14:	801a      	strh	r2, [r3, #0]
              result = pHandle->rxBuffer;
 8000c16:	e7bd      	b.n	8000b94 <ASPEP_RXframeProcess+0x70>
    else if (pHandle->badPacketFlag > ASPEP_OK)
 8000c18:	0006      	movs	r6, r0
 8000c1a:	364a      	adds	r6, #74	; 0x4a
 8000c1c:	7833      	ldrb	r3, [r6, #0]
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 8000c1e:	002f      	movs	r7, r5
    else if (pHandle->badPacketFlag > ASPEP_OK)
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d0bd      	beq.n	8000ba0 <ASPEP_RXframeProcess+0x7c>
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 8000c24:	021a      	lsls	r2, r3, #8
 8000c26:	041b      	lsls	r3, r3, #16
 8000c28:	431a      	orrs	r2, r3
 8000c2a:	230f      	movs	r3, #15
 8000c2c:	4313      	orrs	r3, r2
  (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000c2e:	0002      	movs	r2, r0
 8000c30:	0029      	movs	r1, r5
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 8000c32:	6203      	str	r3, [r0, #32]
  (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000c34:	3220      	adds	r2, #32
 8000c36:	2304      	movs	r3, #4
 8000c38:	f7ff fe20 	bl	800087c <ASPEP_TXframeProcess>
      pHandle->badPacketFlag = ASPEP_OK;
 8000c3c:	7035      	strb	r5, [r6, #0]
      pHandle->fASPEP_HWSync(pHandle->HWIp);
 8000c3e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000c40:	6960      	ldr	r0, [r4, #20]
 8000c42:	4798      	blx	r3
 8000c44:	e7ac      	b.n	8000ba0 <ASPEP_RXframeProcess+0x7c>
	...

08000c48 <ASPEP_HWDataReceivedIT>:
  * If the packet received contains an error in the header, the HW IP will be re-synchronised first, and DMA will be configured after.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDataReceivedIT(ASPEP_Handle_t *pHandle)
{
 8000c48:	b570      	push	{r4, r5, r6, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    switch (pHandle->ASPEP_TL_State)
 8000c4a:	0004      	movs	r4, r0
 8000c4c:	344d      	adds	r4, #77	; 0x4d
 8000c4e:	7823      	ldrb	r3, [r4, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d002      	beq.n	8000c5a <ASPEP_HWDataReceivedIT+0x12>
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d03d      	beq.n	8000cd4 <ASPEP_HWDataReceivedIT+0x8c>
        break;
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8000c58:	bd70      	pop	{r4, r5, r6, pc}
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 8000c5a:	69c2      	ldr	r2, [r0, #28]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000c5c:	4b1f      	ldr	r3, [pc, #124]	; (8000cdc <ASPEP_HWDataReceivedIT+0x94>)
 8000c5e:	b2d1      	uxtb	r1, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000c60:	5c59      	ldrb	r1, [r3, r1]
 8000c62:	0a15      	lsrs	r5, r2, #8
 8000c64:	4069      	eors	r1, r5
 8000c66:	b2c9      	uxtb	r1, r1
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000c68:	5c59      	ldrb	r1, [r3, r1]
 8000c6a:	0c15      	lsrs	r5, r2, #16
 8000c6c:	4069      	eors	r1, r5
 8000c6e:	b2c9      	uxtb	r1, r1
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 24U) & 0xffU)];
 8000c70:	5c59      	ldrb	r1, [r3, r1]
 8000c72:	0e12      	lsrs	r2, r2, #24
 8000c74:	404a      	eors	r2, r1
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 8000c76:	5c9b      	ldrb	r3, [r3, r2]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d128      	bne.n	8000cce <ASPEP_HWDataReceivedIT+0x86>
          pHandle->rxPacketType = (ASPEP_packetType)(((uint32_t)pHandle->rxHeader[0]) & ID_MASK);
 8000c7c:	220f      	movs	r2, #15
 8000c7e:	7f03      	ldrb	r3, [r0, #28]
 8000c80:	4013      	ands	r3, r2
 8000c82:	6503      	str	r3, [r0, #80]	; 0x50
          switch (pHandle->rxPacketType)
 8000c84:	2b06      	cmp	r3, #6
 8000c86:	d804      	bhi.n	8000c92 <ASPEP_HWDataReceivedIT+0x4a>
 8000c88:	2b04      	cmp	r3, #4
 8000c8a:	d91e      	bls.n	8000cca <ASPEP_HWDataReceivedIT+0x82>
              pHandle->NewPacketAvailable = true;
 8000c8c:	3049      	adds	r0, #73	; 0x49
              pHandle->badPacketFlag = ASPEP_BAD_PACKET_TYPE;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e019      	b.n	8000cc6 <ASPEP_HWDataReceivedIT+0x7e>
 8000c92:	2b09      	cmp	r3, #9
 8000c94:	d119      	bne.n	8000cca <ASPEP_HWDataReceivedIT+0x82>
              pHandle->rxLength = (uint16_t)((*((uint16_t *)pHandle->rxHeader) & 0x1FFF0U) >> (uint16_t)4);
 8000c96:	8b82      	ldrh	r2, [r0, #28]
 8000c98:	1d83      	adds	r3, r0, #6
 8000c9a:	0912      	lsrs	r2, r2, #4
 8000c9c:	87da      	strh	r2, [r3, #62]	; 0x3e
              if (0U == pHandle->rxLength) /* data packet with length 0 is a valid packet */
 8000c9e:	d0f5      	beq.n	8000c8c <ASPEP_HWDataReceivedIT+0x44>
              else if (pHandle->rxLength <= pHandle->maxRXPayload)
 8000ca0:	0003      	movs	r3, r0
 8000ca2:	3308      	adds	r3, #8
 8000ca4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d30b      	bcc.n	8000cc2 <ASPEP_HWDataReceivedIT+0x7a>
                                        (pHandle->rxLength + ((uint16_t)ASPEP_DATACRC_SIZE * (uint16_t)pHandle->Capabilities.DATA_CRC)));
 8000caa:	0003      	movs	r3, r0
 8000cac:	3354      	adds	r3, #84	; 0x54
                pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxBuffer,  /* need to read + 2 bytes CRC*/
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	6981      	ldr	r1, [r0, #24]
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	18d2      	adds	r2, r2, r3
 8000cb6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8000cb8:	6940      	ldr	r0, [r0, #20]
 8000cba:	4798      	blx	r3
                pHandle->ASPEP_TL_State = WAITING_PAYLOAD;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	7023      	strb	r3, [r4, #0]
 8000cc0:	e7ca      	b.n	8000c58 <ASPEP_HWDataReceivedIT+0x10>
                pHandle->badPacketFlag = ASPEP_BAD_PACKET_SIZE;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	304a      	adds	r0, #74	; 0x4a
        pHandle->NewPacketAvailable = true;
 8000cc6:	7003      	strb	r3, [r0, #0]
}
 8000cc8:	e7c6      	b.n	8000c58 <ASPEP_HWDataReceivedIT+0x10>
              pHandle->badPacketFlag = ASPEP_BAD_PACKET_TYPE;
 8000cca:	304a      	adds	r0, #74	; 0x4a
 8000ccc:	e7df      	b.n	8000c8e <ASPEP_HWDataReceivedIT+0x46>
          pHandle->badPacketFlag = ASPEP_BAD_CRC_HEADER;
 8000cce:	2304      	movs	r3, #4
 8000cd0:	304a      	adds	r0, #74	; 0x4a
 8000cd2:	e7f8      	b.n	8000cc6 <ASPEP_HWDataReceivedIT+0x7e>
        pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000cd4:	2200      	movs	r2, #0
        pHandle->NewPacketAvailable = true;
 8000cd6:	3049      	adds	r0, #73	; 0x49
        pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000cd8:	7022      	strb	r2, [r4, #0]
        pHandle->NewPacketAvailable = true;
 8000cda:	e7f4      	b.n	8000cc6 <ASPEP_HWDataReceivedIT+0x7e>
 8000cdc:	08006124 	.word	0x08006124

08000ce0 <ASPEP_HWDMAReset>:
  {
#endif
    /* We must reset the RX state machine to be sure to not be in Waiting packet state */
    /* Otherwise the arrival of a new packet will trigger a NewPacketAvailable despite */
    /* the fact that bytes have been lost because of overrun (debugger paused for instance) */
    pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000ce0:	0003      	movs	r3, r0
 8000ce2:	2200      	movs	r2, #0
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000ce4:	0001      	movs	r1, r0
{
 8000ce6:	b510      	push	{r4, lr}
    pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000ce8:	334d      	adds	r3, #77	; 0x4d
 8000cea:	701a      	strb	r2, [r3, #0]
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000cec:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8000cee:	311c      	adds	r1, #28
 8000cf0:	6940      	ldr	r0, [r0, #20]
 8000cf2:	3204      	adds	r2, #4
 8000cf4:	4798      	blx	r3
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8000cf6:	bd10      	pop	{r4, pc}

08000cf8 <HALL_Init_Electrical_Angle>:
  *         way the position of the rotor (+/- 30ï¿½). Electrical angle is then
  *         initialized.
  * @param  pHandle: handler of the current instance of the hall_speed_pos_fdbk component
  */
static void HALL_Init_Electrical_Angle(HALL_Handle_t *pHandle)
{
 8000cf8:	0003      	movs	r3, r0
 8000cfa:	b5f0      	push	{r4, r5, r6, r7, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    if (DEGREES_120 == pHandle->SensorPlacement)
 8000cfc:	1c5f      	adds	r7, r3, #1
 8000cfe:	7fff      	ldrb	r7, [r7, #31]
    {
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
                                      | (LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) << 1U)
 8000d00:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8000d02:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 8000d04:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8000d06:	6c46      	ldr	r6, [r0, #68]	; 0x44
                                      | LL_GPIO_IsInputPinSet(pHandle->H1Port, pHandle->H1Pin));
 8000d08:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8000d0a:	6b00      	ldr	r0, [r0, #48]	; 0x30
    if (DEGREES_120 == pHandle->SensorPlacement)
 8000d0c:	2f00      	cmp	r7, #0
 8000d0e:	d11e      	bne.n	8000d4e <HALL_Init_Electrical_Angle+0x56>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8000d10:	6909      	ldr	r1, [r1, #16]
 8000d12:	6912      	ldr	r2, [r2, #16]
 8000d14:	4031      	ands	r1, r6
 8000d16:	4022      	ands	r2, r4
 8000d18:	1b89      	subs	r1, r1, r6
 8000d1a:	1b12      	subs	r2, r2, r4
 8000d1c:	424e      	negs	r6, r1
 8000d1e:	4171      	adcs	r1, r6
 8000d20:	4254      	negs	r4, r2
 8000d22:	4162      	adcs	r2, r4
 8000d24:	6900      	ldr	r0, [r0, #16]
                                      | (LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) << 1U)
 8000d26:	0052      	lsls	r2, r2, #1
 8000d28:	4028      	ands	r0, r5
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 8000d2a:	0089      	lsls	r1, r1, #2
 8000d2c:	1b40      	subs	r0, r0, r5
                                      | (LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) << 1U)
 8000d2e:	4311      	orrs	r1, r2
 8000d30:	4242      	negs	r2, r0
 8000d32:	4150      	adcs	r0, r2
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 8000d34:	4308      	orrs	r0, r1
 8000d36:	001a      	movs	r2, r3
 8000d38:	32aa      	adds	r2, #170	; 0xaa
 8000d3a:	7010      	strb	r0, [r2, #0]
      pHandle->HallState  = (uint8_t)(((LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) ^ 1U) << 2U)
                                      | (LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 1U)
                                      | LL_GPIO_IsInputPinSet(pHandle->H1Port, pHandle->H1Pin));
    }

    switch (pHandle->HallState)
 8000d3c:	3801      	subs	r0, #1
 8000d3e:	2805      	cmp	r0, #5
 8000d40:	d830      	bhi.n	8000da4 <HALL_Init_Electrical_Angle+0xac>
 8000d42:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8000d44:	f7ff f9ea 	bl	800011c <__gnu_thumb1_case_uqi>
 8000d48:	2c262824 	.word	0x2c262824
 8000d4c:	2a19      	.short	0x2a19
 8000d4e:	6912      	ldr	r2, [r2, #16]
 8000d50:	6909      	ldr	r1, [r1, #16]
 8000d52:	6900      	ldr	r0, [r0, #16]
 8000d54:	4031      	ands	r1, r6
 8000d56:	4028      	ands	r0, r5
 8000d58:	1b89      	subs	r1, r1, r6
 8000d5a:	424e      	negs	r6, r1
 8000d5c:	4171      	adcs	r1, r6
 8000d5e:	1b40      	subs	r0, r0, r5
 8000d60:	4245      	negs	r5, r0
 8000d62:	4168      	adcs	r0, r5
 8000d64:	4022      	ands	r2, r4
                                      | (LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 1U)
 8000d66:	0049      	lsls	r1, r1, #1
 8000d68:	1b12      	subs	r2, r2, r4
      pHandle->HallState  = (uint8_t)(((LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) ^ 1U) << 2U)
 8000d6a:	4308      	orrs	r0, r1
 8000d6c:	4251      	negs	r1, r2
 8000d6e:	414a      	adcs	r2, r1
 8000d70:	2104      	movs	r1, #4
 8000d72:	0092      	lsls	r2, r2, #2
 8000d74:	404a      	eors	r2, r1
 8000d76:	4310      	orrs	r0, r2
 8000d78:	e7dd      	b.n	8000d36 <HALL_Init_Electrical_Angle+0x3e>
    {
      case STATE_5:
      {
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift + (S16_60_PHASE_SHIFT / 2));
 8000d7a:	490d      	ldr	r1, [pc, #52]	; (8000db0 <HALL_Init_Electrical_Angle+0xb8>)
        break;
      }

      case STATE_1:
      {
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift + S16_60_PHASE_SHIFT + (S16_60_PHASE_SHIFT / 2));
 8000d7c:	1852      	adds	r2, r2, r1
 8000d7e:	809a      	strh	r2, [r3, #4]
    }
    /* Reset incremental value */
    pHandle->IncrementElAngle = 0;

    /* Initialize the measured angle */
    pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8000d80:	001a      	movs	r2, r3
 8000d82:	8899      	ldrh	r1, [r3, #4]
 8000d84:	32ae      	adds	r2, #174	; 0xae
 8000d86:	8011      	strh	r1, [r2, #0]
    pHandle->IncrementElAngle = 0;
 8000d88:	2200      	movs	r2, #0
 8000d8a:	33b0      	adds	r3, #176	; 0xb0
 8000d8c:	601a      	str	r2, [r3, #0]
    pHandle->CompSpeed = 0;

#ifdef NULL_PTR_CHECK_HALL_SPD_POS_FDB
  }
#endif
}
 8000d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift + S16_60_PHASE_SHIFT + (S16_60_PHASE_SHIFT / 2));
 8000d90:	4908      	ldr	r1, [pc, #32]	; (8000db4 <HALL_Init_Electrical_Angle+0xbc>)
 8000d92:	e7f3      	b.n	8000d7c <HALL_Init_Electrical_Angle+0x84>
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT + (S16_60_PHASE_SHIFT / 2));
 8000d94:	4908      	ldr	r1, [pc, #32]	; (8000db8 <HALL_Init_Electrical_Angle+0xc0>)
 8000d96:	e7f1      	b.n	8000d7c <HALL_Init_Electrical_Angle+0x84>
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift - S16_120_PHASE_SHIFT - (S16_60_PHASE_SHIFT / 2));
 8000d98:	4908      	ldr	r1, [pc, #32]	; (8000dbc <HALL_Init_Electrical_Angle+0xc4>)
 8000d9a:	e7ef      	b.n	8000d7c <HALL_Init_Electrical_Angle+0x84>
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift - S16_60_PHASE_SHIFT - (S16_60_PHASE_SHIFT / 2));
 8000d9c:	4908      	ldr	r1, [pc, #32]	; (8000dc0 <HALL_Init_Electrical_Angle+0xc8>)
 8000d9e:	e7ed      	b.n	8000d7c <HALL_Init_Electrical_Angle+0x84>
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift - (S16_60_PHASE_SHIFT / 2));
 8000da0:	4908      	ldr	r1, [pc, #32]	; (8000dc4 <HALL_Init_Electrical_Angle+0xcc>)
 8000da2:	e7eb      	b.n	8000d7c <HALL_Init_Electrical_Angle+0x84>
        pHandle->SensorIsReliable = false;
 8000da4:	001a      	movs	r2, r3
 8000da6:	2100      	movs	r1, #0
 8000da8:	324c      	adds	r2, #76	; 0x4c
 8000daa:	7011      	strb	r1, [r2, #0]
        break;
 8000dac:	e7e8      	b.n	8000d80 <HALL_Init_Electrical_Angle+0x88>
 8000dae:	46c0      	nop			; (mov r8, r8)
 8000db0:	00001555 	.word	0x00001555
 8000db4:	00003fff 	.word	0x00003fff
 8000db8:	00006aaa 	.word	0x00006aaa
 8000dbc:	ffff9556 	.word	0xffff9556
 8000dc0:	ffffc001 	.word	0xffffc001
 8000dc4:	ffffeaab 	.word	0xffffeaab

08000dc8 <HALL_Init>:
{
 8000dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit * pHandle->_Super.bElToMecRatio;
 8000dca:	7842      	ldrb	r2, [r0, #1]
    hMaxReliableElSpeedUnit *= 2U;
 8000dcc:	8a83      	ldrh	r3, [r0, #20]
{
 8000dce:	b085      	sub	sp, #20
    hMaxReliableElSpeedUnit *= 2U;
 8000dd0:	4353      	muls	r3, r2
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	b29b      	uxth	r3, r3
    uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit * pHandle->_Super.bElToMecRatio;
 8000dd6:	8ac1      	ldrh	r1, [r0, #22]
    hMaxReliableElSpeedUnit *= 2U;
 8000dd8:	9300      	str	r3, [sp, #0]
    pHandle->OvfFreq = (uint16_t)(pHandle->TIMClockFreq / 65536U);
 8000dda:	0003      	movs	r3, r0
    uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit * pHandle->_Super.bElToMecRatio;
 8000ddc:	4351      	muls	r1, r2
    pHandle->OvfFreq = (uint16_t)(pHandle->TIMClockFreq / 65536U);
 8000dde:	6a87      	ldr	r7, [r0, #40]	; 0x28
 8000de0:	33c6      	adds	r3, #198	; 0xc6
 8000de2:	0c3e      	lsrs	r6, r7, #16
    uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit * pHandle->_Super.bElToMecRatio;
 8000de4:	b289      	uxth	r1, r1
    TIM_TypeDef *TIMx = pHandle->TIMx;
 8000de6:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
{
 8000de8:	0004      	movs	r4, r0
    pHandle->OvfFreq = (uint16_t)(pHandle->TIMClockFreq / 65536U);
 8000dea:	801e      	strh	r6, [r3, #0]
      pHandle->HallTimeout = 150U;
 8000dec:	2096      	movs	r0, #150	; 0x96
    if (0U == hMinReliableElSpeedUnit)
 8000dee:	2903      	cmp	r1, #3
 8000df0:	d906      	bls.n	8000e00 <HALL_Init+0x38>
      pHandle->HallTimeout = (1000U * (uint16_t)SPEED_UNIT) / (6U * hMinReliableElSpeedUnit);
 8000df2:	088b      	lsrs	r3, r1, #2
 8000df4:	2106      	movs	r1, #6
 8000df6:	4839      	ldr	r0, [pc, #228]	; (8000edc <HALL_Init+0x114>)
 8000df8:	4359      	muls	r1, r3
 8000dfa:	f7ff f999 	bl	8000130 <__udivsi3>
 8000dfe:	b280      	uxth	r0, r0
 8000e00:	0023      	movs	r3, r4
    pHandle->HALLMaxRatio = (pHandle->HallTimeout * pHandle->OvfFreq) / 1000U ;
 8000e02:	21fa      	movs	r1, #250	; 0xfa
 8000e04:	33c4      	adds	r3, #196	; 0xc4
 8000e06:	8018      	strh	r0, [r3, #0]
 8000e08:	0089      	lsls	r1, r1, #2
 8000e0a:	4370      	muls	r0, r6
 8000e0c:	f7ff f990 	bl	8000130 <__udivsi3>
 8000e10:	0023      	movs	r3, r4
 8000e12:	33b4      	adds	r3, #180	; 0xb4
 8000e14:	8018      	strh	r0, [r3, #0]
    pHandle->MaxPeriod = pHandle->HALLMaxRatio * 65536UL;
 8000e16:	b283      	uxth	r3, r0
 8000e18:	9302      	str	r3, [sp, #8]
 8000e1a:	0026      	movs	r6, r4
    pHandle->SatSpeed = hMaxReliableElSpeedUnit;
 8000e1c:	0023      	movs	r3, r4
 8000e1e:	9a00      	ldr	r2, [sp, #0]
 8000e20:	33b6      	adds	r3, #182	; 0xb6
    pHandle->MaxPeriod = pHandle->HALLMaxRatio * 65536UL;
 8000e22:	0400      	lsls	r0, r0, #16
 8000e24:	36bc      	adds	r6, #188	; 0xbc
 8000e26:	6030      	str	r0, [r6, #0]
    pHandle->PseudoFreqConv = ((pHandle->TIMClockFreq / 6U) / pHandle->_Super.hMeasurementFrequency)
 8000e28:	2106      	movs	r1, #6
    pHandle->SatSpeed = hMaxReliableElSpeedUnit;
 8000e2a:	801a      	strh	r2, [r3, #0]
    pHandle->PseudoFreqConv = ((pHandle->TIMClockFreq / 6U) / pHandle->_Super.hMeasurementFrequency)
 8000e2c:	0038      	movs	r0, r7
 8000e2e:	f7ff f97f 	bl	8000130 <__udivsi3>
 8000e32:	8b63      	ldrh	r3, [r4, #26]
 8000e34:	0007      	movs	r7, r0
 8000e36:	9301      	str	r3, [sp, #4]
 8000e38:	0023      	movs	r3, r4
 8000e3a:	9901      	ldr	r1, [sp, #4]
 8000e3c:	33b8      	adds	r3, #184	; 0xb8
 8000e3e:	9303      	str	r3, [sp, #12]
 8000e40:	f7ff f976 	bl	8000130 <__udivsi3>
                              * pHandle->_Super.DPPConvFactor;
 8000e44:	69e3      	ldr	r3, [r4, #28]
    pHandle->PseudoFreqConv = ((pHandle->TIMClockFreq / 6U) / pHandle->_Super.hMeasurementFrequency)
 8000e46:	9a03      	ldr	r2, [sp, #12]
                              * pHandle->_Super.DPPConvFactor;
 8000e48:	4343      	muls	r3, r0
      pHandle->MinPeriod = ((uint32_t)SPEED_UNIT * (pHandle->TIMClockFreq / 6UL));
 8000e4a:	200a      	movs	r0, #10
    pHandle->PseudoFreqConv = ((pHandle->TIMClockFreq / 6U) / pHandle->_Super.hMeasurementFrequency)
 8000e4c:	6013      	str	r3, [r2, #0]
    if (0U == hMaxReliableElSpeedUnit)
 8000e4e:	9b00      	ldr	r3, [sp, #0]
      pHandle->MinPeriod = ((uint32_t)SPEED_UNIT * (pHandle->TIMClockFreq / 6UL));
 8000e50:	4378      	muls	r0, r7
    if (0U == hMaxReliableElSpeedUnit)
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d002      	beq.n	8000e5c <HALL_Init+0x94>
      pHandle->MinPeriod = (((uint32_t)SPEED_UNIT * (pHandle->TIMClockFreq / 6UL)) / hMaxReliableElSpeedUnit);
 8000e56:	0019      	movs	r1, r3
 8000e58:	f7ff f96a 	bl	8000130 <__udivsi3>
 8000e5c:	0023      	movs	r3, r4
 8000e5e:	33c0      	adds	r3, #192	; 0xc0
 8000e60:	6018      	str	r0, [r3, #0]
    pHandle->PWMNbrPSamplingFreq = ((pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8000e62:	7a98      	ldrb	r0, [r3, #10]
 8000e64:	9b01      	ldr	r3, [sp, #4]
                                    pHandle->SpeedSamplingFreqHz) - 1U;
 8000e66:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    pHandle->PWMNbrPSamplingFreq = ((pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8000e68:	4343      	muls	r3, r0
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	f7ff f9ea 	bl	8000244 <__divsi3>
 8000e70:	0023      	movs	r3, r4
                                    pHandle->SpeedSamplingFreqHz) - 1U;
 8000e72:	3801      	subs	r0, #1
    pHandle->PWMNbrPSamplingFreq = ((pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8000e74:	33c8      	adds	r3, #200	; 0xc8
    pHandle->SensorIsReliable = true;
 8000e76:	0022      	movs	r2, r4
    pHandle->PWMNbrPSamplingFreq = ((pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8000e78:	8018      	strh	r0, [r3, #0]
    pHandle->SensorIsReliable = true;
 8000e7a:	2301      	movs	r3, #1
  */
__STATIC_INLINE void LL_TIM_IC_SetFilter(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICFilter)
{
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8000e7c:	20f0      	movs	r0, #240	; 0xf0
 8000e7e:	324c      	adds	r2, #76	; 0x4c
 8000e80:	7013      	strb	r3, [r2, #0]
    LL_TIM_IC_SetFilter(TIMx, LL_TIM_CHANNEL_CH1, (uint32_t)(pHandle->ICx_Filter) << 20U);
 8000e82:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000e84:	69a9      	ldr	r1, [r5, #24]
 8000e86:	0512      	lsls	r2, r2, #20
 8000e88:	4381      	bics	r1, r0
 8000e8a:	0c12      	lsrs	r2, r2, #16
 8000e8c:	430a      	orrs	r2, r1
    WRITE_REG(TIMx->SR, 0);
 8000e8e:	2100      	movs	r1, #0
 8000e90:	61aa      	str	r2, [r5, #24]
  WRITE_REG(TIMx->PSC, Prescaler);
 8000e92:	9a02      	ldr	r2, [sp, #8]
  MODIFY_REG(TIMx->CR1, TIM_CR1_URS, UpdateSource);
 8000e94:	38ec      	subs	r0, #236	; 0xec
  WRITE_REG(TIMx->PSC, Prescaler);
 8000e96:	62aa      	str	r2, [r5, #40]	; 0x28
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8000e98:	696a      	ldr	r2, [r5, #20]
 8000e9a:	431a      	orrs	r2, r3
 8000e9c:	616a      	str	r2, [r5, #20]
 8000e9e:	6129      	str	r1, [r5, #16]
  MODIFY_REG(TIMx->CR1, TIM_CR1_URS, UpdateSource);
 8000ea0:	682a      	ldr	r2, [r5, #0]
 8000ea2:	4302      	orrs	r2, r0
 8000ea4:	602a      	str	r2, [r5, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8000ea6:	2202      	movs	r2, #2
 8000ea8:	68e8      	ldr	r0, [r5, #12]
 8000eaa:	4302      	orrs	r2, r0
 8000eac:	60ea      	str	r2, [r5, #12]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8000eae:	68ea      	ldr	r2, [r5, #12]
 8000eb0:	431a      	orrs	r2, r3
 8000eb2:	60ea      	str	r2, [r5, #12]
  WRITE_REG(TIMx->CNT, Counter);
 8000eb4:	6269      	str	r1, [r5, #36]	; 0x24
  SET_BIT(TIMx->CCER, Channels);
 8000eb6:	6a2a      	ldr	r2, [r5, #32]
 8000eb8:	431a      	orrs	r2, r3
 8000eba:	622a      	str	r2, [r5, #32]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000ebc:	682a      	ldr	r2, [r5, #0]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	602b      	str	r3, [r5, #0]
    bSpeedBufferSize = pHandle->SpeedBufferSize;
 8000ec2:	1de3      	adds	r3, r4, #7
 8000ec4:	7fdb      	ldrb	r3, [r3, #31]
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	18e3      	adds	r3, r4, r3
    for (bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++)
 8000eca:	429c      	cmp	r4, r3
 8000ecc:	d101      	bne.n	8000ed2 <HALL_Init+0x10a>
}
 8000ece:	b005      	add	sp, #20
 8000ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHandle->SensorPeriod[bIndex]  = (int32_t)pHandle->MaxPeriod;
 8000ed2:	6832      	ldr	r2, [r6, #0]
 8000ed4:	3404      	adds	r4, #4
 8000ed6:	6522      	str	r2, [r4, #80]	; 0x50
    for (bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++)
 8000ed8:	e7f7      	b.n	8000eca <HALL_Init+0x102>
 8000eda:	46c0      	nop			; (mov r8, r8)
 8000edc:	00002710 	.word	0x00002710

08000ee0 <HALL_Clear>:
{
 8000ee0:	b570      	push	{r4, r5, r6, lr}
  CLEAR_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8000ee2:	2402      	movs	r4, #2
    TIM_TypeDef *TIMx = pHandle->TIMx;
 8000ee4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    pHandle->RatioDec = false;
 8000ee6:	0001      	movs	r1, r0
 8000ee8:	68d3      	ldr	r3, [r2, #12]
    pHandle->SensorIsReliable = true;
 8000eea:	0005      	movs	r5, r0
 8000eec:	43a3      	bics	r3, r4
 8000eee:	60d3      	str	r3, [r2, #12]
    pHandle->RatioDec = false;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	314d      	adds	r1, #77	; 0x4d
 8000ef4:	700b      	strb	r3, [r1, #0]
    pHandle->RatioInc = false;
 8000ef6:	704b      	strb	r3, [r1, #1]
    pHandle->SensorIsReliable = true;
 8000ef8:	2101      	movs	r1, #1
 8000efa:	354c      	adds	r5, #76	; 0x4c
 8000efc:	7029      	strb	r1, [r5, #0]
    pHandle->_Super.hMecAccelUnitP = 0;
 8000efe:	8243      	strh	r3, [r0, #18]
    pHandle->FirstCapt = 0U;
 8000f00:	70eb      	strb	r3, [r5, #3]
    pHandle->BufferFilled = 0U;
 8000f02:	712b      	strb	r3, [r5, #4]
    pHandle->OVFCounter = 0U;
 8000f04:	716b      	strb	r3, [r5, #5]
    pHandle->CompSpeed = 0;
 8000f06:	3566      	adds	r5, #102	; 0x66
 8000f08:	802b      	strh	r3, [r5, #0]
    pHandle->Direction = POSITIVE;
 8000f0a:	3d0c      	subs	r5, #12
 8000f0c:	7029      	strb	r1, [r5, #0]
    pHandle->SpeedFIFOIdx = 0U;
 8000f0e:	3d0a      	subs	r5, #10
 8000f10:	702b      	strb	r3, [r5, #0]
    pHandle->_Super.bSpeedErrorNumber = 0;
 8000f12:	7003      	strb	r3, [r0, #0]
    LL_TIM_SetPrescaler(TIMx, pHandle->HALLMaxRatio);
 8000f14:	3518      	adds	r5, #24
 8000f16:	882d      	ldrh	r5, [r5, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8000f18:	6295      	str	r5, [r2, #40]	; 0x28
  WRITE_REG(TIMx->CNT, Counter);
 8000f1a:	6253      	str	r3, [r2, #36]	; 0x24
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000f1c:	6813      	ldr	r3, [r2, #0]
 8000f1e:	4319      	orrs	r1, r3
 8000f20:	6011      	str	r1, [r2, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8000f22:	68d3      	ldr	r3, [r2, #12]
 8000f24:	431c      	orrs	r4, r3
 8000f26:	60d4      	str	r4, [r2, #12]
    HALL_Init_Electrical_Angle(pHandle);
 8000f28:	f7ff fee6 	bl	8000cf8 <HALL_Init_Electrical_Angle>
}
 8000f2c:	bd70      	pop	{r4, r5, r6, pc}
	...

08000f30 <HALL_CalcElAngle>:
{
 8000f30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if (pHandle->_Super.hElSpeedDpp != HALL_MAX_PSEUDO_SPEED)
 8000f32:	4a1d      	ldr	r2, [pc, #116]	; (8000fa8 <HALL_CalcElAngle+0x78>)
 8000f34:	230e      	movs	r3, #14
 8000f36:	5ec7      	ldrsh	r7, [r0, r3]
        pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed - (pHandle->IncrementElAngle - S16_60_PHASE_SHIFT) - 1;
 8000f38:	8883      	ldrh	r3, [r0, #4]
    if (pHandle->_Super.hElSpeedDpp != HALL_MAX_PSEUDO_SPEED)
 8000f3a:	4297      	cmp	r7, r2
 8000f3c:	d02d      	beq.n	8000f9a <HALL_CalcElAngle+0x6a>
      pHandle->IncrementElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8000f3e:	0002      	movs	r2, r0
 8000f40:	0004      	movs	r4, r0
 8000f42:	32b2      	adds	r2, #178	; 0xb2
 8000f44:	8812      	ldrh	r2, [r2, #0]
 8000f46:	34b0      	adds	r4, #176	; 0xb0
 8000f48:	b2be      	uxth	r6, r7
 8000f4a:	8825      	ldrh	r5, [r4, #0]
 8000f4c:	18b2      	adds	r2, r6, r2
 8000f4e:	b292      	uxth	r2, r2
 8000f50:	18a9      	adds	r1, r5, r2
 8000f52:	9201      	str	r2, [sp, #4]
      pHandle->PrevRotorFreq = pHandle->_Super.hElSpeedDpp;
 8000f54:	22a4      	movs	r2, #164	; 0xa4
 8000f56:	4694      	mov	ip, r2
 8000f58:	4484      	add	ip, r0
 8000f5a:	4662      	mov	r2, ip
      pHandle->IncrementElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8000f5c:	b209      	sxth	r1, r1
 8000f5e:	8021      	strh	r1, [r4, #0]
      pHandle->PrevRotorFreq = pHandle->_Super.hElSpeedDpp;
 8000f60:	8017      	strh	r7, [r2, #0]
      if (pHandle->IncrementElAngle >= S16_60_PHASE_SHIFT)
 8000f62:	4f12      	ldr	r7, [pc, #72]	; (8000fac <HALL_CalcElAngle+0x7c>)
 8000f64:	42b9      	cmp	r1, r7
 8000f66:	dd07      	ble.n	8000f78 <HALL_CalcElAngle+0x48>
        pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed - (pHandle->IncrementElAngle - S16_60_PHASE_SHIFT) - 1;
 8000f68:	19db      	adds	r3, r3, r7
 8000f6a:	1b5b      	subs	r3, r3, r5
 8000f6c:	8083      	strh	r3, [r0, #4]
        pHandle->IncrementElAngle = S16_60_PHASE_SHIFT;
 8000f6e:	4b10      	ldr	r3, [pc, #64]	; (8000fb0 <HALL_CalcElAngle+0x80>)
        pHandle->IncrementElAngle = -S16_60_PHASE_SHIFT;
 8000f70:	8023      	strh	r3, [r4, #0]
  return (retValue);
 8000f72:	2304      	movs	r3, #4
 8000f74:	5ec0      	ldrsh	r0, [r0, r3]
}
 8000f76:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      else if (pHandle->IncrementElAngle <= -S16_60_PHASE_SHIFT)
 8000f78:	4f0e      	ldr	r7, [pc, #56]	; (8000fb4 <HALL_CalcElAngle+0x84>)
 8000f7a:	42b9      	cmp	r1, r7
 8000f7c:	da04      	bge.n	8000f88 <HALL_CalcElAngle+0x58>
        pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed - (pHandle->IncrementElAngle + S16_60_PHASE_SHIFT) + 1;
 8000f7e:	19db      	adds	r3, r3, r7
 8000f80:	1b5b      	subs	r3, r3, r5
 8000f82:	8083      	strh	r3, [r0, #4]
        pHandle->IncrementElAngle = -S16_60_PHASE_SHIFT;
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <HALL_CalcElAngle+0x88>)
 8000f86:	e7f3      	b.n	8000f70 <HALL_CalcElAngle+0x40>
        pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8000f88:	0004      	movs	r4, r0
 8000f8a:	34ae      	adds	r4, #174	; 0xae
 8000f8c:	8821      	ldrh	r1, [r4, #0]
        pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8000f8e:	9a01      	ldr	r2, [sp, #4]
        pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8000f90:	1871      	adds	r1, r6, r1
        pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8000f92:	18d2      	adds	r2, r2, r3
        pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8000f94:	8021      	strh	r1, [r4, #0]
        pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8000f96:	8082      	strh	r2, [r0, #4]
 8000f98:	e7eb      	b.n	8000f72 <HALL_CalcElAngle+0x42>
      pHandle->_Super.hElAngle += pHandle->PrevRotorFreq;
 8000f9a:	0002      	movs	r2, r0
 8000f9c:	32a4      	adds	r2, #164	; 0xa4
 8000f9e:	8812      	ldrh	r2, [r2, #0]
 8000fa0:	189b      	adds	r3, r3, r2
 8000fa2:	8083      	strh	r3, [r0, #4]
 8000fa4:	e7e5      	b.n	8000f72 <HALL_CalcElAngle+0x42>
 8000fa6:	46c0      	nop			; (mov r8, r8)
 8000fa8:	00007fff 	.word	0x00007fff
 8000fac:	00002aa9 	.word	0x00002aa9
 8000fb0:	00002aaa 	.word	0x00002aaa
 8000fb4:	ffffd557 	.word	0xffffd557
 8000fb8:	ffffd556 	.word	0xffffd556

08000fbc <HALL_CalcAvrgMecSpeedUnit>:
    if (pHandle->SensorIsReliable)
 8000fbc:	0002      	movs	r2, r0
{
 8000fbe:	b570      	push	{r4, r5, r6, lr}
    if (pHandle->SensorIsReliable)
 8000fc0:	324c      	adds	r2, #76	; 0x4c
{
 8000fc2:	0004      	movs	r4, r0
    TIM_TypeDef *TIMx = pHandle->TIMx;
 8000fc4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (pHandle->SensorIsReliable)
 8000fc6:	7810      	ldrb	r0, [r2, #0]
{
 8000fc8:	000e      	movs	r6, r1
    if (pHandle->SensorIsReliable)
 8000fca:	2800      	cmp	r0, #0
 8000fcc:	d03f      	beq.n	800104e <HALL_CalcAvrgMecSpeedUnit+0x92>
      if (LL_TIM_GetPrescaler(TIMx) >= pHandle->HALLMaxRatio)
 8000fce:	3268      	adds	r2, #104	; 0x68
  return (uint32_t)(READ_REG(TIMx->PSC));
 8000fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fd2:	8812      	ldrh	r2, [r2, #0]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d80a      	bhi.n	8000fee <HALL_CalcAvrgMecSpeedUnit+0x32>
        pHandle->_Super.hElSpeedDpp = 0;
 8000fd8:	2500      	movs	r5, #0
 8000fda:	81e5      	strh	r5, [r4, #14]
      bReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, hMecSpeedUnit);
 8000fdc:	0031      	movs	r1, r6
 8000fde:	0020      	movs	r0, r4
        *hMecSpeedUnit = 0;
 8000fe0:	8035      	strh	r5, [r6, #0]
      bReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, hMecSpeedUnit);
 8000fe2:	f004 ff84 	bl	8005eee <SPD_IsMecSpeedReliable>
    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	5eb3      	ldrsh	r3, [r6, r2]
 8000fea:	81a3      	strh	r3, [r4, #12]
}
 8000fec:	bd70      	pop	{r4, r5, r6, pc}
        pHandle->_Super.hElSpeedDpp =  pHandle->AvrElSpeedDpp;
 8000fee:	0023      	movs	r3, r4
 8000ff0:	33a8      	adds	r3, #168	; 0xa8
 8000ff2:	2500      	movs	r5, #0
 8000ff4:	5f5d      	ldrsh	r5, [r3, r5]
 8000ff6:	81e5      	strh	r5, [r4, #14]
        if (0 ==  pHandle->AvrElSpeedDpp)
 8000ff8:	2d00      	cmp	r5, #0
 8000ffa:	d0ef      	beq.n	8000fdc <HALL_CalcAvrgMecSpeedUnit+0x20>
          if (pHandle->AvrElSpeedDpp != HALL_MAX_PSEUDO_SPEED)
 8000ffc:	4b16      	ldr	r3, [pc, #88]	; (8001058 <HALL_CalcAvrgMecSpeedUnit+0x9c>)
 8000ffe:	429d      	cmp	r5, r3
 8001000:	d020      	beq.n	8001044 <HALL_CalcAvrgMecSpeedUnit+0x88>
            if (true == pHandle->HallMtpa)
 8001002:	0023      	movs	r3, r4
 8001004:	2000      	movs	r0, #0
 8001006:	33cb      	adds	r3, #203	; 0xcb
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	4283      	cmp	r3, r0
 800100c:	d10c      	bne.n	8001028 <HALL_CalcAvrgMecSpeedUnit+0x6c>
              pHandle->DeltaAngle = pHandle->MeasuredElAngle - pHandle->_Super.hElAngle;
 800100e:	0023      	movs	r3, r4
 8001010:	33ae      	adds	r3, #174	; 0xae
 8001012:	8818      	ldrh	r0, [r3, #0]
 8001014:	88a3      	ldrh	r3, [r4, #4]
 8001016:	1ac0      	subs	r0, r0, r3
 8001018:	0023      	movs	r3, r4
 800101a:	b200      	sxth	r0, r0
 800101c:	33ac      	adds	r3, #172	; 0xac
              pHandle->CompSpeed = (int16_t)((int32_t)(pHandle->DeltaAngle) / (int32_t)(pHandle->PWMNbrPSamplingFreq));
 800101e:	8b99      	ldrh	r1, [r3, #28]
              pHandle->DeltaAngle = pHandle->MeasuredElAngle - pHandle->_Super.hElAngle;
 8001020:	8018      	strh	r0, [r3, #0]
              pHandle->CompSpeed = (int16_t)((int32_t)(pHandle->DeltaAngle) / (int32_t)(pHandle->PWMNbrPSamplingFreq));
 8001022:	f7ff f90f 	bl	8000244 <__divsi3>
 8001026:	b200      	sxth	r0, r0
              pHandle->CompSpeed = 0;
 8001028:	0023      	movs	r3, r4
 800102a:	33b2      	adds	r3, #178	; 0xb2
 800102c:	8018      	strh	r0, [r3, #0]
                        * (int32_t)SPEED_UNIT )
 800102e:	200a      	movs	r0, #10
            *hMecSpeedUnit = (int16_t)((pHandle->AvrElSpeedDpp * (int32_t)pHandle->_Super.hMeasurementFrequency
 8001030:	8b63      	ldrh	r3, [r4, #26]
                        / ((int32_t)(pHandle->_Super.DPPConvFactor) * (int32_t)(pHandle->_Super.bElToMecRatio)) );
 8001032:	69e1      	ldr	r1, [r4, #28]
            *hMecSpeedUnit = (int16_t)((pHandle->AvrElSpeedDpp * (int32_t)pHandle->_Super.hMeasurementFrequency
 8001034:	436b      	muls	r3, r5
                        * (int32_t)SPEED_UNIT )
 8001036:	4358      	muls	r0, r3
                        / ((int32_t)(pHandle->_Super.DPPConvFactor) * (int32_t)(pHandle->_Super.bElToMecRatio)) );
 8001038:	7863      	ldrb	r3, [r4, #1]
 800103a:	4359      	muls	r1, r3
 800103c:	f7ff f902 	bl	8000244 <__divsi3>
            *hMecSpeedUnit = (int16_t)((pHandle->AvrElSpeedDpp * (int32_t)pHandle->_Super.hMeasurementFrequency
 8001040:	b205      	sxth	r5, r0
 8001042:	e7cb      	b.n	8000fdc <HALL_CalcAvrgMecSpeedUnit+0x20>
            *hMecSpeedUnit = (int16_t)pHandle->SatSpeed;
 8001044:	0023      	movs	r3, r4
 8001046:	33b6      	adds	r3, #182	; 0xb6
 8001048:	2500      	movs	r5, #0
 800104a:	5f5d      	ldrsh	r5, [r3, r5]
 800104c:	e7c6      	b.n	8000fdc <HALL_CalcAvrgMecSpeedUnit+0x20>
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 800104e:	78e3      	ldrb	r3, [r4, #3]
      pHandle->_Super.hElSpeedDpp = 0;
 8001050:	81e0      	strh	r0, [r4, #14]
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8001052:	7023      	strb	r3, [r4, #0]
      *hMecSpeedUnit = 0;
 8001054:	8008      	strh	r0, [r1, #0]
 8001056:	e7c6      	b.n	8000fe6 <HALL_CalcAvrgMecSpeedUnit+0x2a>
 8001058:	00007fff 	.word	0x00007fff

0800105c <HALL_TIMx_CC_IRQHandler>:
  if (pHandle->SensorIsReliable)
 800105c:	0002      	movs	r2, r0
{
 800105e:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (pHandle->SensorIsReliable)
 8001060:	324c      	adds	r2, #76	; 0x4c
 8001062:	7812      	ldrb	r2, [r2, #0]
{
 8001064:	0003      	movs	r3, r0
 8001066:	b085      	sub	sp, #20
  if (pHandle->SensorIsReliable)
 8001068:	2a00      	cmp	r2, #0
 800106a:	d100      	bne.n	800106e <HALL_TIMx_CC_IRQHandler+0x12>
 800106c:	e07e      	b.n	800116c <HALL_TIMx_CC_IRQHandler+0x110>
    PrevDirection = pHandle->Direction;
 800106e:	0001      	movs	r1, r0
    bPrevHallState = pHandle->HallState;
 8001070:	0002      	movs	r2, r0
    PrevDirection = pHandle->Direction;
 8001072:	31a6      	adds	r1, #166	; 0xa6
 8001074:	7809      	ldrb	r1, [r1, #0]
    bPrevHallState = pHandle->HallState;
 8001076:	32aa      	adds	r2, #170	; 0xaa
    PrevDirection = pHandle->Direction;
 8001078:	b249      	sxtb	r1, r1
    bPrevHallState = pHandle->HallState;
 800107a:	7812      	ldrb	r2, [r2, #0]
                                      | (LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) << 1U)
 800107c:	6b87      	ldr	r7, [r0, #56]	; 0x38
    PrevDirection = pHandle->Direction;
 800107e:	9102      	str	r1, [sp, #8]
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 8001080:	6c06      	ldr	r6, [r0, #64]	; 0x40
                                      | (LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) << 1U)
 8001082:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 8001084:	6c45      	ldr	r5, [r0, #68]	; 0x44
                                      | LL_GPIO_IsInputPinSet(pHandle->H1Port, pHandle->H1Pin));
 8001086:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8001088:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800108a:	9001      	str	r0, [sp, #4]
    if (DEGREES_120 == pHandle->SensorPlacement)
 800108c:	1c58      	adds	r0, r3, #1
 800108e:	7fc0      	ldrb	r0, [r0, #31]
 8001090:	2800      	cmp	r0, #0
 8001092:	d123      	bne.n	80010dc <HALL_TIMx_CC_IRQHandler+0x80>
 8001094:	6936      	ldr	r6, [r6, #16]
 8001096:	9801      	ldr	r0, [sp, #4]
 8001098:	693f      	ldr	r7, [r7, #16]
 800109a:	402e      	ands	r6, r5
 800109c:	400f      	ands	r7, r1
 800109e:	6900      	ldr	r0, [r0, #16]
 80010a0:	1a7f      	subs	r7, r7, r1
 80010a2:	1b76      	subs	r6, r6, r5
 80010a4:	4275      	negs	r5, r6
 80010a6:	416e      	adcs	r6, r5
 80010a8:	4279      	negs	r1, r7
 80010aa:	414f      	adcs	r7, r1
 80010ac:	4020      	ands	r0, r4
 80010ae:	1b00      	subs	r0, r0, r4
 80010b0:	4241      	negs	r1, r0
 80010b2:	4148      	adcs	r0, r1
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 80010b4:	00b6      	lsls	r6, r6, #2
                                      | (LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) << 1U)
 80010b6:	007f      	lsls	r7, r7, #1
 80010b8:	4337      	orrs	r7, r6
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 80010ba:	4338      	orrs	r0, r7
 80010bc:	0019      	movs	r1, r3
 80010be:	001d      	movs	r5, r3
 80010c0:	31aa      	adds	r1, #170	; 0xaa
  TIM_TypeDef *TIMx = pHandle->TIMx;
 80010c2:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80010c4:	7008      	strb	r0, [r1, #0]
    switch (pHandle->HallState)
 80010c6:	3801      	subs	r0, #1
 80010c8:	35a6      	adds	r5, #166	; 0xa6
 80010ca:	3104      	adds	r1, #4
 80010cc:	2805      	cmp	r0, #5
 80010ce:	d900      	bls.n	80010d2 <HALL_TIMx_CC_IRQHandler+0x76>
 80010d0:	e081      	b.n	80011d6 <HALL_TIMx_CC_IRQHandler+0x17a>
 80010d2:	f7ff f823 	bl	800011c <__gnu_thumb1_case_uqi>
 80010d6:	624e      	.short	0x624e
 80010d8:	6d1a7859 	.word	0x6d1a7859
 80010dc:	9801      	ldr	r0, [sp, #4]
 80010de:	693f      	ldr	r7, [r7, #16]
 80010e0:	6936      	ldr	r6, [r6, #16]
 80010e2:	6900      	ldr	r0, [r0, #16]
 80010e4:	400f      	ands	r7, r1
 80010e6:	402e      	ands	r6, r5
 80010e8:	4020      	ands	r0, r4
 80010ea:	1a7f      	subs	r7, r7, r1
 80010ec:	1b76      	subs	r6, r6, r5
 80010ee:	4279      	negs	r1, r7
 80010f0:	414f      	adcs	r7, r1
 80010f2:	4275      	negs	r5, r6
 80010f4:	416e      	adcs	r6, r5
 80010f6:	1b00      	subs	r0, r0, r4
 80010f8:	4244      	negs	r4, r0
 80010fa:	4160      	adcs	r0, r4
      pHandle->HallState  = (uint8_t)(((LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) ^ 1U) << 2U)
 80010fc:	2104      	movs	r1, #4
                                      | (LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 1U)
 80010fe:	0076      	lsls	r6, r6, #1
      pHandle->HallState  = (uint8_t)(((LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) ^ 1U) << 2U)
 8001100:	00bf      	lsls	r7, r7, #2
 8001102:	4330      	orrs	r0, r6
 8001104:	4079      	eors	r1, r7
 8001106:	4308      	orrs	r0, r1
 8001108:	e7d8      	b.n	80010bc <HALL_TIMx_CC_IRQHandler+0x60>
        if (STATE_4 == bPrevHallState)
 800110a:	2a04      	cmp	r2, #4
 800110c:	d103      	bne.n	8001116 <HALL_TIMx_CC_IRQHandler+0xba>
          pHandle->Direction = POSITIVE;
 800110e:	3a03      	subs	r2, #3
          pHandle->Direction = NEGATIVE;
 8001110:	702a      	strb	r2, [r5, #0]
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift);
 8001112:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8001114:	e006      	b.n	8001124 <HALL_TIMx_CC_IRQHandler+0xc8>
        else if (STATE_1 == bPrevHallState)
 8001116:	2a01      	cmp	r2, #1
 8001118:	d105      	bne.n	8001126 <HALL_TIMx_CC_IRQHandler+0xca>
          pHandle->Direction = NEGATIVE;
 800111a:	32fe      	adds	r2, #254	; 0xfe
          pHandle->Direction = POSITIVE;
 800111c:	702a      	strb	r2, [r5, #0]
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 800111e:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8001120:	487a      	ldr	r0, [pc, #488]	; (800130c <HALL_TIMx_CC_IRQHandler+0x2b0>)
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_60_PHASE_SHIFT);
 8001122:	1812      	adds	r2, r2, r0
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift);
 8001124:	800a      	strh	r2, [r1, #0]
    if (pHandle->Direction != PrevDirection)
 8001126:	2200      	movs	r2, #0
 8001128:	9802      	ldr	r0, [sp, #8]
 800112a:	56aa      	ldrsb	r2, [r5, r2]
 800112c:	9201      	str	r2, [sp, #4]
 800112e:	4282      	cmp	r2, r0
 8001130:	d005      	beq.n	800113e <HALL_TIMx_CC_IRQHandler+0xe2>
      pHandle->BufferFilled = 0U ;
 8001132:	001a      	movs	r2, r3
 8001134:	2000      	movs	r0, #0
 8001136:	3250      	adds	r2, #80	; 0x50
 8001138:	7010      	strb	r0, [r2, #0]
      pHandle->SpeedFIFOIdx = 0U;
 800113a:	324c      	adds	r2, #76	; 0x4c
 800113c:	7010      	strb	r0, [r2, #0]
      pHandle->_Super.hElAngle = pHandle->MeasuredElAngle;
 800113e:	2200      	movs	r2, #0
 8001140:	5e89      	ldrsh	r1, [r1, r2]
    if (true == pHandle->HallMtpa)
 8001142:	001a      	movs	r2, r3
 8001144:	32cb      	adds	r2, #203	; 0xcb
 8001146:	7812      	ldrb	r2, [r2, #0]
 8001148:	2a00      	cmp	r2, #0
 800114a:	d000      	beq.n	800114e <HALL_TIMx_CC_IRQHandler+0xf2>
      pHandle->_Super.hElAngle = pHandle->MeasuredElAngle;
 800114c:	8099      	strh	r1, [r3, #4]
    pHandle->IncrementElAngle = pHandle->_Super.hElAngle - pHandle->MeasuredElAngle;
 800114e:	889a      	ldrh	r2, [r3, #4]
 8001150:	1a52      	subs	r2, r2, r1
 8001152:	0019      	movs	r1, r3
 8001154:	31b0      	adds	r1, #176	; 0xb0
 8001156:	800a      	strh	r2, [r1, #0]
    if (0U == pHandle->FirstCapt)
 8001158:	001a      	movs	r2, r3
 800115a:	324f      	adds	r2, #79	; 0x4f
 800115c:	7811      	ldrb	r1, [r2, #0]
 800115e:	2900      	cmp	r1, #0
 8001160:	d13e      	bne.n	80011e0 <HALL_TIMx_CC_IRQHandler+0x184>
      pHandle->FirstCapt++;
 8001162:	7813      	ldrb	r3, [r2, #0]
 8001164:	3301      	adds	r3, #1
 8001166:	b2db      	uxtb	r3, r3
 8001168:	7013      	strb	r3, [r2, #0]
  return (uint32_t)(READ_REG(TIMx->CCR1));
 800116a:	6b63      	ldr	r3, [r4, #52]	; 0x34
}
 800116c:	2000      	movs	r0, #0
 800116e:	b005      	add	sp, #20
 8001170:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (STATE_5 == bPrevHallState)
 8001172:	2a05      	cmp	r2, #5
 8001174:	d101      	bne.n	800117a <HALL_TIMx_CC_IRQHandler+0x11e>
          pHandle->Direction = POSITIVE;
 8001176:	3a04      	subs	r2, #4
 8001178:	e7d0      	b.n	800111c <HALL_TIMx_CC_IRQHandler+0xc0>
        else if (STATE_3 == bPrevHallState)
 800117a:	2a03      	cmp	r2, #3
 800117c:	d1d3      	bne.n	8001126 <HALL_TIMx_CC_IRQHandler+0xca>
          pHandle->Direction = NEGATIVE;
 800117e:	32fc      	adds	r2, #252	; 0xfc
          pHandle->Direction = POSITIVE;
 8001180:	702a      	strb	r2, [r5, #0]
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT);
 8001182:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8001184:	4862      	ldr	r0, [pc, #392]	; (8001310 <HALL_TIMx_CC_IRQHandler+0x2b4>)
 8001186:	e7cc      	b.n	8001122 <HALL_TIMx_CC_IRQHandler+0xc6>
        if (STATE_1 == bPrevHallState)
 8001188:	2a01      	cmp	r2, #1
 800118a:	d0f9      	beq.n	8001180 <HALL_TIMx_CC_IRQHandler+0x124>
        else if (STATE_2 == bPrevHallState)
 800118c:	2a02      	cmp	r2, #2
 800118e:	d1ca      	bne.n	8001126 <HALL_TIMx_CC_IRQHandler+0xca>
          pHandle->Direction = NEGATIVE;
 8001190:	32fd      	adds	r2, #253	; 0xfd
          pHandle->Direction = POSITIVE;
 8001192:	702a      	strb	r2, [r5, #0]
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT + S16_60_PHASE_SHIFT);
 8001194:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8001196:	485f      	ldr	r0, [pc, #380]	; (8001314 <HALL_TIMx_CC_IRQHandler+0x2b8>)
 8001198:	e7c3      	b.n	8001122 <HALL_TIMx_CC_IRQHandler+0xc6>
        if (STATE_3 == bPrevHallState)
 800119a:	2a03      	cmp	r2, #3
 800119c:	d101      	bne.n	80011a2 <HALL_TIMx_CC_IRQHandler+0x146>
          pHandle->Direction = POSITIVE;
 800119e:	3a02      	subs	r2, #2
 80011a0:	e7f7      	b.n	8001192 <HALL_TIMx_CC_IRQHandler+0x136>
        else if (STATE_6 == bPrevHallState)
 80011a2:	2a06      	cmp	r2, #6
 80011a4:	d1bf      	bne.n	8001126 <HALL_TIMx_CC_IRQHandler+0xca>
          pHandle->Direction = NEGATIVE;
 80011a6:	32f9      	adds	r2, #249	; 0xf9
          pHandle->Direction = POSITIVE;
 80011a8:	702a      	strb	r2, [r5, #0]
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_120_PHASE_SHIFT);
 80011aa:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 80011ac:	485a      	ldr	r0, [pc, #360]	; (8001318 <HALL_TIMx_CC_IRQHandler+0x2bc>)
 80011ae:	e7b8      	b.n	8001122 <HALL_TIMx_CC_IRQHandler+0xc6>
        if (STATE_2 == bPrevHallState)
 80011b0:	2a02      	cmp	r2, #2
 80011b2:	d101      	bne.n	80011b8 <HALL_TIMx_CC_IRQHandler+0x15c>
          pHandle->Direction = POSITIVE;
 80011b4:	3a01      	subs	r2, #1
 80011b6:	e7f7      	b.n	80011a8 <HALL_TIMx_CC_IRQHandler+0x14c>
        else if (STATE_4 == bPrevHallState)
 80011b8:	2a04      	cmp	r2, #4
 80011ba:	d1b4      	bne.n	8001126 <HALL_TIMx_CC_IRQHandler+0xca>
          pHandle->Direction = NEGATIVE;
 80011bc:	32fb      	adds	r2, #251	; 0xfb
          pHandle->Direction = POSITIVE;
 80011be:	702a      	strb	r2, [r5, #0]
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_60_PHASE_SHIFT);
 80011c0:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 80011c2:	4856      	ldr	r0, [pc, #344]	; (800131c <HALL_TIMx_CC_IRQHandler+0x2c0>)
 80011c4:	e7ad      	b.n	8001122 <HALL_TIMx_CC_IRQHandler+0xc6>
        if (STATE_6 == bPrevHallState)
 80011c6:	2a06      	cmp	r2, #6
 80011c8:	d101      	bne.n	80011ce <HALL_TIMx_CC_IRQHandler+0x172>
          pHandle->Direction = POSITIVE;
 80011ca:	3a05      	subs	r2, #5
 80011cc:	e7f7      	b.n	80011be <HALL_TIMx_CC_IRQHandler+0x162>
        else if (STATE_5 == bPrevHallState)
 80011ce:	2a05      	cmp	r2, #5
 80011d0:	d1a9      	bne.n	8001126 <HALL_TIMx_CC_IRQHandler+0xca>
          pHandle->Direction = NEGATIVE;
 80011d2:	32fa      	adds	r2, #250	; 0xfa
 80011d4:	e79c      	b.n	8001110 <HALL_TIMx_CC_IRQHandler+0xb4>
        pHandle->SensorIsReliable = false;
 80011d6:	001a      	movs	r2, r3
 80011d8:	2000      	movs	r0, #0
 80011da:	324c      	adds	r2, #76	; 0x4c
 80011dc:	7010      	strb	r0, [r2, #0]
        break;
 80011de:	e7a2      	b.n	8001126 <HALL_TIMx_CC_IRQHandler+0xca>
      if (pHandle->BufferFilled < pHandle->SpeedBufferSize)
 80011e0:	0019      	movs	r1, r3
 80011e2:	1dd8      	adds	r0, r3, #7
 80011e4:	3150      	adds	r1, #80	; 0x50
 80011e6:	780a      	ldrb	r2, [r1, #0]
 80011e8:	7fc5      	ldrb	r5, [r0, #31]
 80011ea:	42aa      	cmp	r2, r5
 80011ec:	d203      	bcs.n	80011f6 <HALL_TIMx_CC_IRQHandler+0x19a>
        pHandle->BufferFilled++;
 80011ee:	780a      	ldrb	r2, [r1, #0]
 80011f0:	3201      	adds	r2, #1
 80011f2:	b2d2      	uxtb	r2, r2
 80011f4:	700a      	strb	r2, [r1, #0]
      wCaptBuf += ((uint32_t)pHandle->OVFCounter) * 0x10000UL;
 80011f6:	0019      	movs	r1, r3
 80011f8:	3151      	adds	r1, #81	; 0x51
 80011fa:	9102      	str	r1, [sp, #8]
 80011fc:	6b66      	ldr	r6, [r4, #52]	; 0x34
  return (uint32_t)(READ_REG(TIMx->PSC));
 80011fe:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001200:	7809      	ldrb	r1, [r1, #0]
 8001202:	b2b0      	uxth	r0, r6
 8001204:	0409      	lsls	r1, r1, #16
 8001206:	1840      	adds	r0, r0, r1
      if (pHandle->OVFCounter != 0U)
 8001208:	9902      	ldr	r1, [sp, #8]
      hPrscBuf = (uint16_t)LL_TIM_GetPrescaler(TIMx);
 800120a:	b292      	uxth	r2, r2
      if (pHandle->OVFCounter != 0U)
 800120c:	7809      	ldrb	r1, [r1, #0]
 800120e:	b2cf      	uxtb	r7, r1
 8001210:	46bc      	mov	ip, r7
 8001212:	2900      	cmp	r1, #0
 8001214:	d055      	beq.n	80012c2 <HALL_TIMx_CC_IRQHandler+0x266>
        hAux = hPrscBuf + 1U;
 8001216:	3201      	adds	r2, #1
        wCaptBuf *= hAux;
 8001218:	b291      	uxth	r1, r2
        if (pHandle->RatioInc)
 800121a:	001a      	movs	r2, r3
 800121c:	324e      	adds	r2, #78	; 0x4e
        wCaptBuf *= hAux;
 800121e:	4341      	muls	r1, r0
        if (pHandle->RatioInc)
 8001220:	7810      	ldrb	r0, [r2, #0]
 8001222:	2800      	cmp	r0, #0
 8001224:	d042      	beq.n	80012ac <HALL_TIMx_CC_IRQHandler+0x250>
          pHandle->RatioInc = false;  /* Previous capture caused overflow */
 8001226:	2000      	movs	r0, #0
            pHandle->RatioInc = true;   /* new prsc value updated at next capture only */
 8001228:	7010      	strb	r0, [r2, #0]
      if (wCaptBuf < pHandle->MinPeriod)
 800122a:	001a      	movs	r2, r3
 800122c:	32c0      	adds	r2, #192	; 0xc0
 800122e:	6812      	ldr	r2, [r2, #0]
 8001230:	428a      	cmp	r2, r1
 8001232:	d837      	bhi.n	80012a4 <HALL_TIMx_CC_IRQHandler+0x248>
        pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8001234:	229c      	movs	r2, #156	; 0x9c
 8001236:	4694      	mov	ip, r2
 8001238:	449c      	add	ip, r3
 800123a:	4662      	mov	r2, ip
 800123c:	001c      	movs	r4, r3
 800123e:	7817      	ldrb	r7, [r2, #0]
 8001240:	34a0      	adds	r4, #160	; 0xa0
 8001242:	00ba      	lsls	r2, r7, #2
 8001244:	189a      	adds	r2, r3, r2
 8001246:	6826      	ldr	r6, [r4, #0]
 8001248:	6d50      	ldr	r0, [r2, #84]	; 0x54
 800124a:	1a30      	subs	r0, r6, r0
 800124c:	9003      	str	r0, [sp, #12]
        if (wCaptBuf >= pHandle->MaxPeriod)
 800124e:	0018      	movs	r0, r3
 8001250:	30bc      	adds	r0, #188	; 0xbc
 8001252:	6806      	ldr	r6, [r0, #0]
          pHandle->SensorPeriod[pHandle->SpeedFIFOIdx] *= pHandle->Direction;
 8001254:	9801      	ldr	r0, [sp, #4]
 8001256:	4348      	muls	r0, r1
        if (wCaptBuf >= pHandle->MaxPeriod)
 8001258:	428e      	cmp	r6, r1
 800125a:	d801      	bhi.n	8001260 <HALL_TIMx_CC_IRQHandler+0x204>
          pHandle->SensorPeriod[pHandle->SpeedFIFOIdx] = (int32_t)pHandle->MaxPeriod * pHandle->Direction;
 800125c:	9801      	ldr	r0, [sp, #4]
 800125e:	4370      	muls	r0, r6
 8001260:	6550      	str	r0, [r2, #84]	; 0x54
          pHandle->ElPeriodSum += pHandle->SensorPeriod[pHandle->SpeedFIFOIdx];
 8001262:	9a03      	ldr	r2, [sp, #12]
        pHandle->SpeedFIFOIdx++;
 8001264:	3701      	adds	r7, #1
          pHandle->ElPeriodSum += pHandle->SensorPeriod[pHandle->SpeedFIFOIdx];
 8001266:	1810      	adds	r0, r2, r0
        pHandle->SpeedFIFOIdx++;
 8001268:	b2ff      	uxtb	r7, r7
          pHandle->ElPeriodSum += pHandle->SensorPeriod[pHandle->SpeedFIFOIdx];
 800126a:	6020      	str	r0, [r4, #0]
        if (pHandle->SpeedFIFOIdx == pHandle->SpeedBufferSize)
 800126c:	42bd      	cmp	r5, r7
 800126e:	d100      	bne.n	8001272 <HALL_TIMx_CC_IRQHandler+0x216>
          pHandle->SpeedFIFOIdx = 0U;
 8001270:	2700      	movs	r7, #0
 8001272:	4662      	mov	r2, ip
 8001274:	7017      	strb	r7, [r2, #0]
        if (pHandle->SensorIsReliable)
 8001276:	001a      	movs	r2, r3
 8001278:	001c      	movs	r4, r3
 800127a:	324c      	adds	r2, #76	; 0x4c
 800127c:	7812      	ldrb	r2, [r2, #0]
 800127e:	34a8      	adds	r4, #168	; 0xa8
 8001280:	2a00      	cmp	r2, #0
 8001282:	d041      	beq.n	8001308 <HALL_TIMx_CC_IRQHandler+0x2ac>
          if ((pHandle->BufferFilled < pHandle->SpeedBufferSize) && (wCaptBuf != 0U))
 8001284:	001a      	movs	r2, r3
 8001286:	3250      	adds	r2, #80	; 0x50
 8001288:	7812      	ldrb	r2, [r2, #0]
            uint32_t tempReg = (pHandle->PseudoFreqConv / wCaptBuf) * (uint32_t)pHandle->Direction;
 800128a:	33b8      	adds	r3, #184	; 0xb8
 800128c:	681e      	ldr	r6, [r3, #0]
          if ((pHandle->BufferFilled < pHandle->SpeedBufferSize) && (wCaptBuf != 0U))
 800128e:	4295      	cmp	r5, r2
 8001290:	d932      	bls.n	80012f8 <HALL_TIMx_CC_IRQHandler+0x29c>
 8001292:	2900      	cmp	r1, #0
 8001294:	d030      	beq.n	80012f8 <HALL_TIMx_CC_IRQHandler+0x29c>
            uint32_t tempReg = (pHandle->PseudoFreqConv / wCaptBuf) * (uint32_t)pHandle->Direction;
 8001296:	0030      	movs	r0, r6
 8001298:	f7fe ff4a 	bl	8000130 <__udivsi3>
 800129c:	9b01      	ldr	r3, [sp, #4]
 800129e:	4343      	muls	r3, r0
 80012a0:	0018      	movs	r0, r3
            pHandle->AvrElSpeedDpp = (int16_t)((int32_t)pHandle->PseudoFreqConv /
 80012a2:	8020      	strh	r0, [r4, #0]
      pHandle->OVFCounter = 0U;
 80012a4:	2300      	movs	r3, #0
 80012a6:	9a02      	ldr	r2, [sp, #8]
 80012a8:	7013      	strb	r3, [r2, #0]
 80012aa:	e75f      	b.n	800116c <HALL_TIMx_CC_IRQHandler+0x110>
          if (LL_TIM_GetPrescaler(TIMx) < pHandle->HALLMaxRatio) /* Avoid OVF w/ very low freq */
 80012ac:	001e      	movs	r6, r3
 80012ae:	36b4      	adds	r6, #180	; 0xb4
 80012b0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80012b2:	8836      	ldrh	r6, [r6, #0]
 80012b4:	4286      	cmp	r6, r0
 80012b6:	d9b8      	bls.n	800122a <HALL_TIMx_CC_IRQHandler+0x1ce>
 80012b8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
            LL_TIM_SetPrescaler(TIMx, LL_TIM_GetPrescaler(TIMx) + 1U); /* To avoid OVF during speed decrease */
 80012ba:	3001      	adds	r0, #1
  WRITE_REG(TIMx->PSC, Prescaler);
 80012bc:	62a0      	str	r0, [r4, #40]	; 0x28
            pHandle->RatioInc = true;   /* new prsc value updated at next capture only */
 80012be:	2001      	movs	r0, #1
 80012c0:	e7b2      	b.n	8001228 <HALL_TIMx_CC_IRQHandler+0x1cc>
        if (pHandle->RatioDec) /* and don't decrease it again */
 80012c2:	001f      	movs	r7, r3
 80012c4:	374d      	adds	r7, #77	; 0x4d
 80012c6:	7839      	ldrb	r1, [r7, #0]
 80012c8:	2900      	cmp	r1, #0
 80012ca:	d005      	beq.n	80012d8 <HALL_TIMx_CC_IRQHandler+0x27c>
          hAux = hPrscBuf + 2U;
 80012cc:	3202      	adds	r2, #2
          wCaptBuf *= hAux;
 80012ce:	b291      	uxth	r1, r2
          pHandle->RatioDec = false;
 80012d0:	4662      	mov	r2, ip
          wCaptBuf *= hAux;
 80012d2:	4341      	muls	r1, r0
              pHandle->RatioDec = true;
 80012d4:	703a      	strb	r2, [r7, #0]
 80012d6:	e7a8      	b.n	800122a <HALL_TIMx_CC_IRQHandler+0x1ce>
          uint16_t hAux = hPrscBuf + 1U;
 80012d8:	3201      	adds	r2, #1
          wCaptBuf *= hAux;
 80012da:	b291      	uxth	r1, r2
          if (hHighSpeedCapture < LOW_RES_THRESHOLD) /* If capture range correct */
 80012dc:	22aa      	movs	r2, #170	; 0xaa
 80012de:	b2b6      	uxth	r6, r6
          wCaptBuf *= hAux;
 80012e0:	4341      	muls	r1, r0
          if (hHighSpeedCapture < LOW_RES_THRESHOLD) /* If capture range correct */
 80012e2:	01d2      	lsls	r2, r2, #7
 80012e4:	4296      	cmp	r6, r2
 80012e6:	d2a0      	bcs.n	800122a <HALL_TIMx_CC_IRQHandler+0x1ce>
  return (uint32_t)(READ_REG(TIMx->PSC));
 80012e8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
            if (LL_TIM_GetPrescaler(TIMx) > 0U) /* or prescaler cannot be further reduced */
 80012ea:	2a00      	cmp	r2, #0
 80012ec:	d09d      	beq.n	800122a <HALL_TIMx_CC_IRQHandler+0x1ce>
 80012ee:	6aa2      	ldr	r2, [r4, #40]	; 0x28
              LL_TIM_SetPrescaler(TIMx, LL_TIM_GetPrescaler(TIMx) - 1U); /* Increase accuracy by decreasing prsc */
 80012f0:	3a01      	subs	r2, #1
  WRITE_REG(TIMx->PSC, Prescaler);
 80012f2:	62a2      	str	r2, [r4, #40]	; 0x28
              pHandle->RatioDec = true;
 80012f4:	2201      	movs	r2, #1
 80012f6:	e7ed      	b.n	80012d4 <HALL_TIMx_CC_IRQHandler+0x278>
                                               (pHandle->ElPeriodSum / (int32_t)pHandle->SpeedBufferSize)); /* Average value */
 80012f8:	0029      	movs	r1, r5
 80012fa:	f7fe ffa3 	bl	8000244 <__divsi3>
 80012fe:	0001      	movs	r1, r0
            pHandle->AvrElSpeedDpp = (int16_t)((int32_t)pHandle->PseudoFreqConv /
 8001300:	0030      	movs	r0, r6
 8001302:	f7fe ff9f 	bl	8000244 <__divsi3>
 8001306:	e7cc      	b.n	80012a2 <HALL_TIMx_CC_IRQHandler+0x246>
          pHandle->AvrElSpeedDpp = 0;
 8001308:	8022      	strh	r2, [r4, #0]
 800130a:	e7cb      	b.n	80012a4 <HALL_TIMx_CC_IRQHandler+0x248>
 800130c:	00002aaa 	.word	0x00002aaa
 8001310:	00005555 	.word	0x00005555
 8001314:	00007fff 	.word	0x00007fff
 8001318:	ffffaaab 	.word	0xffffaaab
 800131c:	ffffd556 	.word	0xffffd556

08001320 <HALL_TIMx_UP_IRQHandler>:
  if (pHandle->SensorIsReliable)
 8001320:	0003      	movs	r3, r0
{
 8001322:	b570      	push	{r4, r5, r6, lr}
  if (pHandle->SensorIsReliable)
 8001324:	334c      	adds	r3, #76	; 0x4c
 8001326:	781b      	ldrb	r3, [r3, #0]
{
 8001328:	0004      	movs	r4, r0
  TIM_TypeDef *TIMx = pHandle->TIMx;
 800132a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  if (pHandle->SensorIsReliable)
 800132c:	2b00      	cmp	r3, #0
 800132e:	d035      	beq.n	800139c <HALL_TIMx_UP_IRQHandler+0x7c>
    pHandle->OVFCounter++;
 8001330:	0005      	movs	r5, r0
    hMaxTimerOverflow = (uint16_t)(((uint32_t)pHandle->HallTimeout * pHandle->OvfFreq)
 8001332:	0001      	movs	r1, r0
    pHandle->OVFCounter++;
 8001334:	3551      	adds	r5, #81	; 0x51
 8001336:	782b      	ldrb	r3, [r5, #0]
    hMaxTimerOverflow = (uint16_t)(((uint32_t)pHandle->HallTimeout * pHandle->OvfFreq)
 8001338:	31c6      	adds	r1, #198	; 0xc6
    pHandle->OVFCounter++;
 800133a:	3301      	adds	r3, #1
 800133c:	b2db      	uxtb	r3, r3
 800133e:	702b      	strb	r3, [r5, #0]
  return (uint32_t)(READ_REG(TIMx->PSC));
 8001340:	6a93      	ldr	r3, [r2, #40]	; 0x28
    hMaxTimerOverflow = (uint16_t)(((uint32_t)pHandle->HallTimeout * pHandle->OvfFreq)
 8001342:	0002      	movs	r2, r0
 8001344:	8808      	ldrh	r0, [r1, #0]
                                 / ((LL_TIM_GetPrescaler(TIMx) + 1U) * 1000U));
 8001346:	21fa      	movs	r1, #250	; 0xfa
    hMaxTimerOverflow = (uint16_t)(((uint32_t)pHandle->HallTimeout * pHandle->OvfFreq)
 8001348:	32c4      	adds	r2, #196	; 0xc4
 800134a:	8812      	ldrh	r2, [r2, #0]
                                 / ((LL_TIM_GetPrescaler(TIMx) + 1U) * 1000U));
 800134c:	3301      	adds	r3, #1
 800134e:	0089      	lsls	r1, r1, #2
    hMaxTimerOverflow = (uint16_t)(((uint32_t)pHandle->HallTimeout * pHandle->OvfFreq)
 8001350:	4350      	muls	r0, r2
                                 / ((LL_TIM_GetPrescaler(TIMx) + 1U) * 1000U));
 8001352:	4359      	muls	r1, r3
 8001354:	f7fe feec 	bl	8000130 <__udivsi3>
    if (pHandle->OVFCounter >= hMaxTimerOverflow)
 8001358:	782e      	ldrb	r6, [r5, #0]
 800135a:	b280      	uxth	r0, r0
 800135c:	b2f6      	uxtb	r6, r6
 800135e:	4286      	cmp	r6, r0
 8001360:	d31c      	bcc.n	800139c <HALL_TIMx_UP_IRQHandler+0x7c>
      pHandle->_Super.hElSpeedDpp = 0;
 8001362:	2600      	movs	r6, #0
      HALL_Init_Electrical_Angle(pHandle);
 8001364:	0020      	movs	r0, r4
      pHandle->_Super.hElSpeedDpp = 0;
 8001366:	81e6      	strh	r6, [r4, #14]
      HALL_Init_Electrical_Angle(pHandle);
 8001368:	f7ff fcc6 	bl	8000cf8 <HALL_Init_Electrical_Angle>
      pHandle->FirstCapt = 0U;
 800136c:	0023      	movs	r3, r4
 800136e:	0022      	movs	r2, r4
 8001370:	334f      	adds	r3, #79	; 0x4f
      pHandle->OVFCounter = 0U;
 8001372:	702e      	strb	r6, [r5, #0]
      pHandle->FirstCapt = 0U;
 8001374:	701e      	strb	r6, [r3, #0]
      for (bIndex = 0U; bIndex < pHandle->SpeedBufferSize; bIndex++)
 8001376:	1de3      	adds	r3, r4, #7
 8001378:	7fdb      	ldrb	r3, [r3, #31]
        pHandle->SensorPeriod[bIndex]  = (int32_t)pHandle->MaxPeriod;
 800137a:	356b      	adds	r5, #107	; 0x6b
 800137c:	0099      	lsls	r1, r3, #2
 800137e:	1909      	adds	r1, r1, r4
 8001380:	6828      	ldr	r0, [r5, #0]
      for (bIndex = 0U; bIndex < pHandle->SpeedBufferSize; bIndex++)
 8001382:	428a      	cmp	r2, r1
 8001384:	d10c      	bne.n	80013a0 <HALL_TIMx_UP_IRQHandler+0x80>
      pHandle->BufferFilled = 0U ;
 8001386:	0021      	movs	r1, r4
 8001388:	2200      	movs	r2, #0
      uint32_t tempReg = pHandle->MaxPeriod * pHandle->SpeedBufferSize;
 800138a:	4343      	muls	r3, r0
      pHandle->BufferFilled = 0U ;
 800138c:	3150      	adds	r1, #80	; 0x50
 800138e:	700a      	strb	r2, [r1, #0]
      pHandle->AvrElSpeedDpp = 0;
 8001390:	3158      	adds	r1, #88	; 0x58
 8001392:	800a      	strh	r2, [r1, #0]
      pHandle->ElPeriodSum = (int32_t)tempReg;
 8001394:	34a0      	adds	r4, #160	; 0xa0
      pHandle->SpeedFIFOIdx = 0U;
 8001396:	390c      	subs	r1, #12
 8001398:	700a      	strb	r2, [r1, #0]
      pHandle->ElPeriodSum = (int32_t)tempReg;
 800139a:	6023      	str	r3, [r4, #0]
}
 800139c:	2000      	movs	r0, #0
 800139e:	bd70      	pop	{r4, r5, r6, pc}
        pHandle->SensorPeriod[bIndex]  = (int32_t)pHandle->MaxPeriod;
 80013a0:	6550      	str	r0, [r2, #84]	; 0x54
      for (bIndex = 0U; bIndex < pHandle->SpeedBufferSize; bIndex++)
 80013a2:	3204      	adds	r2, #4
 80013a4:	e7ec      	b.n	8001380 <HALL_TIMx_UP_IRQHandler+0x60>

080013a6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013a6:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013a8:	2510      	movs	r5, #16
{
 80013aa:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ac:	2228      	movs	r2, #40	; 0x28
 80013ae:	2100      	movs	r1, #0
 80013b0:	a80a      	add	r0, sp, #40	; 0x28
 80013b2:	f004 fe6c 	bl	800608e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013b6:	002a      	movs	r2, r5
 80013b8:	2100      	movs	r1, #0
 80013ba:	4668      	mov	r0, sp
 80013bc:	f004 fe67 	bl	800608e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013c0:	002a      	movs	r2, r5
 80013c2:	2100      	movs	r1, #0
 80013c4:	a804      	add	r0, sp, #16
 80013c6:	f004 fe62 	bl	800608e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSE;
 80013ca:	2311      	movs	r3, #17
 80013cc:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013ce:	2380      	movs	r3, #128	; 0x80
 80013d0:	025b      	lsls	r3, r3, #9
 80013d2:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80013d4:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013d6:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80013d8:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80013da:	035b      	lsls	r3, r3, #13
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013dc:	3d0e      	subs	r5, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013de:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013e0:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80013e2:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013e4:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80013e6:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013e8:	f003 fb58 	bl	8004a9c <HAL_RCC_OscConfig>
 80013ec:	2800      	cmp	r0, #0
 80013ee:	d001      	beq.n	80013f4 <SystemClock_Config+0x4e>
  __ASM volatile ("cpsid i" : : : "memory");
 80013f0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013f2:	e7fe      	b.n	80013f2 <SystemClock_Config+0x4c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013f4:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013f6:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013f8:	9003      	str	r0, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80013fa:	0021      	movs	r1, r4
 80013fc:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013fe:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001400:	9501      	str	r5, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001402:	f003 fd79 	bl	8004ef8 <HAL_RCC_ClockConfig>
 8001406:	2800      	cmp	r0, #0
 8001408:	d001      	beq.n	800140e <SystemClock_Config+0x68>
 800140a:	b672      	cpsid	i
  while (1)
 800140c:	e7fe      	b.n	800140c <SystemClock_Config+0x66>
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800140e:	9006      	str	r0, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001410:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001412:	9404      	str	r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001414:	f003 fe0a 	bl	800502c <HAL_RCCEx_PeriphCLKConfig>
 8001418:	2800      	cmp	r0, #0
 800141a:	d001      	beq.n	8001420 <SystemClock_Config+0x7a>
 800141c:	b672      	cpsid	i
  while (1)
 800141e:	e7fe      	b.n	800141e <SystemClock_Config+0x78>
  HAL_RCC_EnableCSS();
 8001420:	f003 fd3a 	bl	8004e98 <HAL_RCC_EnableCSS>
}
 8001424:	b015      	add	sp, #84	; 0x54
 8001426:	bd30      	pop	{r4, r5, pc}

08001428 <main>:
{
 8001428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800142a:	b097      	sub	sp, #92	; 0x5c
  HAL_Init();
 800142c:	f003 f8ac 	bl	8004588 <HAL_Init>
  SystemClock_Config();
 8001430:	f7ff ffb9 	bl	80013a6 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001434:	2214      	movs	r2, #20
 8001436:	2100      	movs	r1, #0
 8001438:	a80e      	add	r0, sp, #56	; 0x38
 800143a:	f004 fe28 	bl	800608e <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800143e:	2280      	movs	r2, #128	; 0x80
 8001440:	4cca      	ldr	r4, [pc, #808]	; (800176c <main+0x344>)
 8001442:	0312      	lsls	r2, r2, #12
 8001444:	6963      	ldr	r3, [r4, #20]
  HAL_GPIO_WritePin(M1_EN_DRIVER_GPIO_Port, M1_EN_DRIVER_Pin, GPIO_PIN_SET);
 8001446:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001448:	4313      	orrs	r3, r2
 800144a:	6163      	str	r3, [r4, #20]
 800144c:	6963      	ldr	r3, [r4, #20]
  HAL_GPIO_WritePin(M1_EN_DRIVER_GPIO_Port, M1_EN_DRIVER_Pin, GPIO_PIN_SET);
 800144e:	2090      	movs	r0, #144	; 0x90
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001450:	4013      	ands	r3, r2
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001452:	2280      	movs	r2, #128	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001454:	9301      	str	r3, [sp, #4]
 8001456:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001458:	6963      	ldr	r3, [r4, #20]
 800145a:	03d2      	lsls	r2, r2, #15
 800145c:	4313      	orrs	r3, r2
 800145e:	6163      	str	r3, [r4, #20]
 8001460:	6963      	ldr	r3, [r4, #20]
  HAL_GPIO_WritePin(M1_EN_DRIVER_GPIO_Port, M1_EN_DRIVER_Pin, GPIO_PIN_SET);
 8001462:	0109      	lsls	r1, r1, #4
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001464:	4013      	ands	r3, r2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001466:	2280      	movs	r2, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001468:	9302      	str	r3, [sp, #8]
 800146a:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800146c:	6963      	ldr	r3, [r4, #20]
 800146e:	0292      	lsls	r2, r2, #10
 8001470:	4313      	orrs	r3, r2
 8001472:	6163      	str	r3, [r4, #20]
 8001474:	6963      	ldr	r3, [r4, #20]
  HAL_GPIO_WritePin(M1_EN_DRIVER_GPIO_Port, M1_EN_DRIVER_Pin, GPIO_PIN_SET);
 8001476:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001478:	4013      	ands	r3, r2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800147a:	2280      	movs	r2, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800147c:	9303      	str	r3, [sp, #12]
 800147e:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001480:	6963      	ldr	r3, [r4, #20]
 8001482:	02d2      	lsls	r2, r2, #11
 8001484:	4313      	orrs	r3, r2
 8001486:	6163      	str	r3, [r4, #20]
 8001488:	6963      	ldr	r3, [r4, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800148a:	2501      	movs	r5, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800148c:	4013      	ands	r3, r2
 800148e:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(M1_EN_DRIVER_GPIO_Port, M1_EN_DRIVER_Pin, GPIO_PIN_SET);
 8001490:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001492:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(M1_EN_DRIVER_GPIO_Port, M1_EN_DRIVER_Pin, GPIO_PIN_SET);
 8001494:	f003 fafc 	bl	8004a90 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8001498:	2380      	movs	r3, #128	; 0x80
 800149a:	021b      	lsls	r3, r3, #8
 800149c:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800149e:	2384      	movs	r3, #132	; 0x84
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 80014a0:	48b3      	ldr	r0, [pc, #716]	; (8001770 <main+0x348>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014a2:	039b      	lsls	r3, r3, #14
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 80014a4:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014a6:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014a8:	9510      	str	r5, [sp, #64]	; 0x40
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 80014aa:	f003 fa3f 	bl	800492c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = M1_EN_DRIVER_Pin;
 80014ae:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(M1_EN_DRIVER_GPIO_Port, &GPIO_InitStruct);
 80014b0:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = M1_EN_DRIVER_Pin;
 80014b2:	011b      	lsls	r3, r3, #4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b4:	2600      	movs	r6, #0
  GPIO_InitStruct.Pin = M1_EN_DRIVER_Pin;
 80014b6:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014b8:	2302      	movs	r3, #2
  HAL_GPIO_Init(M1_EN_DRIVER_GPIO_Port, &GPIO_InitStruct);
 80014ba:	a90e      	add	r1, sp, #56	; 0x38
 80014bc:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014be:	9310      	str	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c0:	950f      	str	r5, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c2:	9611      	str	r6, [sp, #68]	; 0x44
  HAL_GPIO_Init(M1_EN_DRIVER_GPIO_Port, &GPIO_InitStruct);
 80014c4:	f003 fa32 	bl	800492c <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014c8:	6963      	ldr	r3, [r4, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 80014ca:	220c      	movs	r2, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014cc:	432b      	orrs	r3, r5
 80014ce:	6163      	str	r3, [r4, #20]
 80014d0:	6963      	ldr	r3, [r4, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 80014d2:	0031      	movs	r1, r6
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014d4:	402b      	ands	r3, r5
 80014d6:	9300      	str	r3, [sp, #0]
  ADC_ChannelConfTypeDef sConfig = {0};
 80014d8:	a80e      	add	r0, sp, #56	; 0x38
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014da:	9b00      	ldr	r3, [sp, #0]
  ADC_ChannelConfTypeDef sConfig = {0};
 80014dc:	f004 fdd7 	bl	800608e <memset>
  hadc.Instance = ADC1;
 80014e0:	4ca4      	ldr	r4, [pc, #656]	; (8001774 <main+0x34c>)
 80014e2:	4ba5      	ldr	r3, [pc, #660]	; (8001778 <main+0x350>)
  hadc.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80014e4:	2720      	movs	r7, #32
  hadc.Instance = ADC1;
 80014e6:	6023      	str	r3, [r4, #0]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014e8:	2304      	movs	r3, #4
 80014ea:	6163      	str	r3, [r4, #20]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80014ec:	2380      	movs	r3, #128	; 0x80
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	6223      	str	r3, [r4, #32]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80014f2:	0020      	movs	r0, r4
  hadc.Init.DMAContinuousRequests = ENABLE;
 80014f4:	1d63      	adds	r3, r4, #5
  hadc.Init.LowPowerAutoWait = DISABLE;
 80014f6:	61a6      	str	r6, [r4, #24]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80014f8:	6066      	str	r6, [r4, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80014fa:	60a6      	str	r6, [r4, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80014fc:	60e7      	str	r7, [r4, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80014fe:	6125      	str	r5, [r4, #16]
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 8001500:	61e6      	str	r6, [r4, #28]
  hadc.Init.DMAContinuousRequests = ENABLE;
 8001502:	77dd      	strb	r5, [r3, #31]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001504:	62a5      	str	r5, [r4, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001506:	f003 f861 	bl	80045cc <HAL_ADC_Init>
 800150a:	42b0      	cmp	r0, r6
 800150c:	d001      	beq.n	8001512 <main+0xea>
 800150e:	b672      	cpsid	i
  while (1)
 8001510:	e7fe      	b.n	8001510 <main+0xe8>
  sConfig.Channel = ADC_CHANNEL_5;
 8001512:	2305      	movs	r3, #5
 8001514:	930e      	str	r3, [sp, #56]	; 0x38
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001516:	2380      	movs	r3, #128	; 0x80
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001518:	0020      	movs	r0, r4
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800151a:	015b      	lsls	r3, r3, #5
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800151c:	a90e      	add	r1, sp, #56	; 0x38
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800151e:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8001520:	9510      	str	r5, [sp, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001522:	f003 f8f7 	bl	8004714 <HAL_ADC_ConfigChannel>
 8001526:	2800      	cmp	r0, #0
 8001528:	d001      	beq.n	800152e <main+0x106>
 800152a:	b672      	cpsid	i
  while (1)
 800152c:	e7fe      	b.n	800152c <main+0x104>
  sConfig.Channel = ADC_CHANNEL_9;
 800152e:	2309      	movs	r3, #9
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001530:	0020      	movs	r0, r4
 8001532:	a90e      	add	r1, sp, #56	; 0x38
  sConfig.Channel = ADC_CHANNEL_9;
 8001534:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001536:	f003 f8ed 	bl	8004714 <HAL_ADC_ConfigChannel>
 800153a:	1e05      	subs	r5, r0, #0
 800153c:	d001      	beq.n	8001542 <main+0x11a>
 800153e:	b672      	cpsid	i
  while (1)
 8001540:	e7fe      	b.n	8001540 <main+0x118>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001542:	2608      	movs	r6, #8
 8001544:	0001      	movs	r1, r0
 8001546:	0032      	movs	r2, r6
 8001548:	a805      	add	r0, sp, #20
 800154a:	f004 fda0 	bl	800608e <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800154e:	221c      	movs	r2, #28
 8001550:	0029      	movs	r1, r5
 8001552:	a807      	add	r0, sp, #28
 8001554:	f004 fd9b 	bl	800608e <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001558:	003a      	movs	r2, r7
 800155a:	0029      	movs	r1, r5
 800155c:	a80e      	add	r0, sp, #56	; 0x38
 800155e:	f004 fd96 	bl	800608e <memset>
  htim1.Instance = TIM1;
 8001562:	4c86      	ldr	r4, [pc, #536]	; (800177c <main+0x354>)
 8001564:	4b86      	ldr	r3, [pc, #536]	; (8001780 <main+0x358>)
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001566:	0020      	movs	r0, r4
  htim1.Instance = TIM1;
 8001568:	6023      	str	r3, [r4, #0]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 800156a:	2340      	movs	r3, #64	; 0x40
 800156c:	60a3      	str	r3, [r4, #8]
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 800156e:	4b85      	ldr	r3, [pc, #532]	; (8001784 <main+0x35c>)
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 8001570:	6065      	str	r5, [r4, #4]
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 8001572:	60e3      	str	r3, [r4, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001574:	2380      	movs	r3, #128	; 0x80
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	6123      	str	r3, [r4, #16]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 800157a:	3bfd      	subs	r3, #253	; 0xfd
 800157c:	6163      	str	r3, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800157e:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001580:	f003 fefa 	bl	8005378 <HAL_TIM_PWM_Init>
 8001584:	2800      	cmp	r0, #0
 8001586:	d001      	beq.n	800158c <main+0x164>
 8001588:	b672      	cpsid	i
  while (1)
 800158a:	e7fe      	b.n	800158a <main+0x162>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800158c:	9006      	str	r0, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800158e:	a905      	add	r1, sp, #20
 8001590:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001592:	9705      	str	r7, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001594:	f004 f8e6 	bl	8005764 <HAL_TIMEx_MasterConfigSynchronization>
 8001598:	1e02      	subs	r2, r0, #0
 800159a:	d001      	beq.n	80015a0 <main+0x178>
 800159c:	b672      	cpsid	i
  while (1)
 800159e:	e7fe      	b.n	800159e <main+0x176>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015a0:	2360      	movs	r3, #96	; 0x60
 80015a2:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 80015a4:	4b78      	ldr	r3, [pc, #480]	; (8001788 <main+0x360>)
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015a6:	900b      	str	r0, [sp, #44]	; 0x2c
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 80015a8:	9308      	str	r3, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80015aa:	2302      	movs	r3, #2
 80015ac:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 80015ae:	33fe      	adds	r3, #254	; 0xfe
 80015b0:	930c      	str	r3, [sp, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 80015b2:	3301      	adds	r3, #1
 80015b4:	33ff      	adds	r3, #255	; 0xff
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015b6:	0020      	movs	r0, r4
 80015b8:	a907      	add	r1, sp, #28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 80015ba:	960a      	str	r6, [sp, #40]	; 0x28
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 80015bc:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015be:	f003 ff3f 	bl	8005440 <HAL_TIM_PWM_ConfigChannel>
 80015c2:	2800      	cmp	r0, #0
 80015c4:	d001      	beq.n	80015ca <main+0x1a2>
 80015c6:	b672      	cpsid	i
  while (1)
 80015c8:	e7fe      	b.n	80015c8 <main+0x1a0>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015ca:	2204      	movs	r2, #4
 80015cc:	0020      	movs	r0, r4
 80015ce:	a907      	add	r1, sp, #28
 80015d0:	f003 ff36 	bl	8005440 <HAL_TIM_PWM_ConfigChannel>
 80015d4:	2800      	cmp	r0, #0
 80015d6:	d001      	beq.n	80015dc <main+0x1b4>
 80015d8:	b672      	cpsid	i
  while (1)
 80015da:	e7fe      	b.n	80015da <main+0x1b2>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015dc:	0032      	movs	r2, r6
 80015de:	0020      	movs	r0, r4
 80015e0:	a907      	add	r1, sp, #28
 80015e2:	f003 ff2d 	bl	8005440 <HAL_TIM_PWM_ConfigChannel>
 80015e6:	2800      	cmp	r0, #0
 80015e8:	d001      	beq.n	80015ee <main+0x1c6>
 80015ea:	b672      	cpsid	i
  while (1)
 80015ec:	e7fe      	b.n	80015ec <main+0x1c4>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80015ee:	2370      	movs	r3, #112	; 0x70
 80015f0:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 80015f2:	23df      	movs	r3, #223	; 0xdf
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015f4:	9009      	str	r0, [sp, #36]	; 0x24
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 80015f6:	00db      	lsls	r3, r3, #3
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015f8:	900c      	str	r0, [sp, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015fa:	900d      	str	r0, [sp, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015fc:	220c      	movs	r2, #12
 80015fe:	0020      	movs	r0, r4
 8001600:	a907      	add	r1, sp, #28
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 8001602:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001604:	f003 ff1c 	bl	8005440 <HAL_TIM_PWM_ConfigChannel>
 8001608:	2800      	cmp	r0, #0
 800160a:	d001      	beq.n	8001610 <main+0x1e8>
 800160c:	b672      	cpsid	i
  while (1)
 800160e:	e7fe      	b.n	800160e <main+0x1e6>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001610:	2380      	movs	r3, #128	; 0x80
 8001612:	011b      	lsls	r3, r3, #4
 8001614:	930e      	str	r3, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8001616:	2380      	movs	r3, #128	; 0x80
 8001618:	00db      	lsls	r3, r3, #3
 800161a:	930f      	str	r3, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 800161c:	230e      	movs	r3, #14
 800161e:	9311      	str	r3, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8001620:	2380      	movs	r3, #128	; 0x80
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001622:	9010      	str	r0, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8001624:	015b      	lsls	r3, r3, #5
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 8001626:	9013      	str	r0, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001628:	9015      	str	r0, [sp, #84]	; 0x54
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800162a:	a90e      	add	r1, sp, #56	; 0x38
 800162c:	0020      	movs	r0, r4
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 800162e:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001630:	f004 f8c4 	bl	80057bc <HAL_TIMEx_ConfigBreakDeadTime>
 8001634:	2800      	cmp	r0, #0
 8001636:	d001      	beq.n	800163c <main+0x214>
 8001638:	b672      	cpsid	i
  while (1)
 800163a:	e7fe      	b.n	800163a <main+0x212>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800163c:	2508      	movs	r5, #8
  HAL_TIM_MspPostInit(&htim1);
 800163e:	0020      	movs	r0, r4
 8001640:	f002 fd56 	bl	80040f0 <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001644:	2210      	movs	r2, #16
 8001646:	2100      	movs	r1, #0
 8001648:	a807      	add	r0, sp, #28
 800164a:	f004 fd20 	bl	800608e <memset>
  TIM_HallSensor_InitTypeDef sConfig = {0};
 800164e:	2210      	movs	r2, #16
 8001650:	2100      	movs	r1, #0
 8001652:	a80e      	add	r0, sp, #56	; 0x38
 8001654:	f004 fd1b 	bl	800608e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001658:	002a      	movs	r2, r5
 800165a:	2100      	movs	r1, #0
 800165c:	a805      	add	r0, sp, #20
 800165e:	f004 fd16 	bl	800608e <memset>
  htim2.Instance = TIM2;
 8001662:	2380      	movs	r3, #128	; 0x80
 8001664:	4c49      	ldr	r4, [pc, #292]	; (800178c <main+0x364>)
 8001666:	05db      	lsls	r3, r3, #23
 8001668:	6023      	str	r3, [r4, #0]
  htim2.Init.Prescaler = 0;
 800166a:	2300      	movs	r3, #0
  htim2.Init.Period = M1_HALL_TIM_PERIOD;
 800166c:	4a48      	ldr	r2, [pc, #288]	; (8001790 <main+0x368>)
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800166e:	0020      	movs	r0, r4
  htim2.Init.Prescaler = 0;
 8001670:	6063      	str	r3, [r4, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001672:	60a3      	str	r3, [r4, #8]
  htim2.Init.Period = M1_HALL_TIM_PERIOD;
 8001674:	60e2      	str	r2, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001676:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001678:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800167a:	f003 fe55 	bl	8005328 <HAL_TIM_Base_Init>
 800167e:	2800      	cmp	r0, #0
 8001680:	d001      	beq.n	8001686 <main+0x25e>
 8001682:	b672      	cpsid	i
  while (1)
 8001684:	e7fe      	b.n	8001684 <main+0x25c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001686:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001688:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800168a:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800168c:	a907      	add	r1, sp, #28
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800168e:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001690:	f003 ff6c 	bl	800556c <HAL_TIM_ConfigClockSource>
 8001694:	2800      	cmp	r0, #0
 8001696:	d001      	beq.n	800169c <main+0x274>
 8001698:	b672      	cpsid	i
  while (1)
 800169a:	e7fe      	b.n	800169a <main+0x272>
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800169c:	900e      	str	r0, [sp, #56]	; 0x38
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800169e:	900f      	str	r0, [sp, #60]	; 0x3c
  sConfig.Commutation_Delay = 0;
 80016a0:	9011      	str	r0, [sp, #68]	; 0x44
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 80016a2:	a90e      	add	r1, sp, #56	; 0x38
 80016a4:	0020      	movs	r0, r4
  sConfig.IC1Filter = M1_HALL_IC_FILTER;
 80016a6:	9510      	str	r5, [sp, #64]	; 0x40
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 80016a8:	f003 fffb 	bl	80056a2 <HAL_TIMEx_HallSensor_Init>
 80016ac:	2800      	cmp	r0, #0
 80016ae:	d001      	beq.n	80016b4 <main+0x28c>
 80016b0:	b672      	cpsid	i
  while (1)
 80016b2:	e7fe      	b.n	80016b2 <main+0x28a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80016b4:	2350      	movs	r3, #80	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016b6:	9006      	str	r0, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016b8:	a905      	add	r1, sp, #20
 80016ba:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80016bc:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016be:	f004 f851 	bl	8005764 <HAL_TIMEx_MasterConfigSynchronization>
 80016c2:	1e03      	subs	r3, r0, #0
 80016c4:	d001      	beq.n	80016ca <main+0x2a2>
 80016c6:	b672      	cpsid	i
  while (1)
 80016c8:	e7fe      	b.n	80016c8 <main+0x2a0>
  huart1.Instance = USART1;
 80016ca:	4832      	ldr	r0, [pc, #200]	; (8001794 <main+0x36c>)
 80016cc:	4a32      	ldr	r2, [pc, #200]	; (8001798 <main+0x370>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016ce:	6083      	str	r3, [r0, #8]
  huart1.Instance = USART1;
 80016d0:	6002      	str	r2, [r0, #0]
  huart1.Init.BaudRate = 1843200;
 80016d2:	22e1      	movs	r2, #225	; 0xe1
 80016d4:	0352      	lsls	r2, r2, #13
 80016d6:	6042      	str	r2, [r0, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016d8:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016da:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016dc:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016de:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016e0:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016e2:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016e4:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016e6:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016e8:	f004 fa60 	bl	8005bac <HAL_UART_Init>
 80016ec:	1e04      	subs	r4, r0, #0
 80016ee:	d001      	beq.n	80016f4 <main+0x2cc>
 80016f0:	b672      	cpsid	i
  while (1)
 80016f2:	e7fe      	b.n	80016f2 <main+0x2ca>
  MX_MotorControl_Init();
 80016f4:	f000 fee2 	bl	80024bc <MX_MotorControl_Init>
  HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 80016f8:	0022      	movs	r2, r4
 80016fa:	2103      	movs	r1, #3
 80016fc:	201b      	movs	r0, #27
 80016fe:	f003 f88d 	bl	800481c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001702:	201b      	movs	r0, #27
 8001704:	f003 f8b4 	bl	8004870 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8001708:	0022      	movs	r2, r4
 800170a:	2101      	movs	r1, #1
 800170c:	2009      	movs	r0, #9
 800170e:	f003 f885 	bl	800481c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001712:	2009      	movs	r0, #9
 8001714:	f003 f8ac 	bl	8004870 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8001718:	0022      	movs	r2, r4
 800171a:	0021      	movs	r1, r4
 800171c:	200b      	movs	r0, #11
 800171e:	f003 f87d 	bl	800481c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8001722:	200b      	movs	r0, #11
 8001724:	f003 f8a4 	bl	8004870 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 3, 0);
 8001728:	0022      	movs	r2, r4
 800172a:	2103      	movs	r1, #3
 800172c:	200a      	movs	r0, #10
 800172e:	f003 f875 	bl	800481c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001732:	200a      	movs	r0, #10
 8001734:	f003 f89c 	bl	8004870 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8001738:	0022      	movs	r2, r4
 800173a:	0021      	movs	r1, r4
 800173c:	200d      	movs	r0, #13
 800173e:	f003 f86d 	bl	800481c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8001742:	200d      	movs	r0, #13
 8001744:	f003 f894 	bl	8004870 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8001748:	0022      	movs	r2, r4
 800174a:	2103      	movs	r1, #3
 800174c:	200f      	movs	r0, #15
 800174e:	f003 f865 	bl	800481c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001752:	200f      	movs	r0, #15
 8001754:	f003 f88c 	bl	8004870 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 3, 0);
 8001758:	2007      	movs	r0, #7
 800175a:	0022      	movs	r2, r4
 800175c:	2103      	movs	r1, #3
 800175e:	f003 f85d 	bl	800481c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001762:	2007      	movs	r0, #7
 8001764:	f003 f884 	bl	8004870 <HAL_NVIC_EnableIRQ>
  while (1)
 8001768:	e7fe      	b.n	8001768 <main+0x340>
 800176a:	46c0      	nop			; (mov r8, r8)
 800176c:	40021000 	.word	0x40021000
 8001770:	48000800 	.word	0x48000800
 8001774:	2000039c 	.word	0x2000039c
 8001778:	40012400 	.word	0x40012400
 800177c:	20000530 	.word	0x20000530
 8001780:	40012c00 	.word	0x40012c00
 8001784:	00000736 	.word	0x00000736
 8001788:	0000039b 	.word	0x0000039b
 800178c:	20000578 	.word	0x20000578
 8001790:	0000ffff 	.word	0x0000ffff
 8001794:	200005c0 	.word	0x200005c0
 8001798:	40013800 	.word	0x40013800

0800179c <Error_Handler>:
 800179c:	b672      	cpsid	i
  while (1)
 800179e:	e7fe      	b.n	800179e <Error_Handler+0x2>

080017a0 <MC_StartMotor1>:
  * Note also that if the startup sequence fails the #RUN state may never be reached.
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
 80017a0:	b510      	push	{r4, lr}
  return (MCI_StartMotor(pMCI[M1]));
 80017a2:	4b02      	ldr	r3, [pc, #8]	; (80017ac <MC_StartMotor1+0xc>)
 80017a4:	6818      	ldr	r0, [r3, #0]
 80017a6:	f000 f87d 	bl	80018a4 <MCI_StartMotor>
}
 80017aa:	bd10      	pop	{r4, pc}
 80017ac:	200007cc 	.word	0x200007cc

080017b0 <MC_StopMotor1>:
  * machine and check if the #IDLE state has been reached.
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
 80017b0:	b510      	push	{r4, lr}
  return (MCI_StopMotor(pMCI[M1]));
 80017b2:	4b02      	ldr	r3, [pc, #8]	; (80017bc <MC_StopMotor1+0xc>)
 80017b4:	6818      	ldr	r0, [r3, #0]
 80017b6:	f000 f8a6 	bl	8001906 <MCI_StopMotor>
}
 80017ba:	bd10      	pop	{r4, pc}
 80017bc:	200007cc 	.word	0x200007cc

080017c0 <MC_GetSTMStateMotor1>:

/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak MCI_State_t MC_GetSTMStateMotor1(void)
{
 80017c0:	b510      	push	{r4, lr}
  return (MCI_GetSTMState(pMCI[M1]));
 80017c2:	4b02      	ldr	r3, [pc, #8]	; (80017cc <MC_GetSTMStateMotor1+0xc>)
 80017c4:	6818      	ldr	r0, [r3, #0]
 80017c6:	f000 f867 	bl	8001898 <MCI_GetSTMState>
}
 80017ca:	bd10      	pop	{r4, pc}
 80017cc:	200007cc 	.word	0x200007cc

080017d0 <MC_ProfilerCommand>:
 * @brief Not implemented MC_Profiler function.
 *  */ //cstat !MISRAC2012-Rule-2.7 !RED-unused-param  !MISRAC2012-Rule-2.7  !MISRAC2012-Rule-8.13
__weak uint8_t MC_ProfilerCommand(uint16_t rxLength, uint8_t *rxBuffer, int16_t txSyncFreeSpace, uint16_t *txLength, uint8_t *txBuffer)
{
  return (MCP_CMD_UNKNOWN);
}
 80017d0:	2002      	movs	r0, #2
 80017d2:	4770      	bx	lr

080017d4 <MC_APP_BootHook>:
   */

/* USER CODE BEGIN BootHook */

/* USER CODE END BootHook */
}
 80017d4:	4770      	bx	lr

080017d6 <MC_APP_PostMediumFrequencyHook_M1>:
 80017d6:	4770      	bx	lr

080017d8 <MCI_Init>:
  else
  {
#endif
    pHandle->pSTC = pSTC;
    pHandle->pFOCVars = pFOCVars;
    pHandle->pPWM = pPWMHandle;
 80017d8:	6083      	str	r3, [r0, #8]

    /* Buffer related initialization */
    pHandle->lastCommand = MCI_NOCOMMANDSYET;
 80017da:	2300      	movs	r3, #0
 80017dc:	7303      	strb	r3, [r0, #12]
    pHandle->hFinalSpeed = 0;
    pHandle->hFinalTorque = 0;
    pHandle->hDurationms = 0;
 80017de:	61c3      	str	r3, [r0, #28]
    pHandle->pSTC = pSTC;
 80017e0:	6001      	str	r1, [r0, #0]
    pHandle->pFOCVars = pFOCVars;
 80017e2:	6042      	str	r2, [r0, #4]
    pHandle->hFinalSpeed = 0;
 80017e4:	81c3      	strh	r3, [r0, #14]
    pHandle->hFinalTorque = 0;
 80017e6:	8203      	strh	r3, [r0, #16]
    pHandle->CommandState = MCI_BUFFER_EMPTY;
    pHandle->DirectCommand = MCI_NO_COMMAND;
    pHandle->State = IDLE;
    pHandle->CurrentFaults = MC_NO_FAULTS;
 80017e8:	6203      	str	r3, [r0, #32]
    pHandle->CommandState = MCI_BUFFER_EMPTY;
 80017ea:	3005      	adds	r0, #5
 80017ec:	77c3      	strb	r3, [r0, #31]
    pHandle->PastFaults = MC_NO_FAULTS;
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 80017ee:	4770      	bx	lr

080017f0 <MCI_ExecSpeedRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 80017f0:	2301      	movs	r3, #1
 80017f2:	7303      	strb	r3, [r0, #12]
    pHandle->hFinalSpeed = hFinalSpeed;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80017f4:	4b02      	ldr	r3, [pc, #8]	; (8001800 <MCI_ExecSpeedRamp+0x10>)
    pHandle->hFinalSpeed = hFinalSpeed;
 80017f6:	81c1      	strh	r1, [r0, #14]
    pHandle->hDurationms = hDurationms;
 80017f8:	8382      	strh	r2, [r0, #28]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80017fa:	8483      	strh	r3, [r0, #36]	; 0x24
    pHandle->LastModalitySetByUser = MCM_SPEED_MODE;

#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 80017fc:	4770      	bx	lr
 80017fe:	46c0      	nop			; (mov r8, r8)
 8001800:	00000301 	.word	0x00000301

08001804 <MCI_ExecTorqueRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 8001804:	2302      	movs	r3, #2
 8001806:	7303      	strb	r3, [r0, #12]
    pHandle->hFinalTorque = hFinalTorque;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001808:	4b02      	ldr	r3, [pc, #8]	; (8001814 <MCI_ExecTorqueRamp+0x10>)
    pHandle->hFinalTorque = hFinalTorque;
 800180a:	8201      	strh	r1, [r0, #16]
    pHandle->hDurationms = hDurationms;
 800180c:	8382      	strh	r2, [r0, #28]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800180e:	8483      	strh	r3, [r0, #36]	; 0x24
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8001810:	4770      	bx	lr
 8001812:	46c0      	nop			; (mov r8, r8)
 8001814:	00000401 	.word	0x00000401

08001818 <MCI_FaultProcessing>:
  }
  else
  {
#endif
    /* Set current errors */
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8001818:	8c03      	ldrh	r3, [r0, #32]
 800181a:	430b      	orrs	r3, r1
 800181c:	4393      	bics	r3, r2
 800181e:	8403      	strh	r3, [r0, #32]
    pHandle->PastFaults |= hSetErrors;
 8001820:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8001822:	4319      	orrs	r1, r3
 8001824:	8441      	strh	r1, [r0, #34]	; 0x22
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8001826:	4770      	bx	lr

08001828 <MCI_ExecBufferedCommands>:
  *         and eventually to execute the buffered command if the condition
  *         occurs.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_ExecBufferedCommands(MCI_Handle_t *pHandle)
{
 8001828:	b570      	push	{r4, r5, r6, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 800182a:	1d45      	adds	r5, r0, #5
 800182c:	7fea      	ldrb	r2, [r5, #31]
{
 800182e:	0004      	movs	r4, r0
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8001830:	2a01      	cmp	r2, #1
 8001832:	d118      	bne.n	8001866 <MCI_ExecBufferedCommands+0x3e>
    {
      bool commandHasBeenExecuted = false;
      switch (pHandle->lastCommand)
 8001834:	7b03      	ldrb	r3, [r0, #12]
 8001836:	2b02      	cmp	r3, #2
 8001838:	d016      	beq.n	8001868 <MCI_ExecBufferedCommands+0x40>
 800183a:	2b03      	cmp	r3, #3
 800183c:	d020      	beq.n	8001880 <MCI_ExecBufferedCommands+0x58>
 800183e:	2b01      	cmp	r3, #1
 8001840:	d128      	bne.n	8001894 <MCI_ExecBufferedCommands+0x6c>
      {
        case MCI_CMD_EXECSPEEDRAMP:
        {
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001842:	2200      	movs	r2, #0
 8001844:	6843      	ldr	r3, [r0, #4]
          STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 8001846:	2103      	movs	r1, #3
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001848:	3305      	adds	r3, #5
 800184a:	77da      	strb	r2, [r3, #31]
          STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 800184c:	6800      	ldr	r0, [r0, #0]
 800184e:	f004 fb9e 	bl	8005f8e <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms);
 8001852:	8ba2      	ldrh	r2, [r4, #28]
 8001854:	230e      	movs	r3, #14
 8001856:	5ee1      	ldrsh	r1, [r4, r3]

        case MCI_CMD_EXECTORQUERAMP:
        {
          pHandle->pFOCVars->bDriveInput = INTERNAL;
          STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms);
 8001858:	6820      	ldr	r0, [r4, #0]
 800185a:	f004 fb9c 	bl	8005f96 <STC_ExecRamp>

        default:
          break;
      }

      if (commandHasBeenExecuted)
 800185e:	2800      	cmp	r0, #0
 8001860:	d018      	beq.n	8001894 <MCI_ExecBufferedCommands+0x6c>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESSFULLY;
 8001862:	2302      	movs	r3, #2
      }
      else
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESSFULLY;
 8001864:	77eb      	strb	r3, [r5, #31]
      }
    }
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8001866:	bd70      	pop	{r4, r5, r6, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001868:	2200      	movs	r2, #0
 800186a:	6843      	ldr	r3, [r0, #4]
          STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 800186c:	2104      	movs	r1, #4
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 800186e:	3305      	adds	r3, #5
 8001870:	77da      	strb	r2, [r3, #31]
          STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 8001872:	6800      	ldr	r0, [r0, #0]
 8001874:	f004 fb8b 	bl	8005f8e <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms);
 8001878:	8ba2      	ldrh	r2, [r4, #28]
 800187a:	2310      	movs	r3, #16
 800187c:	5ee1      	ldrsh	r1, [r4, r3]
 800187e:	e7eb      	b.n	8001858 <MCI_ExecBufferedCommands+0x30>
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8001880:	0021      	movs	r1, r4
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8001882:	6840      	ldr	r0, [r0, #4]
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8001884:	3112      	adds	r1, #18
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8001886:	1d43      	adds	r3, r0, #5
 8001888:	77da      	strb	r2, [r3, #31]
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 800188a:	3010      	adds	r0, #16
 800188c:	2204      	movs	r2, #4
 800188e:	f004 fc2b 	bl	80060e8 <memcpy>
      if (commandHasBeenExecuted)
 8001892:	e7e6      	b.n	8001862 <MCI_ExecBufferedCommands+0x3a>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESSFULLY;
 8001894:	2303      	movs	r3, #3
 8001896:	e7e5      	b.n	8001864 <MCI_ExecBufferedCommands+0x3c>

08001898 <MCI_GetSTMState>:
__weak MCI_State_t MCI_GetSTMState(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? FAULT_NOW : pHandle->State);
#else
  return (pHandle->State);
 8001898:	7fc0      	ldrb	r0, [r0, #31]
#endif
}
 800189a:	4770      	bx	lr

0800189c <MCI_GetOccurredFaults>:
__weak uint16_t MCI_GetOccurredFaults(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->PastFaults);
#else
  return ((uint16_t)pHandle->PastFaults);
 800189c:	8c40      	ldrh	r0, [r0, #34]	; 0x22
#endif
}
 800189e:	4770      	bx	lr

080018a0 <MCI_GetCurrentFaults>:
__weak uint16_t MCI_GetCurrentFaults(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->CurrentFaults);
#else
  return ((uint16_t)pHandle->CurrentFaults);
 80018a0:	8c00      	ldrh	r0, [r0, #32]
#endif
}
 80018a2:	4770      	bx	lr

080018a4 <MCI_StartMotor>:
{
 80018a4:	b510      	push	{r4, lr}
 80018a6:	0004      	movs	r4, r0
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 80018a8:	f7ff fff6 	bl	8001898 <MCI_GetSTMState>
 80018ac:	2800      	cmp	r0, #0
 80018ae:	d001      	beq.n	80018b4 <MCI_StartMotor+0x10>
  bool retVal = false;
 80018b0:	2000      	movs	r0, #0
}
 80018b2:	bd10      	pop	{r4, pc}
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80018b4:	0020      	movs	r0, r4
 80018b6:	f7ff fff1 	bl	800189c <MCI_GetOccurredFaults>
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 80018ba:	2800      	cmp	r0, #0
 80018bc:	d1f8      	bne.n	80018b0 <MCI_StartMotor+0xc>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 80018be:	0020      	movs	r0, r4
 80018c0:	f7ff ffee 	bl	80018a0 <MCI_GetCurrentFaults>
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80018c4:	2800      	cmp	r0, #0
 80018c6:	d1f3      	bne.n	80018b0 <MCI_StartMotor+0xc>
      pHandle->DirectCommand = MCI_START;
 80018c8:	3001      	adds	r0, #1
 80018ca:	77a0      	strb	r0, [r4, #30]
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80018cc:	3405      	adds	r4, #5
 80018ce:	77e0      	strb	r0, [r4, #31]
      retVal = true;
 80018d0:	e7ef      	b.n	80018b2 <MCI_StartMotor+0xe>

080018d2 <MCI_StartWithPolarizationMotor>:
{
 80018d2:	b510      	push	{r4, lr}
 80018d4:	0004      	movs	r4, r0
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 80018d6:	f7ff ffdf 	bl	8001898 <MCI_GetSTMState>
 80018da:	2800      	cmp	r0, #0
 80018dc:	d001      	beq.n	80018e2 <MCI_StartWithPolarizationMotor+0x10>
  bool retVal = true;
 80018de:	2001      	movs	r0, #1
}
 80018e0:	bd10      	pop	{r4, pc}
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80018e2:	0020      	movs	r0, r4
 80018e4:	f7ff ffda 	bl	800189c <MCI_GetOccurredFaults>
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 80018e8:	2800      	cmp	r0, #0
 80018ea:	d1f8      	bne.n	80018de <MCI_StartWithPolarizationMotor+0xc>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 80018ec:	0020      	movs	r0, r4
 80018ee:	f7ff ffd7 	bl	80018a0 <MCI_GetCurrentFaults>
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80018f2:	2800      	cmp	r0, #0
 80018f4:	d1f3      	bne.n	80018de <MCI_StartWithPolarizationMotor+0xc>
      pHandle->DirectCommand = MCI_START;
 80018f6:	2301      	movs	r3, #1
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80018f8:	1d62      	adds	r2, r4, #5
      pHandle->DirectCommand = MCI_START;
 80018fa:	77a3      	strb	r3, [r4, #30]
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80018fc:	77d3      	strb	r3, [r2, #31]
      pHandle->pPWM->offsetCalibStatus = false;
 80018fe:	68a3      	ldr	r3, [r4, #8]
 8001900:	3381      	adds	r3, #129	; 0x81
 8001902:	7018      	strb	r0, [r3, #0]
      retVal = false;
 8001904:	e7ec      	b.n	80018e0 <MCI_StartWithPolarizationMotor+0xe>

08001906 <MCI_StopMotor>:
{
 8001906:	b570      	push	{r4, r5, r6, lr}
 8001908:	0004      	movs	r4, r0
      status = false;
 800190a:	2500      	movs	r5, #0
    State = MCI_GetSTMState(pHandle);
 800190c:	f7ff ffc4 	bl	8001898 <MCI_GetSTMState>
    if ((IDLE == State) || (ICLWAIT == State))
 8001910:	42a8      	cmp	r0, r5
 8001912:	d003      	beq.n	800191c <MCI_StopMotor+0x16>
 8001914:	380c      	subs	r0, #12
 8001916:	1e43      	subs	r3, r0, #1
 8001918:	4198      	sbcs	r0, r3
 800191a:	b2c5      	uxtb	r5, r0
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 800191c:	0020      	movs	r0, r4
 800191e:	f7ff ffbd 	bl	800189c <MCI_GetOccurredFaults>
 8001922:	2800      	cmp	r0, #0
 8001924:	d002      	beq.n	800192c <MCI_StopMotor+0x26>
  bool retVal = false;
 8001926:	2500      	movs	r5, #0
}
 8001928:	0028      	movs	r0, r5
 800192a:	bd70      	pop	{r4, r5, r6, pc}
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 800192c:	0020      	movs	r0, r4
 800192e:	f7ff ffb7 	bl	80018a0 <MCI_GetCurrentFaults>
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001932:	2800      	cmp	r0, #0
 8001934:	d1f7      	bne.n	8001926 <MCI_StopMotor+0x20>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 8001936:	2d00      	cmp	r5, #0
 8001938:	d0f5      	beq.n	8001926 <MCI_StopMotor+0x20>
      pHandle->DirectCommand = MCI_STOP;
 800193a:	2305      	movs	r3, #5
 800193c:	77a3      	strb	r3, [r4, #30]
      retVal = true;
 800193e:	e7f3      	b.n	8001928 <MCI_StopMotor+0x22>

08001940 <MCI_FaultAcknowledged>:
{
 8001940:	b510      	push	{r4, lr}
 8001942:	0004      	movs	r4, r0
    if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8001944:	f7ff ffa8 	bl	8001898 <MCI_GetSTMState>
 8001948:	280b      	cmp	r0, #11
 800194a:	d001      	beq.n	8001950 <MCI_FaultAcknowledged+0x10>
  bool reVal = false;
 800194c:	2000      	movs	r0, #0
}
 800194e:	bd10      	pop	{r4, pc}
    if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8001950:	0020      	movs	r0, r4
 8001952:	f7ff ffa5 	bl	80018a0 <MCI_GetCurrentFaults>
 8001956:	2800      	cmp	r0, #0
 8001958:	d1f8      	bne.n	800194c <MCI_FaultAcknowledged+0xc>
      pHandle->DirectCommand = MCI_ACK_FAULTS;
 800195a:	2302      	movs	r3, #2
      pHandle->PastFaults = MC_NO_FAULTS;
 800195c:	8460      	strh	r0, [r4, #34]	; 0x22
      pHandle->DirectCommand = MCI_ACK_FAULTS;
 800195e:	77a3      	strb	r3, [r4, #30]
      reVal = true;
 8001960:	3001      	adds	r0, #1
 8001962:	e7f4      	b.n	800194e <MCI_FaultAcknowledged+0xe>

08001964 <MCI_GetFaultState>:
    LocalFaultState = MC_SW_ERROR | (MC_SW_ERROR << 16);
  }
  else
  {
#endif
    LocalFaultState = (uint32_t)(pHandle->PastFaults);
 8001964:	8c43      	ldrh	r3, [r0, #34]	; 0x22
    LocalFaultState |= (uint32_t)(pHandle->CurrentFaults) << 16;
 8001966:	8c00      	ldrh	r0, [r0, #32]
 8001968:	0400      	lsls	r0, r0, #16
 800196a:	4318      	orrs	r0, r3
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (LocalFaultState);
}
 800196c:	4770      	bx	lr

0800196e <MCI_GetControlMode>:
__weak MC_ControlMode_t MCI_GetControlMode(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MCM_TORQUE_MODE : pHandle->LastModalitySetByUser);
#else
  return (pHandle->LastModalitySetByUser);
 800196e:	3006      	adds	r0, #6
 8001970:	7fc0      	ldrb	r0, [r0, #31]
#endif
}
 8001972:	4770      	bx	lr

08001974 <MCI_GetLastRampFinalSpeed>:
  {
    retVal = pHandle->hFinalSpeed;
  }
  return (retVal);
#else
  return (pHandle->hFinalSpeed);
 8001974:	230e      	movs	r3, #14
 8001976:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 8001978:	4770      	bx	lr

0800197a <MCI_GetLastRampFinalDuration>:
  {
    retVal = pHandle->hDurationms;
  }
  return (retVal);
#else
  return (pHandle->hDurationms);
 800197a:	8b80      	ldrh	r0, [r0, #28]
#endif
}
 800197c:	4770      	bx	lr

0800197e <MCI_StopRamp>:
/**
  * @brief  Stop the execution of ongoing ramp.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_StopRamp(MCI_Handle_t *pHandle)
{
 800197e:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    STC_StopRamp(pHandle->pSTC);
 8001980:	6800      	ldr	r0, [r0, #0]
 8001982:	f004 fb46 	bl	8006012 <STC_StopRamp>
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8001986:	bd10      	pop	{r4, pc}

08001988 <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit(MCI_Handle_t *pHandle)
{
 8001988:	b510      	push	{r4, lr}
    temp_speed = 0;
  }
  else
  {
#endif
    SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor(pHandle->pSTC);
 800198a:	6800      	ldr	r0, [r0, #0]
 800198c:	f004 faee 	bl	8005f6c <STC_GetSpeedSensor>
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
 8001990:	f004 faa7 	bl	8005ee2 <SPD_GetAvrgMecSpeedUnit>
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (temp_speed);
}
 8001994:	bd10      	pop	{r4, pc}

08001996 <MCI_GetMecSpeedRefUnit>:
  *
  * @param  pHandle Pointer on the component instance to work on.
  *
  */
__weak int16_t MCI_GetMecSpeedRefUnit(MCI_Handle_t *pHandle)
{
 8001996:	b510      	push	{r4, lr}
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? 0 : STC_GetMecSpeedRefUnit(pHandle->pSTC));
#else
  return (STC_GetMecSpeedRefUnit(pHandle->pSTC));
 8001998:	6800      	ldr	r0, [r0, #0]
 800199a:	f004 faf2 	bl	8005f82 <STC_GetMecSpeedRefUnit>
#endif
}
 800199e:	bd10      	pop	{r4, pc}

080019a0 <MCI_GetVqd>:
  * @brief  It returns stator current Vqd in qd_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Vqd
  */
__weak qd_t MCI_GetVqd(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
 80019a0:	b507      	push	{r0, r1, r2, lr}
  {
    tempVal = pHandle->pFOCVars->Vqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Vqd);
 80019a2:	6841      	ldr	r1, [r0, #4]
 80019a4:	2204      	movs	r2, #4
 80019a6:	3116      	adds	r1, #22
 80019a8:	a801      	add	r0, sp, #4
 80019aa:	f004 fb9d 	bl	80060e8 <memcpy>
 80019ae:	466b      	mov	r3, sp
 80019b0:	466a      	mov	r2, sp
 80019b2:	88db      	ldrh	r3, [r3, #6]
 80019b4:	8890      	ldrh	r0, [r2, #4]
 80019b6:	041b      	lsls	r3, r3, #16
 80019b8:	4318      	orrs	r0, r3
#endif
}
 80019ba:	bd0e      	pop	{r1, r2, r3, pc}

080019bc <MCI_GetValphabeta>:
  * @brief  It returns stator current Valphabeta in alphabeta_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Valphabeta
  */
__weak alphabeta_t MCI_GetValphabeta(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
 80019bc:	b507      	push	{r0, r1, r2, lr}
  {
    tempVal = pHandle->pFOCVars->Valphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Valphabeta);
 80019be:	6841      	ldr	r1, [r0, #4]
 80019c0:	2204      	movs	r2, #4
 80019c2:	311a      	adds	r1, #26
 80019c4:	a801      	add	r0, sp, #4
 80019c6:	f004 fb8f 	bl	80060e8 <memcpy>
 80019ca:	466b      	mov	r3, sp
 80019cc:	466a      	mov	r2, sp
 80019ce:	88db      	ldrh	r3, [r3, #6]
 80019d0:	8890      	ldrh	r0, [r2, #4]
 80019d2:	041b      	lsls	r3, r3, #16
 80019d4:	4318      	orrs	r0, r3
#endif
}
 80019d6:	bd0e      	pop	{r1, r2, r3, pc}

080019d8 <MCI_GetTeref>:
__weak int16_t MCI_GetTeref(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? 0 : pHandle->pFOCVars->hTeref);
#else
  return (pHandle->pFOCVars->hTeref);
 80019d8:	6843      	ldr	r3, [r0, #4]
 80019da:	201e      	movs	r0, #30
 80019dc:	5e18      	ldrsh	r0, [r3, r0]
#endif
}
 80019de:	4770      	bx	lr

080019e0 <MCI_Clear_Iqdref>:
/**
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_Clear_Iqdref(MCI_Handle_t *pHandle)
{
 80019e0:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref(pHandle->pSTC);
 80019e2:	c811      	ldmia	r0, {r0, r4}
 80019e4:	f004 fb43 	bl	800606e <STC_GetDefaultIqdref>
 80019e8:	8220      	strh	r0, [r4, #16]
 80019ea:	0c00      	lsrs	r0, r0, #16
 80019ec:	8260      	strh	r0, [r4, #18]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 80019ee:	bd10      	pop	{r4, pc}

080019f0 <MCM_Clarke>:
  *                       beta = -(2*b+a)/sqrt(3)
  * @param  Input: stator values a and b in ab_t format.
  * @retval Stator values alpha and beta in alphabeta_t format.
  */
__weak alphabeta_t MCM_Clarke(ab_t Input)
{
 80019f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
#else
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) / 32768;
#endif

  /* Check saturation of Ibeta */
  if (wbeta_tmp > INT16_MAX)
 80019f2:	2180      	movs	r1, #128	; 0x80
  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 80019f4:	4b0f      	ldr	r3, [pc, #60]	; (8001a34 <MCM_Clarke+0x44>)
 80019f6:	b202      	sxth	r2, r0
 80019f8:	1400      	asrs	r0, r0, #16
 80019fa:	4358      	muls	r0, r3
  a_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.a);
 80019fc:	4353      	muls	r3, r2
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 80019fe:	425b      	negs	r3, r3
 8001a00:	1a1b      	subs	r3, r3, r0
 8001a02:	1a1b      	subs	r3, r3, r0
 8001a04:	13db      	asrs	r3, r3, #15
  if (wbeta_tmp > INT16_MAX)
 8001a06:	0209      	lsls	r1, r1, #8
 8001a08:	428b      	cmp	r3, r1
 8001a0a:	da10      	bge.n	8001a2e <MCM_Clarke+0x3e>
  {
    hbeta_tmp = INT16_MAX;
  }
  else if (wbeta_tmp < (-32768))
 8001a0c:	480a      	ldr	r0, [pc, #40]	; (8001a38 <MCM_Clarke+0x48>)
  {
    hbeta_tmp =  ((int16_t)-32768);
 8001a0e:	0001      	movs	r1, r0
  else if (wbeta_tmp < (-32768))
 8001a10:	4283      	cmp	r3, r0
 8001a12:	db00      	blt.n	8001a16 <MCM_Clarke+0x26>
  }
  else
  {
    hbeta_tmp = ((int16_t)wbeta_tmp);
 8001a14:	b219      	sxth	r1, r3
  else
  {
    /* Nothing to do */
  }

  return (Output);
 8001a16:	4b09      	ldr	r3, [pc, #36]	; (8001a3c <MCM_Clarke+0x4c>)
 8001a18:	ac03      	add	r4, sp, #12
 8001a1a:	8022      	strh	r2, [r4, #0]
 8001a1c:	1c08      	adds	r0, r1, #0
 8001a1e:	4299      	cmp	r1, r3
 8001a20:	da00      	bge.n	8001a24 <MCM_Clarke+0x34>
 8001a22:	1c18      	adds	r0, r3, #0
 8001a24:	0403      	lsls	r3, r0, #16
 8001a26:	8820      	ldrh	r0, [r4, #0]
 8001a28:	4318      	orrs	r0, r3
}
 8001a2a:	b004      	add	sp, #16
 8001a2c:	bd10      	pop	{r4, pc}
    hbeta_tmp = INT16_MAX;
 8001a2e:	4904      	ldr	r1, [pc, #16]	; (8001a40 <MCM_Clarke+0x50>)
 8001a30:	e7f1      	b.n	8001a16 <MCM_Clarke+0x26>
 8001a32:	46c0      	nop			; (mov r8, r8)
 8001a34:	000049e6 	.word	0x000049e6
 8001a38:	ffff8000 	.word	0xffff8000
 8001a3c:	ffff8001 	.word	0xffff8001
 8001a40:	00007fff 	.word	0x00007fff

08001a44 <MCM_Trig_Functions>:
  uint16_t uhindex;

  Trig_Components Local_Components;

  /* 10 bit index computation  */
  shindex = (((int32_t)32768) + ((int32_t)hAngle));
 8001a44:	2380      	movs	r3, #128	; 0x80
 8001a46:	021b      	lsls	r3, r3, #8
{
 8001a48:	b537      	push	{r0, r1, r2, r4, r5, lr}
  shindex = (((int32_t)32768) + ((int32_t)hAngle));
 8001a4a:	18c0      	adds	r0, r0, r3
  uhindex = (uint16_t)shindex;
 8001a4c:	b283      	uxth	r3, r0
  uhindex /= ((uint16_t)64);
 8001a4e:	24c0      	movs	r4, #192	; 0xc0
 8001a50:	099b      	lsrs	r3, r3, #6
{
 8001a52:	2100      	movs	r1, #0
 8001a54:	0018      	movs	r0, r3

  switch (((uint16_t)uhindex) & SIN_MASK)
 8001a56:	2580      	movs	r5, #128	; 0x80
 8001a58:	00a4      	lsls	r4, r4, #2
{
 8001a5a:	000a      	movs	r2, r1
 8001a5c:	4020      	ands	r0, r4
  switch (((uint16_t)uhindex) & SIN_MASK)
 8001a5e:	00ad      	lsls	r5, r5, #2
 8001a60:	42a8      	cmp	r0, r5
 8001a62:	d017      	beq.n	8001a94 <MCM_Trig_Functions+0x50>
 8001a64:	d809      	bhi.n	8001a7a <MCM_Trig_Functions+0x36>
 8001a66:	4288      	cmp	r0, r1
 8001a68:	d01d      	beq.n	8001aa6 <MCM_Trig_Functions+0x62>
 8001a6a:	2480      	movs	r4, #128	; 0x80
 8001a6c:	0064      	lsls	r4, r4, #1
 8001a6e:	42a0      	cmp	r0, r4
 8001a70:	d022      	beq.n	8001ab8 <MCM_Trig_Functions+0x74>
    }

    default:
      break;
  }
  return (Local_Components);
 8001a72:	0412      	lsls	r2, r2, #16
 8001a74:	b288      	uxth	r0, r1
 8001a76:	4310      	orrs	r0, r2
}
 8001a78:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
  switch (((uint16_t)uhindex) & SIN_MASK)
 8001a7a:	42a0      	cmp	r0, r4
 8001a7c:	d1f9      	bne.n	8001a72 <MCM_Trig_Functions+0x2e>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	43da      	mvns	r2, r3
 8001a82:	4912      	ldr	r1, [pc, #72]	; (8001acc <MCM_Trig_Functions+0x88>)
 8001a84:	b2d2      	uxtb	r2, r2
 8001a86:	0052      	lsls	r2, r2, #1
 8001a88:	5e52      	ldrsh	r2, [r2, r1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	5a59      	ldrh	r1, [r3, r1]
 8001a8e:	4249      	negs	r1, r1
 8001a90:	b209      	sxth	r1, r1
      break;
 8001a92:	e7ee      	b.n	8001a72 <MCM_Trig_Functions+0x2e>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	005a      	lsls	r2, r3, #1
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001a98:	43db      	mvns	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8001a9a:	490c      	ldr	r1, [pc, #48]	; (8001acc <MCM_Trig_Functions+0x88>)
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001a9c:	b2db      	uxtb	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8001a9e:	5e52      	ldrsh	r2, [r2, r1]
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	5e59      	ldrsh	r1, [r3, r1]
      break;
 8001aa4:	e7e5      	b.n	8001a72 <MCM_Trig_Functions+0x2e>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	005a      	lsls	r2, r3, #1
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001aaa:	43db      	mvns	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001aac:	4907      	ldr	r1, [pc, #28]	; (8001acc <MCM_Trig_Functions+0x88>)
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001aae:	b2db      	uxtb	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001ab0:	5a52      	ldrh	r2, [r2, r1]
 8001ab2:	4252      	negs	r2, r2
 8001ab4:	b212      	sxth	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001ab6:	e7e8      	b.n	8001a8a <MCM_Trig_Functions+0x46>
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	43da      	mvns	r2, r3
 8001abc:	4903      	ldr	r1, [pc, #12]	; (8001acc <MCM_Trig_Functions+0x88>)
 8001abe:	b2d2      	uxtb	r2, r2
 8001ac0:	0052      	lsls	r2, r2, #1
 8001ac2:	5a52      	ldrh	r2, [r2, r1]
 8001ac4:	4252      	negs	r2, r2
 8001ac6:	b212      	sxth	r2, r2
 8001ac8:	e7ea      	b.n	8001aa0 <MCM_Trig_Functions+0x5c>
 8001aca:	46c0      	nop			; (mov r8, r8)
 8001acc:	0800624e 	.word	0x0800624e

08001ad0 <MCM_Park>:
{
 8001ad0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8001ad2:	b205      	sxth	r5, r0
 8001ad4:	9001      	str	r0, [sp, #4]
 8001ad6:	1404      	asrs	r4, r0, #16
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8001ad8:	0008      	movs	r0, r1
 8001ada:	f7ff ffb3 	bl	8001a44 <MCM_Trig_Functions>
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 8001ade:	b201      	sxth	r1, r0
  q_tmp_2 = Input.beta * ((int32_t)Local_Vector_Components.hSin);
 8001ae0:	1403      	asrs	r3, r0, #16
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 8001ae2:	000a      	movs	r2, r1
  q_tmp_2 = Input.beta * ((int32_t)Local_Vector_Components.hSin);
 8001ae4:	0018      	movs	r0, r3
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 8001ae6:	436a      	muls	r2, r5
  q_tmp_2 = Input.beta * ((int32_t)Local_Vector_Components.hSin);
 8001ae8:	4360      	muls	r0, r4
  wqd_tmp = (q_tmp_1 - q_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8001aea:	1a12      	subs	r2, r2, r0
  if (wqd_tmp > INT16_MAX)
 8001aec:	2080      	movs	r0, #128	; 0x80
  wqd_tmp = (q_tmp_1 - q_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8001aee:	13d2      	asrs	r2, r2, #15
  if (wqd_tmp > INT16_MAX)
 8001af0:	0200      	lsls	r0, r0, #8
 8001af2:	4282      	cmp	r2, r0
 8001af4:	da23      	bge.n	8001b3e <MCM_Park+0x6e>
  else if (wqd_tmp < (-32768))
 8001af6:	4814      	ldr	r0, [pc, #80]	; (8001b48 <MCM_Park+0x78>)
    hqd_tmp = ((int16_t)-32768);
 8001af8:	0006      	movs	r6, r0
  else if (wqd_tmp < (-32768))
 8001afa:	4282      	cmp	r2, r0
 8001afc:	db00      	blt.n	8001b00 <MCM_Park+0x30>
    hqd_tmp = ((int16_t)wqd_tmp);
 8001afe:	b216      	sxth	r6, r2
  if (((int16_t)-32768) == Output.q)
 8001b00:	4a12      	ldr	r2, [pc, #72]	; (8001b4c <MCM_Park+0x7c>)
 8001b02:	1c30      	adds	r0, r6, #0
 8001b04:	4296      	cmp	r6, r2
 8001b06:	da00      	bge.n	8001b0a <MCM_Park+0x3a>
 8001b08:	1c10      	adds	r0, r2, #0
  d_tmp_2 = Input.beta * ((int32_t )Local_Vector_Components.hCos);
 8001b0a:	434c      	muls	r4, r1
  if (wqd_tmp > INT16_MAX)
 8001b0c:	2180      	movs	r1, #128	; 0x80
  d_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hSin);
 8001b0e:	436b      	muls	r3, r5
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8001b10:	191b      	adds	r3, r3, r4
 8001b12:	b200      	sxth	r0, r0
 8001b14:	13db      	asrs	r3, r3, #15
  if (wqd_tmp > INT16_MAX)
 8001b16:	0209      	lsls	r1, r1, #8
 8001b18:	428b      	cmp	r3, r1
 8001b1a:	da12      	bge.n	8001b42 <MCM_Park+0x72>
  else if (wqd_tmp < (-32768))
 8001b1c:	4c0a      	ldr	r4, [pc, #40]	; (8001b48 <MCM_Park+0x78>)
    hqd_tmp = ((int16_t)-32768);
 8001b1e:	0021      	movs	r1, r4
  else if (wqd_tmp < (-32768))
 8001b20:	42a3      	cmp	r3, r4
 8001b22:	db00      	blt.n	8001b26 <MCM_Park+0x56>
    hqd_tmp = ((int16_t)wqd_tmp);
 8001b24:	b219      	sxth	r1, r3
  return (Output);
 8001b26:	ac03      	add	r4, sp, #12
 8001b28:	8020      	strh	r0, [r4, #0]
 8001b2a:	1c0b      	adds	r3, r1, #0
 8001b2c:	4291      	cmp	r1, r2
 8001b2e:	da01      	bge.n	8001b34 <MCM_Park+0x64>
 8001b30:	4b07      	ldr	r3, [pc, #28]	; (8001b50 <MCM_Park+0x80>)
 8001b32:	881b      	ldrh	r3, [r3, #0]
 8001b34:	8820      	ldrh	r0, [r4, #0]
 8001b36:	041b      	lsls	r3, r3, #16
 8001b38:	4318      	orrs	r0, r3
}
 8001b3a:	b004      	add	sp, #16
 8001b3c:	bd70      	pop	{r4, r5, r6, pc}
    hqd_tmp = INT16_MAX;
 8001b3e:	4e05      	ldr	r6, [pc, #20]	; (8001b54 <MCM_Park+0x84>)
 8001b40:	e7de      	b.n	8001b00 <MCM_Park+0x30>
    hqd_tmp = INT16_MAX;
 8001b42:	4904      	ldr	r1, [pc, #16]	; (8001b54 <MCM_Park+0x84>)
 8001b44:	e7ef      	b.n	8001b26 <MCM_Park+0x56>
 8001b46:	46c0      	nop			; (mov r8, r8)
 8001b48:	ffff8000 	.word	0xffff8000
 8001b4c:	ffff8001 	.word	0xffff8001
 8001b50:	0800624c 	.word	0x0800624c
 8001b54:	00007fff 	.word	0x00007fff

08001b58 <MCM_Rev_Park>:
{
 8001b58:	b530      	push	{r4, r5, lr}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	b205      	sxth	r5, r0
 8001b5e:	9001      	str	r0, [sp, #4]
 8001b60:	1404      	asrs	r4, r0, #16
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8001b62:	0008      	movs	r0, r1
 8001b64:	f7ff ff6e 	bl	8001a44 <MCM_Trig_Functions>
  alpha_tmp1 = Input.q * ((int32_t)Local_Vector_Components.hCos);
 8001b68:	b202      	sxth	r2, r0
  alpha_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hSin);
 8001b6a:	1403      	asrs	r3, r0, #16
 8001b6c:	0019      	movs	r1, r3
  alpha_tmp1 = Input.q * ((int32_t)Local_Vector_Components.hCos);
 8001b6e:	0010      	movs	r0, r2
  alpha_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hSin);
 8001b70:	4361      	muls	r1, r4
  alpha_tmp1 = Input.q * ((int32_t)Local_Vector_Components.hCos);
 8001b72:	4368      	muls	r0, r5
  beta_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hCos);
 8001b74:	4354      	muls	r4, r2
  beta_tmp1 = Input.q * ((int32_t)Local_Vector_Components.hSin);
 8001b76:	436b      	muls	r3, r5
  Output.alpha = (int16_t)(((alpha_tmp1) + (alpha_tmp2)) >> 15);
 8001b78:	1840      	adds	r0, r0, r1
  Output.beta = (int16_t)((beta_tmp2 - beta_tmp1) >> 15);
 8001b7a:	1ae4      	subs	r4, r4, r3
  Output.alpha = (int16_t)(((alpha_tmp1) + (alpha_tmp2)) >> 15);
 8001b7c:	13c0      	asrs	r0, r0, #15
  Output.beta = (int16_t)((beta_tmp2 - beta_tmp1) >> 15);
 8001b7e:	13e4      	asrs	r4, r4, #15
  return (Output);
 8001b80:	0424      	lsls	r4, r4, #16
 8001b82:	b280      	uxth	r0, r0
 8001b84:	4320      	orrs	r0, r4
}
 8001b86:	b005      	add	sp, #20
 8001b88:	bd30      	pop	{r4, r5, pc}

08001b8a <LL_GPIO_LockPin>:
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001b8a:	2380      	movs	r3, #128	; 0x80
 8001b8c:	025b      	lsls	r3, r3, #9
 8001b8e:	430b      	orrs	r3, r1
 8001b90:	61c3      	str	r3, [r0, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001b92:	61c1      	str	r1, [r0, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001b94:	61c3      	str	r3, [r0, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001b96:	69c3      	ldr	r3, [r0, #28]
{
 8001b98:	b082      	sub	sp, #8
  temp = READ_REG(GPIOx->LCKR);
 8001b9a:	9301      	str	r3, [sp, #4]
  (void) temp;
 8001b9c:	9b01      	ldr	r3, [sp, #4]
}
 8001b9e:	b002      	add	sp, #8
 8001ba0:	4770      	bx	lr
	...

08001ba4 <FOC_Clear>:

  ab_t NULL_ab = {((int16_t)0), ((int16_t)0)};
  qd_t NULL_qd = {((int16_t)0), ((int16_t)0)};
  alphabeta_t NULL_alphabeta = {((int16_t)0), ((int16_t)0)};

  FOCVars[bMotor].Iab = NULL_ab;
 8001ba4:	2226      	movs	r2, #38	; 0x26
{
 8001ba6:	b570      	push	{r4, r5, r6, lr}
  FOCVars[bMotor].Iab = NULL_ab;
 8001ba8:	2400      	movs	r4, #0
 8001baa:	4342      	muls	r2, r0
 8001bac:	4b11      	ldr	r3, [pc, #68]	; (8001bf4 <FOC_Clear+0x50>)
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = NULL_qd;
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8001bae:	0085      	lsls	r5, r0, #2
  FOCVars[bMotor].Iab = NULL_ab;
 8001bb0:	52d4      	strh	r4, [r2, r3]
 8001bb2:	189b      	adds	r3, r3, r2
 8001bb4:	805c      	strh	r4, [r3, #2]
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 8001bb6:	809c      	strh	r4, [r3, #4]
 8001bb8:	80dc      	strh	r4, [r3, #6]
  FOCVars[bMotor].Iqd = NULL_qd;
 8001bba:	819c      	strh	r4, [r3, #12]
 8001bbc:	81dc      	strh	r4, [r3, #14]
    FOCVars[bMotor].Iqdref = NULL_qd;
 8001bbe:	821c      	strh	r4, [r3, #16]
 8001bc0:	825c      	strh	r4, [r3, #18]
  FOCVars[bMotor].hTeref = (int16_t)0;
 8001bc2:	83dc      	strh	r4, [r3, #30]
  FOCVars[bMotor].Vqd = NULL_qd;
 8001bc4:	82dc      	strh	r4, [r3, #22]
 8001bc6:	831c      	strh	r4, [r3, #24]
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
 8001bc8:	835c      	strh	r4, [r3, #26]
 8001bca:	839c      	strh	r4, [r3, #28]
  FOCVars[bMotor].hElAngle = (int16_t)0;
 8001bcc:	841c      	strh	r4, [r3, #32]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8001bce:	4b0a      	ldr	r3, [pc, #40]	; (8001bf8 <FOC_Clear+0x54>)
 8001bd0:	0021      	movs	r1, r4
 8001bd2:	58e8      	ldr	r0, [r5, r3]
 8001bd4:	f004 f885 	bl	8005ce2 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], ((int32_t)0));
 8001bd8:	4b08      	ldr	r3, [pc, #32]	; (8001bfc <FOC_Clear+0x58>)
 8001bda:	0021      	movs	r1, r4
 8001bdc:	58e8      	ldr	r0, [r5, r3]
 8001bde:	f004 f880 	bl	8005ce2 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8001be2:	4b07      	ldr	r3, [pc, #28]	; (8001c00 <FOC_Clear+0x5c>)
 8001be4:	58e8      	ldr	r0, [r5, r3]
 8001be6:	f004 f9c3 	bl	8005f70 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001bea:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <FOC_Clear+0x60>)
 8001bec:	58e8      	ldr	r0, [r5, r3]
 8001bee:	f000 fdc7 	bl	8002780 <PWMC_SwitchOffPWM>

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 8001bf2:	bd70      	pop	{r4, r5, r6, pc}
 8001bf4:	20000684 	.word	0x20000684
 8001bf8:	200002d0 	.word	0x200002d0
 8001bfc:	200002cc 	.word	0x200002cc
 8001c00:	200002d4 	.word	0x200002d4
 8001c04:	200006b4 	.word	0x200006b4

08001c08 <MCboot>:
{
 8001c08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	9000      	str	r0, [sp, #0]
  if (MC_NULL == pMCIList)
 8001c0e:	2800      	cmp	r0, #0
 8001c10:	d05b      	beq.n	8001cca <MCboot+0xc2>
    bMCBootCompleted = (uint8_t )0;
 8001c12:	2700      	movs	r7, #0
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001c14:	4e2e      	ldr	r6, [pc, #184]	; (8001cd0 <MCboot+0xc8>)
 8001c16:	482f      	ldr	r0, [pc, #188]	; (8001cd4 <MCboot+0xcc>)
    bMCBootCompleted = (uint8_t )0;
 8001c18:	4b2f      	ldr	r3, [pc, #188]	; (8001cd8 <MCboot+0xd0>)
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001c1a:	6030      	str	r0, [r6, #0]
    bMCBootCompleted = (uint8_t )0;
 8001c1c:	9301      	str	r3, [sp, #4]
 8001c1e:	701f      	strb	r7, [r3, #0]
    R1_Init(&PWM_Handle_M1);
 8001c20:	f001 f9e0 	bl	8002fe4 <R1_Init>
    ASPEP_start(&aspepOverUartA);
 8001c24:	482d      	ldr	r0, [pc, #180]	; (8001cdc <MCboot+0xd4>)
 8001c26:	f7fe fecf 	bl	80009c8 <ASPEP_start>
    PID_HandleInit(&PIDSpeedHandle_M1);
 8001c2a:	4d2d      	ldr	r5, [pc, #180]	; (8001ce0 <MCboot+0xd8>)
 8001c2c:	0028      	movs	r0, r5
 8001c2e:	f004 f846 	bl	8005cbe <PID_HandleInit>
    HALL_Init (&HALL_M1);
 8001c32:	4c2c      	ldr	r4, [pc, #176]	; (8001ce4 <MCboot+0xdc>)
 8001c34:	0020      	movs	r0, r4
 8001c36:	f7ff f8c7 	bl	8000dc8 <HALL_Init>
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &HALL_M1._Super);
 8001c3a:	4b2b      	ldr	r3, [pc, #172]	; (8001ce8 <MCboot+0xe0>)
 8001c3c:	0029      	movs	r1, r5
 8001c3e:	0022      	movs	r2, r4
 8001c40:	6818      	ldr	r0, [r3, #0]
 8001c42:	001c      	movs	r4, r3
 8001c44:	f004 f97f 	bl	8005f46 <STC_Init>
    PID_HandleInit(&PIDIqHandle_M1);
 8001c48:	4828      	ldr	r0, [pc, #160]	; (8001cec <MCboot+0xe4>)
 8001c4a:	f004 f838 	bl	8005cbe <PID_HandleInit>
    PID_HandleInit(&PIDIdHandle_M1);
 8001c4e:	4828      	ldr	r0, [pc, #160]	; (8001cf0 <MCboot+0xe8>)
 8001c50:	f004 f835 	bl	8005cbe <PID_HandleInit>
    (void)RCM_RegisterRegConv(&VbusRegConv_M1);
 8001c54:	4827      	ldr	r0, [pc, #156]	; (8001cf4 <MCboot+0xec>)
 8001c56:	f001 ffc7 	bl	8003be8 <RCM_RegisterRegConv>
    RVBS_Init(&BusVoltageSensor_M1);
 8001c5a:	4d27      	ldr	r5, [pc, #156]	; (8001cf8 <MCboot+0xf0>)
 8001c5c:	0028      	movs	r0, r5
 8001c5e:	f004 f8e3 	bl	8005e28 <RVBS_Init>
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 8001c62:	4b26      	ldr	r3, [pc, #152]	; (8001cfc <MCboot+0xf4>)
    NTC_Init(&TempSensor_M1);
 8001c64:	4826      	ldr	r0, [pc, #152]	; (8001d00 <MCboot+0xf8>)
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	60dd      	str	r5, [r3, #12]
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 8001c6a:	4d26      	ldr	r5, [pc, #152]	; (8001d04 <MCboot+0xfc>)
 8001c6c:	609d      	str	r5, [r3, #8]
    NTC_Init(&TempSensor_M1);
 8001c6e:	f004 f80a 	bl	8005c86 <NTC_Init>
    REMNG_Init(pREMNG[M1]);
 8001c72:	4825      	ldr	r0, [pc, #148]	; (8001d08 <MCboot+0x100>)
 8001c74:	f004 f92a 	bl	8005ecc <REMNG_Init>
    FOC_Clear(M1);
 8001c78:	0038      	movs	r0, r7
 8001c7a:	f7ff ff93 	bl	8001ba4 <FOC_Clear>
    FOCVars[M1].bDriveInput = EXTERNAL;
 8001c7e:	2201      	movs	r2, #1
 8001c80:	1d6b      	adds	r3, r5, #5
 8001c82:	77da      	strb	r2, [r3, #31]
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8001c84:	6820      	ldr	r0, [r4, #0]
 8001c86:	f004 f9f2 	bl	800606e <STC_GetDefaultIqdref>
 8001c8a:	8228      	strh	r0, [r5, #16]
 8001c8c:	0c00      	lsrs	r0, r0, #16
 8001c8e:	8268      	strh	r0, [r5, #18]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8001c90:	6820      	ldr	r0, [r4, #0]
 8001c92:	f004 f9ec 	bl	800606e <STC_GetDefaultIqdref>
 8001c96:	0c00      	lsrs	r0, r0, #16
 8001c98:	82a8      	strh	r0, [r5, #20]
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 8001c9a:	481c      	ldr	r0, [pc, #112]	; (8001d0c <MCboot+0x104>)
 8001c9c:	002a      	movs	r2, r5
 8001c9e:	0005      	movs	r5, r0
 8001ca0:	6821      	ldr	r1, [r4, #0]
 8001ca2:	6833      	ldr	r3, [r6, #0]
 8001ca4:	f7ff fd98 	bl	80017d8 <MCI_Init>
   Mci[M1].pScale = &scaleParams_M1;
 8001ca8:	4b19      	ldr	r3, [pc, #100]	; (8001d10 <MCboot+0x108>)
    MCI_ExecSpeedRamp(&Mci[M1],
 8001caa:	6820      	ldr	r0, [r4, #0]
   Mci[M1].pScale = &scaleParams_M1;
 8001cac:	61ab      	str	r3, [r5, #24]
    MCI_ExecSpeedRamp(&Mci[M1],
 8001cae:	f004 f9db 	bl	8006068 <STC_GetMecSpeedRefUnitDefault>
 8001cb2:	003a      	movs	r2, r7
 8001cb4:	0001      	movs	r1, r0
 8001cb6:	0028      	movs	r0, r5
 8001cb8:	f7ff fd9a 	bl	80017f0 <MCI_ExecSpeedRamp>
    pMCIList[M1] = &Mci[M1];
 8001cbc:	9b00      	ldr	r3, [sp, #0]
 8001cbe:	601d      	str	r5, [r3, #0]
    MC_APP_BootHook();
 8001cc0:	f7ff fd88 	bl	80017d4 <MC_APP_BootHook>
    bMCBootCompleted = 1U;
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	9b01      	ldr	r3, [sp, #4]
 8001cc8:	701a      	strb	r2, [r3, #0]
}
 8001cca:	b005      	add	sp, #20
 8001ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cce:	46c0      	nop			; (mov r8, r8)
 8001cd0:	200006b4 	.word	0x200006b4
 8001cd4:	20000180 	.word	0x20000180
 8001cd8:	200006aa 	.word	0x200006aa
 8001cdc:	20000314 	.word	0x20000314
 8001ce0:	20000144 	.word	0x20000144
 8001ce4:	20000020 	.word	0x20000020
 8001ce8:	200002d4 	.word	0x200002d4
 8001cec:	20000118 	.word	0x20000118
 8001cf0:	200000ec 	.word	0x200000ec
 8001cf4:	200002b8 	.word	0x200002b8
 8001cf8:	20000000 	.word	0x20000000
 8001cfc:	200002c8 	.word	0x200002c8
 8001d00:	2000029c 	.word	0x2000029c
 8001d04:	20000684 	.word	0x20000684
 8001d08:	20000250 	.word	0x20000250
 8001d0c:	20000648 	.word	0x20000648
 8001d10:	200002e0 	.word	0x200002e0

08001d14 <FOC_InitAdditionalMethods>:
    {
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
    }
}
 8001d14:	4770      	bx	lr
	...

08001d18 <FOC_CalcCurrRef>:
{

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if (INTERNAL == FOCVars[bMotor].bDriveInput)
 8001d18:	2326      	movs	r3, #38	; 0x26
 8001d1a:	4343      	muls	r3, r0
{
 8001d1c:	b510      	push	{r4, lr}
  if (INTERNAL == FOCVars[bMotor].bDriveInput)
 8001d1e:	4c07      	ldr	r4, [pc, #28]	; (8001d3c <FOC_CalcCurrRef+0x24>)
 8001d20:	18e4      	adds	r4, r4, r3
 8001d22:	1d63      	adds	r3, r4, #5
 8001d24:	7fdb      	ldrb	r3, [r3, #31]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d106      	bne.n	8001d38 <FOC_CalcCurrRef+0x20>
  {
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8001d2a:	4b05      	ldr	r3, [pc, #20]	; (8001d40 <FOC_CalcCurrRef+0x28>)
 8001d2c:	0080      	lsls	r0, r0, #2
 8001d2e:	58c0      	ldr	r0, [r0, r3]
 8001d30:	f004 f973 	bl	800601a <STC_CalcTorqueReference>
 8001d34:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 8001d36:	8220      	strh	r0, [r4, #16]
    /* Nothing to do */
  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8001d38:	bd10      	pop	{r4, pc}
 8001d3a:	46c0      	nop			; (mov r8, r8)
 8001d3c:	20000684 	.word	0x20000684
 8001d40:	200002d4 	.word	0x200002d4

08001d44 <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 8001d44:	4b01      	ldr	r3, [pc, #4]	; (8001d4c <TSK_SetChargeBootCapDelayM1+0x8>)
 8001d46:	8018      	strh	r0, [r3, #0]
}
 8001d48:	4770      	bx	lr
 8001d4a:	46c0      	nop			; (mov r8, r8)
 8001d4c:	200006ac 	.word	0x200006ac

08001d50 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise.
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hBootCapDelayCounterM1)
 8001d50:	4b02      	ldr	r3, [pc, #8]	; (8001d5c <TSK_ChargeBootCapDelayHasElapsedM1+0xc>)
 8001d52:	8818      	ldrh	r0, [r3, #0]
 8001d54:	4243      	negs	r3, r0
 8001d56:	4158      	adcs	r0, r3
  {
    retVal = true;
  }
  return (retVal);
 8001d58:	b2c0      	uxtb	r0, r0
}
 8001d5a:	4770      	bx	lr
 8001d5c:	200006ac 	.word	0x200006ac

08001d60 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8001d60:	4b01      	ldr	r3, [pc, #4]	; (8001d68 <TSK_SetStopPermanencyTimeM1+0x8>)
 8001d62:	8018      	strh	r0, [r3, #0]
}
 8001d64:	4770      	bx	lr
 8001d66:	46c0      	nop			; (mov r8, r8)
 8001d68:	200006b0 	.word	0x200006b0

08001d6c <TSK_MF_StopProcessing>:
{
 8001d6c:	b570      	push	{r4, r5, r6, lr}
 8001d6e:	0004      	movs	r4, r0
    R1_SwitchOffPWM(pwmcHandle[motor]);
 8001d70:	4b0b      	ldr	r3, [pc, #44]	; (8001da0 <TSK_MF_StopProcessing+0x34>)
 8001d72:	0085      	lsls	r5, r0, #2
 8001d74:	58e8      	ldr	r0, [r5, r3]
 8001d76:	f001 fb79 	bl	800346c <R1_SwitchOffPWM>
  FOC_Clear(motor);
 8001d7a:	0020      	movs	r0, r4
 8001d7c:	f7ff ff12 	bl	8001ba4 <FOC_Clear>
  PQD_Clear(pMPM[motor]);
 8001d80:	4b08      	ldr	r3, [pc, #32]	; (8001da4 <TSK_MF_StopProcessing+0x38>)
 8001d82:	58e8      	ldr	r0, [r5, r3]
 8001d84:	f004 f80c 	bl	8005da0 <PQD_Clear>
  TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 8001d88:	20c8      	movs	r0, #200	; 0xc8
 8001d8a:	0080      	lsls	r0, r0, #2
 8001d8c:	f7ff ffe8 	bl	8001d60 <TSK_SetStopPermanencyTimeM1>
  Mci[motor].State = STOP;
 8001d90:	2228      	movs	r2, #40	; 0x28
 8001d92:	4362      	muls	r2, r4
 8001d94:	4b04      	ldr	r3, [pc, #16]	; (8001da8 <TSK_MF_StopProcessing+0x3c>)
 8001d96:	189b      	adds	r3, r3, r2
 8001d98:	2208      	movs	r2, #8
 8001d9a:	77da      	strb	r2, [r3, #31]
}
 8001d9c:	bd70      	pop	{r4, r5, r6, pc}
 8001d9e:	46c0      	nop			; (mov r8, r8)
 8001da0:	200006b4 	.word	0x200006b4
 8001da4:	200002c8 	.word	0x200002c8
 8001da8:	20000648 	.word	0x20000648

08001dac <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise.
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hStopPermanencyCounterM1)
 8001dac:	4b02      	ldr	r3, [pc, #8]	; (8001db8 <TSK_StopPermanencyTimeHasElapsedM1+0xc>)
 8001dae:	8818      	ldrh	r0, [r3, #0]
 8001db0:	4243      	negs	r3, r0
 8001db2:	4158      	adcs	r0, r3
  {
    retVal = true;
  }
  return (retVal);
 8001db4:	b2c0      	uxtb	r0, r0
}
 8001db6:	4770      	bx	lr
 8001db8:	200006b0 	.word	0x200006b0

08001dbc <TSK_MediumFrequencyTaskM1>:
{
 8001dbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  int16_t wAux = 0;
 8001dbe:	466b      	mov	r3, sp
 8001dc0:	1d99      	adds	r1, r3, #6
 8001dc2:	2300      	movs	r3, #0
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit(&HALL_M1, &wAux);
 8001dc4:	4e4f      	ldr	r6, [pc, #316]	; (8001f04 <TSK_MediumFrequencyTaskM1+0x148>)
  int16_t wAux = 0;
 8001dc6:	800b      	strh	r3, [r1, #0]
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit(&HALL_M1, &wAux);
 8001dc8:	0030      	movs	r0, r6
 8001dca:	f7ff f8f7 	bl	8000fbc <HALL_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower(pMPM[M1]);
 8001dce:	4f4e      	ldr	r7, [pc, #312]	; (8001f08 <TSK_MediumFrequencyTaskM1+0x14c>)
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit(&HALL_M1, &wAux);
 8001dd0:	0005      	movs	r5, r0
  PQD_CalcElMotorPower(pMPM[M1]);
 8001dd2:	6838      	ldr	r0, [r7, #0]
 8001dd4:	f003 ffc8 	bl	8005d68 <PQD_CalcElMotorPower>
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 8001dd8:	4c4c      	ldr	r4, [pc, #304]	; (8001f0c <TSK_MediumFrequencyTaskM1+0x150>)
 8001dda:	0020      	movs	r0, r4
 8001ddc:	f7ff fd60 	bl	80018a0 <MCI_GetCurrentFaults>
    Mci[M1].State = FAULT_NOW;
 8001de0:	230a      	movs	r3, #10
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 8001de2:	2800      	cmp	r0, #0
 8001de4:	d123      	bne.n	8001e2e <TSK_MediumFrequencyTaskM1+0x72>
    if (MCI_GetOccurredFaults(&Mci[M1]) == MC_NO_FAULTS)
 8001de6:	0020      	movs	r0, r4
 8001de8:	f7ff fd58 	bl	800189c <MCI_GetOccurredFaults>
 8001dec:	2800      	cmp	r0, #0
 8001dee:	d000      	beq.n	8001df2 <TSK_MediumFrequencyTaskM1+0x36>
 8001df0:	e085      	b.n	8001efe <TSK_MediumFrequencyTaskM1+0x142>
      switch (Mci[M1].State)
 8001df2:	7fe0      	ldrb	r0, [r4, #31]
 8001df4:	2811      	cmp	r0, #17
 8001df6:	d830      	bhi.n	8001e5a <TSK_MediumFrequencyTaskM1+0x9e>
 8001df8:	f7fe f990 	bl	800011c <__gnu_thumb1_case_uqi>
 8001dfc:	2f2f2f09 	.word	0x2f2f2f09
 8001e00:	2f672f2f 	.word	0x2f672f2f
 8001e04:	7d812f78 	.word	0x7d812f78
 8001e08:	2f2f2f2f 	.word	0x2f2f2f2f
 8001e0c:	2943      	.short	0x2943
          if ((MCI_START == Mci[M1].DirectCommand) || (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand))
 8001e0e:	2302      	movs	r3, #2
 8001e10:	7fa1      	ldrb	r1, [r4, #30]
 8001e12:	4399      	bics	r1, r3
 8001e14:	2901      	cmp	r1, #1
 8001e16:	d120      	bne.n	8001e5a <TSK_MediumFrequencyTaskM1+0x9e>
            if (pwmcHandle[M1]->offsetCalibStatus == false)
 8001e18:	4d3d      	ldr	r5, [pc, #244]	; (8001f10 <TSK_MediumFrequencyTaskM1+0x154>)
 8001e1a:	6828      	ldr	r0, [r5, #0]
 8001e1c:	0003      	movs	r3, r0
 8001e1e:	3381      	adds	r3, #129	; 0x81
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d105      	bne.n	8001e32 <TSK_MediumFrequencyTaskM1+0x76>
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_START);
 8001e26:	0019      	movs	r1, r3
 8001e28:	f000 fcb2 	bl	8002790 <PWMC_CurrentReadingCalibr>
              Mci[M1].State = OFFSET_CALIB;
 8001e2c:	2311      	movs	r3, #17
    Mci[M1].State = FAULT_NOW;
 8001e2e:	77e3      	strb	r3, [r4, #31]
}
 8001e30:	e013      	b.n	8001e5a <TSK_MediumFrequencyTaskM1+0x9e>
              pwmcHandle[M1]->OffCalibrWaitTimeCounter = 1u;
 8001e32:	0003      	movs	r3, r0
 8001e34:	3360      	adds	r3, #96	; 0x60
 8001e36:	8019      	strh	r1, [r3, #0]
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 8001e38:	f000 fcaa 	bl	8002790 <PWMC_CurrentReadingCalibr>
                R1_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	6828      	ldr	r0, [r5, #0]
 8001e40:	f001 f9d4 	bl	80031ec <R1_TurnOnLowSides>
                TSK_SetChargeBootCapDelayM1(M1_CHARGE_BOOT_CAP_TICKS);
 8001e44:	2014      	movs	r0, #20
 8001e46:	f7ff ff7d 	bl	8001d44 <TSK_SetChargeBootCapDelayM1>
                Mci[M1].State = CHARGE_BOOT_CAP;
 8001e4a:	2310      	movs	r3, #16
 8001e4c:	e7ef      	b.n	8001e2e <TSK_MediumFrequencyTaskM1+0x72>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001e4e:	7fa3      	ldrb	r3, [r4, #30]
 8001e50:	2b05      	cmp	r3, #5
 8001e52:	d103      	bne.n	8001e5c <TSK_MediumFrequencyTaskM1+0xa0>
            TSK_MF_StopProcessing(M1);
 8001e54:	2000      	movs	r0, #0
 8001e56:	f7ff ff89 	bl	8001d6c <TSK_MF_StopProcessing>
}
 8001e5a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            if (PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC))
 8001e5c:	4d2c      	ldr	r5, [pc, #176]	; (8001f10 <TSK_MediumFrequencyTaskM1+0x154>)
 8001e5e:	2101      	movs	r1, #1
 8001e60:	6828      	ldr	r0, [r5, #0]
 8001e62:	f000 fc95 	bl	8002790 <PWMC_CurrentReadingCalibr>
 8001e66:	2800      	cmp	r0, #0
 8001e68:	d0f7      	beq.n	8001e5a <TSK_MediumFrequencyTaskM1+0x9e>
              if (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand)
 8001e6a:	7fa3      	ldrb	r3, [r4, #30]
 8001e6c:	2b03      	cmp	r3, #3
 8001e6e:	d1e5      	bne.n	8001e3c <TSK_MediumFrequencyTaskM1+0x80>
                FOC_Clear(M1);
 8001e70:	2000      	movs	r0, #0
 8001e72:	f7ff fe97 	bl	8001ba4 <FOC_Clear>
                PQD_Clear(pMPM[M1]);
 8001e76:	6838      	ldr	r0, [r7, #0]
 8001e78:	f003 ff92 	bl	8005da0 <PQD_Clear>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	83e3      	strh	r3, [r4, #30]
 8001e80:	e7eb      	b.n	8001e5a <TSK_MediumFrequencyTaskM1+0x9e>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001e82:	7fa3      	ldrb	r3, [r4, #30]
 8001e84:	2b05      	cmp	r3, #5
 8001e86:	d0e5      	beq.n	8001e54 <TSK_MediumFrequencyTaskM1+0x98>
            if (TSK_ChargeBootCapDelayHasElapsedM1())
 8001e88:	f7ff ff62 	bl	8001d50 <TSK_ChargeBootCapDelayHasElapsedM1>
 8001e8c:	2800      	cmp	r0, #0
 8001e8e:	d0e4      	beq.n	8001e5a <TSK_MediumFrequencyTaskM1+0x9e>
              R1_SwitchOffPWM(pwmcHandle[M1]);
 8001e90:	4d1f      	ldr	r5, [pc, #124]	; (8001f10 <TSK_MediumFrequencyTaskM1+0x154>)
 8001e92:	6828      	ldr	r0, [r5, #0]
 8001e94:	f001 faea 	bl	800346c <R1_SwitchOffPWM>
              HALL_Clear(&HALL_M1);
 8001e98:	0030      	movs	r0, r6
 8001e9a:	f7ff f821 	bl	8000ee0 <HALL_Clear>
              FOC_Clear( M1 );
 8001e9e:	2000      	movs	r0, #0
 8001ea0:	f7ff fe80 	bl	8001ba4 <FOC_Clear>
              FOC_InitAdditionalMethods(M1);
 8001ea4:	2000      	movs	r0, #0
 8001ea6:	f7ff ff35 	bl	8001d14 <FOC_InitAdditionalMethods>
              FOC_CalcCurrRef(M1);
 8001eaa:	2000      	movs	r0, #0
 8001eac:	f7ff ff34 	bl	8001d18 <FOC_CalcCurrRef>
              STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1]); /* Init the reference speed to current speed */
 8001eb0:	4b18      	ldr	r3, [pc, #96]	; (8001f14 <TSK_MediumFrequencyTaskM1+0x158>)
 8001eb2:	6818      	ldr	r0, [r3, #0]
 8001eb4:	f004 f8e3 	bl	800607e <STC_ForceSpeedReferenceToCurrentSpeed>
              MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the speed sensor */
 8001eb8:	0020      	movs	r0, r4
 8001eba:	f7ff fcb5 	bl	8001828 <MCI_ExecBufferedCommands>
              Mci[M1].State = RUN;
 8001ebe:	2306      	movs	r3, #6
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 8001ec0:	6828      	ldr	r0, [r5, #0]
              Mci[M1].State = RUN;
 8001ec2:	77e3      	strb	r3, [r4, #31]
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 8001ec4:	f000 fc60 	bl	8002788 <PWMC_SwitchOnPWM>
 8001ec8:	e7c7      	b.n	8001e5a <TSK_MediumFrequencyTaskM1+0x9e>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001eca:	7fa3      	ldrb	r3, [r4, #30]
 8001ecc:	2b05      	cmp	r3, #5
 8001ece:	d0c1      	beq.n	8001e54 <TSK_MediumFrequencyTaskM1+0x98>
            MCI_ExecBufferedCommands(&Mci[M1]);
 8001ed0:	0020      	movs	r0, r4
 8001ed2:	f7ff fca9 	bl	8001828 <MCI_ExecBufferedCommands>
              FOC_CalcCurrRef(M1);
 8001ed6:	2000      	movs	r0, #0
 8001ed8:	f7ff ff1e 	bl	8001d18 <FOC_CalcCurrRef>
              if(!IsSpeedReliable)
 8001edc:	2d00      	cmp	r5, #0
 8001ede:	d1bc      	bne.n	8001e5a <TSK_MediumFrequencyTaskM1+0x9e>
                MCI_FaultProcessing(&Mci[M1], MC_SPEED_FDBK, 0);
 8001ee0:	002a      	movs	r2, r5
 8001ee2:	2120      	movs	r1, #32
 8001ee4:	0020      	movs	r0, r4
 8001ee6:	f7ff fc97 	bl	8001818 <MCI_FaultProcessing>
 8001eea:	e7b6      	b.n	8001e5a <TSK_MediumFrequencyTaskM1+0x9e>
          if (TSK_StopPermanencyTimeHasElapsedM1())
 8001eec:	f7ff ff5e 	bl	8001dac <TSK_StopPermanencyTimeHasElapsedM1>
 8001ef0:	2800      	cmp	r0, #0
 8001ef2:	d0b2      	beq.n	8001e5a <TSK_MediumFrequencyTaskM1+0x9e>
 8001ef4:	e7c2      	b.n	8001e7c <TSK_MediumFrequencyTaskM1+0xc0>
          if (MCI_ACK_FAULTS == Mci[M1].DirectCommand)
 8001ef6:	7fa3      	ldrb	r3, [r4, #30]
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d1ae      	bne.n	8001e5a <TSK_MediumFrequencyTaskM1+0x9e>
 8001efc:	e7be      	b.n	8001e7c <TSK_MediumFrequencyTaskM1+0xc0>
      Mci[M1].State = FAULT_OVER;
 8001efe:	230b      	movs	r3, #11
 8001f00:	e795      	b.n	8001e2e <TSK_MediumFrequencyTaskM1+0x72>
 8001f02:	46c0      	nop			; (mov r8, r8)
 8001f04:	20000020 	.word	0x20000020
 8001f08:	200002c8 	.word	0x200002c8
 8001f0c:	20000648 	.word	0x20000648
 8001f10:	200006b4 	.word	0x200006b4
 8001f14:	200002d4 	.word	0x200002d4

08001f18 <MC_Scheduler>:
{
 8001f18:	b570      	push	{r4, r5, r6, lr}
  if (((uint8_t)1) == bMCBootCompleted)
 8001f1a:	4b1d      	ldr	r3, [pc, #116]	; (8001f90 <MC_Scheduler+0x78>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d116      	bne.n	8001f50 <MC_Scheduler+0x38>
    if(hMFTaskCounterM1 > 0u)
 8001f22:	4c1c      	ldr	r4, [pc, #112]	; (8001f94 <MC_Scheduler+0x7c>)
 8001f24:	8823      	ldrh	r3, [r4, #0]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d013      	beq.n	8001f52 <MC_Scheduler+0x3a>
      hMFTaskCounterM1--;
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	b29b      	uxth	r3, r3
    if(hBootCapDelayCounterM1 > 0U)
 8001f2e:	4a1a      	ldr	r2, [pc, #104]	; (8001f98 <MC_Scheduler+0x80>)
      hMFTaskCounterM1--;
 8001f30:	8023      	strh	r3, [r4, #0]
    if(hBootCapDelayCounterM1 > 0U)
 8001f32:	8813      	ldrh	r3, [r2, #0]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d003      	beq.n	8001f40 <MC_Scheduler+0x28>
      hBootCapDelayCounterM1--;
 8001f38:	8813      	ldrh	r3, [r2, #0]
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0U)
 8001f40:	4a16      	ldr	r2, [pc, #88]	; (8001f9c <MC_Scheduler+0x84>)
 8001f42:	8813      	ldrh	r3, [r2, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d003      	beq.n	8001f50 <MC_Scheduler+0x38>
      hStopPermanencyCounterM1--;
 8001f48:	8813      	ldrh	r3, [r2, #0]
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	8013      	strh	r3, [r2, #0]
}
 8001f50:	bd70      	pop	{r4, r5, r6, pc}
      TSK_MediumFrequencyTaskM1();
 8001f52:	f7ff ff33 	bl	8001dbc <TSK_MediumFrequencyTaskM1>
      MC_APP_PostMediumFrequencyHook_M1();
 8001f56:	f7ff fc3e 	bl	80017d6 <MC_APP_PostMediumFrequencyHook_M1>
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 8001f5a:	4d11      	ldr	r5, [pc, #68]	; (8001fa0 <MC_Scheduler+0x88>)
 8001f5c:	4911      	ldr	r1, [pc, #68]	; (8001fa4 <MC_Scheduler+0x8c>)
 8001f5e:	6828      	ldr	r0, [r5, #0]
 8001f60:	6883      	ldr	r3, [r0, #8]
 8001f62:	4798      	blx	r3
 8001f64:	6068      	str	r0, [r5, #4]
      if ( 0U == MCP_Over_UartA.rxBuffer)
 8001f66:	2800      	cmp	r0, #0
 8001f68:	d00f      	beq.n	8001f8a <MC_Scheduler+0x72>
        if (0U == MCP_Over_UartA.pTransportLayer->fGetBuffer(MCP_Over_UartA.pTransportLayer,
 8001f6a:	6828      	ldr	r0, [r5, #0]
 8001f6c:	220a      	movs	r2, #10
 8001f6e:	490e      	ldr	r1, [pc, #56]	; (8001fa8 <MC_Scheduler+0x90>)
 8001f70:	6803      	ldr	r3, [r0, #0]
 8001f72:	4798      	blx	r3
 8001f74:	2800      	cmp	r0, #0
 8001f76:	d008      	beq.n	8001f8a <MC_Scheduler+0x72>
          MCP_ReceivedPacket(&MCP_Over_UartA);
 8001f78:	0028      	movs	r0, r5
 8001f7a:	f000 fa05 	bl	8002388 <MCP_ReceivedPacket>
          MCP_Over_UartA.pTransportLayer->fSendPacket(MCP_Over_UartA.pTransportLayer, MCP_Over_UartA.txBuffer,
 8001f7e:	6828      	ldr	r0, [r5, #0]
 8001f80:	230a      	movs	r3, #10
 8001f82:	89ea      	ldrh	r2, [r5, #14]
 8001f84:	6846      	ldr	r6, [r0, #4]
 8001f86:	68a9      	ldr	r1, [r5, #8]
 8001f88:	47b0      	blx	r6
{
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e7cf      	b.n	8001f2e <MC_Scheduler+0x16>
 8001f8e:	46c0      	nop			; (mov r8, r8)
 8001f90:	200006aa 	.word	0x200006aa
 8001f94:	200006ae 	.word	0x200006ae
 8001f98:	200006ac 	.word	0x200006ac
 8001f9c:	200006b0 	.word	0x200006b0
 8001fa0:	200002f0 	.word	0x200002f0
 8001fa4:	200002fc 	.word	0x200002fc
 8001fa8:	200002f8 	.word	0x200002f8

08001fac <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8001fac:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t bMotorNbr = 0;
  /* USER CODE BEGIN HighFrequencyTask 0 */

  /* USER CODE END HighFrequencyTask 0 */

  (void)HALL_CalcElAngle(&HALL_M1);
 8001fae:	483a      	ldr	r0, [pc, #232]	; (8002098 <TSK_HighFrequencyTask+0xec>)
{
 8001fb0:	b089      	sub	sp, #36	; 0x24
  (void)HALL_CalcElAngle(&HALL_M1);
 8001fb2:	f7fe ffbd 	bl	8000f30 <HALL_CalcElAngle>
  ab_t Iab;
  alphabeta_t Ialphabeta, Valphabeta;
  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8001fb6:	4b39      	ldr	r3, [pc, #228]	; (800209c <TSK_HighFrequencyTask+0xf0>)
 8001fb8:	6818      	ldr	r0, [r3, #0]
 8001fba:	f003 ffd7 	bl	8005f6c <STC_GetSpeedSensor>
 8001fbe:	0007      	movs	r7, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 8001fc0:	f003 ff8c 	bl	8005edc <SPD_GetElAngle>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001fc4:	4e36      	ldr	r6, [pc, #216]	; (80020a0 <TSK_HighFrequencyTask+0xf4>)
  hElAngle = SPD_GetElAngle(speedHandle);
 8001fc6:	0005      	movs	r5, r0
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001fc8:	a905      	add	r1, sp, #20
 8001fca:	6830      	ldr	r0, [r6, #0]
 8001fcc:	f000 fa90 	bl	80024f0 <PWMC_GetPhaseCurrents>
  RCM_ExecNextConv();
 8001fd0:	f001 ff14 	bl	8003dfc <RCM_ExecNextConv>
  Ialphabeta = MCM_Clarke(Iab);
 8001fd4:	9805      	ldr	r0, [sp, #20]
 8001fd6:	f7ff fd0b 	bl	80019f0 <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001fda:	0029      	movs	r1, r5
  Ialphabeta = MCM_Clarke(Iab);
 8001fdc:	9006      	str	r0, [sp, #24]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001fde:	f7ff fd77 	bl	8001ad0 <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001fe2:	4c30      	ldr	r4, [pc, #192]	; (80020a4 <TSK_HighFrequencyTask+0xf8>)
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001fe4:	9003      	str	r0, [sp, #12]
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001fe6:	2310      	movs	r3, #16
 8001fe8:	5ee1      	ldrsh	r1, [r4, r3]
 8001fea:	4b2f      	ldr	r3, [pc, #188]	; (80020a8 <TSK_HighFrequencyTask+0xfc>)
 8001fec:	b200      	sxth	r0, r0
 8001fee:	1a09      	subs	r1, r1, r0
 8001ff0:	6818      	ldr	r0, [r3, #0]
 8001ff2:	f003 fe7d 	bl	8005cf0 <PI_Controller>
 8001ff6:	9000      	str	r0, [sp, #0]
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8001ff8:	2312      	movs	r3, #18
 8001ffa:	5ee1      	ldrsh	r1, [r4, r3]
 8001ffc:	ab02      	add	r3, sp, #8
 8001ffe:	2206      	movs	r2, #6
 8002000:	5e9b      	ldrsh	r3, [r3, r2]
 8002002:	1ac9      	subs	r1, r1, r3
 8002004:	4b29      	ldr	r3, [pc, #164]	; (80020ac <TSK_HighFrequencyTask+0x100>)
 8002006:	6818      	ldr	r0, [r3, #0]
 8002008:	f003 fe72 	bl	8005cf0 <PI_Controller>
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 800200c:	9a00      	ldr	r2, [sp, #0]
 800200e:	ab04      	add	r3, sp, #16
 8002010:	801a      	strh	r2, [r3, #0]
 8002012:	8058      	strh	r0, [r3, #2]
 8002014:	9904      	ldr	r1, [sp, #16]
 8002016:	4826      	ldr	r0, [pc, #152]	; (80020b0 <TSK_HighFrequencyTask+0x104>)
 8002018:	f003 fe00 	bl	8005c1c <Circle_Limitation>
 800201c:	b203      	sxth	r3, r0
 800201e:	9004      	str	r0, [sp, #16]
 8002020:	9300      	str	r3, [sp, #0]
 8002022:	1403      	asrs	r3, r0, #16
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8002024:	0038      	movs	r0, r7
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 8002026:	9301      	str	r3, [sp, #4]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8002028:	f003 ff5e 	bl	8005ee8 <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 800202c:	0029      	movs	r1, r5
 800202e:	9804      	ldr	r0, [sp, #16]
 8002030:	f7ff fd92 	bl	8001b58 <MCM_Rev_Park>
 8002034:	9007      	str	r0, [sp, #28]
  RCM_ReadOngoingConv();
 8002036:	f001 ff17 	bl	8003e68 <RCM_ReadOngoingConv>
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 800203a:	9907      	ldr	r1, [sp, #28]
 800203c:	6830      	ldr	r0, [r6, #0]
 800203e:	f000 fa5b 	bl	80024f8 <PWMC_SetPhaseVoltage>
  PWMC_CalcPhaseCurrentsEst(pwmcHandle[M1],Iqd, hElAngle);
 8002042:	002a      	movs	r2, r5
 8002044:	9903      	ldr	r1, [sp, #12]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8002046:	0007      	movs	r7, r0
  PWMC_CalcPhaseCurrentsEst(pwmcHandle[M1],Iqd, hElAngle);
 8002048:	6830      	ldr	r0, [r6, #0]
 800204a:	f000 fbbe 	bl	80027ca <PWMC_CalcPhaseCurrentsEst>

  FOCVars[M1].Vqd = Vqd;
 800204e:	9b00      	ldr	r3, [sp, #0]
  FOCVars[M1].Iab = Iab;
 8002050:	2204      	movs	r2, #4
  FOCVars[M1].Vqd = Vqd;
 8002052:	82e3      	strh	r3, [r4, #22]
 8002054:	9b01      	ldr	r3, [sp, #4]
  FOCVars[M1].Iab = Iab;
 8002056:	a905      	add	r1, sp, #20
  FOCVars[M1].Vqd = Vqd;
 8002058:	8323      	strh	r3, [r4, #24]
  FOCVars[M1].Iab = Iab;
 800205a:	0020      	movs	r0, r4
 800205c:	f004 f844 	bl	80060e8 <memcpy>
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8002060:	2204      	movs	r2, #4
 8002062:	a906      	add	r1, sp, #24
 8002064:	1d20      	adds	r0, r4, #4
 8002066:	f004 f83f 	bl	80060e8 <memcpy>
  FOCVars[M1].Iqd = Iqd;
 800206a:	0020      	movs	r0, r4
 800206c:	2204      	movs	r2, #4
 800206e:	a903      	add	r1, sp, #12
 8002070:	300c      	adds	r0, #12
 8002072:	f004 f839 	bl	80060e8 <memcpy>
  FOCVars[M1].Valphabeta = Valphabeta;
 8002076:	0020      	movs	r0, r4
 8002078:	2204      	movs	r2, #4
 800207a:	301a      	adds	r0, #26
 800207c:	a907      	add	r1, sp, #28
 800207e:	f004 f833 	bl	80060e8 <memcpy>
  FOCVars[M1].hElAngle = hElAngle;
 8002082:	8425      	strh	r5, [r4, #32]
  if(hFOCreturn == MC_DURATION)
 8002084:	2f01      	cmp	r7, #1
 8002086:	d104      	bne.n	8002092 <TSK_HighFrequencyTask+0xe6>
    MCI_FaultProcessing(&Mci[M1], MC_DURATION, 0);
 8002088:	2200      	movs	r2, #0
 800208a:	0039      	movs	r1, r7
 800208c:	4809      	ldr	r0, [pc, #36]	; (80020b4 <TSK_HighFrequencyTask+0x108>)
 800208e:	f7ff fbc3 	bl	8001818 <MCI_FaultProcessing>
}
 8002092:	2000      	movs	r0, #0
 8002094:	b009      	add	sp, #36	; 0x24
 8002096:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002098:	20000020 	.word	0x20000020
 800209c:	200002d4 	.word	0x200002d4
 80020a0:	200006b4 	.word	0x200006b4
 80020a4:	20000684 	.word	0x20000684
 80020a8:	200002d0 	.word	0x200002d0
 80020ac:	200002cc 	.word	0x200002cc
 80020b0:	2000001c 	.word	0x2000001c
 80020b4:	20000648 	.word	0x20000648

080020b8 <TSK_SafetyTask_PWMOFF>:
  * @brief  Safety task implementation if  MC.M1_ON_OVER_VOLTAGE == TURN_OFF_PWM.
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink.
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 80020b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
  uint16_t CodeReturn = MC_NO_ERROR;
  const uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};
  /* Check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
  CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[bMotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 80020ba:	4b18      	ldr	r3, [pc, #96]	; (800211c <TSK_SafetyTask_PWMOFF+0x64>)
 80020bc:	0087      	lsls	r7, r0, #2
{
 80020be:	0004      	movs	r4, r0
  CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[bMotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 80020c0:	58f8      	ldr	r0, [r7, r3]
 80020c2:	9301      	str	r3, [sp, #4]
 80020c4:	f000 fbd7 	bl	8002876 <PWMC_IsFaultOccurred>
 80020c8:	0006      	movs	r6, r0
                                                    (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if (M1 == bMotor)
 80020ca:	2c00      	cmp	r4, #0
 80020cc:	d10b      	bne.n	80020e6 <TSK_SafetyTask_PWMOFF+0x2e>
  {
    uint16_t rawValueM1 =  RCM_ExecRegularConv(&VbusRegConv_M1);
 80020ce:	4814      	ldr	r0, [pc, #80]	; (8002120 <TSK_SafetyTask_PWMOFF+0x68>)
 80020d0:	f001 fdd2 	bl	8003c78 <RCM_ExecRegularConv>
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1, rawValueM1);
 80020d4:	4b13      	ldr	r3, [pc, #76]	; (8002124 <TSK_SafetyTask_PWMOFF+0x6c>)
    uint16_t rawValueM1 =  RCM_ExecRegularConv(&VbusRegConv_M1);
 80020d6:	0001      	movs	r1, r0
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1, rawValueM1);
 80020d8:	0018      	movs	r0, r3
 80020da:	f003 fecd 	bl	8005e78 <RVBS_CalcAvVbus>
 80020de:	2308      	movs	r3, #8
 80020e0:	4398      	bics	r0, r3
 80020e2:	4306      	orrs	r6, r0
 80020e4:	b2b6      	uxth	r6, r6
  }
  else
  {
    /* Nothing to do */
  }
  MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* Process faults */
 80020e6:	2528      	movs	r5, #40	; 0x28
 80020e8:	43f2      	mvns	r2, r6
 80020ea:	4365      	muls	r5, r4
 80020ec:	4b0e      	ldr	r3, [pc, #56]	; (8002128 <TSK_SafetyTask_PWMOFF+0x70>)
 80020ee:	0031      	movs	r1, r6
 80020f0:	18ed      	adds	r5, r5, r3
 80020f2:	0028      	movs	r0, r5
 80020f4:	b292      	uxth	r2, r2
 80020f6:	f7ff fb8f 	bl	8001818 <MCI_FaultProcessing>

  if (MCI_GetFaultState(&Mci[bMotor]) != (uint32_t)MC_NO_FAULTS)
 80020fa:	0028      	movs	r0, r5
 80020fc:	f7ff fc32 	bl	8001964 <MCI_GetFaultState>
 8002100:	2800      	cmp	r0, #0
 8002102:	d00a      	beq.n	800211a <TSK_SafetyTask_PWMOFF+0x62>
  {
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8002104:	9b01      	ldr	r3, [sp, #4]
 8002106:	59d8      	ldr	r0, [r3, r7]
 8002108:	f000 fb3a 	bl	8002780 <PWMC_SwitchOffPWM>
    FOC_Clear(bMotor);
 800210c:	0020      	movs	r0, r4
 800210e:	f7ff fd49 	bl	8001ba4 <FOC_Clear>
    PQD_Clear(pMPM[bMotor]); //cstat !MISRAC2012-Rule-11.3
 8002112:	4b06      	ldr	r3, [pc, #24]	; (800212c <TSK_SafetyTask_PWMOFF+0x74>)
 8002114:	59d8      	ldr	r0, [r3, r7]
 8002116:	f003 fe43 	bl	8005da0 <PQD_Clear>
    /* No errors */
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 800211a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800211c:	200006b4 	.word	0x200006b4
 8002120:	200002b8 	.word	0x200002b8
 8002124:	20000000 	.word	0x20000000
 8002128:	20000648 	.word	0x20000648
 800212c:	200002c8 	.word	0x200002c8

08002130 <TSK_SafetyTask>:
{
 8002130:	b510      	push	{r4, lr}
  if (1U == bMCBootCompleted)
 8002132:	4b05      	ldr	r3, [pc, #20]	; (8002148 <TSK_SafetyTask+0x18>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d104      	bne.n	8002144 <TSK_SafetyTask+0x14>
    TSK_SafetyTask_PWMOFF(M1);
 800213a:	2000      	movs	r0, #0
 800213c:	f7ff ffbc 	bl	80020b8 <TSK_SafetyTask_PWMOFF>
    RCM_ExecUserConv();
 8002140:	f001 fe2c 	bl	8003d9c <RCM_ExecUserConv>
}
 8002144:	bd10      	pop	{r4, pc}
 8002146:	46c0      	nop			; (mov r8, r8)
 8002148:	200006aa 	.word	0x200006aa

0800214c <MC_RunMotorControlTasks>:
{
 800214c:	b510      	push	{r4, lr}
  if (0U == bMCBootCompleted)
 800214e:	4b04      	ldr	r3, [pc, #16]	; (8002160 <MC_RunMotorControlTasks+0x14>)
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d003      	beq.n	800215e <MC_RunMotorControlTasks+0x12>
    MC_Scheduler();
 8002156:	f7ff fedf 	bl	8001f18 <MC_Scheduler>
    TSK_SafetyTask();
 800215a:	f7ff ffe9 	bl	8002130 <TSK_SafetyTask>
}
 800215e:	bd10      	pop	{r4, pc}
 8002160:	200006aa 	.word	0x200006aa

08002164 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8002164:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */
  R1_SwitchOffPWM(pwmcHandle[M1]);
 8002166:	4b05      	ldr	r3, [pc, #20]	; (800217c <TSK_HardwareFaultTask+0x18>)
 8002168:	6818      	ldr	r0, [r3, #0]
 800216a:	f001 f97f 	bl	800346c <R1_SwitchOffPWM>
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);
 800216e:	2200      	movs	r2, #0
 8002170:	2180      	movs	r1, #128	; 0x80
 8002172:	4803      	ldr	r0, [pc, #12]	; (8002180 <TSK_HardwareFaultTask+0x1c>)
 8002174:	f7ff fb50 	bl	8001818 <MCI_FaultProcessing>

  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 8002178:	bd10      	pop	{r4, pc}
 800217a:	46c0      	nop			; (mov r8, r8)
 800217c:	200006b4 	.word	0x200006b4
 8002180:	20000648 	.word	0x20000648

08002184 <UI_HandleStartStopButton_cb>:

__weak void UI_HandleStartStopButton_cb (void)
{
 8002184:	b510      	push	{r4, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (IDLE == MC_GetSTMStateMotor1())
 8002186:	f7ff fb1b 	bl	80017c0 <MC_GetSTMStateMotor1>
 800218a:	2800      	cmp	r0, #0
 800218c:	d102      	bne.n	8002194 <UI_HandleStartStopButton_cb+0x10>
  {
    /* Ramp parameters should be tuned for the actual motor */
    (void)MC_StartMotor1();
 800218e:	f7ff fb07 	bl	80017a0 <MC_StartMotor1>
  else
  {
    (void)MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 8002192:	bd10      	pop	{r4, pc}
    (void)MC_StopMotor1();
 8002194:	f7ff fb0c 	bl	80017b0 <MC_StopMotor1>
}
 8002198:	e7fb      	b.n	8002192 <UI_HandleStartStopButton_cb+0xe>
	...

0800219c <mc_lock_pins>:

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration.
  */
__weak void mc_lock_pins (void)
{
 800219c:	b570      	push	{r4, r5, r6, lr}
LL_GPIO_LockPin(M1_CURR_AMPL_GPIO_Port, M1_CURR_AMPL_Pin);
 800219e:	2490      	movs	r4, #144	; 0x90
 80021a0:	05e4      	lsls	r4, r4, #23
LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
 80021a2:	4d1f      	ldr	r5, [pc, #124]	; (8002220 <mc_lock_pins+0x84>)
LL_GPIO_LockPin(M1_CURR_AMPL_GPIO_Port, M1_CURR_AMPL_Pin);
 80021a4:	0020      	movs	r0, r4
 80021a6:	2120      	movs	r1, #32
 80021a8:	f7ff fcef 	bl	8001b8a <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
 80021ac:	0028      	movs	r0, r5
 80021ae:	2102      	movs	r1, #2
 80021b0:	f7ff fceb 	bl	8001b8a <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_HALL_H2_GPIO_Port, M1_HALL_H2_Pin);
 80021b4:	0020      	movs	r0, r4
 80021b6:	2102      	movs	r1, #2
 80021b8:	f7ff fce7 	bl	8001b8a <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_HALL_H3_GPIO_Port, M1_HALL_H3_Pin);
 80021bc:	0020      	movs	r0, r4
 80021be:	2104      	movs	r1, #4
 80021c0:	f7ff fce3 	bl	8001b8a <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_HALL_H1_GPIO_Port, M1_HALL_H1_Pin);
 80021c4:	0020      	movs	r0, r4
 80021c6:	2101      	movs	r1, #1
 80021c8:	f7ff fcdf 	bl	8001b8a <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_UH_GPIO_Port, M1_PWM_UH_Pin);
 80021cc:	2180      	movs	r1, #128	; 0x80
 80021ce:	0020      	movs	r0, r4
 80021d0:	0049      	lsls	r1, r1, #1
 80021d2:	f7ff fcda 	bl	8001b8a <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_VH_GPIO_Port, M1_PWM_VH_Pin);
 80021d6:	2180      	movs	r1, #128	; 0x80
 80021d8:	0020      	movs	r0, r4
 80021da:	0089      	lsls	r1, r1, #2
 80021dc:	f7ff fcd5 	bl	8001b8a <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_OCP_GPIO_Port, M1_OCP_Pin);
 80021e0:	2180      	movs	r1, #128	; 0x80
 80021e2:	0028      	movs	r0, r5
 80021e4:	0149      	lsls	r1, r1, #5
 80021e6:	f7ff fcd0 	bl	8001b8a <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_VL_GPIO_Port, M1_PWM_VL_Pin);
 80021ea:	2180      	movs	r1, #128	; 0x80
 80021ec:	0028      	movs	r0, r5
 80021ee:	01c9      	lsls	r1, r1, #7
 80021f0:	f7ff fccb 	bl	8001b8a <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_WH_GPIO_Port, M1_PWM_WH_Pin);
 80021f4:	2180      	movs	r1, #128	; 0x80
 80021f6:	0020      	movs	r0, r4
 80021f8:	00c9      	lsls	r1, r1, #3
 80021fa:	f7ff fcc6 	bl	8001b8a <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
 80021fe:	2180      	movs	r1, #128	; 0x80
 8002200:	0028      	movs	r0, r5
 8002202:	0209      	lsls	r1, r1, #8
 8002204:	f7ff fcc1 	bl	8001b8a <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
 8002208:	2180      	movs	r1, #128	; 0x80
 800220a:	0028      	movs	r0, r5
 800220c:	0189      	lsls	r1, r1, #6
 800220e:	f7ff fcbc 	bl	8001b8a <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_EN_DRIVER_GPIO_Port, M1_EN_DRIVER_Pin);
 8002212:	2180      	movs	r1, #128	; 0x80
 8002214:	0020      	movs	r0, r4
 8002216:	0109      	lsls	r1, r1, #4
 8002218:	f7ff fcb7 	bl	8001b8a <LL_GPIO_LockPin>
}
 800221c:	bd70      	pop	{r4, r5, r6, pc}
 800221e:	46c0      	nop			; (mov r8, r8)
 8002220:	48000400 	.word	0x48000400

08002224 <RI_SetRegCommandParser>:
  * @param  txSyncFreeSpace Space available for synchronous transmission
  *
  * @retval Returns #MCP_CMD_OK if the command is acknowledged and #MCP_CMD_NOK if not.
  */
uint8_t RI_SetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 8002224:	b5f0      	push	{r4, r5, r6, r7, lr}
  else
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
    uint8_t * txData = pHandle->txBuffer;
 8002226:	6883      	ldr	r3, [r0, #8]
{
 8002228:	b08b      	sub	sp, #44	; 0x2c
 800222a:	9103      	str	r1, [sp, #12]
    uint8_t * txData = pHandle->txBuffer;
 800222c:	9304      	str	r3, [sp, #16]
    int16_t rxLength = pHandle->rxLength;
 800222e:	230c      	movs	r3, #12
 8002230:	5ec2      	ldrsh	r2, [r0, r3]
{
 8002232:	0004      	movs	r4, r0
    uint8_t * rxData = pHandle->rxBuffer;
 8002234:	6841      	ldr	r1, [r0, #4]
    uint16_t size = 0U;
 8002236:	200e      	movs	r0, #14
 8002238:	2300      	movs	r3, #0
 800223a:	ad04      	add	r5, sp, #16
 800223c:	1940      	adds	r0, r0, r5
 800223e:	8003      	strh	r3, [r0, #0]
    uint8_t accessResult;

    uint16_t regID;
    uint8_t typeID;
    uint8_t motorID;
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8002240:	4829      	ldr	r0, [pc, #164]	; (80022e8 <RI_SetRegCommandParser+0xc4>)
    uint8_t number_of_item =0;
    pHandle->txLength = 0;
 8002242:	81e3      	strh	r3, [r4, #14]
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8002244:	9008      	str	r0, [sp, #32]
 8002246:	4829      	ldr	r0, [pc, #164]	; (80022ec <RI_SetRegCommandParser+0xc8>)
    uint8_t number_of_item =0;
 8002248:	9302      	str	r3, [sp, #8]
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 800224a:	9009      	str	r0, [sp, #36]	; 0x24

    while (rxLength > 0)
 800224c:	001d      	movs	r5, r3
 800224e:	2a00      	cmp	r2, #0
 8002250:	dc05      	bgt.n	800225e <RI_SetRegCommandParser+0x3a>
          }
        }
      }
    }
    /* If all accesses are fine, just one global MCP_CMD_OK is required*/
    if (MCP_CMD_OK == retVal)
 8002252:	2b00      	cmp	r3, #0
 8002254:	d100      	bne.n	8002258 <RI_SetRegCommandParser+0x34>
    {
      pHandle->txLength = 0;
 8002256:	81e3      	strh	r3, [r4, #14]
    }
  #ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 8002258:	0028      	movs	r0, r5
 800225a:	b00b      	add	sp, #44	; 0x2c
 800225c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      regID = *dataElementID & REG_MASK;
 800225e:	8808      	ldrh	r0, [r1, #0]
      rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
 8002260:	1c8e      	adds	r6, r1, #2
      if (motorID > NBR_OF_MOTORS)
 8002262:	2106      	movs	r1, #6
      number_of_item ++;
 8002264:	9b02      	ldr	r3, [sp, #8]
 8002266:	3301      	adds	r3, #1
 8002268:	b2db      	uxtb	r3, r3
 800226a:	9302      	str	r3, [sp, #8]
      typeID = (uint8_t)*dataElementID & TYPE_MASK;
 800226c:	b2c3      	uxtb	r3, r0
      if (motorID > NBR_OF_MOTORS)
 800226e:	4208      	tst	r0, r1
 8002270:	d138      	bne.n	80022e4 <RI_SetRegCommandParser+0xc0>
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8002272:	3a02      	subs	r2, #2
 8002274:	b291      	uxth	r1, r2
      regID = *dataElementID & REG_MASK;
 8002276:	2707      	movs	r7, #7
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8002278:	9105      	str	r1, [sp, #20]
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 800227a:	2138      	movs	r1, #56	; 0x38
 800227c:	b212      	sxth	r2, r2
 800227e:	4019      	ands	r1, r3
 8002280:	403b      	ands	r3, r7
 8002282:	9200      	str	r2, [sp, #0]
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	aa08      	add	r2, sp, #32
 8002288:	43b8      	bics	r0, r7
 800228a:	589f      	ldr	r7, [r3, r2]
 800228c:	230e      	movs	r3, #14
 800228e:	aa04      	add	r2, sp, #16
 8002290:	189b      	adds	r3, r3, r2
 8002292:	0032      	movs	r2, r6
 8002294:	47b8      	blx	r7
        rxLength = (int16_t) (rxLength - size);
 8002296:	aa04      	add	r2, sp, #16
 8002298:	89d1      	ldrh	r1, [r2, #14]
 800229a:	9a05      	ldr	r2, [sp, #20]
        rxData = rxData+size;
 800229c:	1876      	adds	r6, r6, r1
        rxLength = (int16_t) (rxLength - size);
 800229e:	1a52      	subs	r2, r2, r1
        if ((1U == number_of_item) && (0 == rxLength))
 80022a0:	9902      	ldr	r1, [sp, #8]
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 80022a2:	0003      	movs	r3, r0
        rxLength = (int16_t) (rxLength - size);
 80022a4:	b212      	sxth	r2, r2
        if ((1U == number_of_item) && (0 == rxLength))
 80022a6:	2901      	cmp	r1, #1
 80022a8:	d101      	bne.n	80022ae <RI_SetRegCommandParser+0x8a>
 80022aa:	2a00      	cmp	r2, #0
 80022ac:	d018      	beq.n	80022e0 <RI_SetRegCommandParser+0xbc>
          if (txSyncFreeSpace !=0 )
 80022ae:	9b03      	ldr	r3, [sp, #12]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d013      	beq.n	80022dc <RI_SetRegCommandParser+0xb8>
            *txData = accessResult;
 80022b4:	9b04      	ldr	r3, [sp, #16]
 80022b6:	7018      	strb	r0, [r3, #0]
            txData = txData+1;
 80022b8:	3301      	adds	r3, #1
 80022ba:	9304      	str	r3, [sp, #16]
            pHandle->txLength++;
 80022bc:	89e3      	ldrh	r3, [r4, #14]
 80022be:	3301      	adds	r3, #1
 80022c0:	81e3      	strh	r3, [r4, #14]
            txSyncFreeSpace--; /* decrement one by one no wraparound possible */
 80022c2:	9b03      	ldr	r3, [sp, #12]
 80022c4:	3b01      	subs	r3, #1
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	9303      	str	r3, [sp, #12]
            retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 80022ca:	002b      	movs	r3, r5
 80022cc:	2800      	cmp	r0, #0
 80022ce:	d007      	beq.n	80022e0 <RI_SetRegCommandParser+0xbc>
            if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 80022d0:	2807      	cmp	r0, #7
 80022d2:	d007      	beq.n	80022e4 <RI_SetRegCommandParser+0xc0>
 80022d4:	280a      	cmp	r0, #10
 80022d6:	d005      	beq.n	80022e4 <RI_SetRegCommandParser+0xc0>
            retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 80022d8:	2301      	movs	r3, #1
 80022da:	e001      	b.n	80022e0 <RI_SetRegCommandParser+0xbc>
            retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80022dc:	2308      	movs	r3, #8
            rxLength = 0;
 80022de:	9a03      	ldr	r2, [sp, #12]
 80022e0:	0031      	movs	r1, r6
 80022e2:	e7b3      	b.n	800224c <RI_SetRegCommandParser+0x28>
              rxLength = 0;
 80022e4:	2200      	movs	r2, #0
 80022e6:	e7f7      	b.n	80022d8 <RI_SetRegCommandParser+0xb4>
 80022e8:	080036f9 	.word	0x080036f9
 80022ec:	0800379d 	.word	0x0800379d

080022f0 <RI_GetRegCommandParser>:
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
    uint8_t * txData = pHandle->txBuffer;
    uint16_t size = 0U;
 80022f0:	220e      	movs	r2, #14
{
 80022f2:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t * txData = pHandle->txBuffer;
 80022f4:	6883      	ldr	r3, [r0, #8]
{
 80022f6:	b08b      	sub	sp, #44	; 0x2c
    uint8_t * txData = pHandle->txBuffer;
 80022f8:	9303      	str	r3, [sp, #12]
    uint16_t size = 0U;
 80022fa:	2300      	movs	r3, #0
{
 80022fc:	0004      	movs	r4, r0
    uint16_t size = 0U;
 80022fe:	a804      	add	r0, sp, #16
 8002300:	1812      	adds	r2, r2, r0
  uint8_t retVal = MCP_CMD_NOK;
 8002302:	2001      	movs	r0, #1
    uint16_t size = 0U;
 8002304:	8013      	strh	r3, [r2, #0]
    int16_t freeSpaceS16 = (int16_t) txSyncFreeSpace;

    uint16_t regID;
    uint8_t typeID;
    uint8_t motorID;
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
 8002306:	4a1e      	ldr	r2, [pc, #120]	; (8002380 <RI_GetRegCommandParser+0x90>)
    pHandle->txLength = 0;
 8002308:	81e3      	strh	r3, [r4, #14]
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
 800230a:	9208      	str	r2, [sp, #32]
 800230c:	6863      	ldr	r3, [r4, #4]
 800230e:	4a1d      	ldr	r2, [pc, #116]	; (8002384 <RI_GetRegCommandParser+0x94>)
    uint16_t rxLength = pHandle->rxLength;
 8002310:	89a5      	ldrh	r5, [r4, #12]
    int16_t freeSpaceS16 = (int16_t) txSyncFreeSpace;
 8002312:	b20f      	sxth	r7, r1
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
 8002314:	9209      	str	r2, [sp, #36]	; 0x24
    while (rxLength > 0U)
 8002316:	9304      	str	r3, [sp, #16]
 8002318:	2d00      	cmp	r5, #0
 800231a:	d101      	bne.n	8002320 <RI_GetRegCommandParser+0x30>
    }
#ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 800231c:	b00b      	add	sp, #44	; 0x2c
 800231e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (motorID > NBR_OF_MOTORS)
 8002320:	2206      	movs	r2, #6
      regID = *dataElementID & REG_MASK;
 8002322:	9b04      	ldr	r3, [sp, #16]
 8002324:	8818      	ldrh	r0, [r3, #0]
      if (motorID > NBR_OF_MOTORS)
 8002326:	4002      	ands	r2, r0
 8002328:	9205      	str	r2, [sp, #20]
 800232a:	2206      	movs	r2, #6
      typeID = (uint8_t)*dataElementID & TYPE_MASK;
 800232c:	b2c3      	uxtb	r3, r0
      if (motorID > NBR_OF_MOTORS)
 800232e:	4210      	tst	r0, r2
 8002330:	d120      	bne.n	8002374 <RI_GetRegCommandParser+0x84>
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8002332:	2138      	movs	r1, #56	; 0x38
      regID = *dataElementID & REG_MASK;
 8002334:	3201      	adds	r2, #1
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8002336:	4019      	ands	r1, r3
 8002338:	4013      	ands	r3, r2
 800233a:	4390      	bics	r0, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	aa08      	add	r2, sp, #32
 8002340:	9700      	str	r7, [sp, #0]
 8002342:	589b      	ldr	r3, [r3, r2]
 8002344:	aa04      	add	r2, sp, #16
 8002346:	001e      	movs	r6, r3
 8002348:	230e      	movs	r3, #14
 800234a:	189b      	adds	r3, r3, r2
 800234c:	9a03      	ldr	r2, [sp, #12]
 800234e:	47b0      	blx	r6
        if (retVal == MCP_CMD_OK )
 8002350:	2800      	cmp	r0, #0
 8002352:	d112      	bne.n	800237a <RI_GetRegCommandParser+0x8a>
          txData = txData+size;
 8002354:	ab04      	add	r3, sp, #16
 8002356:	89db      	ldrh	r3, [r3, #14]
 8002358:	9a03      	ldr	r2, [sp, #12]
      rxLength = rxLength - MCP_ID_SIZE;
 800235a:	3d02      	subs	r5, #2
          txData = txData+size;
 800235c:	18d2      	adds	r2, r2, r3
 800235e:	9203      	str	r2, [sp, #12]
          pHandle->txLength += size;
 8002360:	89e2      	ldrh	r2, [r4, #14]
          freeSpaceS16 = freeSpaceS16-size;
 8002362:	1aff      	subs	r7, r7, r3
          pHandle->txLength += size;
 8002364:	189a      	adds	r2, r3, r2
      rxLength = rxLength - MCP_ID_SIZE;
 8002366:	b2ad      	uxth	r5, r5
          pHandle->txLength += size;
 8002368:	81e2      	strh	r2, [r4, #14]
          freeSpaceS16 = freeSpaceS16-size;
 800236a:	b23f      	sxth	r7, r7
 800236c:	9b04      	ldr	r3, [sp, #16]
 800236e:	3302      	adds	r3, #2
 8002370:	9304      	str	r3, [sp, #16]
 8002372:	e7d1      	b.n	8002318 <RI_GetRegCommandParser+0x28>
        rxLength = 0;
 8002374:	2500      	movs	r5, #0
        retVal = MCP_CMD_NOK;
 8002376:	2001      	movs	r0, #1
 8002378:	e7f8      	b.n	800236c <RI_GetRegCommandParser+0x7c>
          rxLength = 0;
 800237a:	9d05      	ldr	r5, [sp, #20]
 800237c:	e7f6      	b.n	800236c <RI_GetRegCommandParser+0x7c>
 800237e:	46c0      	nop			; (mov r8, r8)
 8002380:	08003949 	.word	0x08003949
 8002384:	080039dd 	.word	0x080039dd

08002388 <MCP_ReceivedPacket>:
  * @brief  Parses the header from the received packet and call the required function depending on the command sent by the controller device.
  *
  * @param  pHandle Handler of the current instance of the MCP component
  */
void MCP_ReceivedPacket(MCP_Handle_t *pHandle)
{
 8002388:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    /* Nothing to do, txBuffer and txLength have not been modified */
  }
  else /* Length is 0, this is a request to send back the last packet */
  {
#endif
    packetHeader = (uint16_t *)pHandle->rxBuffer; //cstat !MISRAC2012-Rule-11.3
 800238a:	6841      	ldr	r1, [r0, #4]
    command = (uint16_t)(*packetHeader & CMD_MASK);
 800238c:	2307      	movs	r3, #7
 800238e:	880e      	ldrh	r6, [r1, #0]
{
 8002390:	0005      	movs	r5, r0
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8002392:	0034      	movs	r4, r6
 8002394:	0032      	movs	r2, r6

    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8002396:	2080      	movs	r0, #128	; 0x80
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8002398:	439c      	bics	r4, r3
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 800239a:	33f8      	adds	r3, #248	; 0xf8
 800239c:	439a      	bics	r2, r3
 800239e:	0040      	lsls	r0, r0, #1
  uint8_t userCommand=0;
 80023a0:	2300      	movs	r3, #0
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 80023a2:	4282      	cmp	r2, r0
 80023a4:	d102      	bne.n	80023ac <MCP_ReceivedPacket+0x24>
    {
      userCommand = ((uint8_t)(command & 0xF8U) >> 3U);
 80023a6:	b2e4      	uxtb	r4, r4
 80023a8:	08e3      	lsrs	r3, r4, #3
      command = MCP_USER_CMD;
 80023aa:	0014      	movs	r4, r2
    {
      /* Nothing to do */
    }

    motorID = (uint8_t)((*packetHeader - 1U) & MOTOR_MASK);
    MCI_Handle_t *pMCI = &Mci[motorID];
 80023ac:	2207      	movs	r2, #7
    motorID = (uint8_t)((*packetHeader - 1U) & MOTOR_MASK);
 80023ae:	3e01      	subs	r6, #1
    MCI_Handle_t *pMCI = &Mci[motorID];
 80023b0:	4016      	ands	r6, r2
 80023b2:	3221      	adds	r2, #33	; 0x21
 80023b4:	4356      	muls	r6, r2

    /* Removing MCP Header from RxBuffer */
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 80023b6:	89a8      	ldrh	r0, [r5, #12]
    MCI_Handle_t *pMCI = &Mci[motorID];
 80023b8:	4a3e      	ldr	r2, [pc, #248]	; (80024b4 <MCP_ReceivedPacket+0x12c>)
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 80023ba:	3802      	subs	r0, #2
    MCI_Handle_t *pMCI = &Mci[motorID];
 80023bc:	18b6      	adds	r6, r6, r2
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 80023be:	b280      	uxth	r0, r0
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;

    /* Commands requiering payload response must be aware of space available for the payload */
    /* Last byte is reserved for MCP response*/
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 80023c0:	682a      	ldr	r2, [r5, #0]
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 80023c2:	3102      	adds	r1, #2
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 80023c4:	81a8      	strh	r0, [r5, #12]
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 80023c6:	6069      	str	r1, [r5, #4]
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 80023c8:	8992      	ldrh	r2, [r2, #12]
 80023ca:	3a01      	subs	r2, #1
 80023cc:	b297      	uxth	r7, r2
 80023ce:	46bc      	mov	ip, r7

    /* Initialization of the tx length, command which send back data has to increment the txLength
     * (case of Read register) */
    pHandle->txLength = 0U;
 80023d0:	2700      	movs	r7, #0
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 80023d2:	b212      	sxth	r2, r2
    pHandle->txLength = 0U;
 80023d4:	81ef      	strh	r7, [r5, #14]

    switch (command)
 80023d6:	2c28      	cmp	r4, #40	; 0x28
 80023d8:	d04c      	beq.n	8002474 <MCP_ReceivedPacket+0xec>
 80023da:	d817      	bhi.n	800240c <MCP_ReceivedPacket+0x84>
 80023dc:	2c10      	cmp	r4, #16
 80023de:	d040      	beq.n	8002462 <MCP_ReceivedPacket+0xda>
 80023e0:	d80b      	bhi.n	80023fa <MCP_ReceivedPacket+0x72>
 80023e2:	42bc      	cmp	r4, r7
 80023e4:	d031      	beq.n	800244a <MCP_ReceivedPacket+0xc2>
 80023e6:	2c08      	cmp	r4, #8
 80023e8:	d035      	beq.n	8002456 <MCP_ReceivedPacket+0xce>
 80023ea:	2402      	movs	r4, #2
      {
        MCPResponse = MCP_CMD_UNKNOWN;
        break;
      }
    }
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80023ec:	89eb      	ldrh	r3, [r5, #14]
 80023ee:	68aa      	ldr	r2, [r5, #8]
 80023f0:	54d4      	strb	r4, [r2, r3]
    pHandle->txLength++;
 80023f2:	89eb      	ldrh	r3, [r5, #14]
 80023f4:	3301      	adds	r3, #1
 80023f6:	81eb      	strh	r3, [r5, #14]
#ifdef NULL_PTR_CHECK_MCP
  }
#endif
}
 80023f8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    switch (command)
 80023fa:	2c18      	cmp	r4, #24
 80023fc:	d036      	beq.n	800246c <MCP_ReceivedPacket+0xe4>
 80023fe:	2c20      	cmp	r4, #32
 8002400:	d1f3      	bne.n	80023ea <MCP_ReceivedPacket+0x62>
          (void)MCI_StopMotor(pMCI);
 8002402:	0030      	movs	r0, r6
 8002404:	f7ff fa7f 	bl	8001906 <MCI_StopMotor>
        MCPResponse = MCP_CMD_OK;
 8002408:	003c      	movs	r4, r7
        break;
 800240a:	e7ef      	b.n	80023ec <MCP_ReceivedPacket+0x64>
    switch (command)
 800240c:	2c48      	cmp	r4, #72	; 0x48
 800240e:	d047      	beq.n	80024a0 <MCP_ReceivedPacket+0x118>
 8002410:	d807      	bhi.n	8002422 <MCP_ReceivedPacket+0x9a>
 8002412:	2c30      	cmp	r4, #48	; 0x30
 8002414:	d038      	beq.n	8002488 <MCP_ReceivedPacket+0x100>
 8002416:	2c38      	cmp	r4, #56	; 0x38
 8002418:	d1e7      	bne.n	80023ea <MCP_ReceivedPacket+0x62>
        (void)MCI_FaultAcknowledged(pMCI);
 800241a:	0030      	movs	r0, r6
 800241c:	f7ff fa90 	bl	8001940 <MCI_FaultAcknowledged>
 8002420:	e7f2      	b.n	8002408 <MCP_ReceivedPacket+0x80>
 8002422:	68af      	ldr	r7, [r5, #8]
    switch (command)
 8002424:	2c68      	cmp	r4, #104	; 0x68
 8002426:	d03f      	beq.n	80024a8 <MCP_ReceivedPacket+0x120>
 8002428:	2680      	movs	r6, #128	; 0x80
 800242a:	0076      	lsls	r6, r6, #1
 800242c:	42b4      	cmp	r4, r6
 800242e:	d1dc      	bne.n	80023ea <MCP_ReceivedPacket+0x62>
          MCPResponse = MCP_ERROR_CALLBACK_NOT_REGISTRED;
 8002430:	240d      	movs	r4, #13
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 8002432:	2b01      	cmp	r3, #1
 8002434:	d8da      	bhi.n	80023ec <MCP_ReceivedPacket+0x64>
 8002436:	4e20      	ldr	r6, [pc, #128]	; (80024b8 <MCP_ReceivedPacket+0x130>)
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	599e      	ldr	r6, [r3, r6]
 800243c:	2e00      	cmp	r6, #0
 800243e:	d0d5      	beq.n	80023ec <MCP_ReceivedPacket+0x64>
          MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace,
 8002440:	002b      	movs	r3, r5
 8002442:	9700      	str	r7, [sp, #0]
 8002444:	330e      	adds	r3, #14
 8002446:	47b0      	blx	r6
 8002448:	e009      	b.n	800245e <MCP_ReceivedPacket+0xd6>
        pHandle->txLength = 4U;
 800244a:	2304      	movs	r3, #4
        *pHandle->txBuffer = MCP_VERSION;
 800244c:	2201      	movs	r2, #1
        pHandle->txLength = 4U;
 800244e:	81eb      	strh	r3, [r5, #14]
        *pHandle->txBuffer = MCP_VERSION;
 8002450:	68ab      	ldr	r3, [r5, #8]
 8002452:	701a      	strb	r2, [r3, #0]
        break;
 8002454:	e7ca      	b.n	80023ec <MCP_ReceivedPacket+0x64>
        MCPResponse = RI_SetRegCommandParser(pHandle, (uint16_t)txSyncFreeSpace);
 8002456:	4661      	mov	r1, ip
 8002458:	0028      	movs	r0, r5
 800245a:	f7ff fee3 	bl	8002224 <RI_SetRegCommandParser>
          MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace,
 800245e:	0004      	movs	r4, r0
 8002460:	e7c4      	b.n	80023ec <MCP_ReceivedPacket+0x64>
        MCPResponse = RI_GetRegCommandParser(pHandle, (uint16_t)txSyncFreeSpace);
 8002462:	4661      	mov	r1, ip
 8002464:	0028      	movs	r0, r5
 8002466:	f7ff ff43 	bl	80022f0 <RI_GetRegCommandParser>
 800246a:	e7f8      	b.n	800245e <MCP_ReceivedPacket+0xd6>
        MCPResponse = (MCI_StartWithPolarizationMotor(pMCI) == false) ? MCP_CMD_OK : MCP_CMD_NOK;
 800246c:	0030      	movs	r0, r6
 800246e:	f7ff fa30 	bl	80018d2 <MCI_StartWithPolarizationMotor>
 8002472:	e7f4      	b.n	800245e <MCP_ReceivedPacket+0xd6>
        if (RUN == MCI_GetSTMState(pMCI))
 8002474:	0030      	movs	r0, r6
 8002476:	f7ff fa0f 	bl	8001898 <MCI_GetSTMState>
        MCPResponse = MCP_CMD_OK;
 800247a:	003c      	movs	r4, r7
        if (RUN == MCI_GetSTMState(pMCI))
 800247c:	2806      	cmp	r0, #6
 800247e:	d1b5      	bne.n	80023ec <MCP_ReceivedPacket+0x64>
          MCI_StopRamp(pMCI);
 8002480:	0030      	movs	r0, r6
 8002482:	f7ff fa7c 	bl	800197e <MCI_StopRamp>
 8002486:	e7b1      	b.n	80023ec <MCP_ReceivedPacket+0x64>
        if (IDLE == MCI_GetSTMState(pMCI))
 8002488:	0030      	movs	r0, r6
 800248a:	f7ff fa05 	bl	8001898 <MCI_GetSTMState>
 800248e:	2800      	cmp	r0, #0
 8002490:	d1b7      	bne.n	8002402 <MCP_ReceivedPacket+0x7a>
          MCPResponse = (MCI_StartWithPolarizationMotor(pMCI) == true) ? MCP_CMD_OK : MCP_CMD_NOK;
 8002492:	0030      	movs	r0, r6
 8002494:	f7ff fa1d 	bl	80018d2 <MCI_StartWithPolarizationMotor>
 8002498:	2401      	movs	r4, #1
 800249a:	4044      	eors	r4, r0
 800249c:	b2e4      	uxtb	r4, r4
 800249e:	e7a5      	b.n	80023ec <MCP_ReceivedPacket+0x64>
        MCI_Clear_Iqdref(pMCI);
 80024a0:	0030      	movs	r0, r6
 80024a2:	f7ff fa9d 	bl	80019e0 <MCI_Clear_Iqdref>
        break;
 80024a6:	e7af      	b.n	8002408 <MCP_ReceivedPacket+0x80>
        MCPResponse = MC_ProfilerCommand(pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength,
 80024a8:	002b      	movs	r3, r5
 80024aa:	9700      	str	r7, [sp, #0]
 80024ac:	330e      	adds	r3, #14
 80024ae:	f7ff f98f 	bl	80017d0 <MC_ProfilerCommand>
 80024b2:	e7d4      	b.n	800245e <MCP_ReceivedPacket+0xd6>
 80024b4:	20000648 	.word	0x20000648
 80024b8:	200007c4 	.word	0x200007c4

080024bc <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 80024bc:	b510      	push	{r4, lr}
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  (void)HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / SYS_TICK_FREQUENCY);
 80024be:	f002 fd9f 	bl	8005000 <HAL_RCC_GetHCLKFreq>
 80024c2:	21fa      	movs	r1, #250	; 0xfa
 80024c4:	00c9      	lsls	r1, r1, #3
 80024c6:	f7fd fe33 	bl	8000130 <__udivsi3>
 80024ca:	f002 f9dd 	bl	8004888 <HAL_SYSTICK_Config>
  HAL_NVIC_SetPriority(SysTick_IRQn, uwTickPrio, 0U);
 80024ce:	2001      	movs	r0, #1
 80024d0:	4b05      	ldr	r3, [pc, #20]	; (80024e8 <MX_MotorControl_Init+0x2c>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	6819      	ldr	r1, [r3, #0]
 80024d6:	4240      	negs	r0, r0
 80024d8:	f002 f9a0 	bl	800481c <HAL_NVIC_SetPriority>

  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI);
 80024dc:	4803      	ldr	r0, [pc, #12]	; (80024ec <MX_MotorControl_Init+0x30>)
 80024de:	f7ff fb93 	bl	8001c08 <MCboot>
  mc_lock_pins();
 80024e2:	f7ff fe5b 	bl	800219c <mc_lock_pins>
}
 80024e6:	bd10      	pop	{r4, pc}
 80024e8:	2000037c 	.word	0x2000037c
 80024ec:	200007cc 	.word	0x200007cc

080024f0 <PWMC_GetPhaseCurrents>:
  * @param  Iab: Pointer to the structure that will receive motor current
  *         of phases A & B in ElectricalValue format.
  */
//cstat !MISRAC2012-Rule-8.13 !RED-func-no-effect
__weak void PWMC_GetPhaseCurrents(PWMC_Handle_t *pHandle, ab_t *Iab)
{
 80024f0:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctGetPhaseCurrents(pHandle, Iab);
 80024f2:	6803      	ldr	r3, [r0, #0]
 80024f4:	4798      	blx	r3
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
}
 80024f6:	bd10      	pop	{r4, pc}

080024f8 <PWMC_SetPhaseVoltage>:
  * @param  Valfa_beta: Voltage Components expressed in the @f$(\alpha, \beta)@f$ reference frame.
  * @retval #MC_NO_ERROR if no error occurred or #MC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage(PWMC_Handle_t *pHandle, alphabeta_t Valfa_beta)
{
 80024f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024fa:	b085      	sub	sp, #20
 80024fc:	9103      	str	r1, [sp, #12]
    int32_t wUBeta;
    int32_t wTimePhA;
    int32_t wTimePhB;
    int32_t wTimePhC;

    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 80024fe:	b20b      	sxth	r3, r1
{
 8002500:	000a      	movs	r2, r1
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8002502:	0001      	movs	r1, r0
 8002504:	267c      	movs	r6, #124	; 0x7c
 8002506:	314e      	adds	r1, #78	; 0x4e
 8002508:	8809      	ldrh	r1, [r1, #0]
 800250a:	46b4      	mov	ip, r6
 800250c:	4359      	muls	r1, r3
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 800250e:	0003      	movs	r3, r0
 8002510:	3372      	adds	r3, #114	; 0x72
 8002512:	881f      	ldrh	r7, [r3, #0]
 8002514:	1412      	asrs	r2, r2, #16
 8002516:	437a      	muls	r2, r7
 8002518:	0052      	lsls	r2, r2, #1
 800251a:	4255      	negs	r5, r2

    wX = wUBeta;
    wY = (wUBeta + wUAlpha) / 2;
 800251c:	1a8a      	subs	r2, r1, r2
    wZ = (wUBeta - wUAlpha) / 2;
 800251e:	1a69      	subs	r1, r5, r1
    wY = (wUBeta + wUAlpha) / 2;
 8002520:	0fd4      	lsrs	r4, r2, #31
    wZ = (wUBeta - wUAlpha) / 2;
 8002522:	0fcb      	lsrs	r3, r1, #31
    wY = (wUBeta + wUAlpha) / 2;
 8002524:	18a4      	adds	r4, r4, r2
    wZ = (wUBeta - wUAlpha) / 2;
 8002526:	185b      	adds	r3, r3, r1
    wY = (wUBeta + wUAlpha) / 2;
 8002528:	1064      	asrs	r4, r4, #1
    wZ = (wUBeta - wUAlpha) / 2;
 800252a:	105b      	asrs	r3, r3, #1
    if (wY < 0)
    {
      if (wZ < 0)
      {
        pHandle->Sector = SECTOR_5;
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 800252c:	08bf      	lsrs	r7, r7, #2
 800252e:	4484      	add	ip, r0
    if (wY < 0)
 8002530:	1c56      	adds	r6, r2, #1
 8002532:	db00      	blt.n	8002536 <PWMC_SetPhaseVoltage+0x3e>
 8002534:	e0a3      	b.n	800267e <PWMC_SetPhaseVoltage+0x186>
        wTimePhB = wTimePhA + (wZ / 131072);
        wTimePhC = wTimePhA - (wY / 131072) ;

        if(true == pHandle->SingleShuntTopology)
 8002536:	0006      	movs	r6, r0
 8002538:	3687      	adds	r6, #135	; 0x87
 800253a:	7836      	ldrb	r6, [r6, #0]
 800253c:	9601      	str	r6, [sp, #4]
      if (wZ < 0)
 800253e:	1c4e      	adds	r6, r1, #1
 8002540:	da1d      	bge.n	800257e <PWMC_SetPhaseVoltage+0x86>
        pHandle->Sector = SECTOR_5;
 8002542:	2504      	movs	r5, #4
 8002544:	4666      	mov	r6, ip
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002546:	1ae4      	subs	r4, r4, r3
 8002548:	17e3      	asrs	r3, r4, #31
 800254a:	039b      	lsls	r3, r3, #14
 800254c:	0b9b      	lsrs	r3, r3, #14
 800254e:	191b      	adds	r3, r3, r4
        wTimePhB = wTimePhA + (wZ / 131072);
 8002550:	17cc      	asrs	r4, r1, #31
 8002552:	03a4      	lsls	r4, r4, #14
 8002554:	0ba4      	lsrs	r4, r4, #14
 8002556:	1861      	adds	r1, r4, r1
        wTimePhC = wTimePhA - (wY / 131072) ;
 8002558:	17d4      	asrs	r4, r2, #31
 800255a:	03a4      	lsls	r4, r4, #14
 800255c:	0ba4      	lsrs	r4, r4, #14
 800255e:	18a4      	adds	r4, r4, r2
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002560:	149b      	asrs	r3, r3, #18
        if(true == pHandle->SingleShuntTopology)
 8002562:	9a01      	ldr	r2, [sp, #4]
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002564:	19db      	adds	r3, r3, r7
        wTimePhB = wTimePhA + (wZ / 131072);
 8002566:	1489      	asrs	r1, r1, #18
        wTimePhC = wTimePhA - (wY / 131072) ;
 8002568:	14a4      	asrs	r4, r4, #18
        pHandle->Sector = SECTOR_5;
 800256a:	7035      	strb	r5, [r6, #0]
        wTimePhB = wTimePhA + (wZ / 131072);
 800256c:	18c9      	adds	r1, r1, r3
        wTimePhC = wTimePhA - (wY / 131072) ;
 800256e:	1b1c      	subs	r4, r3, r4
        if(true == pHandle->SingleShuntTopology)
 8002570:	2a00      	cmp	r2, #0
 8002572:	d000      	beq.n	8002576 <PWMC_SetPhaseVoltage+0x7e>
 8002574:	e0e6      	b.n	8002744 <PWMC_SetPhaseVoltage+0x24c>
          pHandle->midDuty = 0U;
          pHandle->highDuty = 2U;
        }
        else
        {
          pHandle->lowDuty = (uint16_t)wTimePhC;
 8002576:	b2a7      	uxth	r7, r4
          pHandle->midDuty = (uint16_t)wTimePhA;
 8002578:	b29e      	uxth	r6, r3
          }
          else
          {
            pHandle->lowDuty = (uint16_t)wTimePhA;
            pHandle->midDuty = (uint16_t)wTimePhC;
            pHandle->highDuty = (uint16_t)wTimePhB;
 800257a:	b28d      	uxth	r5, r1
 800257c:	e01e      	b.n	80025bc <PWMC_SetPhaseVoltage+0xc4>
        if (wX <= 0)
 800257e:	2d00      	cmp	r5, #0
 8002580:	dc65      	bgt.n	800264e <PWMC_SetPhaseVoltage+0x156>
          pHandle->Sector = SECTOR_4;
 8002582:	2203      	movs	r2, #3
 8002584:	4664      	mov	r4, ip
 8002586:	7022      	strb	r2, [r4, #0]
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8002588:	1aea      	subs	r2, r5, r3
 800258a:	17d3      	asrs	r3, r2, #31
 800258c:	039b      	lsls	r3, r3, #14
 800258e:	0b9b      	lsrs	r3, r3, #14
 8002590:	189b      	adds	r3, r3, r2
          wTimePhB = wTimePhA + (wZ / 131072);
 8002592:	17ca      	asrs	r2, r1, #31
 8002594:	0392      	lsls	r2, r2, #14
          wTimePhC = wTimePhB - (wX / 131072);
 8002596:	17ec      	asrs	r4, r5, #31
          wTimePhB = wTimePhA + (wZ / 131072);
 8002598:	0b92      	lsrs	r2, r2, #14
          wTimePhC = wTimePhB - (wX / 131072);
 800259a:	03e4      	lsls	r4, r4, #15
          wTimePhB = wTimePhA + (wZ / 131072);
 800259c:	1851      	adds	r1, r2, r1
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 800259e:	149b      	asrs	r3, r3, #18
          wTimePhC = wTimePhB - (wX / 131072);
 80025a0:	0be4      	lsrs	r4, r4, #15
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 80025a2:	19db      	adds	r3, r3, r7
          wTimePhB = wTimePhA + (wZ / 131072);
 80025a4:	1489      	asrs	r1, r1, #18
          wTimePhC = wTimePhB - (wX / 131072);
 80025a6:	1964      	adds	r4, r4, r5
          if(true == pHandle->SingleShuntTopology)
 80025a8:	9a01      	ldr	r2, [sp, #4]
          wTimePhB = wTimePhA + (wZ / 131072);
 80025aa:	18c9      	adds	r1, r1, r3
          wTimePhC = wTimePhB - (wX / 131072);
 80025ac:	1464      	asrs	r4, r4, #17
 80025ae:	1b0c      	subs	r4, r1, r4
          if(true == pHandle->SingleShuntTopology)
 80025b0:	2a00      	cmp	r2, #0
 80025b2:	d000      	beq.n	80025b6 <PWMC_SetPhaseVoltage+0xbe>
 80025b4:	e0ca      	b.n	800274c <PWMC_SetPhaseVoltage+0x254>
          pHandle->lowDuty = (uint16_t)wTimePhC;
 80025b6:	b2a7      	uxth	r7, r4
          pHandle->midDuty = (uint16_t)wTimePhB;
 80025b8:	b28e      	uxth	r6, r1
          pHandle->highDuty = (uint16_t)wTimePhA;
 80025ba:	b29d      	uxth	r5, r3
          pHandle->lowDuty = (uint16_t)wTimePhC;
 80025bc:	0002      	movs	r2, r0
 80025be:	3258      	adds	r2, #88	; 0x58
 80025c0:	8017      	strh	r7, [r2, #0]
          pHandle->midDuty = (uint16_t)wTimePhB;
 80025c2:	8056      	strh	r6, [r2, #2]
          pHandle->highDuty = (uint16_t)wTimePhA;
 80025c4:	8095      	strh	r5, [r2, #4]
            pHandle->highDuty = (uint16_t)wTimePhC;
        }
        }
    }

    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 80025c6:	43da      	mvns	r2, r3
 80025c8:	43cd      	mvns	r5, r1
 80025ca:	43e6      	mvns	r6, r4
 80025cc:	17d2      	asrs	r2, r2, #31
 80025ce:	17ed      	asrs	r5, r5, #31
 80025d0:	4013      	ands	r3, r2
 80025d2:	4029      	ands	r1, r5
 80025d4:	17f6      	asrs	r6, r6, #31
 80025d6:	0002      	movs	r2, r0
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 80025d8:	0005      	movs	r5, r0
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 80025da:	0007      	movs	r7, r0
 80025dc:	4034      	ands	r4, r6

    if (1U == pHandle->DTTest)
 80025de:	0006      	movs	r6, r0
    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 80025e0:	3250      	adds	r2, #80	; 0x50
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 80025e2:	3552      	adds	r5, #82	; 0x52
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	b289      	uxth	r1, r1
 80025e8:	b2a4      	uxth	r4, r4
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 80025ea:	3754      	adds	r7, #84	; 0x54
    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 80025ec:	8013      	strh	r3, [r2, #0]
 80025ee:	9201      	str	r2, [sp, #4]
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 80025f0:	8029      	strh	r1, [r5, #0]
 80025f2:	9502      	str	r5, [sp, #8]
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 80025f4:	803c      	strh	r4, [r7, #0]
    if (1U == pHandle->DTTest)
 80025f6:	3670      	adds	r6, #112	; 0x70
 80025f8:	8836      	ldrh	r6, [r6, #0]
 80025fa:	2e01      	cmp	r6, #1
 80025fc:	d123      	bne.n	8002646 <PWMC_SetPhaseVoltage+0x14e>
    {
      /* Dead time compensation */
      if (pHandle->Ia > 0)
 80025fe:	2262      	movs	r2, #98	; 0x62
 8002600:	4694      	mov	ip, r2
 8002602:	4484      	add	ip, r0
 8002604:	4662      	mov	r2, ip
      {
        pHandle->CntPhA += pHandle->DTCompCnt;
 8002606:	0006      	movs	r6, r0
      if (pHandle->Ia > 0)
 8002608:	2500      	movs	r5, #0
 800260a:	5f52      	ldrsh	r2, [r2, r5]
        pHandle->CntPhA += pHandle->DTCompCnt;
 800260c:	3674      	adds	r6, #116	; 0x74
 800260e:	8836      	ldrh	r6, [r6, #0]
      if (pHandle->Ia > 0)
 8002610:	2a00      	cmp	r2, #0
 8002612:	dc00      	bgt.n	8002616 <PWMC_SetPhaseVoltage+0x11e>
 8002614:	e0ad      	b.n	8002772 <PWMC_SetPhaseVoltage+0x27a>
        pHandle->CntPhA += pHandle->DTCompCnt;
 8002616:	199b      	adds	r3, r3, r6
 8002618:	9a01      	ldr	r2, [sp, #4]
      }
      else
      {
        pHandle->CntPhA -= pHandle->DTCompCnt;
 800261a:	b29b      	uxth	r3, r3
 800261c:	8013      	strh	r3, [r2, #0]
      }

      if (pHandle->Ib > 0)
 800261e:	0003      	movs	r3, r0
 8002620:	3364      	adds	r3, #100	; 0x64
 8002622:	2200      	movs	r2, #0
 8002624:	5e9b      	ldrsh	r3, [r3, r2]
 8002626:	2b00      	cmp	r3, #0
 8002628:	dc00      	bgt.n	800262c <PWMC_SetPhaseVoltage+0x134>
 800262a:	e0a4      	b.n	8002776 <PWMC_SetPhaseVoltage+0x27e>
      {
        pHandle->CntPhB += pHandle->DTCompCnt;
 800262c:	1989      	adds	r1, r1, r6
 800262e:	9b02      	ldr	r3, [sp, #8]
      }
      else
      {
        pHandle->CntPhB -= pHandle->DTCompCnt;
 8002630:	b289      	uxth	r1, r1
 8002632:	8019      	strh	r1, [r3, #0]
      }

      if (pHandle->Ic > 0)
 8002634:	0003      	movs	r3, r0
 8002636:	3366      	adds	r3, #102	; 0x66
 8002638:	2200      	movs	r2, #0
 800263a:	5e9b      	ldrsh	r3, [r3, r2]
 800263c:	2b00      	cmp	r3, #0
 800263e:	dc00      	bgt.n	8002642 <PWMC_SetPhaseVoltage+0x14a>
 8002640:	e09b      	b.n	800277a <PWMC_SetPhaseVoltage+0x282>
      {
        pHandle->CntPhC += pHandle->DTCompCnt;
 8002642:	19a6      	adds	r6, r4, r6
 8002644:	803e      	strh	r6, [r7, #0]
      else
      {
        pHandle->CntPhC -= pHandle->DTCompCnt;
      }
    }
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 8002646:	6943      	ldr	r3, [r0, #20]
 8002648:	4798      	blx	r3
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (returnValue);
}
 800264a:	b005      	add	sp, #20
 800264c:	bdf0      	pop	{r4, r5, r6, r7, pc}
          pHandle->Sector = SECTOR_3;
 800264e:	4663      	mov	r3, ip
 8002650:	2602      	movs	r6, #2
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 8002652:	1b64      	subs	r4, r4, r5
          pHandle->Sector = SECTOR_3;
 8002654:	701e      	strb	r6, [r3, #0]
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 8002656:	17e3      	asrs	r3, r4, #31
 8002658:	039b      	lsls	r3, r3, #14
 800265a:	0b9b      	lsrs	r3, r3, #14
 800265c:	191b      	adds	r3, r3, r4
          wTimePhC = wTimePhA - (wY / 131072);
 800265e:	17d4      	asrs	r4, r2, #31
 8002660:	03a4      	lsls	r4, r4, #14
 8002662:	0ba4      	lsrs	r4, r4, #14
 8002664:	18a4      	adds	r4, r4, r2
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 8002666:	149b      	asrs	r3, r3, #18
 8002668:	19db      	adds	r3, r3, r7
          wTimePhC = wTimePhA - (wY / 131072);
 800266a:	14a4      	asrs	r4, r4, #18
          if(true == pHandle->SingleShuntTopology)
 800266c:	9a01      	ldr	r2, [sp, #4]
          wTimePhC = wTimePhA - (wY / 131072);
 800266e:	1b1c      	subs	r4, r3, r4
          wTimePhB = wTimePhC + (wX / 131072);
 8002670:	1469      	asrs	r1, r5, #17
 8002672:	1909      	adds	r1, r1, r4
          if(true == pHandle->SingleShuntTopology)
 8002674:	2a00      	cmp	r2, #0
 8002676:	d16c      	bne.n	8002752 <PWMC_SetPhaseVoltage+0x25a>
          pHandle->lowDuty = (uint16_t)wTimePhB;
 8002678:	b28f      	uxth	r7, r1
          pHandle->midDuty = (uint16_t)wTimePhC;
 800267a:	b2a6      	uxth	r6, r4
 800267c:	e79d      	b.n	80025ba <PWMC_SetPhaseVoltage+0xc2>
      if (wZ >= 0)
 800267e:	1c4e      	adds	r6, r1, #1
 8002680:	db1e      	blt.n	80026c0 <PWMC_SetPhaseVoltage+0x1c8>
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002682:	1ae4      	subs	r4, r4, r3
 8002684:	17e3      	asrs	r3, r4, #31
 8002686:	039b      	lsls	r3, r3, #14
 8002688:	0b9b      	lsrs	r3, r3, #14
 800268a:	191b      	adds	r3, r3, r4
        wTimePhB = wTimePhA + (wZ / 131072);
 800268c:	17cc      	asrs	r4, r1, #31
 800268e:	03a4      	lsls	r4, r4, #14
 8002690:	0ba4      	lsrs	r4, r4, #14
 8002692:	1861      	adds	r1, r4, r1
        wTimePhC = wTimePhA - (wY / 131072);
 8002694:	17d4      	asrs	r4, r2, #31
 8002696:	03a4      	lsls	r4, r4, #14
 8002698:	0ba4      	lsrs	r4, r4, #14
 800269a:	18a4      	adds	r4, r4, r2
        pHandle->Sector = SECTOR_2;
 800269c:	2501      	movs	r5, #1
 800269e:	4666      	mov	r6, ip
        if(true == pHandle->SingleShuntTopology)
 80026a0:	0002      	movs	r2, r0
        pHandle->Sector = SECTOR_2;
 80026a2:	7035      	strb	r5, [r6, #0]
        if(true == pHandle->SingleShuntTopology)
 80026a4:	3287      	adds	r2, #135	; 0x87
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80026a6:	149b      	asrs	r3, r3, #18
        if(true == pHandle->SingleShuntTopology)
 80026a8:	7812      	ldrb	r2, [r2, #0]
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80026aa:	19db      	adds	r3, r3, r7
        wTimePhB = wTimePhA + (wZ / 131072);
 80026ac:	1489      	asrs	r1, r1, #18
        wTimePhC = wTimePhA - (wY / 131072);
 80026ae:	14a4      	asrs	r4, r4, #18
        wTimePhB = wTimePhA + (wZ / 131072);
 80026b0:	18c9      	adds	r1, r1, r3
        wTimePhC = wTimePhA - (wY / 131072);
 80026b2:	1b1c      	subs	r4, r3, r4
        if(true == pHandle->SingleShuntTopology)
 80026b4:	2a00      	cmp	r2, #0
 80026b6:	d14f      	bne.n	8002758 <PWMC_SetPhaseVoltage+0x260>
        pHandle->lowDuty = (uint16_t)wTimePhB;
 80026b8:	b28f      	uxth	r7, r1
        pHandle->midDuty = (uint16_t)wTimePhA;
 80026ba:	b29e      	uxth	r6, r3
            pHandle->highDuty = (uint16_t)wTimePhC;
 80026bc:	b2a5      	uxth	r5, r4
 80026be:	e77d      	b.n	80025bc <PWMC_SetPhaseVoltage+0xc4>
        if ( wX <= 0 )
 80026c0:	17ee      	asrs	r6, r5, #31
 80026c2:	2d00      	cmp	r5, #0
 80026c4:	dc1c      	bgt.n	8002700 <PWMC_SetPhaseVoltage+0x208>
          pHandle->Sector = SECTOR_6;
 80026c6:	2305      	movs	r3, #5
 80026c8:	4661      	mov	r1, ip
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 80026ca:	1b64      	subs	r4, r4, r5
          pHandle->Sector = SECTOR_6;
 80026cc:	700b      	strb	r3, [r1, #0]
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 80026ce:	17e3      	asrs	r3, r4, #31
 80026d0:	039b      	lsls	r3, r3, #14
 80026d2:	0b9b      	lsrs	r3, r3, #14
 80026d4:	191b      	adds	r3, r3, r4
          wTimePhC = wTimePhA - (wY / 131072);
 80026d6:	17d4      	asrs	r4, r2, #31
 80026d8:	03a4      	lsls	r4, r4, #14
 80026da:	0ba4      	lsrs	r4, r4, #14
 80026dc:	18a4      	adds	r4, r4, r2
          if(true == pHandle->SingleShuntTopology)
 80026de:	0002      	movs	r2, r0
          wTimePhB = wTimePhC + (wX / 131072);
 80026e0:	03f1      	lsls	r1, r6, #15
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 80026e2:	149b      	asrs	r3, r3, #18
          wTimePhB = wTimePhC + (wX / 131072);
 80026e4:	0bc9      	lsrs	r1, r1, #15
          if(true == pHandle->SingleShuntTopology)
 80026e6:	3287      	adds	r2, #135	; 0x87
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 80026e8:	19db      	adds	r3, r3, r7
          wTimePhC = wTimePhA - (wY / 131072);
 80026ea:	14a4      	asrs	r4, r4, #18
          wTimePhB = wTimePhC + (wX / 131072);
 80026ec:	1949      	adds	r1, r1, r5
          if(true == pHandle->SingleShuntTopology)
 80026ee:	7812      	ldrb	r2, [r2, #0]
          wTimePhC = wTimePhA - (wY / 131072);
 80026f0:	1b1c      	subs	r4, r3, r4
          wTimePhB = wTimePhC + (wX / 131072);
 80026f2:	1449      	asrs	r1, r1, #17
 80026f4:	1909      	adds	r1, r1, r4
          if(true == pHandle->SingleShuntTopology)
 80026f6:	2a00      	cmp	r2, #0
 80026f8:	d131      	bne.n	800275e <PWMC_SetPhaseVoltage+0x266>
            pHandle->lowDuty = (uint16_t)wTimePhA;
 80026fa:	b29f      	uxth	r7, r3
            pHandle->midDuty = (uint16_t)wTimePhC;
 80026fc:	b2a6      	uxth	r6, r4
 80026fe:	e73c      	b.n	800257a <PWMC_SetPhaseVoltage+0x82>
          pHandle->Sector = SECTOR_1;
 8002700:	4664      	mov	r4, ip
 8002702:	2200      	movs	r2, #0
          wTimePhC = wTimePhB - (wX / 131072);
 8002704:	03f6      	lsls	r6, r6, #15
 8002706:	0bf6      	lsrs	r6, r6, #15
          pHandle->Sector = SECTOR_1;
 8002708:	7022      	strb	r2, [r4, #0]
          wTimePhC = wTimePhB - (wX / 131072);
 800270a:	1976      	adds	r6, r6, r5
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 800270c:	1aec      	subs	r4, r5, r3
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 800270e:	0005      	movs	r5, r0
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 8002710:	17e3      	asrs	r3, r4, #31
 8002712:	039b      	lsls	r3, r3, #14
 8002714:	0b9b      	lsrs	r3, r3, #14
 8002716:	191b      	adds	r3, r3, r4
          wTimePhB = wTimePhA + (wZ / 131072);
 8002718:	17cc      	asrs	r4, r1, #31
 800271a:	03a4      	lsls	r4, r4, #14
 800271c:	0ba4      	lsrs	r4, r4, #14
 800271e:	1861      	adds	r1, r4, r1
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 8002720:	149b      	asrs	r3, r3, #18
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 8002722:	357f      	adds	r5, #127	; 0x7f
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 8002724:	19db      	adds	r3, r3, r7
          wTimePhB = wTimePhA + (wZ / 131072);
 8002726:	1489      	asrs	r1, r1, #18
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 8002728:	782d      	ldrb	r5, [r5, #0]
          wTimePhB = wTimePhA + (wZ / 131072);
 800272a:	18c9      	adds	r1, r1, r3
          wTimePhC = wTimePhB - (wX / 131072);
 800272c:	1476      	asrs	r6, r6, #17
 800272e:	1b8c      	subs	r4, r1, r6
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 8002730:	4295      	cmp	r5, r2
 8002732:	d118      	bne.n	8002766 <PWMC_SetPhaseVoltage+0x26e>
 8002734:	0002      	movs	r2, r0
 8002736:	3287      	adds	r2, #135	; 0x87
 8002738:	7812      	ldrb	r2, [r2, #0]
 800273a:	2a00      	cmp	r2, #0
 800273c:	d116      	bne.n	800276c <PWMC_SetPhaseVoltage+0x274>
            pHandle->lowDuty = (uint16_t)wTimePhA;
 800273e:	b29f      	uxth	r7, r3
            pHandle->midDuty = (uint16_t)wTimePhB;
 8002740:	b28e      	uxth	r6, r1
 8002742:	e7bb      	b.n	80026bc <PWMC_SetPhaseVoltage+0x1c4>
 8002744:	2701      	movs	r7, #1
 8002746:	2600      	movs	r6, #0
 8002748:	2502      	movs	r5, #2
 800274a:	e737      	b.n	80025bc <PWMC_SetPhaseVoltage+0xc4>
 800274c:	2700      	movs	r7, #0
 800274e:	2601      	movs	r6, #1
 8002750:	e7fa      	b.n	8002748 <PWMC_SetPhaseVoltage+0x250>
 8002752:	2700      	movs	r7, #0
 8002754:	2501      	movs	r5, #1
 8002756:	e731      	b.n	80025bc <PWMC_SetPhaseVoltage+0xc4>
 8002758:	2702      	movs	r7, #2
 800275a:	2600      	movs	r6, #0
 800275c:	e72e      	b.n	80025bc <PWMC_SetPhaseVoltage+0xc4>
 800275e:	2701      	movs	r7, #1
 8002760:	2602      	movs	r6, #2
 8002762:	2500      	movs	r5, #0
 8002764:	e72a      	b.n	80025bc <PWMC_SetPhaseVoltage+0xc4>
 8002766:	2702      	movs	r7, #2
 8002768:	2601      	movs	r6, #1
 800276a:	e7fa      	b.n	8002762 <PWMC_SetPhaseVoltage+0x26a>
 800276c:	2702      	movs	r7, #2
 800276e:	2601      	movs	r6, #1
 8002770:	e724      	b.n	80025bc <PWMC_SetPhaseVoltage+0xc4>
        pHandle->CntPhA -= pHandle->DTCompCnt;
 8002772:	1b9b      	subs	r3, r3, r6
 8002774:	e750      	b.n	8002618 <PWMC_SetPhaseVoltage+0x120>
        pHandle->CntPhB -= pHandle->DTCompCnt;
 8002776:	1b89      	subs	r1, r1, r6
 8002778:	e759      	b.n	800262e <PWMC_SetPhaseVoltage+0x136>
        pHandle->CntPhC -= pHandle->DTCompCnt;
 800277a:	1ba4      	subs	r4, r4, r6
 800277c:	803c      	strh	r4, [r7, #0]
 800277e:	e762      	b.n	8002646 <PWMC_SetPhaseVoltage+0x14e>

08002780 <PWMC_SwitchOffPWM>:
  *
  * @param  pHandle: Handler of the current instance of the PWM component.
  */
//cstat !MISRAC2012-Rule-8.13 !RED-func-no-effect
__weak void PWMC_SwitchOffPWM(PWMC_Handle_t *pHandle)
{
 8002780:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOffPwm(pHandle);
 8002782:	6843      	ldr	r3, [r0, #4]
 8002784:	4798      	blx	r3
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
}
 8002786:	bd10      	pop	{r4, pc}

08002788 <PWMC_SwitchOnPWM>:
  *
  * @param  pHandle: Handler of the current instance of the PWM component.
  */
//cstat !MISRAC2012-Rule-8.13 !RED-func-no-effect
__weak void PWMC_SwitchOnPWM(PWMC_Handle_t *pHandle)
{
 8002788:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOnPwm(pHandle);
 800278a:	6883      	ldr	r3, [r0, #8]
 800278c:	4798      	blx	r3
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
}
 800278e:	bd10      	pop	{r4, pc}

08002790 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, **false** if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr(PWMC_Handle_t *pHandle, CRCAction_t action)
{
 8002790:	b570      	push	{r4, r5, r6, lr}
 8002792:	0005      	movs	r5, r0
 8002794:	1e0c      	subs	r4, r1, #0
    /* Nothing to do */
  }
  else
  {
#endif
    if (CRC_START == action)
 8002796:	d107      	bne.n	80027a8 <PWMC_CurrentReadingCalibr+0x18>
    {
      PWMC_SwitchOffPWM(pHandle);
 8002798:	f7ff fff2 	bl	8002780 <PWMC_SwitchOffPWM>
      pHandle->pFctCurrReadingCalib(pHandle);
 800279c:	0028      	movs	r0, r5
 800279e:	68eb      	ldr	r3, [r5, #12]
 80027a0:	4798      	blx	r3
      retVal = true;
 80027a2:	3401      	adds	r4, #1
    }
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (retVal);
}
 80027a4:	0020      	movs	r0, r4
 80027a6:	bd70      	pop	{r4, r5, r6, pc}
    else if (CRC_EXEC == action)
 80027a8:	2901      	cmp	r1, #1
 80027aa:	d001      	beq.n	80027b0 <PWMC_CurrentReadingCalibr+0x20>
  bool retVal = false;
 80027ac:	2400      	movs	r4, #0
 80027ae:	e7f9      	b.n	80027a4 <PWMC_CurrentReadingCalibr+0x14>
      if (pHandle->OffCalibrWaitTimeCounter > 0u)
 80027b0:	0002      	movs	r2, r0
 80027b2:	3260      	adds	r2, #96	; 0x60
 80027b4:	8813      	ldrh	r3, [r2, #0]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d0f4      	beq.n	80027a4 <PWMC_CurrentReadingCalibr+0x14>
        pHandle->OffCalibrWaitTimeCounter--;
 80027ba:	3b01      	subs	r3, #1
 80027bc:	b29b      	uxth	r3, r3
 80027be:	8013      	strh	r3, [r2, #0]
        if (0U == pHandle->OffCalibrWaitTimeCounter)
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d1f3      	bne.n	80027ac <PWMC_CurrentReadingCalibr+0x1c>
          pHandle->pFctCurrReadingCalib(pHandle);
 80027c4:	68c3      	ldr	r3, [r0, #12]
 80027c6:	4798      	blx	r3
          retVal = true;
 80027c8:	e7ec      	b.n	80027a4 <PWMC_CurrentReadingCalibr+0x14>

080027ca <PWMC_CalcPhaseCurrentsEst>:
  * @param  pHandle: Handler of the current instance of the PWM component.
  * @param  Iqd: Structure that will receive Iq and Id currents.
  * @param  hElAngledpp: Electrical angle.
  */
void PWMC_CalcPhaseCurrentsEst(PWMC_Handle_t *pHandle, qd_t Iqd, int16_t hElAngledpp)
{
 80027ca:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80027cc:	000d      	movs	r5, r1
 80027ce:	9101      	str	r1, [sp, #4]
 80027d0:	1c0b      	adds	r3, r1, #0
 80027d2:	0011      	movs	r1, r2
#endif
    qd_t idq_ave;
    alphabeta_t ialpha_beta;
    int32_t temp1, temp2;

    idq_ave.q = (int16_t)PWMC_LowPassFilter(Iqd.q, &(pHandle->LPFIqBuf), pHandle->LPFIqd_const);
 80027d4:	0002      	movs	r2, r0
{
 80027d6:	0004      	movs	r4, r0
    idq_ave.q = (int16_t)PWMC_LowPassFilter(Iqd.q, &(pHandle->LPFIqBuf), pHandle->LPFIqd_const);
 80027d8:	326e      	adds	r2, #110	; 0x6e
 80027da:	2000      	movs	r0, #0
 80027dc:	5e10      	ldrsh	r0, [r2, r0]
    *out_buf = (*out_buf) + ((in - ((*out_buf) >> 15)) * t);
 80027de:	6b62      	ldr	r2, [r4, #52]	; 0x34
    idq_ave.q = (int16_t)PWMC_LowPassFilter(Iqd.q, &(pHandle->LPFIqBuf), pHandle->LPFIqd_const);
 80027e0:	b21b      	sxth	r3, r3
    *out_buf = (*out_buf) + ((in - ((*out_buf) >> 15)) * t);
 80027e2:	13d6      	asrs	r6, r2, #15
 80027e4:	1b9b      	subs	r3, r3, r6
 80027e6:	4343      	muls	r3, r0
 80027e8:	189b      	adds	r3, r3, r2
 80027ea:	6363      	str	r3, [r4, #52]	; 0x34
    idq_ave.q = (int16_t)PWMC_LowPassFilter(Iqd.q, &(pHandle->LPFIqBuf), pHandle->LPFIqd_const);
 80027ec:	aa02      	add	r2, sp, #8
    x = (*out_buf) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80027ee:	13db      	asrs	r3, r3, #15
    idq_ave.q = (int16_t)PWMC_LowPassFilter(Iqd.q, &(pHandle->LPFIqBuf), pHandle->LPFIqd_const);
 80027f0:	8013      	strh	r3, [r2, #0]
    *out_buf = (*out_buf) + ((in - ((*out_buf) >> 15)) * t);
 80027f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    idq_ave.d = (int16_t)PWMC_LowPassFilter(Iqd.d, &(pHandle->LPFIdBuf), pHandle->LPFIqd_const);
 80027f4:	142d      	asrs	r5, r5, #16
    *out_buf = (*out_buf) + ((in - ((*out_buf) >> 15)) * t);
 80027f6:	13de      	asrs	r6, r3, #15
 80027f8:	1bad      	subs	r5, r5, r6
 80027fa:	4368      	muls	r0, r5
 80027fc:	18c0      	adds	r0, r0, r3
 80027fe:	63a0      	str	r0, [r4, #56]	; 0x38
    x = (*out_buf) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8002800:	13c0      	asrs	r0, r0, #15
    idq_ave.d = (int16_t)PWMC_LowPassFilter(Iqd.d, &(pHandle->LPFIdBuf), pHandle->LPFIqd_const);
 8002802:	8050      	strh	r0, [r2, #2]

    ialpha_beta = MCM_Rev_Park(idq_ave, hElAngledpp);
 8002804:	9802      	ldr	r0, [sp, #8]
 8002806:	f7ff f9a7 	bl	8001b58 <MCM_Rev_Park>

    /* Reverse Clarke */

    /*Ia*/
    pHandle->IaEst = ialpha_beta.alpha;
 800280a:	0022      	movs	r2, r4
    ialpha_beta = MCM_Rev_Park(idq_ave, hElAngledpp);
 800280c:	b203      	sxth	r3, r0
    pHandle->IaEst = ialpha_beta.alpha;
 800280e:	3268      	adds	r2, #104	; 0x68
 8002810:	8013      	strh	r3, [r2, #0]

    temp1 = - ialpha_beta.alpha;
 8002812:	425b      	negs	r3, r3
#else
    temp2 = (int32_t)(ialpha_beta.beta) * (int32_t)SQRT3FACTOR / 32768;
#endif

    /* Ib */
    pHandle->IbEst = (int16_t)(temp1 - temp2)/2;
 8002814:	0c00      	lsrs	r0, r0, #16
 8002816:	b29b      	uxth	r3, r3
 8002818:	1a19      	subs	r1, r3, r0
 800281a:	b209      	sxth	r1, r1
 800281c:	0fca      	lsrs	r2, r1, #31
 800281e:	1852      	adds	r2, r2, r1
 8002820:	0021      	movs	r1, r4

    /* Ic */
    pHandle->IcEst = (int16_t)(temp1 + temp2)/2;
 8002822:	181b      	adds	r3, r3, r0
    pHandle->IbEst = (int16_t)(temp1 - temp2)/2;
 8002824:	1052      	asrs	r2, r2, #1
 8002826:	316a      	adds	r1, #106	; 0x6a
    pHandle->IcEst = (int16_t)(temp1 + temp2)/2;
 8002828:	b21b      	sxth	r3, r3
    pHandle->IbEst = (int16_t)(temp1 - temp2)/2;
 800282a:	800a      	strh	r2, [r1, #0]
    pHandle->IcEst = (int16_t)(temp1 + temp2)/2;
 800282c:	0fda      	lsrs	r2, r3, #31
 800282e:	18d3      	adds	r3, r2, r3
 8002830:	105b      	asrs	r3, r3, #1
 8002832:	346c      	adds	r4, #108	; 0x6c
 8002834:	8023      	strh	r3, [r4, #0]
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
}
 8002836:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}

08002838 <PWMC_OCP_Handler>:
    tempPointer = MC_NULL;
  }
  else
  {
#endif
    if (false == pHandle->BrakeActionLock)
 8002838:	0003      	movs	r3, r0
 800283a:	3385      	adds	r3, #133	; 0x85
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d113      	bne.n	800286a <PWMC_OCP_Handler+0x32>
    {
      if (ES_GPIO == pHandle->LowSideOutputs)
 8002842:	0003      	movs	r3, r0
 8002844:	337d      	adds	r3, #125	; 0x7d
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	2b02      	cmp	r3, #2
 800284a:	d10e      	bne.n	800286a <PWMC_OCP_Handler+0x32>
      {
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_u_port, pHandle->pwm_en_u_pin);
 800284c:	0002      	movs	r2, r0
 800284e:	3248      	adds	r2, #72	; 0x48
 8002850:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002852:	8812      	ldrh	r2, [r2, #0]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8002854:	629a      	str	r2, [r3, #40]	; 0x28
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_v_port, pHandle->pwm_en_v_pin);
 8002856:	0002      	movs	r2, r0
 8002858:	324a      	adds	r2, #74	; 0x4a
 800285a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800285c:	8812      	ldrh	r2, [r2, #0]
 800285e:	629a      	str	r2, [r3, #40]	; 0x28
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_w_port, pHandle->pwm_en_w_pin);
 8002860:	0002      	movs	r2, r0
 8002862:	324c      	adds	r2, #76	; 0x4c
 8002864:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002866:	8812      	ldrh	r2, [r2, #0]
 8002868:	629a      	str	r2, [r3, #40]	; 0x28
    }
    else
    {
      /* Nothing to do */
    }
    pHandle->OverCurrentFlag = true;
 800286a:	0003      	movs	r3, r0
 800286c:	2201      	movs	r2, #1
 800286e:	3382      	adds	r3, #130	; 0x82
    tempPointer = &(pHandle->Motor);
 8002870:	307a      	adds	r0, #122	; 0x7a
    pHandle->OverCurrentFlag = true;
 8002872:	701a      	strb	r2, [r3, #0]
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (tempPointer);
}
 8002874:	4770      	bx	lr

08002876 <PWMC_IsFaultOccurred>:
  */
__weak uint16_t PWMC_IsFaultOccurred(PWMC_Handle_t *pHandle)
{
  uint16_t retVal = MC_NO_FAULTS;

  if (true == pHandle->OverVoltageFlag)
 8002876:	0002      	movs	r2, r0
{
 8002878:	0003      	movs	r3, r0
 800287a:	2000      	movs	r0, #0
  if (true == pHandle->OverVoltageFlag)
 800287c:	3283      	adds	r2, #131	; 0x83
 800287e:	7811      	ldrb	r1, [r2, #0]
 8002880:	4281      	cmp	r1, r0
 8002882:	d001      	beq.n	8002888 <PWMC_IsFaultOccurred+0x12>
  {
    retVal = MC_OVER_VOLT;
    pHandle->OverVoltageFlag = false;
 8002884:	7010      	strb	r0, [r2, #0]
    retVal = MC_OVER_VOLT;
 8002886:	3002      	adds	r0, #2
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->OverCurrentFlag)
 8002888:	001a      	movs	r2, r3
 800288a:	3282      	adds	r2, #130	; 0x82
 800288c:	7811      	ldrb	r1, [r2, #0]
 800288e:	2900      	cmp	r1, #0
 8002890:	d003      	beq.n	800289a <PWMC_IsFaultOccurred+0x24>
  {
    retVal |= MC_OVER_CURR;
 8002892:	2140      	movs	r1, #64	; 0x40
 8002894:	4308      	orrs	r0, r1
    pHandle->OverCurrentFlag = false;
 8002896:	2100      	movs	r1, #0
 8002898:	7011      	strb	r1, [r2, #0]
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->driverProtectionFlag)
 800289a:	3384      	adds	r3, #132	; 0x84
 800289c:	781a      	ldrb	r2, [r3, #0]
 800289e:	2a00      	cmp	r2, #0
 80028a0:	d004      	beq.n	80028ac <PWMC_IsFaultOccurred+0x36>
  {
    retVal |= MC_DP_FAULT;
 80028a2:	2280      	movs	r2, #128	; 0x80
 80028a4:	00d2      	lsls	r2, r2, #3
 80028a6:	4310      	orrs	r0, r2
    pHandle->driverProtectionFlag = false;
 80028a8:	2200      	movs	r2, #0
 80028aa:	701a      	strb	r2, [r3, #0]
  {
    /* Nothing to do */
  }

  return (retVal);
}
 80028ac:	4770      	bx	lr
	...

080028b0 <LL_TIM_OC_DisablePreload>:
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80028b0:	2940      	cmp	r1, #64	; 0x40
 80028b2:	d812      	bhi.n	80028da <LL_TIM_OC_DisablePreload+0x2a>
{
 80028b4:	2302      	movs	r3, #2
 80028b6:	2910      	cmp	r1, #16
 80028b8:	d003      	beq.n	80028c2 <LL_TIM_OC_DisablePreload+0x12>
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80028ba:	3304      	adds	r3, #4
 80028bc:	2901      	cmp	r1, #1
 80028be:	d100      	bne.n	80028c2 <LL_TIM_OC_DisablePreload+0x12>
{
 80028c0:	2300      	movs	r3, #0
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80028c2:	4a09      	ldr	r2, [pc, #36]	; (80028e8 <LL_TIM_OC_DisablePreload+0x38>)
 80028c4:	3018      	adds	r0, #24
 80028c6:	5cd2      	ldrb	r2, [r2, r3]
 80028c8:	1812      	adds	r2, r2, r0
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80028ca:	4808      	ldr	r0, [pc, #32]	; (80028ec <LL_TIM_OC_DisablePreload+0x3c>)
 80028cc:	6811      	ldr	r1, [r2, #0]
 80028ce:	5cc0      	ldrb	r0, [r0, r3]
 80028d0:	2308      	movs	r3, #8
 80028d2:	4083      	lsls	r3, r0
 80028d4:	4399      	bics	r1, r3
 80028d6:	6011      	str	r1, [r2, #0]
}
 80028d8:	4770      	bx	lr
 80028da:	2280      	movs	r2, #128	; 0x80
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80028dc:	2306      	movs	r3, #6
 80028de:	0052      	lsls	r2, r2, #1
 80028e0:	4291      	cmp	r1, r2
 80028e2:	d1ee      	bne.n	80028c2 <LL_TIM_OC_DisablePreload+0x12>
{
 80028e4:	3b02      	subs	r3, #2
 80028e6:	e7ec      	b.n	80028c2 <LL_TIM_OC_DisablePreload+0x12>
 80028e8:	08006480 	.word	0x08006480
 80028ec:	08006487 	.word	0x08006487

080028f0 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80028f0:	4b04      	ldr	r3, [pc, #16]	; (8002904 <LL_DMA_EnableChannel+0x14>)
 80028f2:	185b      	adds	r3, r3, r1
 80028f4:	3b01      	subs	r3, #1
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	18c0      	adds	r0, r0, r3
 80028fa:	2301      	movs	r3, #1
 80028fc:	6802      	ldr	r2, [r0, #0]
 80028fe:	4313      	orrs	r3, r2
 8002900:	6003      	str	r3, [r0, #0]
}
 8002902:	4770      	bx	lr
 8002904:	0800647b 	.word	0x0800647b

08002908 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8002908:	2201      	movs	r2, #1
 800290a:	4b04      	ldr	r3, [pc, #16]	; (800291c <LL_DMA_DisableChannel+0x14>)
 800290c:	185b      	adds	r3, r3, r1
 800290e:	3b01      	subs	r3, #1
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	18c0      	adds	r0, r0, r3
 8002914:	6803      	ldr	r3, [r0, #0]
 8002916:	4393      	bics	r3, r2
 8002918:	6003      	str	r3, [r0, #0]
}
 800291a:	4770      	bx	lr
 800291c:	0800647b 	.word	0x0800647b

08002920 <LL_DMA_SetDataLength>:
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8002920:	4b05      	ldr	r3, [pc, #20]	; (8002938 <LL_DMA_SetDataLength+0x18>)
 8002922:	185b      	adds	r3, r3, r1
 8002924:	3b01      	subs	r3, #1
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	18c0      	adds	r0, r0, r3
 800292a:	6843      	ldr	r3, [r0, #4]
 800292c:	0c1b      	lsrs	r3, r3, #16
 800292e:	041b      	lsls	r3, r3, #16
 8002930:	4313      	orrs	r3, r2
 8002932:	6043      	str	r3, [r0, #4]
             DMA_CNDTR_NDT, NbData);
}
 8002934:	4770      	bx	lr
 8002936:	46c0      	nop			; (mov r8, r8)
 8002938:	0800647b 	.word	0x0800647b

0800293c <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 800293c:	4b04      	ldr	r3, [pc, #16]	; (8002950 <LL_DMA_EnableIT_TC+0x14>)
 800293e:	185b      	adds	r3, r3, r1
 8002940:	3b01      	subs	r3, #1
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	18c0      	adds	r0, r0, r3
 8002946:	2302      	movs	r3, #2
 8002948:	6802      	ldr	r2, [r0, #0]
 800294a:	4313      	orrs	r3, r2
 800294c:	6003      	str	r3, [r0, #0]
}
 800294e:	4770      	bx	lr
 8002950:	0800647b 	.word	0x0800647b

08002954 <R1_1ShuntMotorVarsInit>:
void R1_1ShuntMotorVarsInit(PWMC_Handle_t * pHdl)
{
  PWMC_R1_Handle_t * pHandle = (PWMC_R1_Handle_t *)pHdl;

  /* Init motor vars */
  pHandle->iflag = 0;
 8002954:	0003      	movs	r3, r0
 8002956:	2100      	movs	r1, #0
  pHandle->FOCDurationFlag = false;
  pHandle->Half_PWMPeriod = (pHandle->_Super.PWMperiod/2u);
 8002958:	0002      	movs	r2, r0
{
 800295a:	b570      	push	{r4, r5, r6, lr}

  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 800295c:	0006      	movs	r6, r0
  pHandle->iflag = 0;
 800295e:	33c5      	adds	r3, #197	; 0xc5
 8002960:	7019      	strb	r1, [r3, #0]
  pHandle->FOCDurationFlag = false;
 8002962:	70d9      	strb	r1, [r3, #3]
  pHandle->Half_PWMPeriod = (pHandle->_Super.PWMperiod/2u);
 8002964:	3b53      	subs	r3, #83	; 0x53
 8002966:	881b      	ldrh	r3, [r3, #0]
 8002968:	32b8      	adds	r2, #184	; 0xb8
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 800296a:	6955      	ldr	r5, [r2, #20]
  pHandle->Half_PWMPeriod = (pHandle->_Super.PWMperiod/2u);
 800296c:	085c      	lsrs	r4, r3, #1
 800296e:	8014      	strh	r4, [r2, #0]
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8002970:	8c2a      	ldrh	r2, [r5, #32]
 8002972:	8bed      	ldrh	r5, [r5, #30]
 8002974:	089b      	lsrs	r3, r3, #2
 8002976:	1952      	adds	r2, r2, r5
 8002978:	b292      	uxth	r2, r2
 800297a:	1a9d      	subs	r5, r3, r2
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
                   + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 800297c:	189a      	adds	r2, r3, r2
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 800297e:	b2ad      	uxth	r5, r5
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8002980:	36ba      	adds	r6, #186	; 0xba
                   + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8002982:	b292      	uxth	r2, r2
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8002984:	8035      	strh	r5, [r6, #0]
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8002986:	8072      	strh	r2, [r6, #2]

  pHandle->_Super.CntPhA = pHandle->Half_PWMPeriod >> 1;
 8002988:	3e6a      	subs	r6, #106	; 0x6a
 800298a:	8033      	strh	r3, [r6, #0]
  pHandle->_Super.CntPhB = pHandle->Half_PWMPeriod >> 1;
  pHandle->_Super.CntPhC = pHandle->Half_PWMPeriod >> 1;

  /* initialize buffer with the default duty cycle value */
  pHandle->DmaBuffCCR[0]       = pHandle->_Super.CntPhA;      /* CCR1 value overwritten during first half PWM period */
 800298c:	8733      	strh	r3, [r6, #56]	; 0x38
  pHandle->_Super.CntPhB = pHandle->Half_PWMPeriod >> 1;
 800298e:	8073      	strh	r3, [r6, #2]
  pHandle->_Super.CntPhC = pHandle->Half_PWMPeriod >> 1;
 8002990:	80b3      	strh	r3, [r6, #4]
  pHandle->DmaBuffCCR[0]       = pHandle->_Super.CntPhA;      /* CCR1 value overwritten during first half PWM period */
 8002992:	3638      	adds	r6, #56	; 0x38
  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA;      /* CCR1 value overwritten during first half PWM period */
 8002994:	81b3      	strh	r3, [r6, #12]
  pHandle->DmaBuffCCR[1]       = pHandle->_Super.CntPhB;      /* CCR2 value overwritten during first half PWM period */
 8002996:	3602      	adds	r6, #2
 8002998:	8033      	strh	r3, [r6, #0]
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB;      /* CCR2 value overwritten during first half PWM period */
 800299a:	81b3      	strh	r3, [r6, #12]
  pHandle->DmaBuffCCR[2]       = pHandle->_Super.CntPhC;      /* CCR3 value overwritten during first half PWM period */
 800299c:	3602      	adds	r6, #2
 800299e:	8033      	strh	r3, [r6, #0]
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC;      /* CCR3 value overwritten during first half PWM period */
 80029a0:	81b3      	strh	r3, [r6, #12]

  pHandle->DmaBuffCCR[3]       = pHandle->_Super.CntPhA;      /* CCR1 value overwritten during second half PWM period */
 80029a2:	3602      	adds	r6, #2
 80029a4:	8033      	strh	r3, [r6, #0]
  pHandle->DmaBuffCCR_latch[3] = pHandle->_Super.CntPhA;      /* CCR1 value overwritten during second half PWM period */
 80029a6:	81b3      	strh	r3, [r6, #12]
  pHandle->DmaBuffCCR[4]       = pHandle->_Super.CntPhB;      /* CCR2 value overwritten during second half PWM period */
 80029a8:	3602      	adds	r6, #2
 80029aa:	8033      	strh	r3, [r6, #0]
  pHandle->DmaBuffCCR_latch[4] = pHandle->_Super.CntPhB;      /* CCR2 value overwritten during second half PWM period */
 80029ac:	81b3      	strh	r3, [r6, #12]
  pHandle->DmaBuffCCR[5]       = pHandle->_Super.CntPhC;      /* CCR3 value overwritten during second half PWM period */
 80029ae:	8073      	strh	r3, [r6, #2]
  pHandle->DmaBuffCCR_latch[5] = pHandle->_Super.CntPhC;      /* CCR3 value overwritten during second half PWM period */
 80029b0:	81f3      	strh	r3, [r6, #14]

  /* initialize buffer with default sampling value */
  pHandle->DmaBuffCCR_ADCTrig[0] = pHandle->CntSmp2;
 80029b2:	0003      	movs	r3, r0
  pHandle->DmaBuffCCR_ADCTrig[1] = pHandle->Half_PWMPeriod-1u;
 80029b4:	3c01      	subs	r4, #1
  pHandle->DmaBuffCCR_ADCTrig[0] = pHandle->CntSmp2;
 80029b6:	33ae      	adds	r3, #174	; 0xae
  pHandle->DmaBuffCCR_ADCTrig[2] = pHandle->CntSmp1;

  pHandle->_Super.BrakeActionLock = false;
 80029b8:	3085      	adds	r0, #133	; 0x85
  pHandle->DmaBuffCCR[5]       = pHandle->_Super.CntPhC;      /* CCR3 value overwritten during second half PWM period */
 80029ba:	3602      	adds	r6, #2
  pHandle->DmaBuffCCR_ADCTrig[2] = pHandle->CntSmp1;
 80029bc:	809d      	strh	r5, [r3, #4]
  pHandle->DmaBuffCCR_ADCTrig[0] = pHandle->CntSmp2;
 80029be:	801a      	strh	r2, [r3, #0]
  pHandle->DmaBuffCCR_ADCTrig[1] = pHandle->Half_PWMPeriod-1u;
 80029c0:	805c      	strh	r4, [r3, #2]
  pHandle->_Super.BrakeActionLock = false;
 80029c2:	7001      	strb	r1, [r0, #0]
}
 80029c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080029c8 <R1_GetPhaseCurrents>:
  * @retval Ia and Ib current in Curr_Components format
  */
__weak void R1_GetPhaseCurrents(PWMC_Handle_t * pHdl, ab_t * pStator_Currents)
{
  PWMC_R1_Handle_t * pHandle = (PWMC_R1_Handle_t *)pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80029c8:	0003      	movs	r3, r0
 80029ca:	33cc      	adds	r3, #204	; 0xcc
 80029cc:	681b      	ldr	r3, [r3, #0]
{
 80029ce:	b570      	push	{r4, r5, r6, lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80029d0:	685a      	ldr	r2, [r3, #4]
  int16_t hCurrA = 0;
  int16_t hCurrB = 0;
  int16_t hCurrC = 0;

  /* Clear flag used for FOC duration check */
  pHandle->FOCDurationFlag = false;
 80029d2:	0003      	movs	r3, r0
{
 80029d4:	0004      	movs	r4, r0
  pHandle->FOCDurationFlag = false;
 80029d6:	2000      	movs	r0, #0
 80029d8:	33c8      	adds	r3, #200	; 0xc8
 80029da:	7018      	strb	r0, [r3, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80029dc:	6853      	ldr	r3, [r2, #4]
 80029de:	3070      	adds	r0, #112	; 0x70
 80029e0:	4383      	bics	r3, r0
 80029e2:	6053      	str	r3, [r2, #4]

  /* Disabling the External triggering for ADCx */
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);
  /* First sampling point */
  wAux1 = (int32_t) pHandle->CurConv[0] ;
 80029e4:	0023      	movs	r3, r4
 80029e6:	33b4      	adds	r3, #180	; 0xb4
 80029e8:	881d      	ldrh	r5, [r3, #0]
  wAux1 -= (int32_t)(pHandle->PhaseOffset);
 80029ea:	3b14      	subs	r3, #20
 80029ec:	681a      	ldr	r2, [r3, #0]

  /* Check saturation */
  if (wAux1 > -INT16_MAX)
 80029ee:	4b87      	ldr	r3, [pc, #540]	; (8002c0c <R1_GetPhaseCurrents+0x244>)
  wAux1 -= (int32_t)(pHandle->PhaseOffset);
 80029f0:	1aad      	subs	r5, r5, r2
  if (wAux1 > -INT16_MAX)
 80029f2:	429d      	cmp	r5, r3
 80029f4:	db1b      	blt.n	8002a2e <R1_GetPhaseCurrents+0x66>
  {
    if (wAux1 < INT16_MAX)
 80029f6:	4886      	ldr	r0, [pc, #536]	; (8002c10 <R1_GetPhaseCurrents+0x248>)
 80029f8:	4285      	cmp	r5, r0
 80029fa:	dd00      	ble.n	80029fe <R1_GetPhaseCurrents+0x36>
    {
    }
    else
    {
      wAux1 = INT16_MAX;
 80029fc:	4d85      	ldr	r5, [pc, #532]	; (8002c14 <R1_GetPhaseCurrents+0x24c>)
  else
  {
    wAux1 = -INT16_MAX;
  }
   /* Second sampling point */
  wAux2 = (int32_t) pHandle->CurConv[1] ;
 80029fe:	0020      	movs	r0, r4
 8002a00:	30b6      	adds	r0, #182	; 0xb6
 8002a02:	8806      	ldrh	r6, [r0, #0]
  wAux2 -= (int32_t)(pHandle->PhaseOffset);
 8002a04:	1ab6      	subs	r6, r6, r2

  /* Check saturation */
  if (wAux2 > -INT16_MAX)
 8002a06:	429e      	cmp	r6, r3
 8002a08:	db13      	blt.n	8002a32 <R1_GetPhaseCurrents+0x6a>
  {
    if (wAux2 < INT16_MAX)
 8002a0a:	4b81      	ldr	r3, [pc, #516]	; (8002c10 <R1_GetPhaseCurrents+0x248>)
 8002a0c:	429e      	cmp	r6, r3
 8002a0e:	dd00      	ble.n	8002a12 <R1_GetPhaseCurrents+0x4a>
    {
    }
    else
    {
      wAux2 = INT16_MAX;
 8002a10:	4e80      	ldr	r6, [pc, #512]	; (8002c14 <R1_GetPhaseCurrents+0x24c>)
  else
  {
    wAux2 = -INT16_MAX;
  }

  switch (pHandle->_Super.Sector)
 8002a12:	0023      	movs	r3, r4
 8002a14:	2200      	movs	r2, #0
 8002a16:	337c      	adds	r3, #124	; 0x7c
 8002a18:	7818      	ldrb	r0, [r3, #0]
 8002a1a:	0013      	movs	r3, r2
 8002a1c:	2805      	cmp	r0, #5
 8002a1e:	d828      	bhi.n	8002a72 <R1_GetPhaseCurrents+0xaa>
 8002a20:	0023      	movs	r3, r4
 8002a22:	33c5      	adds	r3, #197	; 0xc5
 8002a24:	f7fd fb7a 	bl	800011c <__gnu_thumb1_case_uqi>
 8002a28:	7e523007 	.word	0x7e523007
 8002a2c:	cea6      	.short	0xcea6
    wAux1 = -INT16_MAX;
 8002a2e:	4d7a      	ldr	r5, [pc, #488]	; (8002c18 <R1_GetPhaseCurrents+0x250>)
 8002a30:	e7e5      	b.n	80029fe <R1_GetPhaseCurrents+0x36>
    wAux2 = -INT16_MAX;
 8002a32:	4e79      	ldr	r6, [pc, #484]	; (8002c18 <R1_GetPhaseCurrents+0x250>)
 8002a34:	e7ed      	b.n	8002a12 <R1_GetPhaseCurrents+0x4a>
  {
    case SECTOR_1:
    {
      if((pHandle->iflag & (IA_OK | IC_OK)) == (IA_OK | IC_OK)) /* iA and -iC are available to be sampled */
 8002a36:	2205      	movs	r2, #5
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d102      	bne.n	8002a46 <R1_GetPhaseCurrents+0x7e>
      {
        hCurrA = (int16_t) wAux2;
 8002a40:	b233      	sxth	r3, r6
      if((pHandle->iflag & (IA_OK | IC_OK)) == (IA_OK | IC_OK)) /* iC,-iA are available to be sampled */
      {
        hCurrC = (int16_t) wAux2;
        wAux1 = -wAux1;
        hCurrA = (int16_t) wAux1;
        hCurrB = -hCurrA-hCurrC;
 8002a42:	1baa      	subs	r2, r5, r6
 8002a44:	e040      	b.n	8002ac8 <R1_GetPhaseCurrents+0x100>
        if((pHandle->iflag & (IA_OK | IC_OK)) != 0x00) /* iA or -iC is available to be sampled */
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d100      	bne.n	8002a4c <R1_GetPhaseCurrents+0x84>
 8002a4a:	e089      	b.n	8002b60 <R1_GetPhaseCurrents+0x198>
          if(pHandle->_Super.AlignFlag == 0x01) /* START Position Aligning_angle=30 degree */
 8002a4c:	0022      	movs	r2, r4
 8002a4e:	327b      	adds	r2, #123	; 0x7b
 8002a50:	7812      	ldrb	r2, [r2, #0]
 8002a52:	2a01      	cmp	r2, #1
 8002a54:	d106      	bne.n	8002a64 <R1_GetPhaseCurrents+0x9c>
            if((pHandle->iflag & (IA_OK | IC_OK)) == IA_OK) /* iA is available to be sampled and not iC */
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d102      	bne.n	8002a60 <R1_GetPhaseCurrents+0x98>
              hCurrA = (int16_t) wAux2;
 8002a5a:	b233      	sxth	r3, r6
            }
            else  /* 0x01 -ia */
            {
              wAux1 = -wAux1;
              hCurrA = (int16_t) wAux1;
              hCurrB = 0;
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	e008      	b.n	8002a72 <R1_GetPhaseCurrents+0xaa>
              hCurrA = -hCurrC;
 8002a60:	b22b      	sxth	r3, r5
              hCurrB = 0;
 8002a62:	e7fb      	b.n	8002a5c <R1_GetPhaseCurrents+0x94>
              hCurrB = pHandle->_Super.IbEst;
 8002a64:	0022      	movs	r2, r4
 8002a66:	326a      	adds	r2, #106	; 0x6a
 8002a68:	2000      	movs	r0, #0
 8002a6a:	5e12      	ldrsh	r2, [r2, r0]
            if((pHandle->iflag & (IA_OK | IC_OK)) == IA_OK) /* iA, is available to be sampled */
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d108      	bne.n	8002a82 <R1_GetPhaseCurrents+0xba>
              hCurrA = (int16_t) wAux2;
 8002a70:	b233      	sxth	r3, r6

    default:
      break;
    }

  pHandle->CurrAOld = hCurrA;
 8002a72:	0020      	movs	r0, r4
 8002a74:	30c0      	adds	r0, #192	; 0xc0
  pHandle->CurrBOld = hCurrB;
 8002a76:	34c2      	adds	r4, #194	; 0xc2
  pHandle->CurrAOld = hCurrA;
 8002a78:	8003      	strh	r3, [r0, #0]
  pHandle->CurrBOld = hCurrB;
 8002a7a:	8022      	strh	r2, [r4, #0]

  pStator_Currents->a = hCurrA;
 8002a7c:	800b      	strh	r3, [r1, #0]
  pStator_Currents->b = hCurrB;
 8002a7e:	804a      	strh	r2, [r1, #2]
}
 8002a80:	bd70      	pop	{r4, r5, r6, pc}
              hCurrA = -hCurrB-hCurrC;
 8002a82:	1aab      	subs	r3, r5, r2
          hCurrA = -hCurrB-hCurrC;
 8002a84:	b21b      	sxth	r3, r3
 8002a86:	e7f4      	b.n	8002a72 <R1_GetPhaseCurrents+0xaa>
      if((pHandle->iflag & (IB_OK | IC_OK)) == (IB_OK | IC_OK)) /* iB,-iC are available to be sampled */
 8002a88:	781a      	ldrb	r2, [r3, #0]
 8002a8a:	2306      	movs	r3, #6
 8002a8c:	401a      	ands	r2, r3
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d102      	bne.n	8002a98 <R1_GetPhaseCurrents+0xd0>
        hCurrB = (int16_t) wAux2;
 8002a92:	b232      	sxth	r2, r6
        hCurrA = -hCurrB-hCurrC;
 8002a94:	1bab      	subs	r3, r5, r6
 8002a96:	e7f5      	b.n	8002a84 <R1_GetPhaseCurrents+0xbc>
          if(pHandle->_Super.AlignFlag == 0x01) /* START Position Aligning_angle=90 degree */
 8002a98:	0023      	movs	r3, r4
        if((pHandle->iflag & (IB_OK | IC_OK)) != 0x00) /* iB, or -iC is available to be sampled */
 8002a9a:	2a00      	cmp	r2, #0
 8002a9c:	d100      	bne.n	8002aa0 <R1_GetPhaseCurrents+0xd8>
 8002a9e:	e088      	b.n	8002bb2 <R1_GetPhaseCurrents+0x1ea>
          if(pHandle->_Super.AlignFlag == 0x01) /* START Position Aligning_angle=90 degree */
 8002aa0:	337b      	adds	r3, #123	; 0x7b
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d106      	bne.n	8002ab6 <R1_GetPhaseCurrents+0xee>
            if((pHandle->iflag & (IB_OK | IC_OK)) == IB_OK) /* iB, is available to be sampled */
 8002aa8:	2a02      	cmp	r2, #2
 8002aaa:	d102      	bne.n	8002ab2 <R1_GetPhaseCurrents+0xea>
              hCurrB = (int16_t) wAux2;
 8002aac:	b232      	sxth	r2, r6
              hCurrA = 0;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	e7df      	b.n	8002a72 <R1_GetPhaseCurrents+0xaa>
              hCurrB = -hCurrC;
 8002ab2:	b22a      	sxth	r2, r5
 8002ab4:	e7fb      	b.n	8002aae <R1_GetPhaseCurrents+0xe6>
          hCurrA = pHandle->_Super.IaEst;
 8002ab6:	0023      	movs	r3, r4
 8002ab8:	3368      	adds	r3, #104	; 0x68
 8002aba:	2000      	movs	r0, #0
 8002abc:	5e1b      	ldrsh	r3, [r3, r0]
            if((pHandle->iflag & (IB_OK | IC_OK)) == IB_OK) /* iB, is available to be sampled */
 8002abe:	2a02      	cmp	r2, #2
 8002ac0:	d101      	bne.n	8002ac6 <R1_GetPhaseCurrents+0xfe>
              hCurrB = (int16_t) wAux2;
 8002ac2:	b232      	sxth	r2, r6
              hCurrA = pHandle->_Super.IaEst;
 8002ac4:	e7d5      	b.n	8002a72 <R1_GetPhaseCurrents+0xaa>
              hCurrB = -hCurrA-hCurrC;
 8002ac6:	1aea      	subs	r2, r5, r3
              hCurrB = -hCurrA;
 8002ac8:	b212      	sxth	r2, r2
 8002aca:	e7d2      	b.n	8002a72 <R1_GetPhaseCurrents+0xaa>
      if((pHandle->iflag & (IA_OK | IB_OK)) == (IA_OK | IB_OK)) /* iB,-iA are available to be sampled */
 8002acc:	2203      	movs	r2, #3
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d102      	bne.n	8002adc <R1_GetPhaseCurrents+0x114>
        hCurrB = (int16_t) wAux2;
 8002ad6:	b232      	sxth	r2, r6
              wAux1 = -wAux1;
 8002ad8:	426b      	negs	r3, r5
 8002ada:	e7d3      	b.n	8002a84 <R1_GetPhaseCurrents+0xbc>
        if((pHandle->iflag & (IA_OK | IB_OK)) != 0x00) /* iB, or -iA is available to be sampled */
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d01c      	beq.n	8002b1a <R1_GetPhaseCurrents+0x152>
          if(pHandle->_Super.AlignFlag == 0x01) /* START Position Aligning_angle=150 degree */
 8002ae0:	0022      	movs	r2, r4
 8002ae2:	327b      	adds	r2, #123	; 0x7b
 8002ae4:	7812      	ldrb	r2, [r2, #0]
 8002ae6:	2a01      	cmp	r2, #1
 8002ae8:	d108      	bne.n	8002afc <R1_GetPhaseCurrents+0x134>
            if((pHandle->iflag & (IA_OK | IB_OK)) == IB_OK) /* iB, is available to be sampled */
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d102      	bne.n	8002af4 <R1_GetPhaseCurrents+0x12c>
              hCurrB = (int16_t) wAux2;
 8002aee:	b232      	sxth	r2, r6
              hCurrA = -hCurrB-hCurrC;
 8002af0:	4273      	negs	r3, r6
 8002af2:	e7c7      	b.n	8002a84 <R1_GetPhaseCurrents+0xbc>
              wAux1 = -wAux1;
 8002af4:	426b      	negs	r3, r5
              hCurrA = (int16_t) wAux1;
 8002af6:	b21b      	sxth	r3, r3
              hCurrB = -hCurrA;
 8002af8:	b22a      	sxth	r2, r5
 8002afa:	e7ba      	b.n	8002a72 <R1_GetPhaseCurrents+0xaa>
            if((pHandle->iflag & (IA_OK | IB_OK)) == IB_OK) /* iB, is available to be sampled */
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d105      	bne.n	8002b0c <R1_GetPhaseCurrents+0x144>
              hCurrB = (int16_t) wAux2;
 8002b00:	b232      	sxth	r2, r6
              hCurrA = pHandle->_Super.IaEst;
 8002b02:	0023      	movs	r3, r4
 8002b04:	3368      	adds	r3, #104	; 0x68
 8002b06:	2000      	movs	r0, #0
 8002b08:	5e1b      	ldrsh	r3, [r3, r0]
 8002b0a:	e7b2      	b.n	8002a72 <R1_GetPhaseCurrents+0xaa>
              wAux1 = -wAux1;
 8002b0c:	426b      	negs	r3, r5
              hCurrA = (int16_t) wAux1;
 8002b0e:	b21b      	sxth	r3, r3
          hCurrB = pHandle->_Super.IbEst;
 8002b10:	0022      	movs	r2, r4
 8002b12:	326a      	adds	r2, #106	; 0x6a
 8002b14:	2000      	movs	r0, #0
 8002b16:	5e12      	ldrsh	r2, [r2, r0]
 8002b18:	e7ab      	b.n	8002a72 <R1_GetPhaseCurrents+0xaa>
          hCurrB = pHandle->_Super.IbEst;
 8002b1a:	0023      	movs	r3, r4
 8002b1c:	336a      	adds	r3, #106	; 0x6a
 8002b1e:	2200      	movs	r2, #0
 8002b20:	5e9a      	ldrsh	r2, [r3, r2]
          hCurrA = pHandle->_Super.IaEst;
 8002b22:	e7ee      	b.n	8002b02 <R1_GetPhaseCurrents+0x13a>
      if((pHandle->iflag & (IA_OK | IC_OK)) == (IA_OK | IC_OK)) /* iC,-iA are available to be sampled */
 8002b24:	2205      	movs	r2, #5
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d102      	bne.n	8002b34 <R1_GetPhaseCurrents+0x16c>
        wAux1 = -wAux1;
 8002b2e:	426b      	negs	r3, r5
        hCurrA = (int16_t) wAux1;
 8002b30:	b21b      	sxth	r3, r3
 8002b32:	e786      	b.n	8002a42 <R1_GetPhaseCurrents+0x7a>
        if((pHandle->iflag & (IA_OK | IC_OK)) != 0x00) /* iC, or -iA is available to be sampled */
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d013      	beq.n	8002b60 <R1_GetPhaseCurrents+0x198>
          if(pHandle->_Super.AlignFlag == 0x01) /* START Position Aligning_angle=210 degree */
 8002b38:	0022      	movs	r2, r4
 8002b3a:	327b      	adds	r2, #123	; 0x7b
 8002b3c:	7812      	ldrb	r2, [r2, #0]
 8002b3e:	2a01      	cmp	r2, #1
 8002b40:	d106      	bne.n	8002b50 <R1_GetPhaseCurrents+0x188>
            if((pHandle->iflag & (IA_OK | IC_OK)) == IC_OK) /* iC, is available to be sampled */
 8002b42:	2b04      	cmp	r3, #4
 8002b44:	d102      	bne.n	8002b4c <R1_GetPhaseCurrents+0x184>
              hCurrA = -hCurrC;
 8002b46:	4273      	negs	r3, r6
              hCurrA = (int16_t) wAux1;
 8002b48:	b21b      	sxth	r3, r3
 8002b4a:	e787      	b.n	8002a5c <R1_GetPhaseCurrents+0x94>
              wAux1 = -wAux1;
 8002b4c:	426b      	negs	r3, r5
 8002b4e:	e7fb      	b.n	8002b48 <R1_GetPhaseCurrents+0x180>
              hCurrB = pHandle->_Super.IbEst;
 8002b50:	0022      	movs	r2, r4
 8002b52:	326a      	adds	r2, #106	; 0x6a
 8002b54:	2000      	movs	r0, #0
 8002b56:	5e12      	ldrsh	r2, [r2, r0]
            if((pHandle->iflag & (IA_OK | IC_OK)) == IC_OK) /* iC, is available to be sampled */
 8002b58:	2b04      	cmp	r3, #4
 8002b5a:	d1bd      	bne.n	8002ad8 <R1_GetPhaseCurrents+0x110>
              hCurrA = -hCurrB-hCurrC;
 8002b5c:	1996      	adds	r6, r2, r6
 8002b5e:	e7c7      	b.n	8002af0 <R1_GetPhaseCurrents+0x128>
          hCurrA = pHandle->_Super.IaEst;
 8002b60:	0023      	movs	r3, r4
 8002b62:	3368      	adds	r3, #104	; 0x68
 8002b64:	2200      	movs	r2, #0
 8002b66:	5e9b      	ldrsh	r3, [r3, r2]
          hCurrC = pHandle->_Super.IcEst;
 8002b68:	0022      	movs	r2, r4
 8002b6a:	326c      	adds	r2, #108	; 0x6c
          hCurrB = -hCurrA-hCurrC;
 8002b6c:	8812      	ldrh	r2, [r2, #0]
 8002b6e:	18d2      	adds	r2, r2, r3
 8002b70:	4252      	negs	r2, r2
 8002b72:	e7a9      	b.n	8002ac8 <R1_GetPhaseCurrents+0x100>
      if((pHandle->iflag & (IB_OK | IC_OK)) == (IB_OK | IC_OK)) /* iC,-iB are available to be sampled */
 8002b74:	781a      	ldrb	r2, [r3, #0]
 8002b76:	2306      	movs	r3, #6
 8002b78:	401a      	ands	r2, r3
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d102      	bne.n	8002b84 <R1_GetPhaseCurrents+0x1bc>
        wAux1 = -wAux1;
 8002b7e:	426a      	negs	r2, r5
        hCurrB = (int16_t) wAux1;
 8002b80:	b212      	sxth	r2, r2
 8002b82:	e787      	b.n	8002a94 <R1_GetPhaseCurrents+0xcc>
          if(pHandle->_Super.AlignFlag == 0x01) /* START Position Aligning_angle=270 degree */
 8002b84:	0023      	movs	r3, r4
        if((pHandle->iflag & (IB_OK | IC_OK)) != 0x00) /* iC, or -iB is available to be sampled */
 8002b86:	2a00      	cmp	r2, #0
 8002b88:	d013      	beq.n	8002bb2 <R1_GetPhaseCurrents+0x1ea>
          if(pHandle->_Super.AlignFlag == 0x01) /* START Position Aligning_angle=270 degree */
 8002b8a:	337b      	adds	r3, #123	; 0x7b
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d106      	bne.n	8002ba0 <R1_GetPhaseCurrents+0x1d8>
            if((pHandle->iflag & (IB_OK | IC_OK)) == IC_OK) /* iC, is available to be sampled */
 8002b92:	2a04      	cmp	r2, #4
 8002b94:	d102      	bne.n	8002b9c <R1_GetPhaseCurrents+0x1d4>
              hCurrB = -hCurrC;
 8002b96:	4272      	negs	r2, r6
              hCurrB = (int16_t) wAux1;
 8002b98:	b212      	sxth	r2, r2
 8002b9a:	e788      	b.n	8002aae <R1_GetPhaseCurrents+0xe6>
              wAux1 = -wAux1;
 8002b9c:	426a      	negs	r2, r5
 8002b9e:	e7fb      	b.n	8002b98 <R1_GetPhaseCurrents+0x1d0>
          hCurrA = pHandle->_Super.IaEst;
 8002ba0:	0023      	movs	r3, r4
 8002ba2:	3368      	adds	r3, #104	; 0x68
 8002ba4:	2000      	movs	r0, #0
 8002ba6:	5e1b      	ldrsh	r3, [r3, r0]
              hCurrB = -hCurrA-hCurrC;
 8002ba8:	199e      	adds	r6, r3, r6
            if((pHandle->iflag & (IB_OK | IC_OK)) == IC_OK) /* iC, is available to be sampled */
 8002baa:	2a04      	cmp	r2, #4
 8002bac:	d01b      	beq.n	8002be6 <R1_GetPhaseCurrents+0x21e>
        wAux1 = -wAux1;
 8002bae:	426a      	negs	r2, r5
 8002bb0:	e78a      	b.n	8002ac8 <R1_GetPhaseCurrents+0x100>
          hCurrB = pHandle->_Super.IbEst;
 8002bb2:	336a      	adds	r3, #106	; 0x6a
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	5e9a      	ldrsh	r2, [r3, r2]
          hCurrC = pHandle->_Super.IcEst;
 8002bb8:	0023      	movs	r3, r4
 8002bba:	336c      	adds	r3, #108	; 0x6c
          hCurrA = -hCurrB-hCurrC;
 8002bbc:	881b      	ldrh	r3, [r3, #0]
 8002bbe:	189b      	adds	r3, r3, r2
 8002bc0:	425b      	negs	r3, r3
 8002bc2:	e75f      	b.n	8002a84 <R1_GetPhaseCurrents+0xbc>
      if((pHandle->iflag & (IA_OK | IB_OK)) == (IA_OK | IB_OK)) /* iA,-iB are available to be sampled */
 8002bc4:	2203      	movs	r2, #3
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d101      	bne.n	8002bd2 <R1_GetPhaseCurrents+0x20a>
        hCurrA = (int16_t) wAux2;
 8002bce:	b233      	sxth	r3, r6
 8002bd0:	e7ed      	b.n	8002bae <R1_GetPhaseCurrents+0x1e6>
        if((pHandle->iflag & (IA_OK | IB_OK)) != 0x00) /* iA, or -iB is available to be sampled */
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d014      	beq.n	8002c00 <R1_GetPhaseCurrents+0x238>
          if(pHandle->_Super.AlignFlag == 0x01) /* START Position Aligning_angle=330 degree */
 8002bd6:	0022      	movs	r2, r4
 8002bd8:	327b      	adds	r2, #123	; 0x7b
 8002bda:	7812      	ldrb	r2, [r2, #0]
 8002bdc:	2a01      	cmp	r2, #1
 8002bde:	d108      	bne.n	8002bf2 <R1_GetPhaseCurrents+0x22a>
            if((pHandle->iflag & (IA_OK | IB_OK)) == IA_OK) /* iA, is available to be sampled */
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d102      	bne.n	8002bea <R1_GetPhaseCurrents+0x222>
              hCurrA = (int16_t) wAux2;
 8002be4:	b233      	sxth	r3, r6
              hCurrB = -hCurrA;
 8002be6:	4272      	negs	r2, r6
 8002be8:	e76e      	b.n	8002ac8 <R1_GetPhaseCurrents+0x100>
              wAux1 = -wAux1;
 8002bea:	426a      	negs	r2, r5
              hCurrB = (int16_t) wAux1;
 8002bec:	b212      	sxth	r2, r2
              hCurrA = -hCurrB;
 8002bee:	b22b      	sxth	r3, r5
 8002bf0:	e73f      	b.n	8002a72 <R1_GetPhaseCurrents+0xaa>
            if((pHandle->iflag & (IA_OK | IB_OK)) == IA_OK) /* iA, is available to be sampled */
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d101      	bne.n	8002bfa <R1_GetPhaseCurrents+0x232>
              hCurrA = (int16_t) wAux2;
 8002bf6:	b233      	sxth	r3, r6
              hCurrB = pHandle->_Super.IbEst;
 8002bf8:	e78a      	b.n	8002b10 <R1_GetPhaseCurrents+0x148>
              wAux1 = -wAux1;
 8002bfa:	426d      	negs	r5, r5
              hCurrB = (int16_t) wAux1;
 8002bfc:	b22a      	sxth	r2, r5
 8002bfe:	e780      	b.n	8002b02 <R1_GetPhaseCurrents+0x13a>
          hCurrA = pHandle->_Super.IaEst;
 8002c00:	0023      	movs	r3, r4
 8002c02:	3368      	adds	r3, #104	; 0x68
 8002c04:	2200      	movs	r2, #0
 8002c06:	5e9b      	ldrsh	r3, [r3, r2]
 8002c08:	e782      	b.n	8002b10 <R1_GetPhaseCurrents+0x148>
 8002c0a:	46c0      	nop			; (mov r8, r8)
 8002c0c:	ffff8002 	.word	0xffff8002
 8002c10:	00007ffe 	.word	0x00007ffe
 8002c14:	00007fff 	.word	0x00007fff
 8002c18:	ffff8001 	.word	0xffff8001

08002c1c <R1_HFCurrentsCalibration>:
  */
static void R1_HFCurrentsCalibration(PWMC_Handle_t *pHdl, ab_t *pStator_Currents)
{
  /* Derived class members container */
  PWMC_R1_Handle_t *pHandle = (PWMC_R1_Handle_t *)pHdl;
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8002c1c:	0003      	movs	r3, r0
 8002c1e:	33cc      	adds	r3, #204	; 0xcc
 8002c20:	681b      	ldr	r3, [r3, #0]
{
 8002c22:	b510      	push	{r4, lr}
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8002c24:	685a      	ldr	r2, [r3, #4]
  /* Clear flag used for FOC duration check */
  pHandle->FOCDurationFlag = false;
 8002c26:	0003      	movs	r3, r0
 8002c28:	2400      	movs	r4, #0
 8002c2a:	33c8      	adds	r3, #200	; 0xc8
 8002c2c:	701c      	strb	r4, [r3, #0]
 8002c2e:	6853      	ldr	r3, [r2, #4]
 8002c30:	3470      	adds	r4, #112	; 0x70
 8002c32:	43a3      	bics	r3, r4
 8002c34:	6053      	str	r3, [r2, #4]

  /* Disabling the External triggering for ADCx */
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);
  if (pHandle->Index < NB_CONVERSIONS)
 8002c36:	0002      	movs	r2, r0
 8002c38:	32c4      	adds	r2, #196	; 0xc4
 8002c3a:	7813      	ldrb	r3, [r2, #0]
 8002c3c:	2b0f      	cmp	r3, #15
 8002c3e:	d80a      	bhi.n	8002c56 <R1_HFCurrentsCalibration+0x3a>
  {
    pHandle->PhaseOffset += pHandle->CurConv[1] ;
 8002c40:	0004      	movs	r4, r0
 8002c42:	30b6      	adds	r0, #182	; 0xb6
 8002c44:	34a0      	adds	r4, #160	; 0xa0
 8002c46:	8800      	ldrh	r0, [r0, #0]
 8002c48:	6823      	ldr	r3, [r4, #0]
 8002c4a:	181b      	adds	r3, r3, r0
 8002c4c:	6023      	str	r3, [r4, #0]
    pHandle->Index++;
 8002c4e:	7813      	ldrb	r3, [r2, #0]
 8002c50:	3301      	adds	r3, #1
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	7013      	strb	r3, [r2, #0]
  }

  /* During offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 8002c56:	2300      	movs	r3, #0
 8002c58:	800b      	strh	r3, [r1, #0]
  pStator_Currents->b = 0;
 8002c5a:	804b      	strh	r3, [r1, #2]

}
 8002c5c:	bd10      	pop	{r4, pc}
	...

08002c60 <R1_SetADCSampPointPolarization>:
{
  /* Derived class members container */
  PWMC_R1_Handle_t *pHandle = (PWMC_R1_Handle_t *)pHdl;

  uint16_t hAux;
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8002c60:	0003      	movs	r3, r0
{
 8002c62:	b530      	push	{r4, r5, lr}
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8002c64:	33b8      	adds	r3, #184	; 0xb8
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8002c66:	881a      	ldrh	r2, [r3, #0]
 8002c68:	3314      	adds	r3, #20
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	0852      	lsrs	r2, r2, #1
 8002c6e:	8bdc      	ldrh	r4, [r3, #30]
 8002c70:	8c19      	ldrh	r1, [r3, #32]
 8002c72:	1909      	adds	r1, r1, r4
 8002c74:	b289      	uxth	r1, r1
 8002c76:	1a55      	subs	r5, r2, r1
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8002c78:	0004      	movs	r4, r0
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
                   + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8002c7a:	1852      	adds	r2, r2, r1
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8002c7c:	0001      	movs	r1, r0
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8002c7e:	34ba      	adds	r4, #186	; 0xba
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8002c80:	31bc      	adds	r1, #188	; 0xbc
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8002c82:	8025      	strh	r5, [r4, #0]
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8002c84:	800a      	strh	r2, [r1, #0]
  LL_ADC_REG_SetSequencerChannels(ADC1, __LL_ADC_DECIMAL_NB_TO_CHANNEL (pHandle->pParams_str->IChannel));
 8002c86:	1cda      	adds	r2, r3, #3
 8002c88:	7fd1      	ldrb	r1, [r2, #31]
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChannels(ADC_TypeDef *ADCx, uint32_t Channel)
{
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002c8a:	2280      	movs	r2, #128	; 0x80
 8002c8c:	0192      	lsls	r2, r2, #6
 8002c8e:	408a      	lsls	r2, r1
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8002c90:	2407      	movs	r4, #7
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002c92:	490e      	ldr	r1, [pc, #56]	; (8002ccc <R1_SetADCSampPointPolarization+0x6c>)
 8002c94:	0b52      	lsrs	r2, r2, #13
 8002c96:	628a      	str	r2, [r1, #40]	; 0x28
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8002c98:	694a      	ldr	r2, [r1, #20]
  LL_ADC_SetSamplingTimeCommonChannels (ADC1, pHandle->pParams_str->ISamplingTime);
 8002c9a:	3304      	adds	r3, #4
 8002c9c:	7fdb      	ldrb	r3, [r3, #31]
 8002c9e:	43a2      	bics	r2, r4
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	614b      	str	r3, [r1, #20]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8002ca4:	68ca      	ldr	r2, [r1, #12]
 8002ca6:	4b0a      	ldr	r3, [pc, #40]	; (8002cd0 <R1_SetADCSampPointPolarization+0x70>)
 8002ca8:	401a      	ands	r2, r3
 8002caa:	2388      	movs	r3, #136	; 0x88
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	60cb      	str	r3, [r1, #12]
  LL_ADC_REG_SetTriggerSource(ADC1, LL_ADC_REG_TRIG_EXT_TIM1_CH4);

  /* Check software error */
  if (pHandle->FOCDurationFlag == true)
 8002cb2:	0003      	movs	r3, r0
 8002cb4:	33c8      	adds	r3, #200	; 0xc8
 8002cb6:	781a      	ldrb	r2, [r3, #0]
  }
  else
  {
    hAux = MC_NO_ERROR;
  }
  if (pHandle->_Super.SWerror == 1u)
 8002cb8:	3b72      	subs	r3, #114	; 0x72
 8002cba:	8818      	ldrh	r0, [r3, #0]
 8002cbc:	2801      	cmp	r0, #1
 8002cbe:	d001      	beq.n	8002cc4 <R1_SetADCSampPointPolarization+0x64>
    hAux = MC_DURATION;
 8002cc0:	b290      	uxth	r0, r2
  else
  {
    /* Nothing to do */
  }
  return (hAux);
}
 8002cc2:	bd30      	pop	{r4, r5, pc}
    pHandle->_Super.SWerror = 0u;
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	801a      	strh	r2, [r3, #0]
 8002cc8:	e7fb      	b.n	8002cc2 <R1_SetADCSampPointPolarization+0x62>
 8002cca:	46c0      	nop			; (mov r8, r8)
 8002ccc:	40012400 	.word	0x40012400
 8002cd0:	fffff23f 	.word	0xfffff23f

08002cd4 <R1_CalcDutyCycles>:
  *         before the end of FOC algorithm else returns MC_NO_ERROR
  */
__weak uint16_t R1_CalcDutyCycles(PWMC_Handle_t *pHdl)
{
  PWMC_R1_Handle_t *pHandle = (PWMC_R1_Handle_t *)pHdl;
  DMA_TypeDef *DMAx = pHandle->pParams_str->DMAx;
 8002cd4:	0003      	movs	r3, r0
{
 8002cd6:	b5f0      	push	{r4, r5, r6, r7, lr}
  DMA_TypeDef *DMAx = pHandle->pParams_str->DMAx;
 8002cd8:	33cc      	adds	r3, #204	; 0xcc
 8002cda:	681b      	ldr	r3, [r3, #0]
{
 8002cdc:	b093      	sub	sp, #76	; 0x4c
  DMA_TypeDef *DMAx = pHandle->pParams_str->DMAx;
 8002cde:	9301      	str	r3, [sp, #4]
 8002ce0:	689b      	ldr	r3, [r3, #8]
  midVal = (uint8_t)pHandle->_Super.midDuty;
  minVal = (uint8_t)pHandle->_Super.lowDuty;
  pHandle->iflag=0x00;

  /* Phase-shift and set iflag */
  submax_mid = aCCRval[maxVal] - aCCRval[midVal];
 8002ce2:	a910      	add	r1, sp, #64	; 0x40
  DMA_TypeDef *DMAx = pHandle->pParams_str->DMAx;
 8002ce4:	930c      	str	r3, [sp, #48]	; 0x30
  aCCRval[0] = (int16_t)pHandle->_Super.CntPhA;
 8002ce6:	0003      	movs	r3, r0
 8002ce8:	3350      	adds	r3, #80	; 0x50
 8002cea:	881b      	ldrh	r3, [r3, #0]
  pHandle->iflag=0x00;
 8002cec:	0006      	movs	r6, r0
  aCCRval[0] = (int16_t)pHandle->_Super.CntPhA;
 8002cee:	9308      	str	r3, [sp, #32]
  aCCRval[1] = (int16_t)pHandle->_Super.CntPhB;
 8002cf0:	0003      	movs	r3, r0
 8002cf2:	3352      	adds	r3, #82	; 0x52
 8002cf4:	881b      	ldrh	r3, [r3, #0]
  pHandle->iflag=0x00;
 8002cf6:	2500      	movs	r5, #0
  aCCRval[1] = (int16_t)pHandle->_Super.CntPhB;
 8002cf8:	9309      	str	r3, [sp, #36]	; 0x24
  aCCRval[0] = (int16_t)pHandle->_Super.CntPhA;
 8002cfa:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
 8002cfc:	0004      	movs	r4, r0
  aCCRval[0] = (int16_t)pHandle->_Super.CntPhA;
 8002cfe:	9310      	str	r3, [sp, #64]	; 0x40
  aCCRval[2] = (int16_t)pHandle->_Super.CntPhC;
 8002d00:	0003      	movs	r3, r0
 8002d02:	3354      	adds	r3, #84	; 0x54
 8002d04:	881b      	ldrh	r3, [r3, #0]
  pHandle->iflag=0x00;
 8002d06:	36c5      	adds	r6, #197	; 0xc5
  aCCRval[2] = (int16_t)pHandle->_Super.CntPhC;
 8002d08:	9304      	str	r3, [sp, #16]
 8002d0a:	9a04      	ldr	r2, [sp, #16]
 8002d0c:	ab10      	add	r3, sp, #64	; 0x40
 8002d0e:	809a      	strh	r2, [r3, #4]
  maxVal = (uint8_t)pHandle->_Super.highDuty;
 8002d10:	0003      	movs	r3, r0
 8002d12:	335c      	adds	r3, #92	; 0x5c
 8002d14:	781b      	ldrb	r3, [r3, #0]
  minVal = (uint8_t)pHandle->_Super.lowDuty;
 8002d16:	0002      	movs	r2, r0
  maxVal = (uint8_t)pHandle->_Super.highDuty;
 8002d18:	9302      	str	r3, [sp, #8]
  midVal = (uint8_t)pHandle->_Super.midDuty;
 8002d1a:	0003      	movs	r3, r0
  minVal = (uint8_t)pHandle->_Super.lowDuty;
 8002d1c:	3258      	adds	r2, #88	; 0x58
 8002d1e:	7812      	ldrb	r2, [r2, #0]
  midVal = (uint8_t)pHandle->_Super.midDuty;
 8002d20:	335a      	adds	r3, #90	; 0x5a
 8002d22:	781b      	ldrb	r3, [r3, #0]
  minVal = (uint8_t)pHandle->_Super.lowDuty;
 8002d24:	9206      	str	r2, [sp, #24]
  submax_mid = aCCRval[maxVal] - aCCRval[midVal];
 8002d26:	9a02      	ldr	r2, [sp, #8]
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	0052      	lsls	r2, r2, #1
 8002d2c:	5e52      	ldrsh	r2, [r2, r1]
  pHandle->iflag=0x00;
 8002d2e:	7035      	strb	r5, [r6, #0]
  submax_mid = aCCRval[maxVal] - aCCRval[midVal];
 8002d30:	9207      	str	r2, [sp, #28]
 8002d32:	466a      	mov	r2, sp
 8002d34:	8b92      	ldrh	r2, [r2, #28]
  submax_mid_deltmin = submax_mid - (int16_t)pHandle->pParams_str->TMin;
  submid_min = aCCRval[midVal] - aCCRval[minVal];
 8002d36:	af10      	add	r7, sp, #64	; 0x40
  submax_mid = aCCRval[maxVal] - aCCRval[midVal];
 8002d38:	920a      	str	r2, [sp, #40]	; 0x28
 8002d3a:	aa10      	add	r2, sp, #64	; 0x40
 8002d3c:	5e9b      	ldrsh	r3, [r3, r2]
  submax_mid_deltmin = submax_mid - (int16_t)pHandle->pParams_str->TMin;
 8002d3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  submax_mid = aCCRval[maxVal] - aCCRval[midVal];
 8002d40:	9305      	str	r3, [sp, #20]
 8002d42:	466b      	mov	r3, sp
 8002d44:	8a99      	ldrh	r1, [r3, #20]
  submax_mid_deltmin = submax_mid - (int16_t)pHandle->pParams_str->TMin;
 8002d46:	9b01      	ldr	r3, [sp, #4]
 8002d48:	8b9b      	ldrh	r3, [r3, #28]
  submid_min = aCCRval[midVal] - aCCRval[minVal];
 8002d4a:	9806      	ldr	r0, [sp, #24]
  submax_mid_deltmin = submax_mid - (int16_t)pHandle->pParams_str->TMin;
 8002d4c:	1ad2      	subs	r2, r2, r3
  submid_min = aCCRval[midVal] - aCCRval[minVal];
 8002d4e:	0040      	lsls	r0, r0, #1
 8002d50:	5fc0      	ldrsh	r0, [r0, r7]
  submax_mid_deltmin = submax_mid - (int16_t)pHandle->pParams_str->TMin;
 8002d52:	1a52      	subs	r2, r2, r1
  submid_min = aCCRval[midVal] - aCCRval[minVal];
 8002d54:	900b      	str	r0, [sp, #44]	; 0x2c
  submid_min_deltmin = submid_min - (int16_t)pHandle->pParams_str->TMin;
 8002d56:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8002d58:	1ac8      	subs	r0, r1, r3
 8002d5a:	1bc0      	subs	r0, r0, r7
 8002d5c:	b287      	uxth	r7, r0
 8002d5e:	b200      	sxth	r0, r0
 8002d60:	900d      	str	r0, [sp, #52]	; 0x34
  pHandle->aShiftval[0]=0;
 8002d62:	0020      	movs	r0, r4
 8002d64:	30a8      	adds	r0, #168	; 0xa8
 8002d66:	6005      	str	r5, [r0, #0]
  pHandle->aShiftval[1]=0;
  pHandle->aShiftval[2]=0;
 8002d68:	8085      	strh	r5, [r0, #4]
  {
    pHandle->iflag |= ALFLAG[maxVal];
  }
  else
  {
    if ((1 - submax_mid_deltmin + aCCRval[maxVal] + (int16_t) pHandle->pParams_str->hTADConv)
 8002d6a:	9801      	ldr	r0, [sp, #4]
  submid_min_deltmin = submid_min - (int16_t)pHandle->pParams_str->TMin;
 8002d6c:	970f      	str	r7, [sp, #60]	; 0x3c
    if ((1 - submax_mid_deltmin + aCCRval[maxVal] + (int16_t) pHandle->pParams_str->hTADConv)
 8002d6e:	8c00      	ldrh	r0, [r0, #32]
  submax_mid_deltmin = submax_mid - (int16_t)pHandle->pParams_str->TMin;
 8002d70:	b212      	sxth	r2, r2
    if ((1 - submax_mid_deltmin + aCCRval[maxVal] + (int16_t) pHandle->pParams_str->hTADConv)
 8002d72:	9003      	str	r0, [sp, #12]
 8002d74:	9801      	ldr	r0, [sp, #4]
 8002d76:	2720      	movs	r7, #32
 8002d78:	5fc0      	ldrsh	r0, [r0, r7]
 8002d7a:	900e      	str	r0, [sp, #56]	; 0x38
       > (int16_t)(pHandle->Half_PWMPeriod))
 8002d7c:	0020      	movs	r0, r4
 8002d7e:	30b8      	adds	r0, #184	; 0xb8
 8002d80:	2700      	movs	r7, #0
 8002d82:	5fc0      	ldrsh	r0, [r0, r7]
 8002d84:	4684      	mov	ip, r0
  if(submax_mid_deltmin > 0)
 8002d86:	42aa      	cmp	r2, r5
 8002d88:	dd13      	ble.n	8002db2 <R1_CalcDutyCycles+0xde>
    pHandle->iflag |= ALFLAG[maxVal];
 8002d8a:	4a91      	ldr	r2, [pc, #580]	; (8002fd0 <R1_CalcDutyCycles+0x2fc>)
 8002d8c:	9802      	ldr	r0, [sp, #8]
 8002d8e:	5c12      	ldrb	r2, [r2, r0]
 8002d90:	7032      	strb	r2, [r6, #0]
  max_bad_flag = 0;
 8002d92:	0028      	movs	r0, r5
    }
  }

  if(submid_min_deltmin > 0)
  {
    pHandle->iflag |= ALFLAG[minVal];
 8002d94:	0026      	movs	r6, r4
 8002d96:	36c5      	adds	r6, #197	; 0xc5
 8002d98:	7832      	ldrb	r2, [r6, #0]
 8002d9a:	4d8d      	ldr	r5, [pc, #564]	; (8002fd0 <R1_CalcDutyCycles+0x2fc>)
 8002d9c:	9f06      	ldr	r7, [sp, #24]
 8002d9e:	9207      	str	r2, [sp, #28]
  if(submid_min_deltmin > 0)
 8002da0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    pHandle->iflag |= ALFLAG[minVal];
 8002da2:	57ed      	ldrsb	r5, [r5, r7]
  if(submid_min_deltmin > 0)
 8002da4:	2a00      	cmp	r2, #0
 8002da6:	dd18      	ble.n	8002dda <R1_CalcDutyCycles+0x106>
    pHandle->iflag |= ALFLAG[minVal];
 8002da8:	9a07      	ldr	r2, [sp, #28]
 8002daa:	432a      	orrs	r2, r5
 8002dac:	7032      	strb	r2, [r6, #0]
  min_bad_flag = 0;
 8002dae:	2600      	movs	r6, #0
 8002db0:	e01c      	b.n	8002dec <R1_CalcDutyCycles+0x118>
    if ((1 - submax_mid_deltmin + aCCRval[maxVal] + (int16_t) pHandle->pParams_str->hTADConv)
 8002db2:	2001      	movs	r0, #1
 8002db4:	9f07      	ldr	r7, [sp, #28]
 8002db6:	1a82      	subs	r2, r0, r2
 8002db8:	19d2      	adds	r2, r2, r7
 8002dba:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8002dbc:	19d2      	adds	r2, r2, r7
 8002dbe:	4562      	cmp	r2, ip
 8002dc0:	dce8      	bgt.n	8002d94 <R1_CalcDutyCycles+0xc0>
      pHandle->iflag |= ALFLAG[maxVal];
 8002dc2:	9802      	ldr	r0, [sp, #8]
 8002dc4:	4a82      	ldr	r2, [pc, #520]	; (8002fd0 <R1_CalcDutyCycles+0x2fc>)
 8002dc6:	5c12      	ldrb	r2, [r2, r0]
      pHandle->aShiftval[maxVal] = 1U - (uint16_t)submax_mid_deltmin;
 8002dc8:	3054      	adds	r0, #84	; 0x54
      pHandle->iflag |= ALFLAG[maxVal];
 8002dca:	7032      	strb	r2, [r6, #0]
      pHandle->aShiftval[maxVal] = 1U - (uint16_t)submax_mid_deltmin;
 8002dcc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8002dce:	1c5a      	adds	r2, r3, #1
 8002dd0:	188a      	adds	r2, r1, r2
 8002dd2:	0040      	lsls	r0, r0, #1
 8002dd4:	1b92      	subs	r2, r2, r6
 8002dd6:	5302      	strh	r2, [r0, r4]
 8002dd8:	e7db      	b.n	8002d92 <R1_CalcDutyCycles+0xbe>
  }
  else
  {
    if ((submid_min_deltmin - 1 + aCCRval[minVal]) < 0)
 8002dda:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8002ddc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002dde:	3f01      	subs	r7, #1
 8002de0:	42d7      	cmn	r7, r2
 8002de2:	d50e      	bpl.n	8002e02 <R1_CalcDutyCycles+0x12e>
    {
      pHandle->iflag &= ~ALFLAG[minVal];
 8002de4:	9a07      	ldr	r2, [sp, #28]
 8002de6:	43aa      	bics	r2, r5
 8002de8:	7032      	strb	r2, [r6, #0]
      min_bad_flag = 1;
 8002dea:	2601      	movs	r6, #1
      pHandle->iflag |= ALFLAG[minVal];
      pHandle->aShiftval[minVal] = (uint16_t)submid_min_deltmin - 1U;
    }
  }

  if ((0U == max_bad_flag) && (0U == min_bad_flag))
 8002dec:	0007      	movs	r7, r0
  {
    SamplePoint1 = (int16_t)aCCRval[midVal] - (int16_t)pHandle->pParams_str->TSample;
 8002dee:	9a01      	ldr	r2, [sp, #4]
  if ((0U == max_bad_flag) && (0U == min_bad_flag))
 8002df0:	4337      	orrs	r7, r6
    SamplePoint1 = (int16_t)aCCRval[midVal] - (int16_t)pHandle->pParams_str->TSample;
 8002df2:	8bd2      	ldrh	r2, [r2, #30]
  if ((0U == max_bad_flag) && (0U == min_bad_flag))
 8002df4:	2f00      	cmp	r7, #0
 8002df6:	d10e      	bne.n	8002e16 <R1_CalcDutyCycles+0x142>
    SamplePoint1 = (int16_t)aCCRval[midVal] - (int16_t)pHandle->pParams_str->TSample;
 8002df8:	1a88      	subs	r0, r1, r2
 8002dfa:	b200      	sxth	r0, r0
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->TMin - (int16_t)pHandle->pParams_str->TSample;
 8002dfc:	1a9b      	subs	r3, r3, r2
    SamplePoint2 = SamplePoint1 + (int16_t)pHandle->pParams_str->TSample + (int16_t)pHandle->pParams_str->hTADConv;
  }
  else if (1U == max_bad_flag)
  {
    SamplePoint1 = aCCRval[midVal] - (int16_t)pHandle->pParams_str->TSample;
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->hTADConv;
 8002dfe:	18cb      	adds	r3, r1, r3
 8002e00:	e016      	b.n	8002e30 <R1_CalcDutyCycles+0x15c>
      pHandle->iflag |= ALFLAG[minVal];
 8002e02:	9a07      	ldr	r2, [sp, #28]
 8002e04:	432a      	orrs	r2, r5
 8002e06:	7032      	strb	r2, [r6, #0]
      pHandle->aShiftval[minVal] = (uint16_t)submid_min_deltmin - 1U;
 8002e08:	9a06      	ldr	r2, [sp, #24]
 8002e0a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8002e0c:	3254      	adds	r2, #84	; 0x54
 8002e0e:	0052      	lsls	r2, r2, #1
 8002e10:	3e01      	subs	r6, #1
 8002e12:	5316      	strh	r6, [r2, r4]
 8002e14:	e7cb      	b.n	8002dae <R1_CalcDutyCycles+0xda>
  else if ((1U == max_bad_flag) && (1U == min_bad_flag))
 8002e16:	2801      	cmp	r0, #1
 8002e18:	d000      	beq.n	8002e1c <R1_CalcDutyCycles+0x148>
 8002e1a:	e0d1      	b.n	8002fc0 <R1_CalcDutyCycles+0x2ec>
 8002e1c:	2e01      	cmp	r6, #1
 8002e1e:	d000      	beq.n	8002e22 <R1_CalcDutyCycles+0x14e>
 8002e20:	e0ca      	b.n	8002fb8 <R1_CalcDutyCycles+0x2e4>
    SamplePoint1 = (int16_t)pHandle->Half_PWMPeriod / 2;
 8002e22:	4663      	mov	r3, ip
 8002e24:	0fd8      	lsrs	r0, r3, #31
    SamplePoint2 = SamplePoint1 + (int16_t)pHandle->pParams_str->TSample + (int16_t)pHandle->pParams_str->hTADConv;
 8002e26:	9b03      	ldr	r3, [sp, #12]
    SamplePoint1 = (int16_t)pHandle->Half_PWMPeriod / 2;
 8002e28:	4460      	add	r0, ip
 8002e2a:	1040      	asrs	r0, r0, #1
    SamplePoint2 = SamplePoint1 + (int16_t)pHandle->pParams_str->TSample + (int16_t)pHandle->pParams_str->hTADConv;
 8002e2c:	189b      	adds	r3, r3, r2
 8002e2e:	181b      	adds	r3, r3, r0
 8002e30:	b21b      	sxth	r3, r3
  {
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->TMin - (int16_t)pHandle->pParams_str->TSample;
    SamplePoint1 = aCCRval[midVal];
  }

  if ((SamplePoint2-SamplePoint1) < (int16_t)pHandle->pParams_str->hTADConv)
 8002e32:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8002e34:	1a1e      	subs	r6, r3, r0
 8002e36:	42be      	cmp	r6, r7
 8002e38:	da10      	bge.n	8002e5c <R1_CalcDutyCycles+0x188>
  {
    pHandle->iflag &=  ALFLAG[maxVal];
 8002e3a:	0023      	movs	r3, r4
 8002e3c:	4864      	ldr	r0, [pc, #400]	; (8002fd0 <R1_CalcDutyCycles+0x2fc>)
 8002e3e:	9f02      	ldr	r7, [sp, #8]
 8002e40:	33c5      	adds	r3, #197	; 0xc5
 8002e42:	781e      	ldrb	r6, [r3, #0]
 8002e44:	5dc0      	ldrb	r0, [r0, r7]
 8002e46:	4030      	ands	r0, r6
    pHandle->iflag &= ~ALFLAG[minVal];
 8002e48:	43a8      	bics	r0, r5
 8002e4a:	7018      	strb	r0, [r3, #0]
    SamplePoint1 = (int16_t)pHandle->Half_PWMPeriod /2 ;
 8002e4c:	4663      	mov	r3, ip
 8002e4e:	0fd8      	lsrs	r0, r3, #31
    SamplePoint2 = SamplePoint1 + (int16_t)pHandle->pParams_str->TSample + (int16_t)pHandle->pParams_str->hTADConv;
 8002e50:	9b03      	ldr	r3, [sp, #12]
    SamplePoint1 = (int16_t)pHandle->Half_PWMPeriod /2 ;
 8002e52:	4460      	add	r0, ip
    SamplePoint2 = SamplePoint1 + (int16_t)pHandle->pParams_str->TSample + (int16_t)pHandle->pParams_str->hTADConv;
 8002e54:	189a      	adds	r2, r3, r2
    SamplePoint1 = (int16_t)pHandle->Half_PWMPeriod /2 ;
 8002e56:	1040      	asrs	r0, r0, #1
    SamplePoint2 = SamplePoint1 + (int16_t)pHandle->pParams_str->TSample + (int16_t)pHandle->pParams_str->hTADConv;
 8002e58:	1812      	adds	r2, r2, r0
 8002e5a:	b213      	sxth	r3, r2
  {
    /* Nothing to do */
  }

  /* Saturate sampling point */
  if ((SamplePoint2 >= (int16_t)(pHandle->Half_PWMPeriod)) || (SamplePoint2 <= 0))
 8002e5c:	4563      	cmp	r3, ip
 8002e5e:	da01      	bge.n	8002e64 <R1_CalcDutyCycles+0x190>
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	dc0a      	bgt.n	8002e7a <R1_CalcDutyCycles+0x1a6>
  {
    pHandle->iflag &=  ALFLAG[maxVal];
 8002e64:	0023      	movs	r3, r4
 8002e66:	4a5a      	ldr	r2, [pc, #360]	; (8002fd0 <R1_CalcDutyCycles+0x2fc>)
 8002e68:	9f02      	ldr	r7, [sp, #8]
 8002e6a:	33c5      	adds	r3, #197	; 0xc5
 8002e6c:	781e      	ldrb	r6, [r3, #0]
 8002e6e:	5dd2      	ldrb	r2, [r2, r7]
 8002e70:	4032      	ands	r2, r6
 8002e72:	701a      	strb	r2, [r3, #0]
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->hTADConv;
 8002e74:	9b03      	ldr	r3, [sp, #12]
 8002e76:	18c9      	adds	r1, r1, r3
 8002e78:	b20b      	sxth	r3, r1
  }
  else
  {
    /* Nothing to do */
  }
  if ((SamplePoint1 >= (int16_t)pHandle->Half_PWMPeriod) || (SamplePoint1 <= 0))
 8002e7a:	4560      	cmp	r0, ip
 8002e7c:	da01      	bge.n	8002e82 <R1_CalcDutyCycles+0x1ae>
 8002e7e:	2800      	cmp	r0, #0
 8002e80:	dc05      	bgt.n	8002e8e <R1_CalcDutyCycles+0x1ba>
  {
    pHandle->iflag &= ~ALFLAG[minVal];
 8002e82:	0021      	movs	r1, r4
 8002e84:	31c5      	adds	r1, #197	; 0xc5
 8002e86:	780a      	ldrb	r2, [r1, #0]
    SamplePoint1 = aCCRval[midVal];
 8002e88:	9805      	ldr	r0, [sp, #20]
    pHandle->iflag &= ~ALFLAG[minVal];
 8002e8a:	43aa      	bics	r2, r5
 8002e8c:	700a      	strb	r2, [r1, #0]
  else
  {
    /* Nothing to do */
  }

  pHandle->CntSmp1 = SamplePoint1;
 8002e8e:	b282      	uxth	r2, r0
 8002e90:	9202      	str	r2, [sp, #8]
 8002e92:	0022      	movs	r2, r4
  pHandle->CntSmp2 = SamplePoint2;
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	9303      	str	r3, [sp, #12]
 8002e98:	0023      	movs	r3, r4
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8002e9a:	2002      	movs	r0, #2
  pHandle->CntSmp1 = SamplePoint1;
 8002e9c:	9902      	ldr	r1, [sp, #8]
 8002e9e:	32ba      	adds	r2, #186	; 0xba
 8002ea0:	8011      	strh	r1, [r2, #0]
  pHandle->CntSmp2 = SamplePoint2;
 8002ea2:	9a03      	ldr	r2, [sp, #12]
 8002ea4:	33bc      	adds	r3, #188	; 0xbc
 8002ea6:	801a      	strh	r2, [r3, #0]

  /* Critical section start */
  LL_DMA_DisableIT_TC(DMAx, pHandle->pParams_str->DMAChannelX);
 8002ea8:	9b01      	ldr	r3, [sp, #4]

  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA + pHandle->aShiftval[0];
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 8002eaa:	2198      	movs	r1, #152	; 0x98
  LL_DMA_DisableIT_TC(DMAx, pHandle->pParams_str->DMAChannelX);
 8002eac:	68db      	ldr	r3, [r3, #12]
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 8002eae:	468c      	mov	ip, r1
  LL_DMA_DisableIT_TC(DMAx, pHandle->pParams_str->DMAChannelX);
 8002eb0:	9305      	str	r3, [sp, #20]
 8002eb2:	9a05      	ldr	r2, [sp, #20]
 8002eb4:	4b47      	ldr	r3, [pc, #284]	; (8002fd4 <R1_CalcDutyCycles+0x300>)
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 8002eb6:	44a4      	add	ip, r4
 8002eb8:	189b      	adds	r3, r3, r2
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	4661      	mov	r1, ip
 8002ec2:	18d3      	adds	r3, r2, r3
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	9d04      	ldr	r5, [sp, #16]
 8002ec8:	4382      	bics	r2, r0
 8002eca:	601a      	str	r2, [r3, #0]
  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA + pHandle->aShiftval[0];
 8002ecc:	0023      	movs	r3, r4
 8002ece:	33a8      	adds	r3, #168	; 0xa8
 8002ed0:	8818      	ldrh	r0, [r3, #0]
 8002ed2:	9b08      	ldr	r3, [sp, #32]
 8002ed4:	181f      	adds	r7, r3, r0
 8002ed6:	0023      	movs	r3, r4
 8002ed8:	b2bf      	uxth	r7, r7
 8002eda:	3394      	adds	r3, #148	; 0x94
 8002edc:	801f      	strh	r7, [r3, #0]
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 8002ede:	8ada      	ldrh	r2, [r3, #22]
 8002ee0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ee2:	189e      	adds	r6, r3, r2
 8002ee4:	0023      	movs	r3, r4
 8002ee6:	b2b6      	uxth	r6, r6
 8002ee8:	3396      	adds	r3, #150	; 0x96
 8002eea:	801e      	strh	r6, [r3, #0]
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 8002eec:	3316      	adds	r3, #22
 8002eee:	881b      	ldrh	r3, [r3, #0]
 8002ef0:	18ed      	adds	r5, r5, r3
 8002ef2:	b2ad      	uxth	r5, r5
 8002ef4:	800d      	strh	r5, [r1, #0]
  /* Second half PWM period CCR value transfered by DMA */
  pHandle->DmaBuffCCR_latch[3]= pHandle->_Super.CntPhA - pHandle->aShiftval[0];
 8002ef6:	9908      	ldr	r1, [sp, #32]
 8002ef8:	1a08      	subs	r0, r1, r0
 8002efa:	219a      	movs	r1, #154	; 0x9a
 8002efc:	468c      	mov	ip, r1
 8002efe:	44a4      	add	ip, r4
 8002f00:	4661      	mov	r1, ip
 8002f02:	b280      	uxth	r0, r0
 8002f04:	8008      	strh	r0, [r1, #0]
  pHandle->DmaBuffCCR_latch[4]= pHandle->_Super.CntPhB - pHandle->aShiftval[1];
 8002f06:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002f08:	1a8a      	subs	r2, r1, r2
 8002f0a:	219c      	movs	r1, #156	; 0x9c
 8002f0c:	468c      	mov	ip, r1
 8002f0e:	44a4      	add	ip, r4
 8002f10:	4661      	mov	r1, ip
 8002f12:	b292      	uxth	r2, r2
 8002f14:	800a      	strh	r2, [r1, #0]
  pHandle->DmaBuffCCR_latch[5]= pHandle->_Super.CntPhC - pHandle->aShiftval[2];
 8002f16:	9904      	ldr	r1, [sp, #16]
 8002f18:	1acb      	subs	r3, r1, r3
 8002f1a:	219e      	movs	r1, #158	; 0x9e
 8002f1c:	468c      	mov	ip, r1
 8002f1e:	44a4      	add	ip, r4
 8002f20:	4661      	mov	r1, ip
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	800b      	strh	r3, [r1, #0]

  if (pHandle->TCDoneFlag == true)
 8002f26:	21c9      	movs	r1, #201	; 0xc9
 8002f28:	468c      	mov	ip, r1
 8002f2a:	44a4      	add	ip, r4
 8002f2c:	4661      	mov	r1, ip
 8002f2e:	7809      	ldrb	r1, [r1, #0]
 8002f30:	2900      	cmp	r1, #0
 8002f32:	d016      	beq.n	8002f62 <R1_CalcDutyCycles+0x28e>
  {
    /* First half PWM period CCR value transfered by DMA */
    pHandle->DmaBuffCCR[0] = pHandle->DmaBuffCCR_latch[0];
 8002f34:	2188      	movs	r1, #136	; 0x88
 8002f36:	468c      	mov	ip, r1
 8002f38:	44a4      	add	ip, r4
 8002f3a:	4661      	mov	r1, ip
 8002f3c:	800f      	strh	r7, [r1, #0]
    pHandle->DmaBuffCCR[1] = pHandle->DmaBuffCCR_latch[1];
 8002f3e:	0027      	movs	r7, r4
 8002f40:	378a      	adds	r7, #138	; 0x8a
 8002f42:	803e      	strh	r6, [r7, #0]
    pHandle->DmaBuffCCR[2] = pHandle->DmaBuffCCR_latch[2];
 8002f44:	0026      	movs	r6, r4
 8002f46:	368c      	adds	r6, #140	; 0x8c
 8002f48:	8035      	strh	r5, [r6, #0]
    /* Second half PWM period CCR value transfered by DMA */
    pHandle->DmaBuffCCR[3]= pHandle->DmaBuffCCR_latch[3];
 8002f4a:	0025      	movs	r5, r4
 8002f4c:	358e      	adds	r5, #142	; 0x8e
 8002f4e:	8028      	strh	r0, [r5, #0]
    pHandle->DmaBuffCCR[4]= pHandle->DmaBuffCCR_latch[4];
 8002f50:	0020      	movs	r0, r4
 8002f52:	3090      	adds	r0, #144	; 0x90
 8002f54:	8002      	strh	r2, [r0, #0]
    pHandle->DmaBuffCCR[5]= pHandle->DmaBuffCCR_latch[5];
 8002f56:	0022      	movs	r2, r4
 8002f58:	3292      	adds	r2, #146	; 0x92
 8002f5a:	8013      	strh	r3, [r2, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002f5c:	4b1e      	ldr	r3, [pc, #120]	; (8002fd8 <R1_CalcDutyCycles+0x304>)
 8002f5e:	9a02      	ldr	r2, [sp, #8]
 8002f60:	641a      	str	r2, [r3, #64]	; 0x40
  else
  {
    /* Do nothing, it will be applied during DMA transfer complete IRQ */
  }
  /* Critical section end */
  LL_DMA_EnableIT_TC(DMAx, pHandle->pParams_str->DMAChannelX);
 8002f62:	9905      	ldr	r1, [sp, #20]
 8002f64:	980c      	ldr	r0, [sp, #48]	; 0x30
 8002f66:	f7ff fce9 	bl	800293c <LL_DMA_EnableIT_TC>

  LL_ADC_REG_SetSequencerChannels(ADC1, __LL_ADC_DECIMAL_NB_TO_CHANNEL (pHandle->pParams_str->IChannel));
 8002f6a:	9b01      	ldr	r3, [sp, #4]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8002f6c:	2007      	movs	r0, #7
 8002f6e:	3303      	adds	r3, #3
 8002f70:	7fda      	ldrb	r2, [r3, #31]
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002f72:	2380      	movs	r3, #128	; 0x80
 8002f74:	019b      	lsls	r3, r3, #6
 8002f76:	4093      	lsls	r3, r2
 8002f78:	4a18      	ldr	r2, [pc, #96]	; (8002fdc <R1_CalcDutyCycles+0x308>)
 8002f7a:	0b5b      	lsrs	r3, r3, #13
 8002f7c:	6293      	str	r3, [r2, #40]	; 0x28
  LL_ADC_SetSamplingTimeCommonChannels (ADC1, pHandle->pParams_str->ISamplingTime);
 8002f7e:	9b01      	ldr	r3, [sp, #4]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8002f80:	6951      	ldr	r1, [r2, #20]
 8002f82:	3304      	adds	r3, #4
 8002f84:	7fdb      	ldrb	r3, [r3, #31]
 8002f86:	4381      	bics	r1, r0
 8002f88:	430b      	orrs	r3, r1
 8002f8a:	6153      	str	r3, [r2, #20]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8002f8c:	68d1      	ldr	r1, [r2, #12]
 8002f8e:	4b14      	ldr	r3, [pc, #80]	; (8002fe0 <R1_CalcDutyCycles+0x30c>)
 8002f90:	4019      	ands	r1, r3
 8002f92:	2388      	movs	r3, #136	; 0x88
 8002f94:	00db      	lsls	r3, r3, #3
 8002f96:	430b      	orrs	r3, r1
 8002f98:	60d3      	str	r3, [r2, #12]
  LL_ADC_REG_SetTriggerSource(ADC1, LL_ADC_REG_TRIG_EXT_TIM1_CH4);

  pHandle->DmaBuffCCR_ADCTrig[0] = SamplePoint2;
 8002f9a:	0023      	movs	r3, r4
 8002f9c:	9a03      	ldr	r2, [sp, #12]
 8002f9e:	33ae      	adds	r3, #174	; 0xae
 8002fa0:	801a      	strh	r2, [r3, #0]
  pHandle->DmaBuffCCR_ADCTrig[2] = SamplePoint1;
 8002fa2:	9a02      	ldr	r2, [sp, #8]
  }
  else
  {
    hAux = MC_NO_ERROR;
  }
  if (pHandle->_Super.SWerror == 1u)
 8002fa4:	3456      	adds	r4, #86	; 0x56
  pHandle->DmaBuffCCR_ADCTrig[2] = SamplePoint1;
 8002fa6:	809a      	strh	r2, [r3, #4]
  if (pHandle->_Super.SWerror == 1u)
 8002fa8:	8820      	ldrh	r0, [r4, #0]
  if (pHandle->FOCDurationFlag == true)
 8002faa:	331a      	adds	r3, #26
 8002fac:	781b      	ldrb	r3, [r3, #0]
  if (pHandle->_Super.SWerror == 1u)
 8002fae:	2801      	cmp	r0, #1
 8002fb0:	d00b      	beq.n	8002fca <R1_CalcDutyCycles+0x2f6>
    hAux = MC_DURATION;
 8002fb2:	b298      	uxth	r0, r3
  {
    /* Nothing to do */
  }

  return (hAux);
}
 8002fb4:	b013      	add	sp, #76	; 0x4c
 8002fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SamplePoint1 = aCCRval[midVal] - (int16_t)pHandle->pParams_str->TSample;
 8002fb8:	1a88      	subs	r0, r1, r2
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->hTADConv;
 8002fba:	9b03      	ldr	r3, [sp, #12]
    SamplePoint1 = aCCRval[midVal] - (int16_t)pHandle->pParams_str->TSample;
 8002fbc:	b200      	sxth	r0, r0
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->hTADConv;
 8002fbe:	e71e      	b.n	8002dfe <R1_CalcDutyCycles+0x12a>
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->TMin - (int16_t)pHandle->pParams_str->TSample;
 8002fc0:	1a9b      	subs	r3, r3, r2
 8002fc2:	18cb      	adds	r3, r1, r3
    SamplePoint1 = aCCRval[midVal];
 8002fc4:	9805      	ldr	r0, [sp, #20]
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->TMin - (int16_t)pHandle->pParams_str->TSample;
 8002fc6:	b21b      	sxth	r3, r3
    SamplePoint1 = aCCRval[midVal];
 8002fc8:	e733      	b.n	8002e32 <R1_CalcDutyCycles+0x15e>
    pHandle->_Super.SWerror = 0u;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	8023      	strh	r3, [r4, #0]
 8002fce:	e7f1      	b.n	8002fb4 <R1_CalcDutyCycles+0x2e0>
 8002fd0:	08006478 	.word	0x08006478
 8002fd4:	0800647b 	.word	0x0800647b
 8002fd8:	40012c00 	.word	0x40012c00
 8002fdc:	40012400 	.word	0x40012400
 8002fe0:	fffff23f 	.word	0xfffff23f

08002fe4 <R1_Init>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8002fe4:	0003      	movs	r3, r0
{
 8002fe6:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8002fe8:	33cc      	adds	r3, #204	; 0xcc
 8002fea:	681e      	ldr	r6, [r3, #0]
{
 8002fec:	b087      	sub	sp, #28
  DMA_TypeDef * DMAx = pHandle->pParams_str->DMAx;
 8002fee:	68b3      	ldr	r3, [r6, #8]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8002ff0:	6874      	ldr	r4, [r6, #4]
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 8002ff2:	6835      	ldr	r5, [r6, #0]
{
 8002ff4:	9002      	str	r0, [sp, #8]
  DMA_TypeDef * DMAx = pHandle->pParams_str->DMAx;
 8002ff6:	9301      	str	r3, [sp, #4]
  R1_1ShuntMotorVarsInit(&pHandle->_Super);
 8002ff8:	f7ff fcac 	bl	8002954 <R1_1ShuntMotorVarsInit>
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002ffc:	2180      	movs	r1, #128	; 0x80
 8002ffe:	4b69      	ldr	r3, [pc, #420]	; (80031a4 <R1_Init+0x1c0>)
 8003000:	03c9      	lsls	r1, r1, #15
 8003002:	699a      	ldr	r2, [r3, #24]
  LL_TIM_OC_DisablePreload(TIMx, LL_TIM_CHANNEL_CH4);
 8003004:	2780      	movs	r7, #128	; 0x80
 8003006:	430a      	orrs	r2, r1
 8003008:	619a      	str	r2, [r3, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800300a:	699b      	ldr	r3, [r3, #24]
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB1_GRP2_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 800300c:	4a66      	ldr	r2, [pc, #408]	; (80031a8 <R1_Init+0x1c4>)
 800300e:	400b      	ands	r3, r1
 8003010:	9305      	str	r3, [sp, #20]
  (void)tmpreg;
 8003012:	9b05      	ldr	r3, [sp, #20]
 8003014:	2380      	movs	r3, #128	; 0x80
 8003016:	68d1      	ldr	r1, [r2, #12]
 8003018:	011b      	lsls	r3, r3, #4
 800301a:	430b      	orrs	r3, r1
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 800301c:	2101      	movs	r1, #1
 800301e:	60d3      	str	r3, [r2, #12]
 8003020:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(TIMx->CR1, (TIM_CR1_DIR | TIM_CR1_CMS), CounterMode);
 8003022:	2270      	movs	r2, #112	; 0x70
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8003024:	438b      	bics	r3, r1
 8003026:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->CR1, (TIM_CR1_DIR | TIM_CR1_CMS), CounterMode);
 8003028:	2340      	movs	r3, #64	; 0x40
 800302a:	6820      	ldr	r0, [r4, #0]
 800302c:	017f      	lsls	r7, r7, #5
 800302e:	4390      	bics	r0, r2
 8003030:	4303      	orrs	r3, r0
 8003032:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8003034:	6863      	ldr	r3, [r4, #4]
  LL_TIM_OC_DisablePreload(TIMx, LL_TIM_CHANNEL_CH1);
 8003036:	0020      	movs	r0, r4
 8003038:	4393      	bics	r3, r2
 800303a:	6063      	str	r3, [r4, #4]
 800303c:	f7ff fc38 	bl	80028b0 <LL_TIM_OC_DisablePreload>
  LL_TIM_OC_DisablePreload(TIMx, LL_TIM_CHANNEL_CH2);
 8003040:	0020      	movs	r0, r4
 8003042:	2110      	movs	r1, #16
 8003044:	f7ff fc34 	bl	80028b0 <LL_TIM_OC_DisablePreload>
  LL_TIM_OC_DisablePreload(TIMx, LL_TIM_CHANNEL_CH3);
 8003048:	2180      	movs	r1, #128	; 0x80
 800304a:	0020      	movs	r0, r4
 800304c:	0049      	lsls	r1, r1, #1
 800304e:	f7ff fc2f 	bl	80028b0 <LL_TIM_OC_DisablePreload>
  LL_TIM_OC_DisablePreload(TIMx, LL_TIM_CHANNEL_CH4);
 8003052:	0039      	movs	r1, r7
 8003054:	0020      	movs	r0, r4
 8003056:	f7ff fc2b 	bl	80028b0 <LL_TIM_OC_DisablePreload>
  SET_BIT(TIMx->CCER, Channels);
 800305a:	6a23      	ldr	r3, [r4, #32]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 800305c:	4953      	ldr	r1, [pc, #332]	; (80031ac <R1_Init+0x1c8>)
 800305e:	431f      	orrs	r7, r3
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8003060:	2300      	movs	r3, #0
  SET_BIT(TIMx->CCER, Channels);
 8003062:	6227      	str	r7, [r4, #32]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8003064:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8003066:	3b81      	subs	r3, #129	; 0x81
 8003068:	6123      	str	r3, [r4, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 800306a:	68e2      	ldr	r2, [r4, #12]
 800306c:	3302      	adds	r3, #2
 800306e:	33ff      	adds	r3, #255	; 0xff
 8003070:	4313      	orrs	r3, r2
 8003072:	60e3      	str	r3, [r4, #12]
  SET_BIT(TIMx->CCER, Channels);
 8003074:	6a22      	ldr	r2, [r4, #32]
 8003076:	4b4e      	ldr	r3, [pc, #312]	; (80031b0 <R1_Init+0x1cc>)
  LL_DMA_ConfigTransfer(DMAx, pHandle->pParams_str->DMAChannelX, DMA_CFG); /* To be removed should be done by cubeMX */
 8003078:	68f7      	ldr	r7, [r6, #12]
 800307a:	4313      	orrs	r3, r2
 800307c:	6223      	str	r3, [r4, #32]
 800307e:	4b4d      	ldr	r3, [pc, #308]	; (80031b4 <R1_Init+0x1d0>)
 8003080:	9a01      	ldr	r2, [sp, #4]
 8003082:	9303      	str	r3, [sp, #12]
 8003084:	19db      	adds	r3, r3, r7
 8003086:	3b01      	subs	r3, #1
 8003088:	781b      	ldrb	r3, [r3, #0]
  LL_DMA_SetDataLength(DMAx, pHandle->pParams_str->DMAChannelX, DMA_TRANSFER_LENGTH_CCR);
 800308a:	9801      	ldr	r0, [sp, #4]
 800308c:	189b      	adds	r3, r3, r2
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	400a      	ands	r2, r1
 8003092:	4949      	ldr	r1, [pc, #292]	; (80031b8 <R1_Init+0x1d4>)
 8003094:	430a      	orrs	r2, r1
 8003096:	601a      	str	r2, [r3, #0]
  MODIFY_REG(TIMx->DCR, (TIM_DCR_DBL | TIM_DCR_DBA), (DMABurstBaseAddress | DMABurstLength));
 8003098:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800309a:	4a48      	ldr	r2, [pc, #288]	; (80031bc <R1_Init+0x1d8>)
 800309c:	4011      	ands	r1, r2
 800309e:	4a48      	ldr	r2, [pc, #288]	; (80031c0 <R1_Init+0x1dc>)
 80030a0:	430a      	orrs	r2, r1
 80030a2:	64a2      	str	r2, [r4, #72]	; 0x48
  LL_DMA_SetMemoryAddress(DMAx, pHandle->pParams_str->DMAChannelX, (uint32_t)&pHandle->DmaBuffCCR[0]);
 80030a4:	9a02      	ldr	r2, [sp, #8]
  LL_DMA_SetDataLength(DMAx, pHandle->pParams_str->DMAChannelX, DMA_TRANSFER_LENGTH_CCR);
 80030a6:	0039      	movs	r1, r7
  LL_DMA_SetMemoryAddress(DMAx, pHandle->pParams_str->DMAChannelX, (uint32_t)&pHandle->DmaBuffCCR[0]);
 80030a8:	3288      	adds	r2, #136	; 0x88
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 80030aa:	60da      	str	r2, [r3, #12]
  LL_DMA_SetPeriphAddress(DMAx, pHandle->pParams_str->DMAChannelX, (uint32_t) &TIMx->DMAR);
 80030ac:	0022      	movs	r2, r4
 80030ae:	324c      	adds	r2, #76	; 0x4c
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 80030b0:	609a      	str	r2, [r3, #8]
  LL_DMA_SetDataLength(DMAx, pHandle->pParams_str->DMAChannelX, DMA_TRANSFER_LENGTH_CCR);
 80030b2:	2206      	movs	r2, #6
 80030b4:	f7ff fc34 	bl	8002920 <LL_DMA_SetDataLength>
  LL_DMA_ConfigTransfer(DMAx, pHandle->pParams_str->DMASamplingPtChannelX, DMA_CFG); /* To be removed should be done by cubeMX */
 80030b8:	6931      	ldr	r1, [r6, #16]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80030ba:	9b03      	ldr	r3, [sp, #12]
 80030bc:	9a01      	ldr	r2, [sp, #4]
 80030be:	185b      	adds	r3, r3, r1
 80030c0:	3b01      	subs	r3, #1
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	4839      	ldr	r0, [pc, #228]	; (80031ac <R1_Init+0x1c8>)
 80030c6:	189b      	adds	r3, r3, r2
 80030c8:	681a      	ldr	r2, [r3, #0]
  LL_DMA_SetPeriphAddress(DMAx, pHandle->pParams_str->DMASamplingPtChannelX, (uint32_t) &TIMx->CCR4);
 80030ca:	3440      	adds	r4, #64	; 0x40
 80030cc:	4002      	ands	r2, r0
 80030ce:	483a      	ldr	r0, [pc, #232]	; (80031b8 <R1_Init+0x1d4>)
 80030d0:	4302      	orrs	r2, r0
 80030d2:	601a      	str	r2, [r3, #0]
  LL_DMA_SetMemoryAddress(DMAx, pHandle->pParams_str->DMASamplingPtChannelX, (uint32_t)&pHandle->DmaBuffCCR_ADCTrig[0]);
 80030d4:	9a02      	ldr	r2, [sp, #8]
  LL_DMA_SetDataLength(DMAx, pHandle->pParams_str->DMASamplingPtChannelX, DMA_TRANSFER_LENGTH_SAMPLING_POINT);
 80030d6:	9801      	ldr	r0, [sp, #4]
  LL_DMA_SetMemoryAddress(DMAx, pHandle->pParams_str->DMASamplingPtChannelX, (uint32_t)&pHandle->DmaBuffCCR_ADCTrig[0]);
 80030d8:	32ae      	adds	r2, #174	; 0xae
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 80030da:	60da      	str	r2, [r3, #12]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 80030dc:	609c      	str	r4, [r3, #8]
  LL_DMA_SetDataLength(DMAx, pHandle->pParams_str->DMASamplingPtChannelX, DMA_TRANSFER_LENGTH_SAMPLING_POINT);
 80030de:	2203      	movs	r2, #3
 80030e0:	f7ff fc1e 	bl	8002920 <LL_DMA_SetDataLength>
  LL_DMA_EnableIT_TC(DMAx, pHandle->pParams_str->DMAChannelX);
 80030e4:	0039      	movs	r1, r7
 80030e6:	9801      	ldr	r0, [sp, #4]
 80030e8:	f7ff fc28 	bl	800293c <LL_DMA_EnableIT_TC>
  LL_DMA_SetMemoryAddress(DMAx, pHandle->pParams_str->DMA_ADC_DR_ChannelX, (uint32_t)pHandle->CurConv);
 80030ec:	69b1      	ldr	r1, [r6, #24]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 80030ee:	9b03      	ldr	r3, [sp, #12]
 80030f0:	9801      	ldr	r0, [sp, #4]
 80030f2:	185b      	adds	r3, r3, r1
 80030f4:	3b01      	subs	r3, #1
 80030f6:	9a02      	ldr	r2, [sp, #8]
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	32b4      	adds	r2, #180	; 0xb4
 80030fc:	181b      	adds	r3, r3, r0
 80030fe:	60da      	str	r2, [r3, #12]
  LL_DMA_SetPeriphAddress(DMAx, pHandle->pParams_str->DMA_ADC_DR_ChannelX, (uint32_t)&ADCx->DR);
 8003100:	002a      	movs	r2, r5
 8003102:	3240      	adds	r2, #64	; 0x40
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8003104:	609a      	str	r2, [r3, #8]
  LL_DMA_SetDataLength(DMAx, pHandle->pParams_str->DMA_ADC_DR_ChannelX, DMA_TRANSFER_LENGTH_ADC);
 8003106:	2202      	movs	r2, #2
 8003108:	f7ff fc0a 	bl	8002920 <LL_DMA_SetDataLength>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800310c:	2204      	movs	r2, #4
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 800310e:	2108      	movs	r1, #8
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8003110:	686b      	ldr	r3, [r5, #4]
  MODIFY_REG(ADCx->CR,
 8003112:	482c      	ldr	r0, [pc, #176]	; (80031c4 <R1_Init+0x1e0>)
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8003114:	4393      	bics	r3, r2
 8003116:	606b      	str	r3, [r5, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8003118:	602a      	str	r2, [r5, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 800311a:	686b      	ldr	r3, [r5, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTP) == (ADC_CR_ADSTP));
 800311c:	2710      	movs	r7, #16
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 800311e:	438b      	bics	r3, r1
 8003120:	606b      	str	r3, [r5, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOS);
 8003122:	6029      	str	r1, [r5, #0]
  MODIFY_REG(ADCx->CR,
 8003124:	2180      	movs	r1, #128	; 0x80
 8003126:	4b28      	ldr	r3, [pc, #160]	; (80031c8 <R1_Init+0x1e4>)
 8003128:	0609      	lsls	r1, r1, #24
 800312a:	689c      	ldr	r4, [r3, #8]
 800312c:	4004      	ands	r4, r0
 800312e:	4321      	orrs	r1, r4
 8003130:	6099      	str	r1, [r3, #8]
  return (READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS));
 8003132:	2102      	movs	r1, #2
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8003134:	689c      	ldr	r4, [r3, #8]
         (LL_ADC_REG_IsStopConversionOngoing(ADC1) == SET) ||
 8003136:	2c00      	cmp	r4, #0
 8003138:	dbfc      	blt.n	8003134 <R1_Init+0x150>
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 800313a:	689c      	ldr	r4, [r3, #8]
  while ((LL_ADC_IsCalibrationOnGoing(ADC1) == SET) ||
 800313c:	4214      	tst	r4, r2
 800313e:	d1f9      	bne.n	8003134 <R1_Init+0x150>
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTP) == (ADC_CR_ADSTP));
 8003140:	689c      	ldr	r4, [r3, #8]
         (LL_ADC_REG_IsConversionOngoing(ADC1) == SET) ||
 8003142:	423c      	tst	r4, r7
 8003144:	d1f6      	bne.n	8003134 <R1_Init+0x150>
  return (READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS));
 8003146:	689c      	ldr	r4, [r3, #8]
         (LL_ADC_REG_IsStopConversionOngoing(ADC1) == SET) ||
 8003148:	420c      	tst	r4, r1
 800314a:	d1f3      	bne.n	8003134 <R1_Init+0x150>
  MODIFY_REG(ADCx->CR,
 800314c:	2201      	movs	r2, #1
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 800314e:	2403      	movs	r4, #3
  MODIFY_REG(ADCx->CR,
 8003150:	6899      	ldr	r1, [r3, #8]
 8003152:	4001      	ands	r1, r0
 8003154:	4311      	orrs	r1, r2
 8003156:	6099      	str	r1, [r3, #8]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8003158:	68e9      	ldr	r1, [r5, #12]
 800315a:	481c      	ldr	r0, [pc, #112]	; (80031cc <R1_Init+0x1e8>)
 800315c:	4001      	ands	r1, r0
 800315e:	60e9      	str	r1, [r5, #12]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8003160:	68d9      	ldr	r1, [r3, #12]
 8003162:	43a1      	bics	r1, r4
 8003164:	4311      	orrs	r1, r2
 8003166:	60d9      	str	r1, [r3, #12]
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 8003168:	6819      	ldr	r1, [r3, #0]
  while (LL_ADC_IsActiveFlag_ADRDY(ADC1) == RESET)
 800316a:	4211      	tst	r1, r2
 800316c:	d0fc      	beq.n	8003168 <R1_Init+0x184>
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 800316e:	2380      	movs	r3, #128	; 0x80
 8003170:	68e9      	ldr	r1, [r5, #12]
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	4001      	ands	r1, r0
 8003176:	430b      	orrs	r3, r1
  LL_ADC_REG_SetSequencerChannels (ADCx, __LL_ADC_DECIMAL_NB_TO_CHANNEL (pHandle->pParams_str->IChannel));
 8003178:	0011      	movs	r1, r2
 800317a:	60eb      	str	r3, [r5, #12]
 800317c:	3603      	adds	r6, #3
 800317e:	7ff3      	ldrb	r3, [r6, #31]
 8003180:	4099      	lsls	r1, r3
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003182:	034b      	lsls	r3, r1, #13
 8003184:	0b5b      	lsrs	r3, r3, #13
 8003186:	62ab      	str	r3, [r5, #40]	; 0x28
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8003188:	4b11      	ldr	r3, [pc, #68]	; (80031d0 <R1_Init+0x1ec>)
 800318a:	6819      	ldr	r1, [r3, #0]
 800318c:	430a      	orrs	r2, r1
 800318e:	601a      	str	r2, [r3, #0]
  pHandle->ADCRegularLocked=false; /* We allow ADC usage for regular conversion on Systick */
 8003190:	2200      	movs	r2, #0
 8003192:	9b02      	ldr	r3, [sp, #8]
 8003194:	33ca      	adds	r3, #202	; 0xca
 8003196:	701a      	strb	r2, [r3, #0]
  pHandle->_Super.DTTest = 0u;
 8003198:	9b02      	ldr	r3, [sp, #8]
 800319a:	3370      	adds	r3, #112	; 0x70
 800319c:	801a      	strh	r2, [r3, #0]
}
 800319e:	b007      	add	sp, #28
 80031a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031a2:	46c0      	nop			; (mov r8, r8)
 80031a4:	40021000 	.word	0x40021000
 80031a8:	40015800 	.word	0x40015800
 80031ac:	ffff800f 	.word	0xffff800f
 80031b0:	00000555 	.word	0x00000555
 80031b4:	0800647b 	.word	0x0800647b
 80031b8:	000035b0 	.word	0x000035b0
 80031bc:	ffffe0e0 	.word	0xffffe0e0
 80031c0:	0000020d 	.word	0x0000020d
 80031c4:	7fffffe8 	.word	0x7fffffe8
 80031c8:	40012400 	.word	0x40012400
 80031cc:	fffff23f 	.word	0xfffff23f
 80031d0:	40012c00 	.word	0x40012c00

080031d4 <R1_SetOffsetCalib>:
  pHandle->PhaseOffset = offsets->phaseAOffset;
 80031d4:	0003      	movs	r3, r0
 80031d6:	680a      	ldr	r2, [r1, #0]
 80031d8:	33a0      	adds	r3, #160	; 0xa0
 80031da:	601a      	str	r2, [r3, #0]
  pHdl->offsetCalibStatus = true;
 80031dc:	2301      	movs	r3, #1
 80031de:	3081      	adds	r0, #129	; 0x81
 80031e0:	7003      	strb	r3, [r0, #0]
}
 80031e2:	4770      	bx	lr

080031e4 <R1_GetOffsetCalib>:
  offsets->phaseAOffset = pHandle->PhaseOffset;
 80031e4:	30a0      	adds	r0, #160	; 0xa0
 80031e6:	6803      	ldr	r3, [r0, #0]
 80031e8:	600b      	str	r3, [r1, #0]
}
 80031ea:	4770      	bx	lr

080031ec <R1_TurnOnLowSides>:
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80031ec:	0003      	movs	r3, r0
{
 80031ee:	b510      	push	{r4, lr}
  pHandle->_Super.TurnOnLowSidesAction = true;
 80031f0:	0004      	movs	r4, r0
 80031f2:	2201      	movs	r2, #1
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80031f4:	33cc      	adds	r3, #204	; 0xcc
 80031f6:	681b      	ldr	r3, [r3, #0]
  pHandle->_Super.TurnOnLowSidesAction = true;
 80031f8:	347e      	adds	r4, #126	; 0x7e
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80031fa:	685b      	ldr	r3, [r3, #4]
  pHandle->_Super.TurnOnLowSidesAction = true;
 80031fc:	7022      	strb	r2, [r4, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80031fe:	6359      	str	r1, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8003200:	6399      	str	r1, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8003202:	63d9      	str	r1, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003204:	2102      	movs	r1, #2
 8003206:	4249      	negs	r1, r1
 8003208:	6119      	str	r1, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800320a:	6919      	ldr	r1, [r3, #16]
 800320c:	4211      	tst	r1, r2
 800320e:	d0fc      	beq.n	800320a <R1_TurnOnLowSides+0x1e>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8003210:	2280      	movs	r2, #128	; 0x80
 8003212:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003214:	0212      	lsls	r2, r2, #8
 8003216:	430a      	orrs	r2, r1
 8003218:	645a      	str	r2, [r3, #68]	; 0x44
  if ((pHandle->_Super.LowSideOutputs) == ES_GPIO)
 800321a:	0003      	movs	r3, r0
 800321c:	337d      	adds	r3, #125	; 0x7d
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	2b02      	cmp	r3, #2
 8003222:	d10d      	bne.n	8003240 <R1_TurnOnLowSides+0x54>
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 8003224:	0002      	movs	r2, r0
 8003226:	3248      	adds	r2, #72	; 0x48
 8003228:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800322a:	8812      	ldrh	r2, [r2, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800322c:	619a      	str	r2, [r3, #24]
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800322e:	0002      	movs	r2, r0
 8003230:	324a      	adds	r2, #74	; 0x4a
 8003232:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003234:	8812      	ldrh	r2, [r2, #0]
 8003236:	619a      	str	r2, [r3, #24]
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8003238:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800323a:	304c      	adds	r0, #76	; 0x4c
 800323c:	8802      	ldrh	r2, [r0, #0]
 800323e:	619a      	str	r2, [r3, #24]
}
 8003240:	bd10      	pop	{r4, pc}
	...

08003244 <R1_SwitchOnPWM>:
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8003244:	234c      	movs	r3, #76	; 0x4c
 8003246:	469c      	mov	ip, r3
 8003248:	0003      	movs	r3, r0
{
 800324a:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800324c:	33cc      	adds	r3, #204	; 0xcc
 800324e:	681b      	ldr	r3, [r3, #0]
{
 8003250:	b089      	sub	sp, #36	; 0x24
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8003252:	9300      	str	r3, [sp, #0]
  ADC_TypeDef *ADCx = pHandle->pParams_str->ADCx;
 8003254:	cb18      	ldmia	r3, {r3, r4}
 8003256:	9307      	str	r3, [sp, #28]
  DMA_TypeDef *DMAx = pHandle->pParams_str->DMAx;
 8003258:	9b00      	ldr	r3, [sp, #0]
{
 800325a:	0007      	movs	r7, r0
  DMA_TypeDef *DMAx = pHandle->pParams_str->DMAx;
 800325c:	689d      	ldr	r5, [r3, #8]
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 800325e:	0003      	movs	r3, r0
 8003260:	33b8      	adds	r3, #184	; 0xb8
 8003262:	8819      	ldrh	r1, [r3, #0]
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8003264:	4484      	add	ip, r0
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8003266:	9b00      	ldr	r3, [sp, #0]
 8003268:	9800      	ldr	r0, [sp, #0]
 800326a:	8c1b      	ldrh	r3, [r3, #32]
 800326c:	8bc0      	ldrh	r0, [r0, #30]
 800326e:	084a      	lsrs	r2, r1, #1
 8003270:	181b      	adds	r3, r3, r0
 8003272:	b29b      	uxth	r3, r3
 8003274:	1ad0      	subs	r0, r2, r3
 8003276:	b280      	uxth	r0, r0
 8003278:	9002      	str	r0, [sp, #8]
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 800327a:	0038      	movs	r0, r7
 800327c:	9e02      	ldr	r6, [sp, #8]
                   + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 800327e:	18d3      	adds	r3, r2, r3
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8003280:	30ba      	adds	r0, #186	; 0xba
                   + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8003282:	b29b      	uxth	r3, r3
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8003284:	8006      	strh	r6, [r0, #0]
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8003286:	8043      	strh	r3, [r0, #2]
  pHandle->_Super.TurnOnLowSidesAction = false;
 8003288:	2600      	movs	r6, #0
 800328a:	383c      	subs	r0, #60	; 0x3c
  pHandle->DmaBuffCCR_ADCTrig[0] = pHandle->CntSmp2;
 800328c:	8603      	strh	r3, [r0, #48]	; 0x30
  pHandle->DmaBuffCCR_ADCTrig[2] = pHandle->CntSmp1;
 800328e:	003b      	movs	r3, r7
  pHandle->_Super.TurnOnLowSidesAction = false;
 8003290:	7006      	strb	r6, [r0, #0]
  pHandle->DmaBuffCCR_ADCTrig[2] = pHandle->CntSmp1;
 8003292:	9802      	ldr	r0, [sp, #8]
 8003294:	33b2      	adds	r3, #178	; 0xb2
 8003296:	8018      	strh	r0, [r3, #0]
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t)(pHandle->Half_PWMPeriod + 1));
 8003298:	1c4b      	adds	r3, r1, #1
  WRITE_REG(TIMx->CCR4, CompareValue);
 800329a:	6423      	str	r3, [r4, #64]	; 0x40
 800329c:	9303      	str	r3, [sp, #12]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800329e:	2380      	movs	r3, #128	; 0x80
  WRITE_REG(TIMx->CCR1, CompareValue);
 80032a0:	6362      	str	r2, [r4, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80032a2:	63a2      	str	r2, [r4, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80032a4:	63e2      	str	r2, [r4, #60]	; 0x3c
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80032a6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80032a8:	021b      	lsls	r3, r3, #8
 80032aa:	4313      	orrs	r3, r2
 80032ac:	6463      	str	r3, [r4, #68]	; 0x44
  if ((pHandle->_Super.LowSideOutputs) == ES_GPIO)
 80032ae:	003b      	movs	r3, r7
 80032b0:	337d      	adds	r3, #125	; 0x7d
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d11c      	bne.n	80032f2 <R1_SwitchOnPWM+0xae>
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0u)
 80032b8:	6a23      	ldr	r3, [r4, #32]
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 80032ba:	4662      	mov	r2, ip
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0u)
 80032bc:	9306      	str	r3, [sp, #24]
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 80032be:	003b      	movs	r3, r7
 80032c0:	3348      	adds	r3, #72	; 0x48
 80032c2:	881b      	ldrh	r3, [r3, #0]
 80032c4:	6bfe      	ldr	r6, [r7, #60]	; 0x3c
 80032c6:	9305      	str	r3, [sp, #20]
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 80032c8:	003b      	movs	r3, r7
 80032ca:	334a      	adds	r3, #74	; 0x4a
 80032cc:	8818      	ldrh	r0, [r3, #0]
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 80032ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 80032d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 80032d2:	9301      	str	r3, [sp, #4]
 80032d4:	8813      	ldrh	r3, [r2, #0]
 80032d6:	9304      	str	r3, [sp, #16]
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0u)
 80032d8:	4b5f      	ldr	r3, [pc, #380]	; (8003458 <R1_SwitchOnPWM+0x214>)
 80032da:	469c      	mov	ip, r3
 80032dc:	4662      	mov	r2, ip
 80032de:	9b06      	ldr	r3, [sp, #24]
 80032e0:	4213      	tst	r3, r2
 80032e2:	d100      	bne.n	80032e6 <R1_SwitchOnPWM+0xa2>
 80032e4:	e0a9      	b.n	800343a <R1_SwitchOnPWM+0x1f6>
 80032e6:	9b05      	ldr	r3, [sp, #20]
 80032e8:	9a04      	ldr	r2, [sp, #16]
 80032ea:	61b3      	str	r3, [r6, #24]
 80032ec:	9b01      	ldr	r3, [sp, #4]
 80032ee:	6188      	str	r0, [r1, #24]
 80032f0:	619a      	str	r2, [r3, #24]
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 80032f2:	2310      	movs	r3, #16
 80032f4:	6822      	ldr	r2, [r4, #0]
  if (LL_TIM_COUNTERDIRECTION_UP == LL_TIM_GetDirection(TIMx))
 80032f6:	421a      	tst	r2, r3
 80032f8:	d000      	beq.n	80032fc <R1_SwitchOnPWM+0xb8>
 80032fa:	e0a5      	b.n	8003448 <R1_SwitchOnPWM+0x204>
 80032fc:	6822      	ldr	r2, [r4, #0]
    while (LL_TIM_COUNTERDIRECTION_UP == LL_TIM_GetDirection(TIMx))
 80032fe:	421a      	tst	r2, r3
 8003300:	d0fc      	beq.n	80032fc <R1_SwitchOnPWM+0xb8>
  LL_DMA_ClearFlag_TC(DMAx, pHandle->pParams_str->DMAChannelX);
 8003302:	9b00      	ldr	r3, [sp, #0]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	9301      	str	r3, [sp, #4]
/* Make this define visible for all projects */
#define NBR_OF_MOTORS             1

__STATIC_INLINE void LL_DMA_ClearFlag_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  if (NULL == DMAx)
 8003308:	2d00      	cmp	r5, #0
 800330a:	d007      	beq.n	800331c <R1_SwitchOnPWM+0xd8>
    /* Nothing to do */
  }
  else
  {
    /* Clear TC bits with bits position depending on parameter "Channel" */
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 800330c:	2202      	movs	r2, #2
 800330e:	3b01      	subs	r3, #1
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	409a      	lsls	r2, r3
 8003314:	606a      	str	r2, [r5, #4]
    /* Nothing to do */
  }
  else
  {
    /* Clear HT bits with bits position depending on parameter "Channel" */
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CHTIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 8003316:	2204      	movs	r2, #4
 8003318:	409a      	lsls	r2, r3
 800331a:	606a      	str	r2, [r5, #4]
  LL_DMA_ClearFlag_TC(DMAx, pHandle->pParams_str->DMASamplingPtChannelX);
 800331c:	9b00      	ldr	r3, [sp, #0]
 800331e:	691e      	ldr	r6, [r3, #16]
  if (NULL == DMAx)
 8003320:	2d00      	cmp	r5, #0
 8003322:	d007      	beq.n	8003334 <R1_SwitchOnPWM+0xf0>
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 8003324:	2202      	movs	r2, #2
 8003326:	1e73      	subs	r3, r6, #1
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	409a      	lsls	r2, r3
 800332c:	606a      	str	r2, [r5, #4]
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CHTIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 800332e:	2204      	movs	r2, #4
 8003330:	409a      	lsls	r2, r3
 8003332:	606a      	str	r2, [r5, #4]
  pHandle->TCCnt = 0;
 8003334:	003a      	movs	r2, r7
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003336:	2302      	movs	r3, #2
  pHandle->TCDoneFlag = false;
 8003338:	0039      	movs	r1, r7
 800333a:	425b      	negs	r3, r3
  pHandle->TCCnt = 0;
 800333c:	32c6      	adds	r2, #198	; 0xc6
 800333e:	6123      	str	r3, [r4, #16]
 8003340:	0013      	movs	r3, r2
 8003342:	2200      	movs	r2, #0
  pHandle->TCDoneFlag = false;
 8003344:	31c9      	adds	r1, #201	; 0xc9
  pHandle->TCCnt = 0;
 8003346:	701a      	strb	r2, [r3, #0]
  LL_DMA_SetDataLength(DMAx, pHandle->pParams_str->DMAChannelX, DMA_TRANSFER_LENGTH_CCR);
 8003348:	0028      	movs	r0, r5
  pHandle->TCDoneFlag = false;
 800334a:	700a      	strb	r2, [r1, #0]
  LL_DMA_SetDataLength(DMAx, pHandle->pParams_str->DMAChannelX, DMA_TRANSFER_LENGTH_CCR);
 800334c:	3206      	adds	r2, #6
 800334e:	9901      	ldr	r1, [sp, #4]
 8003350:	f7ff fae6 	bl	8002920 <LL_DMA_SetDataLength>
  LL_DMA_EnableChannel(DMAx, pHandle->pParams_str->DMAChannelX);
 8003354:	0028      	movs	r0, r5
 8003356:	9901      	ldr	r1, [sp, #4]
 8003358:	f7ff faca 	bl	80028f0 <LL_DMA_EnableChannel>
  SET_BIT(TIMx->DIER, TIM_DIER_UDE);
 800335c:	2380      	movs	r3, #128	; 0x80
 800335e:	68e2      	ldr	r2, [r4, #12]
 8003360:	005b      	lsls	r3, r3, #1
 8003362:	4313      	orrs	r3, r2
 8003364:	60e3      	str	r3, [r4, #12]
  SET_BIT(TIMx->DIER, TIM_DIER_CC4DE);
 8003366:	2380      	movs	r3, #128	; 0x80
 8003368:	68e2      	ldr	r2, [r4, #12]
 800336a:	015b      	lsls	r3, r3, #5
 800336c:	4313      	orrs	r3, r2
 800336e:	60e3      	str	r3, [r4, #12]
  LL_DMA_SetDataLength(DMAx, pHandle->pParams_str->DMASamplingPtChannelX, 3);
 8003370:	2203      	movs	r2, #3
 8003372:	0031      	movs	r1, r6
 8003374:	0028      	movs	r0, r5
 8003376:	f7ff fad3 	bl	8002920 <LL_DMA_SetDataLength>
  LL_DMA_EnableChannel(DMAx, pHandle->pParams_str->DMASamplingPtChannelX);
 800337a:	0031      	movs	r1, r6
 800337c:	0028      	movs	r0, r5
 800337e:	f7ff fab7 	bl	80028f0 <LL_DMA_EnableChannel>
  WRITE_REG(TIMx->CCR4, CompareValue);
 8003382:	9903      	ldr	r1, [sp, #12]
  LL_DMA_DisableChannel(DMAx, pHandle->pParams_str->DMA_ADC_DR_ChannelX);
 8003384:	0028      	movs	r0, r5
 8003386:	6421      	str	r1, [r4, #64]	; 0x40
 8003388:	9900      	ldr	r1, [sp, #0]
 800338a:	698e      	ldr	r6, [r1, #24]
 800338c:	0031      	movs	r1, r6
 800338e:	f7ff fabb 	bl	8002908 <LL_DMA_DisableChannel>
  LL_DMA_SetDataLength(DMAx, pHandle->pParams_str->DMA_ADC_DR_ChannelX, DMA_TRANSFER_LENGTH_ADC);
 8003392:	2202      	movs	r2, #2
 8003394:	0031      	movs	r1, r6
 8003396:	0028      	movs	r0, r5
 8003398:	f7ff fac2 	bl	8002920 <LL_DMA_SetDataLength>
  LL_DMA_EnableChannel(DMAx, pHandle->pParams_str->DMA_ADC_DR_ChannelX);
 800339c:	0031      	movs	r1, r6
 800339e:	0028      	movs	r0, r5
 80033a0:	f7ff faa6 	bl	80028f0 <LL_DMA_EnableChannel>
  LL_ADC_REG_SetSequencerChannels (ADCx, __LL_ADC_DECIMAL_NB_TO_CHANNEL (pHandle->pParams_str->IChannel));
 80033a4:	9900      	ldr	r1, [sp, #0]
  LL_ADC_SetSamplingTimeCommonChannels (ADC1, pHandle->pParams_str->ISamplingTime);
 80033a6:	9800      	ldr	r0, [sp, #0]
  LL_ADC_REG_SetSequencerChannels (ADCx, __LL_ADC_DECIMAL_NB_TO_CHANNEL (pHandle->pParams_str->IChannel));
 80033a8:	1ccb      	adds	r3, r1, #3
 80033aa:	2101      	movs	r1, #1
 80033ac:	7fdb      	ldrb	r3, [r3, #31]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 80033ae:	4a2b      	ldr	r2, [pc, #172]	; (800345c <R1_SwitchOnPWM+0x218>)
 80033b0:	4099      	lsls	r1, r3
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80033b2:	034b      	lsls	r3, r1, #13
 80033b4:	9907      	ldr	r1, [sp, #28]
 80033b6:	0b5b      	lsrs	r3, r3, #13
 80033b8:	628b      	str	r3, [r1, #40]	; 0x28
  LL_ADC_SetSamplingTimeCommonChannels (ADC1, pHandle->pParams_str->ISamplingTime);
 80033ba:	1d03      	adds	r3, r0, #4
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 80033bc:	2007      	movs	r0, #7
 80033be:	6951      	ldr	r1, [r2, #20]
 80033c0:	7fdb      	ldrb	r3, [r3, #31]
 80033c2:	4381      	bics	r1, r0
 80033c4:	430b      	orrs	r3, r1
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 80033c6:	2103      	movs	r1, #3
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 80033c8:	6153      	str	r3, [r2, #20]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 80033ca:	68d3      	ldr	r3, [r2, #12]
 80033cc:	3806      	subs	r0, #6
 80033ce:	438b      	bics	r3, r1
 80033d0:	4303      	orrs	r3, r0
 80033d2:	60d3      	str	r3, [r2, #12]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 80033d4:	68d1      	ldr	r1, [r2, #12]
 80033d6:	4b22      	ldr	r3, [pc, #136]	; (8003460 <R1_SwitchOnPWM+0x21c>)
 80033d8:	4019      	ands	r1, r3
 80033da:	2388      	movs	r3, #136	; 0x88
 80033dc:	00db      	lsls	r3, r3, #3
 80033de:	430b      	orrs	r3, r1
 80033e0:	60d3      	str	r3, [r2, #12]
  MODIFY_REG(ADCx->CR,
 80033e2:	6891      	ldr	r1, [r2, #8]
 80033e4:	4b1f      	ldr	r3, [pc, #124]	; (8003464 <R1_SwitchOnPWM+0x220>)
 80033e6:	4019      	ands	r1, r3
 80033e8:	2304      	movs	r3, #4
 80033ea:	430b      	orrs	r3, r1
 80033ec:	6093      	str	r3, [r2, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80033ee:	2270      	movs	r2, #112	; 0x70
 80033f0:	6863      	ldr	r3, [r4, #4]
  pHandle->FOCDurationFlag = false;
 80033f2:	0039      	movs	r1, r7
 80033f4:	4313      	orrs	r3, r2
 80033f6:	2200      	movs	r2, #0
 80033f8:	31c8      	adds	r1, #200	; 0xc8
  pHandle->ADCRegularLocked=true;
 80033fa:	37ca      	adds	r7, #202	; 0xca
 80033fc:	6063      	str	r3, [r4, #4]
  pHandle->FOCDurationFlag = false;
 80033fe:	700a      	strb	r2, [r1, #0]
  LL_DMA_EnableIT_TC(DMAx, pHandle->pParams_str->DMAChannelX);
 8003400:	9901      	ldr	r1, [sp, #4]
  pHandle->ADCRegularLocked=true;
 8003402:	7038      	strb	r0, [r7, #0]
  LL_DMA_EnableIT_TC(DMAx, pHandle->pParams_str->DMAChannelX);
 8003404:	0028      	movs	r0, r5
 8003406:	f7ff fa99 	bl	800293c <LL_DMA_EnableIT_TC>
  LL_DMA_EnableIT_TC(DMAx, pHandle->pParams_str->DMA_ADC_DR_ChannelX);
 800340a:	0031      	movs	r1, r6
 800340c:	0028      	movs	r0, r5
 800340e:	f7ff fa95 	bl	800293c <LL_DMA_EnableIT_TC>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003412:	2302      	movs	r3, #2
 8003414:	425b      	negs	r3, r3
 8003416:	6123      	str	r3, [r4, #16]
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8003418:	3312      	adds	r3, #18
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800341a:	2101      	movs	r1, #1
 800341c:	6922      	ldr	r2, [r4, #16]
 800341e:	420a      	tst	r2, r1
 8003420:	d0fb      	beq.n	800341a <R1_SwitchOnPWM+0x1d6>
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8003422:	6822      	ldr	r2, [r4, #0]
  while ((LL_TIM_IsActiveFlag_UPDATE(TIMx) == RESET) || (LL_TIM_GetDirection(TIMx) == LL_TIM_COUNTERDIRECTION_DOWN))
 8003424:	421a      	tst	r2, r3
 8003426:	d1f8      	bne.n	800341a <R1_SwitchOnPWM+0x1d6>
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8003428:	000f      	movs	r7, r1
 800342a:	4b0f      	ldr	r3, [pc, #60]	; (8003468 <R1_SwitchOnPWM+0x224>)
 800342c:	68da      	ldr	r2, [r3, #12]
 800342e:	4317      	orrs	r7, r2
 8003430:	60df      	str	r7, [r3, #12]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8003432:	9b02      	ldr	r3, [sp, #8]
 8003434:	6423      	str	r3, [r4, #64]	; 0x40
}
 8003436:	b009      	add	sp, #36	; 0x24
 8003438:	bdf0      	pop	{r4, r5, r6, r7, pc}
  WRITE_REG(GPIOx->BRR, PinMask);
 800343a:	9b05      	ldr	r3, [sp, #20]
 800343c:	9a04      	ldr	r2, [sp, #16]
 800343e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003440:	9b01      	ldr	r3, [sp, #4]
 8003442:	6288      	str	r0, [r1, #40]	; 0x28
 8003444:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003446:	e754      	b.n	80032f2 <R1_SwitchOnPWM+0xae>
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8003448:	6822      	ldr	r2, [r4, #0]
    while (LL_TIM_COUNTERDIRECTION_DOWN == LL_TIM_GetDirection(TIMx))
 800344a:	421a      	tst	r2, r3
 800344c:	d1fc      	bne.n	8003448 <R1_SwitchOnPWM+0x204>
 800344e:	2310      	movs	r3, #16
 8003450:	6822      	ldr	r2, [r4, #0]
    while (LL_TIM_COUNTERDIRECTION_UP == LL_TIM_GetDirection(TIMx))
 8003452:	421a      	tst	r2, r3
 8003454:	d0fc      	beq.n	8003450 <R1_SwitchOnPWM+0x20c>
 8003456:	e754      	b.n	8003302 <R1_SwitchOnPWM+0xbe>
 8003458:	00000555 	.word	0x00000555
 800345c:	40012400 	.word	0x40012400
 8003460:	fffff23f 	.word	0xfffff23f
 8003464:	7fffffe8 	.word	0x7fffffe8
 8003468:	40012c00 	.word	0x40012c00

0800346c <R1_SwitchOffPWM>:
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800346c:	0003      	movs	r3, r0
{
 800346e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003470:	0004      	movs	r4, r0
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8003472:	33cc      	adds	r3, #204	; 0xcc
 8003474:	681f      	ldr	r7, [r3, #0]
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8003476:	3b14      	subs	r3, #20
 8003478:	881b      	ldrh	r3, [r3, #0]
{
 800347a:	b085      	sub	sp, #20
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 800347c:	9300      	str	r3, [sp, #0]
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 800347e:	8bf9      	ldrh	r1, [r7, #30]
 8003480:	085a      	lsrs	r2, r3, #1
 8003482:	8c3b      	ldrh	r3, [r7, #32]
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8003484:	687d      	ldr	r5, [r7, #4]
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8003486:	185b      	adds	r3, r3, r1
 8003488:	b29b      	uxth	r3, r3
 800348a:	1ad1      	subs	r1, r2, r3
                   + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 800348c:	18d2      	adds	r2, r2, r3
 800348e:	b293      	uxth	r3, r2
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8003490:	b289      	uxth	r1, r1
 8003492:	9101      	str	r1, [sp, #4]
                   + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8003494:	9302      	str	r3, [sp, #8]
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8003496:	0001      	movs	r1, r0
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8003498:	0023      	movs	r3, r4
 800349a:	9a02      	ldr	r2, [sp, #8]
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 800349c:	9801      	ldr	r0, [sp, #4]
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 800349e:	33bc      	adds	r3, #188	; 0xbc
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 80034a0:	31ba      	adds	r1, #186	; 0xba
  DMA_TypeDef *DMAx = pHandle->pParams_str->DMAx;
 80034a2:	68be      	ldr	r6, [r7, #8]
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 80034a4:	8008      	strh	r0, [r1, #0]
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 80034a6:	801a      	strh	r2, [r3, #0]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 80034a8:	2201      	movs	r2, #1
 80034aa:	68eb      	ldr	r3, [r5, #12]
 80034ac:	4393      	bics	r3, r2
 80034ae:	60eb      	str	r3, [r5, #12]
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 80034b0:	2310      	movs	r3, #16
 80034b2:	682a      	ldr	r2, [r5, #0]
  if (LL_TIM_COUNTERDIRECTION_UP == LL_TIM_GetDirection(TIMx))
 80034b4:	421a      	tst	r2, r3
 80034b6:	d000      	beq.n	80034ba <R1_SwitchOffPWM+0x4e>
 80034b8:	e076      	b.n	80035a8 <R1_SwitchOffPWM+0x13c>
 80034ba:	682a      	ldr	r2, [r5, #0]
    while (LL_TIM_COUNTERDIRECTION_UP == LL_TIM_GetDirection(TIMx))
 80034bc:	421a      	tst	r2, r3
 80034be:	d0fc      	beq.n	80034ba <R1_SwitchOffPWM+0x4e>
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 80034c0:	2102      	movs	r1, #2
  LL_DMA_DisableIT_TC(DMAx, pHandle->pParams_str->DMAChannelX);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	9303      	str	r3, [sp, #12]
 80034c6:	9a03      	ldr	r2, [sp, #12]
 80034c8:	4b3b      	ldr	r3, [pc, #236]	; (80035b8 <R1_SwitchOffPWM+0x14c>)
 80034ca:	189b      	adds	r3, r3, r2
 80034cc:	3b01      	subs	r3, #1
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	18f3      	adds	r3, r6, r3
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	438a      	bics	r2, r1
 80034d6:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_HTIE);
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	1849      	adds	r1, r1, r1
 80034dc:	438a      	bics	r2, r1
 80034de:	601a      	str	r2, [r3, #0]
  pHandle->_Super.TurnOnLowSidesAction = false;
 80034e0:	0023      	movs	r3, r4
 80034e2:	2200      	movs	r2, #0
 80034e4:	337e      	adds	r3, #126	; 0x7e
 80034e6:	701a      	strb	r2, [r3, #0]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80034e8:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80034ea:	4a34      	ldr	r2, [pc, #208]	; (80035bc <R1_SwitchOffPWM+0x150>)
 80034ec:	4013      	ands	r3, r2
 80034ee:	646b      	str	r3, [r5, #68]	; 0x44
  if (pHandle->_Super.BrakeActionLock == true)
 80034f0:	0023      	movs	r3, r4
 80034f2:	3385      	adds	r3, #133	; 0x85
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d113      	bne.n	8003522 <R1_SwitchOffPWM+0xb6>
    if ((pHandle->_Super.LowSideOutputs) == ES_GPIO)
 80034fa:	0023      	movs	r3, r4
 80034fc:	337d      	adds	r3, #125	; 0x7d
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	2b02      	cmp	r3, #2
 8003502:	d10e      	bne.n	8003522 <R1_SwitchOffPWM+0xb6>
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 8003504:	0022      	movs	r2, r4
 8003506:	3248      	adds	r2, #72	; 0x48
 8003508:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800350a:	8812      	ldrh	r2, [r2, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800350c:	629a      	str	r2, [r3, #40]	; 0x28
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800350e:	0022      	movs	r2, r4
 8003510:	324a      	adds	r2, #74	; 0x4a
 8003512:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003514:	8812      	ldrh	r2, [r2, #0]
 8003516:	629a      	str	r2, [r3, #40]	; 0x28
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8003518:	0022      	movs	r2, r4
 800351a:	324c      	adds	r2, #76	; 0x4c
 800351c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800351e:	8812      	ldrh	r2, [r2, #0]
 8003520:	629a      	str	r2, [r3, #40]	; 0x28
  LL_DMA_DisableChannel(DMAx, pHandle->pParams_str->DMA_ADC_DR_ChannelX);
 8003522:	0030      	movs	r0, r6
 8003524:	69b9      	ldr	r1, [r7, #24]
 8003526:	f7ff f9ef 	bl	8002908 <LL_DMA_DisableChannel>
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF1);
 800352a:	2301      	movs	r3, #1
 800352c:	6073      	str	r3, [r6, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 800352e:	18db      	adds	r3, r3, r3
 8003530:	6073      	str	r3, [r6, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF1);
 8003532:	3302      	adds	r3, #2
  LL_DMA_DisableChannel(DMAx, pHandle->pParams_str->DMAChannelX);
 8003534:	0030      	movs	r0, r6
 8003536:	9903      	ldr	r1, [sp, #12]
 8003538:	6073      	str	r3, [r6, #4]
 800353a:	f7ff f9e5 	bl	8002908 <LL_DMA_DisableChannel>
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UDE);
 800353e:	68eb      	ldr	r3, [r5, #12]
 8003540:	4a1f      	ldr	r2, [pc, #124]	; (80035c0 <R1_SwitchOffPWM+0x154>)
  LL_DMA_DisableChannel(DMAx, pHandle->pParams_str->DMASamplingPtChannelX);
 8003542:	6939      	ldr	r1, [r7, #16]
 8003544:	4013      	ands	r3, r2
 8003546:	60eb      	str	r3, [r5, #12]
 8003548:	0030      	movs	r0, r6
 800354a:	f7ff f9dd 	bl	8002908 <LL_DMA_DisableChannel>
  CLEAR_BIT(TIMx->DIER, TIM_DIER_CC4DE);
 800354e:	68eb      	ldr	r3, [r5, #12]
 8003550:	4a1c      	ldr	r2, [pc, #112]	; (80035c4 <R1_SwitchOffPWM+0x158>)
  if (LL_ADC_REG_IsConversionOngoing (ADC1))
 8003552:	2104      	movs	r1, #4
 8003554:	4013      	ands	r3, r2
 8003556:	60eb      	str	r3, [r5, #12]
  pHandle->DmaBuffCCR_ADCTrig[0] = pHandle->CntSmp2;
 8003558:	0023      	movs	r3, r4
 800355a:	9a02      	ldr	r2, [sp, #8]
 800355c:	33ae      	adds	r3, #174	; 0xae
 800355e:	801a      	strh	r2, [r3, #0]
  pHandle->DmaBuffCCR_ADCTrig[2] = pHandle->CntSmp1;
 8003560:	9a01      	ldr	r2, [sp, #4]
 8003562:	809a      	strh	r2, [r3, #4]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8003564:	2270      	movs	r2, #112	; 0x70
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t)(pHandle->Half_PWMPeriod + 1));
 8003566:	9b00      	ldr	r3, [sp, #0]
 8003568:	3301      	adds	r3, #1
  WRITE_REG(TIMx->CCR4, CompareValue);
 800356a:	642b      	str	r3, [r5, #64]	; 0x40
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800356c:	686b      	ldr	r3, [r5, #4]
 800356e:	4393      	bics	r3, r2
 8003570:	606b      	str	r3, [r5, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 8003572:	4b15      	ldr	r3, [pc, #84]	; (80035c8 <R1_SwitchOffPWM+0x15c>)
 8003574:	689a      	ldr	r2, [r3, #8]
  if (LL_ADC_REG_IsConversionOngoing (ADC1))
 8003576:	420a      	tst	r2, r1
 8003578:	d009      	beq.n	800358e <R1_SwitchOffPWM+0x122>
  MODIFY_REG(ADCx->CR,
 800357a:	6899      	ldr	r1, [r3, #8]
 800357c:	4a13      	ldr	r2, [pc, #76]	; (80035cc <R1_SwitchOffPWM+0x160>)
 800357e:	4011      	ands	r1, r2
 8003580:	2210      	movs	r2, #16
 8003582:	430a      	orrs	r2, r1
 8003584:	609a      	str	r2, [r3, #8]
    while (LL_ADC_REG_IsConversionOngoing(ADC1))
 8003586:	2104      	movs	r1, #4
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 8003588:	689a      	ldr	r2, [r3, #8]
 800358a:	420a      	tst	r2, r1
 800358c:	d1fb      	bne.n	8003586 <R1_SwitchOffPWM+0x11a>
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 800358e:	68da      	ldr	r2, [r3, #12]
 8003590:	490f      	ldr	r1, [pc, #60]	; (80035d0 <R1_SwitchOffPWM+0x164>)
  R1_1ShuntMotorVarsInit(&pHandle->_Super);
 8003592:	0020      	movs	r0, r4
 8003594:	400a      	ands	r2, r1
 8003596:	60da      	str	r2, [r3, #12]
  pHandle->ADCRegularLocked=false;
 8003598:	0023      	movs	r3, r4
 800359a:	2200      	movs	r2, #0
 800359c:	33ca      	adds	r3, #202	; 0xca
 800359e:	701a      	strb	r2, [r3, #0]
  R1_1ShuntMotorVarsInit(&pHandle->_Super);
 80035a0:	f7ff f9d8 	bl	8002954 <R1_1ShuntMotorVarsInit>
}
 80035a4:	b005      	add	sp, #20
 80035a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 80035a8:	682a      	ldr	r2, [r5, #0]
    while (LL_TIM_COUNTERDIRECTION_DOWN == LL_TIM_GetDirection(TIMx))
 80035aa:	421a      	tst	r2, r3
 80035ac:	d1fc      	bne.n	80035a8 <R1_SwitchOffPWM+0x13c>
 80035ae:	2310      	movs	r3, #16
 80035b0:	682a      	ldr	r2, [r5, #0]
    while (LL_TIM_COUNTERDIRECTION_UP == LL_TIM_GetDirection(TIMx))
 80035b2:	421a      	tst	r2, r3
 80035b4:	d0fc      	beq.n	80035b0 <R1_SwitchOffPWM+0x144>
 80035b6:	e783      	b.n	80034c0 <R1_SwitchOffPWM+0x54>
 80035b8:	0800647b 	.word	0x0800647b
 80035bc:	ffff7fff 	.word	0xffff7fff
 80035c0:	fffffeff 	.word	0xfffffeff
 80035c4:	ffffefff 	.word	0xffffefff
 80035c8:	40012400 	.word	0x40012400
 80035cc:	7fffffe8 	.word	0x7fffffe8
 80035d0:	fffff23f 	.word	0xfffff23f

080035d4 <R1_CurrentReadingCalibration>:
{
 80035d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80035d6:	0006      	movs	r6, r0
 80035d8:	36cc      	adds	r6, #204	; 0xcc
 80035da:	6833      	ldr	r3, [r6, #0]
{
 80035dc:	0004      	movs	r4, r0
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80035de:	685d      	ldr	r5, [r3, #4]
  if (false == pHandle->_Super.offsetCalibStatus)
 80035e0:	0003      	movs	r3, r0
 80035e2:	3381      	adds	r3, #129	; 0x81
 80035e4:	9300      	str	r3, [sp, #0]
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d129      	bne.n	8003640 <R1_CurrentReadingCalibration+0x6c>
    pHandle->PhaseOffset = 0u;
 80035ec:	0007      	movs	r7, r0
    pHandle->Index = 0u;
 80035ee:	0002      	movs	r2, r0
    pHandle->PhaseOffset = 0u;
 80035f0:	37a0      	adds	r7, #160	; 0xa0
    pHandle->Index = 0u;
 80035f2:	32c4      	adds	r2, #196	; 0xc4
    pHandle->PhaseOffset = 0u;
 80035f4:	603b      	str	r3, [r7, #0]
    pHandle->Index = 0u;
 80035f6:	7013      	strb	r3, [r2, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 80035f8:	6a2b      	ldr	r3, [r5, #32]
 80035fa:	9201      	str	r2, [sp, #4]
 80035fc:	4a14      	ldr	r2, [pc, #80]	; (8003650 <R1_CurrentReadingCalibration+0x7c>)
 80035fe:	4013      	ands	r3, r2
 8003600:	622b      	str	r3, [r5, #32]
    pHandle->_Super.pFctGetPhaseCurrents = &R1_HFCurrentsCalibration;
 8003602:	4b14      	ldr	r3, [pc, #80]	; (8003654 <R1_CurrentReadingCalibration+0x80>)
 8003604:	6003      	str	r3, [r0, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = &R1_SetADCSampPointPolarization;
 8003606:	4b14      	ldr	r3, [pc, #80]	; (8003658 <R1_CurrentReadingCalibration+0x84>)
 8003608:	6143      	str	r3, [r0, #20]
    R1_SwitchOnPWM(&pHandle->_Super);
 800360a:	f7ff fe1b 	bl	8003244 <R1_SwitchOnPWM>
            pHandle->pParams_str->RepetitionCounter,
 800360e:	6833      	ldr	r3, [r6, #0]
    waitForPolarizationEnd(TIMx,
 8003610:	3e76      	subs	r6, #118	; 0x76
            pHandle->pParams_str->RepetitionCounter,
 8003612:	3305      	adds	r3, #5
    waitForPolarizationEnd(TIMx,
 8003614:	7fda      	ldrb	r2, [r3, #31]
 8003616:	0031      	movs	r1, r6
 8003618:	9b01      	ldr	r3, [sp, #4]
 800361a:	0028      	movs	r0, r5
 800361c:	f002 fbd6 	bl	8005dcc <waitForPolarizationEnd>
    R1_SwitchOffPWM(&pHandle->_Super);
 8003620:	0020      	movs	r0, r4
 8003622:	f7ff ff23 	bl	800346c <R1_SwitchOffPWM>
    pHandle->PhaseOffset >>= 4u;
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	091b      	lsrs	r3, r3, #4
 800362a:	603b      	str	r3, [r7, #0]
    if (0U == pHandle->_Super.SWerror)
 800362c:	8833      	ldrh	r3, [r6, #0]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d102      	bne.n	8003638 <R1_CurrentReadingCalibration+0x64>
      pHandle->_Super.offsetCalibStatus = true;
 8003632:	9a00      	ldr	r2, [sp, #0]
 8003634:	3301      	adds	r3, #1
 8003636:	7013      	strb	r3, [r2, #0]
    pHandle->_Super.pFctGetPhaseCurrents = &R1_GetPhaseCurrents;
 8003638:	4b08      	ldr	r3, [pc, #32]	; (800365c <R1_CurrentReadingCalibration+0x88>)
 800363a:	6023      	str	r3, [r4, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = &R1_CalcDutyCycles;
 800363c:	4b08      	ldr	r3, [pc, #32]	; (8003660 <R1_CurrentReadingCalibration+0x8c>)
 800363e:	6163      	str	r3, [r4, #20]
  SET_BIT(TIMx->CCER, Channels);
 8003640:	6a2a      	ldr	r2, [r5, #32]
 8003642:	4b08      	ldr	r3, [pc, #32]	; (8003664 <R1_CurrentReadingCalibration+0x90>)
  R1_1ShuntMotorVarsInit(&pHandle->_Super);
 8003644:	0020      	movs	r0, r4
 8003646:	4313      	orrs	r3, r2
 8003648:	622b      	str	r3, [r5, #32]
 800364a:	f7ff f983 	bl	8002954 <R1_1ShuntMotorVarsInit>
}
 800364e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8003650:	fffffaaa 	.word	0xfffffaaa
 8003654:	08002c1d 	.word	0x08002c1d
 8003658:	08002c61 	.word	0x08002c61
 800365c:	080029c9 	.word	0x080029c9
 8003660:	08002cd5 	.word	0x08002cd5
 8003664:	00000555 	.word	0x00000555

08003668 <R1_TIM1_UP_IRQHandler>:
  * @param pHdl: handler of the current instance of the PWM component
  */
__weak void *R1_TIM1_UP_IRQHandler(PWMC_R1_Handle_t *pHandle)
{

  if (pHandle->TCDoneFlag ==true)
 8003668:	0003      	movs	r3, r0
 800366a:	33c9      	adds	r3, #201	; 0xc9
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00f      	beq.n	8003692 <R1_TIM1_UP_IRQHandler+0x2a>
  MODIFY_REG(ADCx->CR,
 8003672:	4909      	ldr	r1, [pc, #36]	; (8003698 <R1_TIM1_UP_IRQHandler+0x30>)
 8003674:	4b09      	ldr	r3, [pc, #36]	; (800369c <R1_TIM1_UP_IRQHandler+0x34>)
 8003676:	688a      	ldr	r2, [r1, #8]
 8003678:	401a      	ands	r2, r3
 800367a:	2304      	movs	r3, #4
 800367c:	4313      	orrs	r3, r2
 800367e:	608b      	str	r3, [r1, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8003680:	2170      	movs	r1, #112	; 0x70
 8003682:	4a07      	ldr	r2, [pc, #28]	; (80036a0 <R1_TIM1_UP_IRQHandler+0x38>)
 8003684:	6853      	ldr	r3, [r2, #4]
 8003686:	430b      	orrs	r3, r1
 8003688:	6053      	str	r3, [r2, #4]
  {
    LL_ADC_REG_StartConversion(ADC1);
    LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_OC4REF);
    pHandle->FOCDurationFlag = true;
 800368a:	0003      	movs	r3, r0
 800368c:	2201      	movs	r2, #1
 800368e:	33c8      	adds	r3, #200	; 0xc8
 8003690:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Nothing to do */
  }

  return (&(pHandle->_Super.Motor));
 8003692:	307a      	adds	r0, #122	; 0x7a
}
 8003694:	4770      	bx	lr
 8003696:	46c0      	nop			; (mov r8, r8)
 8003698:	40012400 	.word	0x40012400
 800369c:	7fffffe8 	.word	0x7fffffe8
 80036a0:	40012c00 	.word	0x40012c00

080036a4 <R1_DMAx_TC_IRQHandler>:
  *         Required only for R1 with rep rate > 1
  * @param pHdl: handler of the current instance of the PWM component
  */
__weak void *R1_DMAx_TC_IRQHandler(PWMC_R1_Handle_t *pHandle)
{
  DMA_TypeDef *DMAx = pHandle->pParams_str->DMAx;
 80036a4:	0003      	movs	r3, r0
 80036a6:	33cc      	adds	r3, #204	; 0xcc
 80036a8:	681a      	ldr	r2, [r3, #0]
{
 80036aa:	b510      	push	{r4, lr}
  DMA_TypeDef *DMAx = pHandle->pParams_str->DMAx;
 80036ac:	6894      	ldr	r4, [r2, #8]
  if (NULL == DMAx)
 80036ae:	2c00      	cmp	r4, #0
 80036b0:	d005      	beq.n	80036be <R1_DMAx_TC_IRQHandler+0x1a>
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CHTIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 80036b2:	2104      	movs	r1, #4
 80036b4:	68d3      	ldr	r3, [r2, #12]
 80036b6:	3b01      	subs	r3, #1
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	4099      	lsls	r1, r3
 80036bc:	6061      	str	r1, [r4, #4]

  LL_DMA_ClearFlag_HT(DMAx, pHandle->pParams_str->DMAChannelX);
  pHandle->TCCnt++;
 80036be:	0001      	movs	r1, r0
 80036c0:	31c6      	adds	r1, #198	; 0xc6
 80036c2:	780b      	ldrb	r3, [r1, #0]
  if (pHandle->TCCnt == pHandle->pParams_str->RepetitionCounter)
 80036c4:	3205      	adds	r2, #5
  pHandle->TCCnt++;
 80036c6:	3301      	adds	r3, #1
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	700b      	strb	r3, [r1, #0]
  if (pHandle->TCCnt == pHandle->pParams_str->RepetitionCounter)
 80036cc:	7fd2      	ldrb	r2, [r2, #31]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d110      	bne.n	80036f4 <R1_DMAx_TC_IRQHandler+0x50>
  {
    /* First half PWM period CCR value transfered by DMA */
    pHandle->DmaBuffCCR[0] = pHandle->DmaBuffCCR_latch[0];
 80036d2:	0003      	movs	r3, r0
 80036d4:	3394      	adds	r3, #148	; 0x94
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	3b0c      	subs	r3, #12
 80036da:	601a      	str	r2, [r3, #0]
    pHandle->DmaBuffCCR[1] = pHandle->DmaBuffCCR_latch[1];
    pHandle->DmaBuffCCR[2] = pHandle->DmaBuffCCR_latch[2];
 80036dc:	691a      	ldr	r2, [r3, #16]
 80036de:	3304      	adds	r3, #4
 80036e0:	601a      	str	r2, [r3, #0]
    /* Second half PWM period CCR value transfered by DMA */
    pHandle->DmaBuffCCR[3]= pHandle->DmaBuffCCR_latch[3];
    pHandle->DmaBuffCCR[4]= pHandle->DmaBuffCCR_latch[4];
 80036e2:	691a      	ldr	r2, [r3, #16]
 80036e4:	3304      	adds	r3, #4
 80036e6:	601a      	str	r2, [r3, #0]
    pHandle->DmaBuffCCR[5]= pHandle->DmaBuffCCR_latch[5];

    pHandle->TCCnt = 0;
 80036e8:	2300      	movs	r3, #0
 80036ea:	700b      	strb	r3, [r1, #0]
    pHandle->TCDoneFlag =true;
 80036ec:	0003      	movs	r3, r0
 80036ee:	2201      	movs	r2, #1
 80036f0:	33c9      	adds	r3, #201	; 0xc9
 80036f2:	701a      	strb	r2, [r3, #0]
  }
  else
  {
  }

  return (&(pHandle->_Super.Motor));
 80036f4:	307a      	adds	r0, #122	; 0x7a
}
 80036f6:	bd10      	pop	{r4, pc}

080036f8 <RI_SetRegisterGlobal>:
#include "mcp.h"
#include "mcp_config.h"
#include "mc_configuration_registers.h"

uint8_t RI_SetRegisterGlobal(uint16_t regID, uint8_t typeID, uint8_t *data, uint16_t *size, int16_t dataAvailable)
{
 80036f8:	b530      	push	{r4, r5, lr}
 80036fa:	0004      	movs	r4, r0
 80036fc:	a803      	add	r0, sp, #12
 80036fe:	2500      	movs	r5, #0
 8003700:	5f40      	ldrsh	r0, [r0, r5]
  uint8_t retVal = MCP_CMD_OK;
  switch(typeID)
 8003702:	2918      	cmp	r1, #24
 8003704:	d035      	beq.n	8003772 <RI_SetRegisterGlobal+0x7a>
 8003706:	d807      	bhi.n	8003718 <RI_SetRegisterGlobal+0x20>
 8003708:	2908      	cmp	r1, #8
 800370a:	d012      	beq.n	8003732 <RI_SetRegisterGlobal+0x3a>
 800370c:	2910      	cmp	r1, #16
 800370e:	d018      	beq.n	8003742 <RI_SetRegisterGlobal+0x4a>
    }

    default:
    {
      retVal = MCP_ERROR_BAD_DATA_TYPE;
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 8003710:	2200      	movs	r2, #0
      retVal = MCP_ERROR_BAD_DATA_TYPE;
 8003712:	2007      	movs	r0, #7
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 8003714:	801a      	strh	r2, [r3, #0]
      break;
 8003716:	e013      	b.n	8003740 <RI_SetRegisterGlobal+0x48>
  switch(typeID)
 8003718:	2928      	cmp	r1, #40	; 0x28
 800371a:	d1f9      	bne.n	8003710 <RI_SetRegisterGlobal+0x18>
      *size = rawSize + 2U;
 800371c:	8812      	ldrh	r2, [r2, #0]
      if (*size > (uint16_t)dataAvailable)
 800371e:	b280      	uxth	r0, r0
      *size = rawSize + 2U;
 8003720:	3202      	adds	r2, #2
 8003722:	b292      	uxth	r2, r2
 8003724:	801a      	strh	r2, [r3, #0]
      if (*size > (uint16_t)dataAvailable)
 8003726:	4282      	cmp	r2, r0
 8003728:	d92a      	bls.n	8003780 <RI_SetRegisterGlobal+0x88>
        *size = 0;
 800372a:	2200      	movs	r2, #0
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* This error stop the parsing of the CMD buffer */
 800372c:	200a      	movs	r0, #10
        *size = 0;
 800372e:	801a      	strh	r2, [r3, #0]
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* This error stop the parsing of the CMD buffer */
 8003730:	e006      	b.n	8003740 <RI_SetRegisterGlobal+0x48>
          retVal = MCP_ERROR_UNKNOWN_REG;
 8003732:	0020      	movs	r0, r4
 8003734:	3848      	subs	r0, #72	; 0x48
 8003736:	1e42      	subs	r2, r0, #1
 8003738:	4190      	sbcs	r0, r2
      *size = 1;
 800373a:	2201      	movs	r2, #1
          retVal = MCP_ERROR_UNKNOWN_REG;
 800373c:	3004      	adds	r0, #4
      *size = 2;
 800373e:	801a      	strh	r2, [r3, #0]
    }
  }
  return (retVal);
}
 8003740:	bd30      	pop	{r4, r5, pc}
      switch (regID)
 8003742:	22e5      	movs	r2, #229	; 0xe5
  uint8_t retVal = MCP_CMD_OK;
 8003744:	2000      	movs	r0, #0
 8003746:	0112      	lsls	r2, r2, #4
 8003748:	4294      	cmp	r4, r2
 800374a:	d008      	beq.n	800375e <RI_SetRegisterGlobal+0x66>
 800374c:	d809      	bhi.n	8003762 <RI_SetRegisterGlobal+0x6a>
 800374e:	2240      	movs	r2, #64	; 0x40
 8003750:	0020      	movs	r0, r4
 8003752:	4390      	bics	r0, r2
 8003754:	4a0f      	ldr	r2, [pc, #60]	; (8003794 <RI_SetRegisterGlobal+0x9c>)
 8003756:	1880      	adds	r0, r0, r2
 8003758:	1e42      	subs	r2, r0, #1
 800375a:	4190      	sbcs	r0, r2
 800375c:	3004      	adds	r0, #4
      *size = 2;
 800375e:	2202      	movs	r2, #2
 8003760:	e7ed      	b.n	800373e <RI_SetRegisterGlobal+0x46>
 8003762:	22e9      	movs	r2, #233	; 0xe9
  uint8_t retVal = MCP_CMD_OK;
 8003764:	2000      	movs	r0, #0
 8003766:	0112      	lsls	r2, r2, #4
 8003768:	4294      	cmp	r4, r2
 800376a:	d0f8      	beq.n	800375e <RI_SetRegisterGlobal+0x66>
 800376c:	4a0a      	ldr	r2, [pc, #40]	; (8003798 <RI_SetRegisterGlobal+0xa0>)
 800376e:	18a0      	adds	r0, r4, r2
 8003770:	e7f2      	b.n	8003758 <RI_SetRegisterGlobal+0x60>
          retVal = MCP_ERROR_UNKNOWN_REG;
 8003772:	0020      	movs	r0, r4
 8003774:	3818      	subs	r0, #24
 8003776:	1e42      	subs	r2, r0, #1
 8003778:	4190      	sbcs	r0, r2
      *size = 4;
 800377a:	2204      	movs	r2, #4
          retVal = MCP_ERROR_UNKNOWN_REG;
 800377c:	3004      	adds	r0, #4
      *size = 4;
 800377e:	e7de      	b.n	800373e <RI_SetRegisterGlobal+0x46>
            retVal = MCP_ERROR_RO_REG;
 8003780:	2004      	movs	r0, #4
 8003782:	2ce8      	cmp	r4, #232	; 0xe8
 8003784:	d0dc      	beq.n	8003740 <RI_SetRegisterGlobal+0x48>
 8003786:	2380      	movs	r3, #128	; 0x80
 8003788:	439c      	bics	r4, r3
 800378a:	3c28      	subs	r4, #40	; 0x28
 800378c:	1e63      	subs	r3, r4, #1
 800378e:	419c      	sbcs	r4, r3
 8003790:	1820      	adds	r0, r4, r0
 8003792:	e7d5      	b.n	8003740 <RI_SetRegisterGlobal+0x48>
 8003794:	fffffa70 	.word	0xfffffa70
 8003798:	ffffe4a8 	.word	0xffffe4a8

0800379c <RI_SetRegisterMotor1>:

uint8_t RI_SetRegisterMotor1(uint16_t regID, uint8_t typeID, uint8_t *data, uint16_t *size, int16_t dataAvailable)
{
 800379c:	b570      	push	{r4, r5, r6, lr}
 800379e:	001d      	movs	r5, r3
 80037a0:	ab04      	add	r3, sp, #16
 80037a2:	2400      	movs	r4, #0
 80037a4:	5f1c      	ldrsh	r4, [r3, r4]
  uint8_t retVal = MCP_CMD_OK;
  uint8_t motorID=0;
  MCI_Handle_t *pMCIN = &Mci[motorID];

  switch(typeID)
 80037a6:	2918      	cmp	r1, #24
 80037a8:	d100      	bne.n	80037ac <RI_SetRegisterMotor1+0x10>
 80037aa:	e087      	b.n	80038bc <RI_SetRegisterMotor1+0x120>
 80037ac:	d807      	bhi.n	80037be <RI_SetRegisterMotor1+0x22>
 80037ae:	2908      	cmp	r1, #8
 80037b0:	d013      	beq.n	80037da <RI_SetRegisterMotor1+0x3e>
 80037b2:	2910      	cmp	r1, #16
 80037b4:	d035      	beq.n	8003822 <RI_SetRegisterMotor1+0x86>
    }

    default:
    {
      retVal = MCP_ERROR_BAD_DATA_TYPE;
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 80037b6:	2300      	movs	r3, #0
      retVal = MCP_ERROR_BAD_DATA_TYPE;
 80037b8:	2407      	movs	r4, #7
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 80037ba:	802b      	strh	r3, [r5, #0]
      break;
 80037bc:	e022      	b.n	8003804 <RI_SetRegisterMotor1+0x68>
  switch(typeID)
 80037be:	2928      	cmp	r1, #40	; 0x28
 80037c0:	d1f9      	bne.n	80037b6 <RI_SetRegisterMotor1+0x1a>
      *size = rawSize + 2U;
 80037c2:	8813      	ldrh	r3, [r2, #0]
      if (*size > (uint16_t)dataAvailable)
 80037c4:	b2a4      	uxth	r4, r4
      *size = rawSize + 2U;
 80037c6:	3302      	adds	r3, #2
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	802b      	strh	r3, [r5, #0]
      if (*size > (uint16_t)dataAvailable)
 80037cc:	42a3      	cmp	r3, r4
 80037ce:	d800      	bhi.n	80037d2 <RI_SetRegisterMotor1+0x36>
 80037d0:	e08b      	b.n	80038ea <RI_SetRegisterMotor1+0x14e>
        *size = 0;
 80037d2:	2300      	movs	r3, #0
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* This error stop the parsing of the CMD buffer */
 80037d4:	240a      	movs	r4, #10
        *size = 0;
 80037d6:	802b      	strh	r3, [r5, #0]
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* This error stop the parsing of the CMD buffer */
 80037d8:	e014      	b.n	8003804 <RI_SetRegisterMotor1+0x68>
            retVal = MCP_ERROR_RO_REG;
 80037da:	2404      	movs	r4, #4
 80037dc:	2848      	cmp	r0, #72	; 0x48
 80037de:	d00f      	beq.n	8003800 <RI_SetRegisterMotor1+0x64>
 80037e0:	3401      	adds	r4, #1
 80037e2:	2888      	cmp	r0, #136	; 0x88
 80037e4:	d10c      	bne.n	8003800 <RI_SetRegisterMotor1+0x64>
          uint8_t regdata8 = *data;
 80037e6:	7813      	ldrb	r3, [r2, #0]
          if ((uint8_t)MCM_TORQUE_MODE == regdata8)
 80037e8:	2b04      	cmp	r3, #4
 80037ea:	d10d      	bne.n	8003808 <RI_SetRegisterMotor1+0x6c>
            MCI_ExecTorqueRamp(pMCIN, MCI_GetTeref(pMCIN), 0);
 80037ec:	4c50      	ldr	r4, [pc, #320]	; (8003930 <RI_SetRegisterMotor1+0x194>)
 80037ee:	0020      	movs	r0, r4
 80037f0:	f7fe f8f2 	bl	80019d8 <MCI_GetTeref>
 80037f4:	2200      	movs	r2, #0
 80037f6:	0001      	movs	r1, r0
 80037f8:	0020      	movs	r0, r4
 80037fa:	f7fe f803 	bl	8001804 <MCI_ExecTorqueRamp>
  uint8_t retVal = MCP_CMD_OK;
 80037fe:	2400      	movs	r4, #0
      *size = 1;
 8003800:	2301      	movs	r3, #1
      *size = 2;
 8003802:	802b      	strh	r3, [r5, #0]
    }
  }
  return (retVal);
}
 8003804:	0020      	movs	r0, r4
 8003806:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t retVal = MCP_CMD_OK;
 8003808:	2400      	movs	r4, #0
          if ((uint8_t)MCM_SPEED_MODE == regdata8)
 800380a:	2b03      	cmp	r3, #3
 800380c:	d1f8      	bne.n	8003800 <RI_SetRegisterMotor1+0x64>
            MCI_ExecSpeedRamp(pMCIN, MCI_GetMecSpeedRefUnit(pMCIN), 0);
 800380e:	4e48      	ldr	r6, [pc, #288]	; (8003930 <RI_SetRegisterMotor1+0x194>)
 8003810:	0030      	movs	r0, r6
 8003812:	f7fe f8c0 	bl	8001996 <MCI_GetMecSpeedRefUnit>
 8003816:	0022      	movs	r2, r4
 8003818:	0001      	movs	r1, r0
 800381a:	0030      	movs	r0, r6
 800381c:	f7fd ffe8 	bl	80017f0 <MCI_ExecSpeedRamp>
 8003820:	e7ee      	b.n	8003800 <RI_SetRegisterMotor1+0x64>
      uint16_t regdata16 = *(uint16_t *)data; //cstat !MISRAC2012-Rule-11.3
 8003822:	23ba      	movs	r3, #186	; 0xba
 8003824:	2404      	movs	r4, #4
 8003826:	8811      	ldrh	r1, [r2, #0]
      switch (regID)
 8003828:	00db      	lsls	r3, r3, #3
 800382a:	4298      	cmp	r0, r3
 800382c:	d028      	beq.n	8003880 <RI_SetRegisterMotor1+0xe4>
 800382e:	d814      	bhi.n	800385a <RI_SetRegisterMotor1+0xbe>
 8003830:	28d0      	cmp	r0, #208	; 0xd0
 8003832:	d039      	beq.n	80038a8 <RI_SetRegisterMotor1+0x10c>
 8003834:	d807      	bhi.n	8003846 <RI_SetRegisterMotor1+0xaa>
          retVal = MCP_ERROR_UNKNOWN_REG;
 8003836:	3401      	adds	r4, #1
 8003838:	2890      	cmp	r0, #144	; 0x90
 800383a:	d121      	bne.n	8003880 <RI_SetRegisterMotor1+0xe4>
          PID_SetKP(&PIDSpeedHandle_M1, (int16_t)regdata16);
 800383c:	483d      	ldr	r0, [pc, #244]	; (8003934 <RI_SetRegisterMotor1+0x198>)
 800383e:	b209      	sxth	r1, r1
 8003840:	f002 fa45 	bl	8005cce <PID_SetKP>
          break;
 8003844:	e02e      	b.n	80038a4 <RI_SetRegisterMotor1+0x108>
 8003846:	2388      	movs	r3, #136	; 0x88
 8003848:	005b      	lsls	r3, r3, #1
 800384a:	4298      	cmp	r0, r3
 800384c:	d031      	beq.n	80038b2 <RI_SetRegisterMotor1+0x116>
 800384e:	4b3a      	ldr	r3, [pc, #232]	; (8003938 <RI_SetRegisterMotor1+0x19c>)
 8003850:	18c0      	adds	r0, r0, r3
 8003852:	1e43      	subs	r3, r0, #1
 8003854:	4198      	sbcs	r0, r3
 8003856:	1d04      	adds	r4, r0, #4
 8003858:	e012      	b.n	8003880 <RI_SetRegisterMotor1+0xe4>
 800385a:	23a9      	movs	r3, #169	; 0xa9
 800385c:	2404      	movs	r4, #4
 800385e:	011b      	lsls	r3, r3, #4
 8003860:	4298      	cmp	r0, r3
 8003862:	d00d      	beq.n	8003880 <RI_SetRegisterMotor1+0xe4>
 8003864:	d810      	bhi.n	8003888 <RI_SetRegisterMotor1+0xec>
 8003866:	3b80      	subs	r3, #128	; 0x80
 8003868:	4298      	cmp	r0, r3
 800386a:	d009      	beq.n	8003880 <RI_SetRegisterMotor1+0xe4>
 800386c:	d80a      	bhi.n	8003884 <RI_SetRegisterMotor1+0xe8>
 800386e:	23f2      	movs	r3, #242	; 0xf2
 8003870:	00db      	lsls	r3, r3, #3
 8003872:	4298      	cmp	r0, r3
 8003874:	d004      	beq.n	8003880 <RI_SetRegisterMotor1+0xe4>
 8003876:	4b31      	ldr	r3, [pc, #196]	; (800393c <RI_SetRegisterMotor1+0x1a0>)
 8003878:	18c0      	adds	r0, r0, r3
 800387a:	1e43      	subs	r3, r0, #1
 800387c:	4198      	sbcs	r0, r3
 800387e:	1904      	adds	r4, r0, r4
      *size = 2;
 8003880:	2302      	movs	r3, #2
 8003882:	e7be      	b.n	8003802 <RI_SetRegisterMotor1+0x66>
 8003884:	4b2e      	ldr	r3, [pc, #184]	; (8003940 <RI_SetRegisterMotor1+0x1a4>)
 8003886:	e7e3      	b.n	8003850 <RI_SetRegisterMotor1+0xb4>
 8003888:	23e9      	movs	r3, #233	; 0xe9
  uint8_t retVal = MCP_CMD_OK;
 800388a:	2400      	movs	r4, #0
 800388c:	011b      	lsls	r3, r3, #4
 800388e:	4298      	cmp	r0, r3
 8003890:	d0f6      	beq.n	8003880 <RI_SetRegisterMotor1+0xe4>
 8003892:	4b2c      	ldr	r3, [pc, #176]	; (8003944 <RI_SetRegisterMotor1+0x1a8>)
 8003894:	3404      	adds	r4, #4
 8003896:	4298      	cmp	r0, r3
 8003898:	d0f2      	beq.n	8003880 <RI_SetRegisterMotor1+0xe4>
 800389a:	23e5      	movs	r3, #229	; 0xe5
          retVal = MCP_ERROR_UNKNOWN_REG;
 800389c:	3401      	adds	r4, #1
 800389e:	011b      	lsls	r3, r3, #4
 80038a0:	4298      	cmp	r0, r3
 80038a2:	d1ed      	bne.n	8003880 <RI_SetRegisterMotor1+0xe4>
  uint8_t retVal = MCP_CMD_OK;
 80038a4:	2400      	movs	r4, #0
          break;
 80038a6:	e7eb      	b.n	8003880 <RI_SetRegisterMotor1+0xe4>
          PID_SetKI(&PIDSpeedHandle_M1, (int16_t)regdata16);
 80038a8:	4822      	ldr	r0, [pc, #136]	; (8003934 <RI_SetRegisterMotor1+0x198>)
 80038aa:	b209      	sxth	r1, r1
 80038ac:	f002 fa11 	bl	8005cd2 <PID_SetKI>
          break;
 80038b0:	e7f8      	b.n	80038a4 <RI_SetRegisterMotor1+0x108>
          PID_SetKD(&PIDSpeedHandle_M1, (int16_t)regdata16);
 80038b2:	4820      	ldr	r0, [pc, #128]	; (8003934 <RI_SetRegisterMotor1+0x198>)
 80038b4:	b209      	sxth	r1, r1
 80038b6:	f002 fa16 	bl	8005ce6 <PID_SetKD>
 80038ba:	e7f3      	b.n	80038a4 <RI_SetRegisterMotor1+0x108>
          retVal = MCP_ERROR_RO_REG;
 80038bc:	2404      	movs	r4, #4
 80038be:	2858      	cmp	r0, #88	; 0x58
 80038c0:	d005      	beq.n	80038ce <RI_SetRegisterMotor1+0x132>
 80038c2:	2898      	cmp	r0, #152	; 0x98
 80038c4:	d005      	beq.n	80038d2 <RI_SetRegisterMotor1+0x136>
 80038c6:	3818      	subs	r0, #24
 80038c8:	1e43      	subs	r3, r0, #1
 80038ca:	4198      	sbcs	r0, r3
 80038cc:	1904      	adds	r4, r0, r4
      *size = 4;
 80038ce:	2304      	movs	r3, #4
 80038d0:	e797      	b.n	8003802 <RI_SetRegisterMotor1+0x66>
          MCI_ExecSpeedRamp(pMCIN,((((int16_t)regdata32) * ((int16_t)SPEED_UNIT)) / (int16_t)U_RPM), 0);
 80038d2:	2300      	movs	r3, #0
 80038d4:	5ed0      	ldrsh	r0, [r2, r3]
 80038d6:	2106      	movs	r1, #6
 80038d8:	f7fc fcb4 	bl	8000244 <__divsi3>
 80038dc:	2200      	movs	r2, #0
 80038de:	b201      	sxth	r1, r0
 80038e0:	4813      	ldr	r0, [pc, #76]	; (8003930 <RI_SetRegisterMotor1+0x194>)
 80038e2:	f7fd ff85 	bl	80017f0 <MCI_ExecSpeedRamp>
  uint8_t retVal = MCP_CMD_OK;
 80038e6:	2400      	movs	r4, #0
          break;
 80038e8:	e7f1      	b.n	80038ce <RI_SetRegisterMotor1+0x132>
        switch (regID)
 80038ea:	23d4      	movs	r3, #212	; 0xd4
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	4298      	cmp	r0, r3
 80038f0:	d00f      	beq.n	8003912 <RI_SetRegisterMotor1+0x176>
 80038f2:	2405      	movs	r4, #5
 80038f4:	4298      	cmp	r0, r3
 80038f6:	d900      	bls.n	80038fa <RI_SetRegisterMotor1+0x15e>
 80038f8:	e784      	b.n	8003804 <RI_SetRegisterMotor1+0x68>
            retVal = MCP_ERROR_RO_REG;
 80038fa:	3c01      	subs	r4, #1
 80038fc:	28e8      	cmp	r0, #232	; 0xe8
 80038fe:	d100      	bne.n	8003902 <RI_SetRegisterMotor1+0x166>
 8003900:	e780      	b.n	8003804 <RI_SetRegisterMotor1+0x68>
 8003902:	3b29      	subs	r3, #41	; 0x29
 8003904:	3bff      	subs	r3, #255	; 0xff
 8003906:	4398      	bics	r0, r3
 8003908:	3828      	subs	r0, #40	; 0x28
 800390a:	1e43      	subs	r3, r0, #1
 800390c:	4198      	sbcs	r0, r3
 800390e:	1904      	adds	r4, r0, r4
 8003910:	e778      	b.n	8003804 <RI_SetRegisterMotor1+0x68>
            rpm = (((int32_t)(*(int16_t *)&rawData[2])) << 16) | *(uint16_t *)rawData; //cstat !MISRAC2012-Rule-11.3
 8003912:	8890      	ldrh	r0, [r2, #4]
 8003914:	8853      	ldrh	r3, [r2, #2]
 8003916:	0400      	lsls	r0, r0, #16
            MCI_ExecSpeedRamp(pMCIN, (int16_t)((rpm * SPEED_UNIT) / U_RPM), duration);
 8003918:	2106      	movs	r1, #6
            rpm = (((int32_t)(*(int16_t *)&rawData[2])) << 16) | *(uint16_t *)rawData; //cstat !MISRAC2012-Rule-11.3
 800391a:	4318      	orrs	r0, r3
            MCI_ExecSpeedRamp(pMCIN, (int16_t)((rpm * SPEED_UNIT) / U_RPM), duration);
 800391c:	88d4      	ldrh	r4, [r2, #6]
 800391e:	f7fc fc91 	bl	8000244 <__divsi3>
 8003922:	0022      	movs	r2, r4
 8003924:	b201      	sxth	r1, r0
 8003926:	4802      	ldr	r0, [pc, #8]	; (8003930 <RI_SetRegisterMotor1+0x194>)
 8003928:	f7fd ff62 	bl	80017f0 <MCI_ExecSpeedRamp>
  uint8_t retVal = MCP_CMD_OK;
 800392c:	2400      	movs	r4, #0
            break;
 800392e:	e769      	b.n	8003804 <RI_SetRegisterMotor1+0x68>
 8003930:	20000648 	.word	0x20000648
 8003934:	20000144 	.word	0x20000144
 8003938:	fffffa70 	.word	0xfffffa70
 800393c:	fffff630 	.word	0xfffff630
 8003940:	fffff5b0 	.word	0xfffff5b0
 8003944:	00001b58 	.word	0x00001b58

08003948 <RI_GetRegisterGlobal>:

uint8_t RI_GetRegisterGlobal(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace){
 8003948:	b570      	push	{r4, r5, r6, lr}
 800394a:	001d      	movs	r5, r3
 800394c:	ab04      	add	r3, sp, #16
 800394e:	0004      	movs	r4, r0
 8003950:	0016      	movs	r6, r2
 8003952:	0008      	movs	r0, r1
 8003954:	2200      	movs	r2, #0
 8003956:	5e9b      	ldrsh	r3, [r3, r2]
    uint8_t retVal = MCP_CMD_OK;
    switch (typeID)
 8003958:	2918      	cmp	r1, #24
 800395a:	d031      	beq.n	80039c0 <RI_GetRegisterGlobal+0x78>
 800395c:	d805      	bhi.n	800396a <RI_GetRegisterGlobal+0x22>
 800395e:	2908      	cmp	r1, #8
 8003960:	d018      	beq.n	8003994 <RI_GetRegisterGlobal+0x4c>
 8003962:	2910      	cmp	r1, #16
 8003964:	d01c      	beq.n	80039a0 <RI_GetRegisterGlobal+0x58>
 8003966:	2007      	movs	r0, #7
        retVal = MCP_ERROR_BAD_DATA_TYPE;
        break;
      }
    }
  return (retVal);
}
 8003968:	bd70      	pop	{r4, r5, r6, pc}
    switch (typeID)
 800396a:	2920      	cmp	r1, #32
 800396c:	d02f      	beq.n	80039ce <RI_GetRegisterGlobal+0x86>
 800396e:	2928      	cmp	r1, #40	; 0x28
 8003970:	d1f9      	bne.n	8003966 <RI_GetRegisterGlobal+0x1e>
            retVal = MCP_ERROR_UNKNOWN_REG;
 8003972:	2005      	movs	r0, #5
 8003974:	2c28      	cmp	r4, #40	; 0x28
 8003976:	d10a      	bne.n	800398e <RI_GetRegisterGlobal+0x46>
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 8003978:	220a      	movs	r2, #10
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 800397a:	b29b      	uxth	r3, r3
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 800397c:	8032      	strh	r2, [r6, #0]
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 800397e:	3003      	adds	r0, #3
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003980:	2b0b      	cmp	r3, #11
 8003982:	d904      	bls.n	800398e <RI_GetRegisterGlobal+0x46>
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 8003984:	4913      	ldr	r1, [pc, #76]	; (80039d4 <RI_GetRegisterGlobal+0x8c>)
 8003986:	1cb0      	adds	r0, r6, #2
 8003988:	f002 fbae 	bl	80060e8 <memcpy>
    uint8_t retVal = MCP_CMD_OK;
 800398c:	2000      	movs	r0, #0
        *size = (*rawSize) + 2U;
 800398e:	8833      	ldrh	r3, [r6, #0]
 8003990:	3302      	adds	r3, #2
 8003992:	e013      	b.n	80039bc <RI_GetRegisterGlobal+0x74>
        if (freeSpace > 0)
 8003994:	2b00      	cmp	r3, #0
 8003996:	dde7      	ble.n	8003968 <RI_GetRegisterGlobal+0x20>
          *size = 1;
 8003998:	2301      	movs	r3, #1
            retVal = MCP_ERROR_UNKNOWN_REG;
 800399a:	2005      	movs	r0, #5
            *size= 0 ; /* */
 800399c:	802b      	strh	r3, [r5, #0]
            break;
 800399e:	e7e3      	b.n	8003968 <RI_GetRegisterGlobal+0x20>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80039a0:	2008      	movs	r0, #8
        if (freeSpace >= 2)
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	dde0      	ble.n	8003968 <RI_GetRegisterGlobal+0x20>
          switch (regID)
 80039a6:	4b0c      	ldr	r3, [pc, #48]	; (80039d8 <RI_GetRegisterGlobal+0x90>)
 80039a8:	3803      	subs	r0, #3
 80039aa:	18e4      	adds	r4, r4, r3
 80039ac:	2340      	movs	r3, #64	; 0x40
 80039ae:	439c      	bics	r4, r3
 80039b0:	b2a4      	uxth	r4, r4
    uint8_t retVal = MCP_CMD_OK;
 80039b2:	1e63      	subs	r3, r4, #1
 80039b4:	419c      	sbcs	r4, r3
          *size = 2;
 80039b6:	2302      	movs	r3, #2
    uint8_t retVal = MCP_CMD_OK;
 80039b8:	4264      	negs	r4, r4
 80039ba:	4020      	ands	r0, r4
        *size = (*rawSize) + 2U;
 80039bc:	802b      	strh	r3, [r5, #0]
        break;
 80039be:	e7d3      	b.n	8003968 <RI_GetRegisterGlobal+0x20>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80039c0:	2008      	movs	r0, #8
        if (freeSpace >= 4)
 80039c2:	2b03      	cmp	r3, #3
 80039c4:	ddd0      	ble.n	8003968 <RI_GetRegisterGlobal+0x20>
          *size = 4;
 80039c6:	2304      	movs	r3, #4
              retVal = MCP_ERROR_UNKNOWN_REG;
 80039c8:	3803      	subs	r0, #3
          *size = 4;
 80039ca:	802b      	strh	r3, [r5, #0]
 80039cc:	e7cc      	b.n	8003968 <RI_GetRegisterGlobal+0x20>
            *size= 0 ; /* */
 80039ce:	2300      	movs	r3, #0
 80039d0:	e7e3      	b.n	800399a <RI_GetRegisterGlobal+0x52>
 80039d2:	46c0      	nop			; (mov r8, r8)
 80039d4:	08006242 	.word	0x08006242
 80039d8:	fffff1b0 	.word	0xfffff1b0

080039dc <RI_GetRegisterMotor1>:

  uint8_t RI_GetRegisterMotor1(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace) {
 80039dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039de:	b085      	sub	sp, #20
 80039e0:	001e      	movs	r6, r3
 80039e2:	ab0a      	add	r3, sp, #40	; 0x28
 80039e4:	0004      	movs	r4, r0
 80039e6:	0015      	movs	r5, r2
 80039e8:	0008      	movs	r0, r1
 80039ea:	2200      	movs	r2, #0
 80039ec:	5e9b      	ldrsh	r3, [r3, r2]
    uint8_t retVal = MCP_CMD_OK;
    uint8_t motorID=0;
    MCI_Handle_t *pMCIN = &Mci[motorID];
    BusVoltageSensor_Handle_t* BusVoltageSensor= &BusVoltageSensor_M1._Super;
    switch (typeID)
 80039ee:	2918      	cmp	r1, #24
 80039f0:	d100      	bne.n	80039f4 <RI_GetRegisterMotor1+0x18>
 80039f2:	e08a      	b.n	8003b0a <RI_GetRegisterMotor1+0x12e>
 80039f4:	d806      	bhi.n	8003a04 <RI_GetRegisterMotor1+0x28>
 80039f6:	2908      	cmp	r1, #8
 80039f8:	d01b      	beq.n	8003a32 <RI_GetRegisterMotor1+0x56>
 80039fa:	2910      	cmp	r1, #16
 80039fc:	d02c      	beq.n	8003a58 <RI_GetRegisterMotor1+0x7c>
 80039fe:	2007      	movs	r0, #7
        retVal = MCP_ERROR_BAD_DATA_TYPE;
        break;
      }
    }
    return (retVal);
  }
 8003a00:	b005      	add	sp, #20
 8003a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (typeID)
 8003a04:	2920      	cmp	r1, #32
 8003a06:	d100      	bne.n	8003a0a <RI_GetRegisterMotor1+0x2e>
 8003a08:	e0a6      	b.n	8003b58 <RI_GetRegisterMotor1+0x17c>
 8003a0a:	2928      	cmp	r1, #40	; 0x28
 8003a0c:	d1f7      	bne.n	80039fe <RI_GetRegisterMotor1+0x22>
        rawData++;
 8003a0e:	2294      	movs	r2, #148	; 0x94
 8003a10:	1ca8      	adds	r0, r5, #2
        switch (regID)
 8003a12:	0052      	lsls	r2, r2, #1
 8003a14:	4294      	cmp	r4, r2
 8003a16:	d100      	bne.n	8003a1a <RI_GetRegisterMotor1+0x3e>
 8003a18:	e0ca      	b.n	8003bb0 <RI_GetRegisterMotor1+0x1d4>
 8003a1a:	d900      	bls.n	8003a1e <RI_GetRegisterMotor1+0x42>
 8003a1c:	e0a0      	b.n	8003b60 <RI_GetRegisterMotor1+0x184>
 8003a1e:	2ca8      	cmp	r4, #168	; 0xa8
 8003a20:	d100      	bne.n	8003a24 <RI_GetRegisterMotor1+0x48>
 8003a22:	e0b1      	b.n	8003b88 <RI_GetRegisterMotor1+0x1ac>
 8003a24:	2ce8      	cmp	r4, #232	; 0xe8
 8003a26:	d100      	bne.n	8003a2a <RI_GetRegisterMotor1+0x4e>
 8003a28:	e0bb      	b.n	8003ba2 <RI_GetRegisterMotor1+0x1c6>
 8003a2a:	2005      	movs	r0, #5
        *size = (*rawSize) + 2U;
 8003a2c:	882b      	ldrh	r3, [r5, #0]
 8003a2e:	3302      	adds	r3, #2
 8003a30:	e010      	b.n	8003a54 <RI_GetRegisterMotor1+0x78>
        if (freeSpace > 0)
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	dde4      	ble.n	8003a00 <RI_GetRegisterMotor1+0x24>
          switch (regID)
 8003a36:	2c48      	cmp	r4, #72	; 0x48
 8003a38:	d006      	beq.n	8003a48 <RI_GetRegisterMotor1+0x6c>
 8003a3a:	2005      	movs	r0, #5
 8003a3c:	2c88      	cmp	r4, #136	; 0x88
 8003a3e:	d108      	bne.n	8003a52 <RI_GetRegisterMotor1+0x76>
              *data = (uint8_t)MCI_GetControlMode(pMCIN);
 8003a40:	485f      	ldr	r0, [pc, #380]	; (8003bc0 <RI_GetRegisterMotor1+0x1e4>)
 8003a42:	f7fd ff94 	bl	800196e <MCI_GetControlMode>
 8003a46:	e002      	b.n	8003a4e <RI_GetRegisterMotor1+0x72>
              *data = (uint8_t)MCI_GetSTMState(pMCIN);
 8003a48:	485d      	ldr	r0, [pc, #372]	; (8003bc0 <RI_GetRegisterMotor1+0x1e4>)
 8003a4a:	f7fd ff25 	bl	8001898 <MCI_GetSTMState>
              *data = (uint8_t)MCI_GetControlMode(pMCIN);
 8003a4e:	7028      	strb	r0, [r5, #0]
    uint8_t retVal = MCP_CMD_OK;
 8003a50:	2000      	movs	r0, #0
          *size = 1;
 8003a52:	2301      	movs	r3, #1
        *size = (*rawSize) + 2U;
 8003a54:	8033      	strh	r3, [r6, #0]
        break;
 8003a56:	e7d3      	b.n	8003a00 <RI_GetRegisterMotor1+0x24>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8003a58:	2008      	movs	r0, #8
        if (freeSpace >= 2)
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	ddd0      	ble.n	8003a00 <RI_GetRegisterMotor1+0x24>
          switch (regID)
 8003a5e:	239d      	movs	r3, #157	; 0x9d
 8003a60:	011b      	lsls	r3, r3, #4
 8003a62:	429c      	cmp	r4, r3
 8003a64:	d044      	beq.n	8003af0 <RI_GetRegisterMotor1+0x114>
 8003a66:	d817      	bhi.n	8003a98 <RI_GetRegisterMotor1+0xbc>
 8003a68:	2388      	movs	r3, #136	; 0x88
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	429c      	cmp	r4, r3
 8003a6e:	d033      	beq.n	8003ad8 <RI_GetRegisterMotor1+0xfc>
 8003a70:	d808      	bhi.n	8003a84 <RI_GetRegisterMotor1+0xa8>
 8003a72:	2c90      	cmp	r4, #144	; 0x90
 8003a74:	d02a      	beq.n	8003acc <RI_GetRegisterMotor1+0xf0>
 8003a76:	3803      	subs	r0, #3
 8003a78:	2cd0      	cmp	r4, #208	; 0xd0
 8003a7a:	d10b      	bne.n	8003a94 <RI_GetRegisterMotor1+0xb8>
              *regdata16 = PID_GetKI(&PIDSpeedHandle_M1);
 8003a7c:	4851      	ldr	r0, [pc, #324]	; (8003bc4 <RI_GetRegisterMotor1+0x1e8>)
 8003a7e:	f002 f92d 	bl	8005cdc <PID_GetKI>
 8003a82:	e026      	b.n	8003ad2 <RI_GetRegisterMotor1+0xf6>
 8003a84:	23b2      	movs	r3, #178	; 0xb2
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	429c      	cmp	r4, r3
 8003a8a:	d029      	beq.n	8003ae0 <RI_GetRegisterMotor1+0x104>
 8003a8c:	3340      	adds	r3, #64	; 0x40
 8003a8e:	429c      	cmp	r4, r3
 8003a90:	d02a      	beq.n	8003ae8 <RI_GetRegisterMotor1+0x10c>
 8003a92:	2005      	movs	r0, #5
          *size = 2;
 8003a94:	2302      	movs	r3, #2
 8003a96:	e7dd      	b.n	8003a54 <RI_GetRegisterMotor1+0x78>
 8003a98:	23a9      	movs	r3, #169	; 0xa9
 8003a9a:	011b      	lsls	r3, r3, #4
 8003a9c:	429c      	cmp	r4, r3
 8003a9e:	d030      	beq.n	8003b02 <RI_GetRegisterMotor1+0x126>
 8003aa0:	d809      	bhi.n	8003ab6 <RI_GetRegisterMotor1+0xda>
 8003aa2:	3b80      	subs	r3, #128	; 0x80
 8003aa4:	429c      	cmp	r4, r3
 8003aa6:	d027      	beq.n	8003af8 <RI_GetRegisterMotor1+0x11c>
 8003aa8:	3340      	adds	r3, #64	; 0x40
 8003aaa:	429c      	cmp	r4, r3
 8003aac:	d1f1      	bne.n	8003a92 <RI_GetRegisterMotor1+0xb6>
              *regdata16 = MCI_GetValphabeta(pMCIN).alpha;
 8003aae:	4844      	ldr	r0, [pc, #272]	; (8003bc0 <RI_GetRegisterMotor1+0x1e4>)
 8003ab0:	f7fd ff84 	bl	80019bc <MCI_GetValphabeta>
 8003ab4:	e00d      	b.n	8003ad2 <RI_GetRegisterMotor1+0xf6>
 8003ab6:	4b44      	ldr	r3, [pc, #272]	; (8003bc8 <RI_GetRegisterMotor1+0x1ec>)
 8003ab8:	2005      	movs	r0, #5
 8003aba:	18e4      	adds	r4, r4, r3
 8003abc:	2340      	movs	r3, #64	; 0x40
 8003abe:	439c      	bics	r4, r3
 8003ac0:	b2a4      	uxth	r4, r4
    uint8_t retVal = MCP_CMD_OK;
 8003ac2:	1e63      	subs	r3, r4, #1
 8003ac4:	419c      	sbcs	r4, r3
 8003ac6:	4264      	negs	r4, r4
 8003ac8:	4020      	ands	r0, r4
 8003aca:	e7e3      	b.n	8003a94 <RI_GetRegisterMotor1+0xb8>
              *regdata16 = PID_GetKP(&PIDSpeedHandle_M1);
 8003acc:	483d      	ldr	r0, [pc, #244]	; (8003bc4 <RI_GetRegisterMotor1+0x1e8>)
 8003ace:	f002 f902 	bl	8005cd6 <PID_GetKP>
              *regdata16 = MCI_GetValphabeta(pMCIN).beta;
 8003ad2:	8028      	strh	r0, [r5, #0]
    uint8_t retVal = MCP_CMD_OK;
 8003ad4:	2000      	movs	r0, #0
              break;
 8003ad6:	e7dd      	b.n	8003a94 <RI_GetRegisterMotor1+0xb8>
              *regdata16 = PID_GetKD(&PIDSpeedHandle_M1);
 8003ad8:	483a      	ldr	r0, [pc, #232]	; (8003bc4 <RI_GetRegisterMotor1+0x1e8>)
 8003ada:	f002 f906 	bl	8005cea <PID_GetKD>
 8003ade:	e7f8      	b.n	8003ad2 <RI_GetRegisterMotor1+0xf6>
              *regdataU16 = VBS_GetAvBusVoltage_V(BusVoltageSensor);
 8003ae0:	483a      	ldr	r0, [pc, #232]	; (8003bcc <RI_GetRegisterMotor1+0x1f0>)
 8003ae2:	f002 f895 	bl	8005c10 <VBS_GetAvBusVoltage_V>
 8003ae6:	e7f4      	b.n	8003ad2 <RI_GetRegisterMotor1+0xf6>
              *regdata16 = NTC_GetAvTemp_C(&TempSensor_M1);
 8003ae8:	4839      	ldr	r0, [pc, #228]	; (8003bd0 <RI_GetRegisterMotor1+0x1f4>)
 8003aea:	f002 f8d8 	bl	8005c9e <NTC_GetAvTemp_C>
 8003aee:	e7f0      	b.n	8003ad2 <RI_GetRegisterMotor1+0xf6>
              *regdata16 = MCI_GetVqd(pMCIN).q;
 8003af0:	4833      	ldr	r0, [pc, #204]	; (8003bc0 <RI_GetRegisterMotor1+0x1e4>)
 8003af2:	f7fd ff55 	bl	80019a0 <MCI_GetVqd>
 8003af6:	e7ec      	b.n	8003ad2 <RI_GetRegisterMotor1+0xf6>
              *regdata16 = MCI_GetVqd(pMCIN).d;
 8003af8:	4831      	ldr	r0, [pc, #196]	; (8003bc0 <RI_GetRegisterMotor1+0x1e4>)
 8003afa:	f7fd ff51 	bl	80019a0 <MCI_GetVqd>
              *regdata16 = MCI_GetValphabeta(pMCIN).beta;
 8003afe:	0c00      	lsrs	r0, r0, #16
 8003b00:	e7e7      	b.n	8003ad2 <RI_GetRegisterMotor1+0xf6>
 8003b02:	482f      	ldr	r0, [pc, #188]	; (8003bc0 <RI_GetRegisterMotor1+0x1e4>)
 8003b04:	f7fd ff5a 	bl	80019bc <MCI_GetValphabeta>
 8003b08:	e7f9      	b.n	8003afe <RI_GetRegisterMotor1+0x122>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8003b0a:	2008      	movs	r0, #8
        if (freeSpace >= 4)
 8003b0c:	2b03      	cmp	r3, #3
 8003b0e:	dc00      	bgt.n	8003b12 <RI_GetRegisterMotor1+0x136>
 8003b10:	e776      	b.n	8003a00 <RI_GetRegisterMotor1+0x24>
          switch (regID)
 8003b12:	2c98      	cmp	r4, #152	; 0x98
 8003b14:	d01c      	beq.n	8003b50 <RI_GetRegisterMotor1+0x174>
 8003b16:	d80d      	bhi.n	8003b34 <RI_GetRegisterMotor1+0x158>
 8003b18:	2c18      	cmp	r4, #24
 8003b1a:	d014      	beq.n	8003b46 <RI_GetRegisterMotor1+0x16a>
 8003b1c:	3803      	subs	r0, #3
 8003b1e:	2c58      	cmp	r4, #88	; 0x58
 8003b20:	d106      	bne.n	8003b30 <RI_GetRegisterMotor1+0x154>
              *regdata32 = (((int32_t)MCI_GetAvrgMecSpeedUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 8003b22:	4827      	ldr	r0, [pc, #156]	; (8003bc0 <RI_GetRegisterMotor1+0x1e4>)
 8003b24:	f7fd ff30 	bl	8001988 <MCI_GetAvrgMecSpeedUnit>
              *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 8003b28:	2306      	movs	r3, #6
 8003b2a:	4343      	muls	r3, r0
 8003b2c:	602b      	str	r3, [r5, #0]
    uint8_t retVal = MCP_CMD_OK;
 8003b2e:	2000      	movs	r0, #0
          *size = 4;
 8003b30:	2304      	movs	r3, #4
 8003b32:	e78f      	b.n	8003a54 <RI_GetRegisterMotor1+0x78>
 8003b34:	4b27      	ldr	r3, [pc, #156]	; (8003bd4 <RI_GetRegisterMotor1+0x1f8>)
 8003b36:	2005      	movs	r0, #5
 8003b38:	429c      	cmp	r4, r3
 8003b3a:	d1f9      	bne.n	8003b30 <RI_GetRegisterMotor1+0x154>
              ReadVal.Float_Val = PQD_GetAvrgElMotorPowerW(pMPM[M1]);
 8003b3c:	4b26      	ldr	r3, [pc, #152]	; (8003bd8 <RI_GetRegisterMotor1+0x1fc>)
 8003b3e:	6818      	ldr	r0, [r3, #0]
 8003b40:	f002 f931 	bl	8005da6 <PQD_GetAvrgElMotorPowerW>
 8003b44:	e002      	b.n	8003b4c <RI_GetRegisterMotor1+0x170>
              *regdataU32 = MCI_GetFaultState(pMCIN);
 8003b46:	481e      	ldr	r0, [pc, #120]	; (8003bc0 <RI_GetRegisterMotor1+0x1e4>)
 8003b48:	f7fd ff0c 	bl	8001964 <MCI_GetFaultState>
              *regdataU32 = ReadVal.U32_Val; //cstat !UNION-type-punning
 8003b4c:	6028      	str	r0, [r5, #0]
 8003b4e:	e7ee      	b.n	8003b2e <RI_GetRegisterMotor1+0x152>
              *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 8003b50:	481b      	ldr	r0, [pc, #108]	; (8003bc0 <RI_GetRegisterMotor1+0x1e4>)
 8003b52:	f7fd ff20 	bl	8001996 <MCI_GetMecSpeedRefUnit>
 8003b56:	e7e7      	b.n	8003b28 <RI_GetRegisterMotor1+0x14c>
            *size= 0 ; /* */
 8003b58:	2300      	movs	r3, #0
            retVal = MCP_ERROR_UNKNOWN_REG;
 8003b5a:	2005      	movs	r0, #5
            *size= 0 ; /* */
 8003b5c:	8033      	strh	r3, [r6, #0]
            break;
 8003b5e:	e74f      	b.n	8003a00 <RI_GetRegisterMotor1+0x24>
 8003b60:	23d4      	movs	r3, #212	; 0xd4
 8003b62:	005b      	lsls	r3, r3, #1
 8003b64:	429c      	cmp	r4, r3
 8003b66:	d000      	beq.n	8003b6a <RI_GetRegisterMotor1+0x18e>
 8003b68:	e75f      	b.n	8003a2a <RI_GetRegisterMotor1+0x4e>
            int32_t rpm32 = ((int32_t)(MCI_GetLastRampFinalSpeed(pMCIN) * U_RPM) / (int32_t)SPEED_UNIT);
 8003b6a:	4f15      	ldr	r7, [pc, #84]	; (8003bc0 <RI_GetRegisterMotor1+0x1e4>)
 8003b6c:	2406      	movs	r4, #6
 8003b6e:	0038      	movs	r0, r7
 8003b70:	f7fd ff00 	bl	8001974 <MCI_GetLastRampFinalSpeed>
 8003b74:	4360      	muls	r0, r4
            *rpm16p = (uint16_t)rpm32;
 8003b76:	8068      	strh	r0, [r5, #2]
            *(rpm16p+1) = (uint16_t)(rpm32>>16);
 8003b78:	1400      	asrs	r0, r0, #16
 8003b7a:	80a8      	strh	r0, [r5, #4]
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 8003b7c:	0038      	movs	r0, r7
 8003b7e:	f7fd fefc 	bl	800197a <MCI_GetLastRampFinalDuration>
            *rawSize = 6;
 8003b82:	802c      	strh	r4, [r5, #0]
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 8003b84:	80e8      	strh	r0, [r5, #6]
            *rawSize = 6;
 8003b86:	e00a      	b.n	8003b9e <RI_GetRegisterMotor1+0x1c2>
            *rawSize = (uint16_t)sizeof(ApplicationConfig_reg_t);
 8003b88:	2210      	movs	r2, #16
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003b8a:	b29b      	uxth	r3, r3
            *rawSize = (uint16_t)sizeof(ApplicationConfig_reg_t);
 8003b8c:	802a      	strh	r2, [r5, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003b8e:	2b11      	cmp	r3, #17
 8003b90:	d801      	bhi.n	8003b96 <RI_GetRegisterMotor1+0x1ba>
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8003b92:	2008      	movs	r0, #8
 8003b94:	e74a      	b.n	8003a2c <RI_GetRegisterMotor1+0x50>
              ApplicationConfig_reg_t const *pApplicationConfig_reg = ApplicationConfig_reg[motorID];
 8003b96:	4b11      	ldr	r3, [pc, #68]	; (8003bdc <RI_GetRegisterMotor1+0x200>)
              (void)memcpy(rawData, (const uint8_t *)pFOCConfig_reg, sizeof(FOCFwConfig_reg_t));
 8003b98:	6819      	ldr	r1, [r3, #0]
              memcpy(rawData, &scaleParams_M1, sizeof(ScaleParams_t) );
 8003b9a:	f002 faa5 	bl	80060e8 <memcpy>
    uint8_t retVal = MCP_CMD_OK;
 8003b9e:	2000      	movs	r0, #0
            break;
 8003ba0:	e744      	b.n	8003a2c <RI_GetRegisterMotor1+0x50>
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 8003ba2:	220e      	movs	r2, #14
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003ba4:	b29b      	uxth	r3, r3
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 8003ba6:	802a      	strh	r2, [r5, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003ba8:	2b0f      	cmp	r3, #15
 8003baa:	d9f2      	bls.n	8003b92 <RI_GetRegisterMotor1+0x1b6>
              FOCFwConfig_reg_t const *pFOCConfig_reg = FOCConfig_reg[motorID];
 8003bac:	4b0c      	ldr	r3, [pc, #48]	; (8003be0 <RI_GetRegisterMotor1+0x204>)
 8003bae:	e7f3      	b.n	8003b98 <RI_GetRegisterMotor1+0x1bc>
            *rawSize = 12;
 8003bb0:	220c      	movs	r2, #12
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 8003bb2:	b29b      	uxth	r3, r3
            *rawSize = 12;
 8003bb4:	802a      	strh	r2, [r5, #0]
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 8003bb6:	2b0d      	cmp	r3, #13
 8003bb8:	d9eb      	bls.n	8003b92 <RI_GetRegisterMotor1+0x1b6>
              memcpy(rawData, &scaleParams_M1, sizeof(ScaleParams_t) );
 8003bba:	490a      	ldr	r1, [pc, #40]	; (8003be4 <RI_GetRegisterMotor1+0x208>)
 8003bbc:	3204      	adds	r2, #4
 8003bbe:	e7ec      	b.n	8003b9a <RI_GetRegisterMotor1+0x1be>
 8003bc0:	20000648 	.word	0x20000648
 8003bc4:	20000144 	.word	0x20000144
 8003bc8:	fffff1b0 	.word	0xfffff1b0
 8003bcc:	20000000 	.word	0x20000000
 8003bd0:	2000029c 	.word	0x2000029c
 8003bd4:	00001b58 	.word	0x00001b58
 8003bd8:	200002c8 	.word	0x200002c8
 8003bdc:	200002d8 	.word	0x200002d8
 8003be0:	200002dc 	.word	0x200002dc
 8003be4:	200002e0 	.word	0x200002e0

08003be8 <RCM_RegisterRegConv>:
  * @param  regConv Pointer to the regular conversion parameters.
  *         Contains ADC, Channel and sampling time to be used.
  *
  */
void RCM_RegisterRegConv(RegConv_t *regConv)
{
 8003be8:	b5f0      	push	{r4, r5, r6, r7, lr}
    handle = 0U;
  }
  else
  {
#endif
    uint8_t i = 0;
 8003bea:	2200      	movs	r2, #0
  uint8_t handle = 255U;
 8003bec:	23ff      	movs	r3, #255	; 0xff
      {
        if ((RCM_handle_array [i]->channel == regConv->channel)
         && (RCM_handle_array [i]->regADC == regConv->regADC))
        {
          handle = i; /* Reuse the same handle */
          i = RCM_MAX_CONV; /* We can skip the rest of the loop */
 8003bee:	2704      	movs	r7, #4
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003bf0:	4e1d      	ldr	r6, [pc, #116]	; (8003c68 <RCM_RegisterRegConv+0x80>)
 8003bf2:	0091      	lsls	r1, r2, #2
 8003bf4:	5989      	ldr	r1, [r1, r6]
 8003bf6:	2900      	cmp	r1, #0
 8003bf8:	d12b      	bne.n	8003c52 <RCM_RegisterRegConv+0x6a>
 8003bfa:	2b04      	cmp	r3, #4
 8003bfc:	d900      	bls.n	8003c00 <RCM_RegisterRegConv+0x18>
 8003bfe:	0013      	movs	r3, r2
      }
      else
      {
        /* Nothing to do */
      }
      i++;
 8003c00:	3201      	adds	r2, #1
 8003c02:	b2d2      	uxtb	r2, r2
    while (i < RCM_MAX_CONV)
 8003c04:	2a03      	cmp	r2, #3
 8003c06:	d9f4      	bls.n	8003bf2 <RCM_RegisterRegConv+0xa>
    }
    if (handle < RCM_MAX_CONV)
 8003c08:	2b03      	cmp	r3, #3
 8003c0a:	d820      	bhi.n	8003c4e <RCM_RegisterRegConv+0x66>
    {
      RCM_handle_array [handle] = regConv;
      RCM_CB_array [handle].cb = NULL; /* If a previous callback was attached, it is cleared */
 8003c0c:	2400      	movs	r4, #0
      RCM_handle_array [handle] = regConv;
 8003c0e:	009a      	lsls	r2, r3, #2
 8003c10:	50b0      	str	r0, [r6, r2]
      RCM_CB_array [handle].cb = NULL; /* If a previous callback was attached, it is cleared */
 8003c12:	4a16      	ldr	r2, [pc, #88]	; (8003c6c <RCM_RegisterRegConv+0x84>)
 8003c14:	00d9      	lsls	r1, r3, #3
 8003c16:	508c      	str	r4, [r1, r2]
      if (0U == LL_ADC_IsEnabled(regConv->regADC))
 8003c18:	6802      	ldr	r2, [r0, #0]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8003c1a:	6891      	ldr	r1, [r2, #8]
 8003c1c:	07c9      	lsls	r1, r1, #31
 8003c1e:	d40e      	bmi.n	8003c3e <RCM_RegisterRegConv+0x56>
  MODIFY_REG(ADCx->CR,
 8003c20:	2180      	movs	r1, #128	; 0x80
 8003c22:	6894      	ldr	r4, [r2, #8]
 8003c24:	4d12      	ldr	r5, [pc, #72]	; (8003c70 <RCM_RegisterRegConv+0x88>)
 8003c26:	0609      	lsls	r1, r1, #24
 8003c28:	402c      	ands	r4, r5
 8003c2a:	4321      	orrs	r1, r4
 8003c2c:	6091      	str	r1, [r2, #8]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8003c2e:	6891      	ldr	r1, [r2, #8]
      {

        LL_ADC_StartCalibration( regConv->regADC);
        while (1U == LL_ADC_IsCalibrationOnGoing(regConv->regADC))
 8003c30:	2900      	cmp	r1, #0
 8003c32:	dbfc      	blt.n	8003c2e <RCM_RegisterRegConv+0x46>
  MODIFY_REG(ADCx->CR,
 8003c34:	2101      	movs	r1, #1
 8003c36:	6894      	ldr	r4, [r2, #8]
 8003c38:	402c      	ands	r4, r5
 8003c3a:	4321      	orrs	r1, r4
 8003c3c:	6091      	str	r1, [r2, #8]
      else
      {
        /* Nothing to do */
      }
      /* Conversion handler is created, will be enabled by the first call to RCM_ExecRegularConv */
      RCM_NoInj_array[handle].enable = false;
 8003c3e:	2106      	movs	r1, #6
 8003c40:	2400      	movs	r4, #0
 8003c42:	4359      	muls	r1, r3
 8003c44:	4a0b      	ldr	r2, [pc, #44]	; (8003c74 <RCM_RegisterRegConv+0x8c>)
 8003c46:	548c      	strb	r4, [r1, r2]
      RCM_NoInj_array[handle].next = handle;
 8003c48:	1852      	adds	r2, r2, r1
 8003c4a:	7153      	strb	r3, [r2, #5]
      RCM_NoInj_array[handle].prev = handle;
 8003c4c:	7113      	strb	r3, [r2, #4]
      /* Nothing to do handle is already set to error value : 255 */
    }
#ifdef NULL_PTR_CHECK_REG_CON_MNG
  }
#endif
  regConv->convHandle = handle;
 8003c4e:	7303      	strb	r3, [r0, #12]
}
 8003c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003c52:	790d      	ldrb	r5, [r1, #4]
 8003c54:	7904      	ldrb	r4, [r0, #4]
 8003c56:	42a5      	cmp	r5, r4
 8003c58:	d1d2      	bne.n	8003c00 <RCM_RegisterRegConv+0x18>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8003c5a:	680c      	ldr	r4, [r1, #0]
 8003c5c:	6801      	ldr	r1, [r0, #0]
 8003c5e:	428c      	cmp	r4, r1
 8003c60:	d1ce      	bne.n	8003c00 <RCM_RegisterRegConv+0x18>
 8003c62:	0013      	movs	r3, r2
          i = RCM_MAX_CONV; /* We can skip the rest of the loop */
 8003c64:	003a      	movs	r2, r7
 8003c66:	e7cb      	b.n	8003c00 <RCM_RegisterRegConv+0x18>
 8003c68:	20000814 	.word	0x20000814
 8003c6c:	200007d0 	.word	0x200007d0
 8003c70:	7fffffe8 	.word	0x7fffffe8
 8003c74:	200007f0 	.word	0x200007f0

08003c78 <RCM_ExecRegularConv>:
 * Otherwise, the latest stored conversion result will be returned.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
uint16_t RCM_ExecRegularConv (RegConv_t *regConv)
{
 8003c78:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t handle = regConv->convHandle;
  uint8_t formerNext;
  uint8_t i=0;
  uint8_t LastEnable = RCM_MAX_CONV;

  if (false == RCM_NoInj_array [handle].enable)
 8003c7a:	2606      	movs	r6, #6
 8003c7c:	0034      	movs	r4, r6
  uint8_t handle = regConv->convHandle;
 8003c7e:	7b03      	ldrb	r3, [r0, #12]
  if (false == RCM_NoInj_array [handle].enable)
 8003c80:	4940      	ldr	r1, [pc, #256]	; (8003d84 <RCM_ExecRegularConv+0x10c>)
 8003c82:	435c      	muls	r4, r3
 8003c84:	5c62      	ldrb	r2, [r4, r1]
 8003c86:	2a00      	cmp	r2, #0
 8003c88:	d132      	bne.n	8003cf0 <RCM_ExecRegularConv+0x78>
  uint8_t LastEnable = RCM_MAX_CONV;
 8003c8a:	2504      	movs	r5, #4
      {
        if (RCM_NoInj_array[i].next > handle)
        /* We found a previous reg conv to link with */
        {
          formerNext = RCM_NoInj_array [i].next;
          RCM_NoInj_array[handle].next = formerNext;
 8003c8c:	190c      	adds	r4, r1, r4
      if (true == RCM_NoInj_array [i].enable)
 8003c8e:	0037      	movs	r7, r6
 8003c90:	4357      	muls	r7, r2
 8003c92:	5dc8      	ldrb	r0, [r1, r7]
 8003c94:	2800      	cmp	r0, #0
 8003c96:	d00a      	beq.n	8003cae <RCM_ExecRegularConv+0x36>
        if (RCM_NoInj_array[i].next > handle)
 8003c98:	19cf      	adds	r7, r1, r7
 8003c9a:	7978      	ldrb	r0, [r7, #5]
 8003c9c:	4298      	cmp	r0, r3
 8003c9e:	d968      	bls.n	8003d72 <RCM_ExecRegularConv+0xfa>
          RCM_NoInj_array[handle].prev = i;
 8003ca0:	7122      	strb	r2, [r4, #4]
          RCM_NoInj_array[i].next = handle;
          RCM_NoInj_array[formerNext].prev = handle;
          i = RCM_MAX_CONV; /* Stop the loop, handler inserted */
 8003ca2:	2204      	movs	r2, #4
          RCM_NoInj_array[handle].next = formerNext;
 8003ca4:	7160      	strb	r0, [r4, #5]
          RCM_NoInj_array[formerNext].prev = handle;
 8003ca6:	4370      	muls	r0, r6
 8003ca8:	1808      	adds	r0, r1, r0
          RCM_NoInj_array[i].next = handle;
 8003caa:	717b      	strb	r3, [r7, #5]
          RCM_NoInj_array[formerNext].prev = handle;
 8003cac:	7103      	strb	r3, [r0, #4]
      }
      else
      {
        /* Nothing to do */
      }
      i++;
 8003cae:	3201      	adds	r2, #1
 8003cb0:	b2d2      	uxtb	r2, r2
      if (RCM_MAX_CONV == i)
 8003cb2:	2a04      	cmp	r2, #4
 8003cb4:	d162      	bne.n	8003d7c <RCM_ExecRegularConv+0x104>
      /* We reach end of the array without handler inserted */
      {
       if (LastEnable != RCM_MAX_CONV )
 8003cb6:	2d04      	cmp	r5, #4
 8003cb8:	d05d      	beq.n	8003d76 <RCM_ExecRegularConv+0xfe>
       /* We find a regular conversion with smaller position to be linked with */
       {
         formerNext = RCM_NoInj_array[LastEnable].next;
 8003cba:	3202      	adds	r2, #2
 8003cbc:	0010      	movs	r0, r2
         RCM_NoInj_array[handle].next = formerNext;
 8003cbe:	0014      	movs	r4, r2
         formerNext = RCM_NoInj_array[LastEnable].next;
 8003cc0:	4368      	muls	r0, r5
 8003cc2:	1808      	adds	r0, r1, r0
 8003cc4:	7946      	ldrb	r6, [r0, #5]
         RCM_NoInj_array[handle].next = formerNext;
 8003cc6:	435c      	muls	r4, r3
         RCM_NoInj_array[handle].prev = LastEnable;
         RCM_NoInj_array[LastEnable].next = handle;
         RCM_NoInj_array[formerNext].prev = handle;
 8003cc8:	4372      	muls	r2, r6
         RCM_NoInj_array[handle].next = formerNext;
 8003cca:	190c      	adds	r4, r1, r4
         RCM_NoInj_array[formerNext].prev = handle;
 8003ccc:	188a      	adds	r2, r1, r2
         RCM_NoInj_array[handle].next = formerNext;
 8003cce:	7166      	strb	r6, [r4, #5]
         RCM_NoInj_array[handle].prev = LastEnable;
 8003cd0:	7125      	strb	r5, [r4, #4]
         RCM_NoInj_array[LastEnable].next = handle;
 8003cd2:	7143      	strb	r3, [r0, #5]
         RCM_NoInj_array[formerNext].prev = handle;
 8003cd4:	7113      	strb	r3, [r2, #4]
      {
        /* Nothing to do we are parsing the array, nothing inserted yet */
      }
    }
    /* The handle is now linked with others, we can set the enable flag */
    RCM_NoInj_array[handle].enable = true;
 8003cd6:	2206      	movs	r2, #6
 8003cd8:	0010      	movs	r0, r2
 8003cda:	2401      	movs	r4, #1
 8003cdc:	4358      	muls	r0, r3
 8003cde:	520c      	strh	r4, [r1, r0]
    RCM_NoInj_array[handle].status = notvalid;
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8003ce0:	4829      	ldr	r0, [pc, #164]	; (8003d88 <RCM_ExecRegularConv+0x110>)
 8003ce2:	7804      	ldrb	r4, [r0, #0]
 8003ce4:	4362      	muls	r2, r4
 8003ce6:	188a      	adds	r2, r1, r2
 8003ce8:	7852      	ldrb	r2, [r2, #1]
 8003cea:	2a01      	cmp	r2, #1
 8003cec:	d000      	beq.n	8003cf0 <RCM_ExecRegularConv+0x78>
    {/* Select the new conversion to be the next scheduled only if a conversion is not ongoing */
      RCM_currentHandle = handle;
 8003cee:	7003      	strb	r3, [r0, #0]
  }
  else
  {
    /* Nothing to do the current handle is already scheduled */
  }
  if (false == PWM_Handle_M1.ADCRegularLocked)
 8003cf0:	4a26      	ldr	r2, [pc, #152]	; (8003d8c <RCM_ExecRegularConv+0x114>)
 8003cf2:	32ca      	adds	r2, #202	; 0xca
 8003cf4:	7812      	ldrb	r2, [r2, #0]
 8003cf6:	2a00      	cmp	r2, #0
 8003cf8:	d135      	bne.n	8003d66 <RCM_ExecRegularConv+0xee>
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8003cfa:	2603      	movs	r6, #3
  /* The ADC is free to be used asynchronously */
  {
    LL_ADC_REG_SetDMATransfer(RCM_handle_array[handle]->regADC, LL_ADC_REG_DMA_TRANSFER_NONE);
 8003cfc:	4c24      	ldr	r4, [pc, #144]	; (8003d90 <RCM_ExecRegularConv+0x118>)
 8003cfe:	009a      	lsls	r2, r3, #2
 8003d00:	5915      	ldr	r5, [r2, r4]
 8003d02:	682a      	ldr	r2, [r5, #0]
 8003d04:	68d0      	ldr	r0, [r2, #12]
 8003d06:	43b0      	bics	r0, r6
 8003d08:	60d0      	str	r0, [r2, #12]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8003d0a:	68d0      	ldr	r0, [r2, #12]
 8003d0c:	4e21      	ldr	r6, [pc, #132]	; (8003d94 <RCM_ExecRegularConv+0x11c>)
 8003d0e:	4030      	ands	r0, r6
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8003d10:	2607      	movs	r6, #7
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8003d12:	60d0      	str	r0, [r2, #12]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8003d14:	6950      	ldr	r0, [r2, #20]
 8003d16:	43b0      	bics	r0, r6
 8003d18:	68ae      	ldr	r6, [r5, #8]
 8003d1a:	4330      	orrs	r0, r6
 8003d1c:	6150      	str	r0, [r2, #20]
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003d1e:	2080      	movs	r0, #128	; 0x80
    LL_ADC_REG_SetTriggerSource(RCM_handle_array[handle]->regADC, LL_ADC_REG_TRIG_SOFTWARE);

    /* Set Sampling time and channel */
    LL_ADC_SetSamplingTimeCommonChannels(RCM_handle_array[handle]->regADC, RCM_handle_array[handle]->samplingTime);
    LL_ADC_REG_SetSequencerChannels(RCM_handle_array[handle]->regADC,
                                    __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8003d20:	792d      	ldrb	r5, [r5, #4]
 8003d22:	0180      	lsls	r0, r0, #6
 8003d24:	40a8      	lsls	r0, r5
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8003d26:	2504      	movs	r5, #4
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003d28:	0b40      	lsrs	r0, r0, #13
 8003d2a:	6290      	str	r0, [r2, #40]	; 0x28
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8003d2c:	6015      	str	r5, [r2, #0]
  MODIFY_REG(ADCx->CR,
 8003d2e:	6890      	ldr	r0, [r2, #8]
 8003d30:	4e19      	ldr	r6, [pc, #100]	; (8003d98 <RCM_ExecRegularConv+0x120>)
 8003d32:	4030      	ands	r0, r6
 8003d34:	4328      	orrs	r0, r5
 8003d36:	6090      	str	r0, [r2, #8]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8003d38:	6810      	ldr	r0, [r2, #0]

    /* Start ADC conversion */
    LL_ADC_REG_StartConversion(RCM_handle_array[handle]->regADC);

    /* Wait EOC */
    while ( 0U == LL_ADC_IsActiveFlag_EOC(RCM_handle_array[handle]->regADC))
 8003d3a:	4228      	tst	r0, r5
 8003d3c:	d0fc      	beq.n	8003d38 <RCM_ExecRegularConv+0xc0>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8003d3e:	6c10      	ldr	r0, [r2, #64]	; 0x40
    {
      /* Nothing to do */
    }

    /* Read the "Regular" conversion (Not related to current sampling) */
    RCM_NoInj_array[handle].value = LL_ADC_REG_ReadConversionData12(RCM_handle_array[handle]->regADC);
 8003d40:	2206      	movs	r2, #6
 8003d42:	435a      	muls	r2, r3
    LL_ADC_REG_SetDMATransfer(RCM_handle_array[RCM_currentHandle]->regADC, LL_ADC_REG_DMA_TRANSFER_LIMITED);
 8003d44:	4d10      	ldr	r5, [pc, #64]	; (8003d88 <RCM_ExecRegularConv+0x110>)
    RCM_NoInj_array[handle].value = LL_ADC_REG_ReadConversionData12(RCM_handle_array[handle]->regADC);
 8003d46:	188a      	adds	r2, r1, r2
    LL_ADC_REG_SetDMATransfer(RCM_handle_array[RCM_currentHandle]->regADC, LL_ADC_REG_DMA_TRANSFER_LIMITED);
 8003d48:	7829      	ldrb	r1, [r5, #0]
    RCM_NoInj_array[handle].value = LL_ADC_REG_ReadConversionData12(RCM_handle_array[handle]->regADC);
 8003d4a:	8050      	strh	r0, [r2, #2]
    LL_ADC_REG_SetDMATransfer(RCM_handle_array[RCM_currentHandle]->regADC, LL_ADC_REG_DMA_TRANSFER_LIMITED);
 8003d4c:	0089      	lsls	r1, r1, #2
 8003d4e:	5861      	ldr	r1, [r4, r1]
 8003d50:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8003d52:	2103      	movs	r1, #3
 8003d54:	68e0      	ldr	r0, [r4, #12]
 8003d56:	4388      	bics	r0, r1
 8003d58:	3902      	subs	r1, #2
 8003d5a:	4301      	orrs	r1, r0
 8003d5c:	60e1      	str	r1, [r4, #12]
    RCM_currentHandle = RCM_NoInj_array[handle].next;
 8003d5e:	7951      	ldrb	r1, [r2, #5]
 8003d60:	7029      	strb	r1, [r5, #0]
    RCM_NoInj_array[handle].status = valid;
 8003d62:	2102      	movs	r1, #2
 8003d64:	7051      	strb	r1, [r2, #1]
  }
  else
  {
    /* Nothing to do */
  }
  retVal = RCM_NoInj_array[handle].value;
 8003d66:	2106      	movs	r1, #6
 8003d68:	434b      	muls	r3, r1
 8003d6a:	4a06      	ldr	r2, [pc, #24]	; (8003d84 <RCM_ExecRegularConv+0x10c>)
 8003d6c:	18d2      	adds	r2, r2, r3
  return (retVal);
 8003d6e:	8850      	ldrh	r0, [r2, #2]
}
 8003d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d72:	0015      	movs	r5, r2
 8003d74:	e79b      	b.n	8003cae <RCM_ExecRegularConv+0x36>
         RCM_currentHandle = handle;
 8003d76:	4a04      	ldr	r2, [pc, #16]	; (8003d88 <RCM_ExecRegularConv+0x110>)
 8003d78:	7013      	strb	r3, [r2, #0]
    while (i < RCM_MAX_CONV)
 8003d7a:	e7ac      	b.n	8003cd6 <RCM_ExecRegularConv+0x5e>
 8003d7c:	2a03      	cmp	r2, #3
 8003d7e:	d800      	bhi.n	8003d82 <RCM_ExecRegularConv+0x10a>
 8003d80:	e785      	b.n	8003c8e <RCM_ExecRegularConv+0x16>
 8003d82:	e7a8      	b.n	8003cd6 <RCM_ExecRegularConv+0x5e>
 8003d84:	200007f0 	.word	0x200007f0
 8003d88:	20000810 	.word	0x20000810
 8003d8c:	20000180 	.word	0x20000180
 8003d90:	20000814 	.word	0x20000814
 8003d94:	fffff23f 	.word	0xfffff23f
 8003d98:	7fffffe8 	.word	0x7fffffe8

08003d9c <RCM_ExecUserConv>:
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv()
{
  uint8_t handle;
  if (RCM_UserConvHandle != NULL)
 8003d9c:	4b12      	ldr	r3, [pc, #72]	; (8003de8 <RCM_ExecUserConv+0x4c>)
{
 8003d9e:	b570      	push	{r4, r5, r6, lr}
  if (RCM_UserConvHandle != NULL)
 8003da0:	681d      	ldr	r5, [r3, #0]
 8003da2:	2d00      	cmp	r5, #0
 8003da4:	d01e      	beq.n	8003de4 <RCM_ExecUserConv+0x48>
  {
    handle = RCM_UserConvHandle->convHandle;
    if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 8003da6:	4e11      	ldr	r6, [pc, #68]	; (8003dec <RCM_ExecUserConv+0x50>)
    handle = RCM_UserConvHandle->convHandle;
 8003da8:	7b2c      	ldrb	r4, [r5, #12]
    if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 8003daa:	7833      	ldrb	r3, [r6, #0]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d119      	bne.n	8003de4 <RCM_ExecUserConv+0x48>
    {
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8003db0:	0028      	movs	r0, r5
 8003db2:	f7ff ff61 	bl	8003c78 <RCM_ExecRegularConv>
      /* Regular conversion is read from RCM_NoInj_array but we must take care that first conversion is done */
      /* Status could also be ongoing, but decision is taken to provide previous conversion
       * instead of waiting for RCM_NoInj_array [handle].status == valid */
      if (RCM_NoInj_array [handle].status != notvalid)
 8003db6:	2206      	movs	r2, #6
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8003db8:	4b0d      	ldr	r3, [pc, #52]	; (8003df0 <RCM_ExecUserConv+0x54>)
      if (RCM_NoInj_array [handle].status != notvalid)
 8003dba:	4362      	muls	r2, r4
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8003dbc:	8018      	strh	r0, [r3, #0]
      if (RCM_NoInj_array [handle].status != notvalid)
 8003dbe:	4b0d      	ldr	r3, [pc, #52]	; (8003df4 <RCM_ExecUserConv+0x58>)
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8003dc0:	0001      	movs	r1, r0
      if (RCM_NoInj_array [handle].status != notvalid)
 8003dc2:	189b      	adds	r3, r3, r2
 8003dc4:	785b      	ldrb	r3, [r3, #1]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d001      	beq.n	8003dce <RCM_ExecUserConv+0x32>
      {
        RCM_UserConvState = RCM_USERCONV_EOC;
 8003dca:	2302      	movs	r3, #2
 8003dcc:	7033      	strb	r3, [r6, #0]
      }
      else
      {
        /* Nothing to do */
      }
      if (RCM_CB_array[handle].cb != NULL)
 8003dce:	4a0a      	ldr	r2, [pc, #40]	; (8003df8 <RCM_ExecUserConv+0x5c>)
 8003dd0:	00e4      	lsls	r4, r4, #3
 8003dd2:	58a3      	ldr	r3, [r4, r2]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d005      	beq.n	8003de4 <RCM_ExecUserConv+0x48>
      {
        RCM_UserConvState = RCM_USERCONV_IDLE;
 8003dd8:	2000      	movs	r0, #0
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8003dda:	1912      	adds	r2, r2, r4
        RCM_UserConvState = RCM_USERCONV_IDLE;
 8003ddc:	7030      	strb	r0, [r6, #0]
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8003dde:	6852      	ldr	r2, [r2, #4]
 8003de0:	0028      	movs	r0, r5
 8003de2:	4798      	blx	r3
  }
  else
  {
     /* Nothing to do */
  }
}
 8003de4:	bd70      	pop	{r4, r5, r6, pc}
 8003de6:	46c0      	nop			; (mov r8, r8)
 8003de8:	20000808 	.word	0x20000808
 8003dec:	2000080c 	.word	0x2000080c
 8003df0:	2000080e 	.word	0x2000080e
 8003df4:	200007f0 	.word	0x200007f0
 8003df8:	200007d0 	.word	0x200007d0

08003dfc <RCM_ExecNextConv>:
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecNextConv(void)
{
  if (true == RCM_NoInj_array [RCM_currentHandle].enable)
 8003dfc:	2006      	movs	r0, #6
{
 8003dfe:	b570      	push	{r4, r5, r6, lr}
  if (true == RCM_NoInj_array [RCM_currentHandle].enable)
 8003e00:	4b14      	ldr	r3, [pc, #80]	; (8003e54 <RCM_ExecNextConv+0x58>)
 8003e02:	4915      	ldr	r1, [pc, #84]	; (8003e58 <RCM_ExecNextConv+0x5c>)
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	4358      	muls	r0, r3
 8003e08:	5c42      	ldrb	r2, [r0, r1]
 8003e0a:	2a00      	cmp	r2, #0
 8003e0c:	d021      	beq.n	8003e52 <RCM_ExecNextConv+0x56>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8003e0e:	2404      	movs	r4, #4
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8003e10:	2603      	movs	r6, #3
    /* When this function is called, the ADC conversions triggered by External
       event for current reading has been completed.
       ADC is therefore ready to be started because already stopped */

    /* Clear EOC */
    LL_ADC_ClearFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8003e12:	4a12      	ldr	r2, [pc, #72]	; (8003e5c <RCM_ExecNextConv+0x60>)
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	589d      	ldr	r5, [r3, r2]
    (void)LL_ADC_REG_SetSequencerChannels(RCM_handle_array[RCM_currentHandle]->regADC,
                                       __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));

    /* Start ADC for regular conversion */
    LL_ADC_REG_StartConversion(RCM_handle_array[RCM_currentHandle]->regADC);
    RCM_NoInj_array[RCM_currentHandle].status = ongoing;
 8003e18:	1809      	adds	r1, r1, r0
    LL_ADC_ClearFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8003e1a:	682b      	ldr	r3, [r5, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8003e1c:	601c      	str	r4, [r3, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8003e1e:	68da      	ldr	r2, [r3, #12]
 8003e20:	43b2      	bics	r2, r6
 8003e22:	60da      	str	r2, [r3, #12]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8003e24:	68da      	ldr	r2, [r3, #12]
 8003e26:	4e0e      	ldr	r6, [pc, #56]	; (8003e60 <RCM_ExecNextConv+0x64>)
 8003e28:	4032      	ands	r2, r6
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8003e2a:	2607      	movs	r6, #7
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8003e2c:	60da      	str	r2, [r3, #12]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8003e2e:	695a      	ldr	r2, [r3, #20]
 8003e30:	43b2      	bics	r2, r6
 8003e32:	68ae      	ldr	r6, [r5, #8]
 8003e34:	4332      	orrs	r2, r6
 8003e36:	615a      	str	r2, [r3, #20]
                                       __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 8003e38:	792a      	ldrb	r2, [r5, #4]
 8003e3a:	2501      	movs	r5, #1
 8003e3c:	002e      	movs	r6, r5
 8003e3e:	4096      	lsls	r6, r2
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003e40:	0372      	lsls	r2, r6, #13
 8003e42:	0b52      	lsrs	r2, r2, #13
 8003e44:	629a      	str	r2, [r3, #40]	; 0x28
  MODIFY_REG(ADCx->CR,
 8003e46:	689a      	ldr	r2, [r3, #8]
 8003e48:	4e06      	ldr	r6, [pc, #24]	; (8003e64 <RCM_ExecNextConv+0x68>)
 8003e4a:	4032      	ands	r2, r6
 8003e4c:	4314      	orrs	r4, r2
 8003e4e:	609c      	str	r4, [r3, #8]
    RCM_NoInj_array[RCM_currentHandle].status = ongoing;
 8003e50:	704d      	strb	r5, [r1, #1]
  }
  else
  {
    /* Nothing to do, conversion not enabled have already notvalid status */
  }
}
 8003e52:	bd70      	pop	{r4, r5, r6, pc}
 8003e54:	20000810 	.word	0x20000810
 8003e58:	200007f0 	.word	0x200007f0
 8003e5c:	20000814 	.word	0x20000814
 8003e60:	fffff23f 	.word	0xfffff23f
 8003e64:	7fffffe8 	.word	0x7fffffe8

08003e68 <RCM_ReadOngoingConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ReadOngoingConv(void)
{
 8003e68:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t result;
  RCM_status_t status;

  status = RCM_NoInj_array[RCM_currentHandle].status;
 8003e6a:	4c10      	ldr	r4, [pc, #64]	; (8003eac <RCM_ReadOngoingConv+0x44>)
  result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8003e6c:	4b10      	ldr	r3, [pc, #64]	; (8003eb0 <RCM_ReadOngoingConv+0x48>)
  status = RCM_NoInj_array[RCM_currentHandle].status;
 8003e6e:	7820      	ldrb	r0, [r4, #0]
  if (( valid == status ) || ( notvalid == status ) || ( 0U == result ))
 8003e70:	2702      	movs	r7, #2
  result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8003e72:	0082      	lsls	r2, r0, #2
 8003e74:	58d3      	ldr	r3, [r2, r3]
  status = RCM_NoInj_array[RCM_currentHandle].status;
 8003e76:	4a0f      	ldr	r2, [pc, #60]	; (8003eb4 <RCM_ReadOngoingConv+0x4c>)
  result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8003e78:	6819      	ldr	r1, [r3, #0]
  status = RCM_NoInj_array[RCM_currentHandle].status;
 8003e7a:	2306      	movs	r3, #6
 8003e7c:	4343      	muls	r3, r0
 8003e7e:	18d3      	adds	r3, r2, r3
  if (( valid == status ) || ( notvalid == status ) || ( 0U == result ))
 8003e80:	785d      	ldrb	r5, [r3, #1]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8003e82:	680e      	ldr	r6, [r1, #0]
 8003e84:	43bd      	bics	r5, r7
 8003e86:	d00a      	beq.n	8003e9e <RCM_ReadOngoingConv+0x36>
 8003e88:	0776      	lsls	r6, r6, #29
 8003e8a:	d508      	bpl.n	8003e9e <RCM_ReadOngoingConv+0x36>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8003e8c:	6c0d      	ldr	r5, [r1, #64]	; 0x40
  else
  {
    /* Reading of ADC Converted Value */
    RCM_NoInj_array[RCM_currentHandle].value
                  = LL_ADC_REG_ReadConversionData12(RCM_handle_array[RCM_currentHandle]->regADC);
    RCM_NoInj_array[RCM_currentHandle].status = valid;
 8003e8e:	705f      	strb	r7, [r3, #1]
                  = LL_ADC_REG_ReadConversionData12(RCM_handle_array[RCM_currentHandle]->regADC);
 8003e90:	805d      	strh	r5, [r3, #2]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8003e92:	2303      	movs	r3, #3
 8003e94:	68cd      	ldr	r5, [r1, #12]
 8003e96:	439d      	bics	r5, r3
 8003e98:	3b02      	subs	r3, #2
 8003e9a:	432b      	orrs	r3, r5
 8003e9c:	60cb      	str	r3, [r1, #12]
    /* Restore back DMA configuration */
    LL_ADC_REG_SetDMATransfer( RCM_handle_array[RCM_currentHandle]->regADC, LL_ADC_REG_DMA_TRANSFER_LIMITED );
  }

  /* Prepare next conversion */
  RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 8003e9e:	2306      	movs	r3, #6
 8003ea0:	4343      	muls	r3, r0
 8003ea2:	18d2      	adds	r2, r2, r3
 8003ea4:	7953      	ldrb	r3, [r2, #5]
 8003ea6:	7023      	strb	r3, [r4, #0]
}
 8003ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003eaa:	46c0      	nop			; (mov r8, r8)
 8003eac:	20000810 	.word	0x20000810
 8003eb0:	20000814 	.word	0x20000814
 8003eb4:	200007f0 	.word	0x200007f0

08003eb8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003eb8:	2101      	movs	r1, #1
 8003eba:	4b0a      	ldr	r3, [pc, #40]	; (8003ee4 <HAL_MspInit+0x2c>)
{
 8003ebc:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ebe:	699a      	ldr	r2, [r3, #24]
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	619a      	str	r2, [r3, #24]
 8003ec4:	699a      	ldr	r2, [r3, #24]
 8003ec6:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ec8:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003eca:	9200      	str	r2, [sp, #0]
 8003ecc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ece:	69da      	ldr	r2, [r3, #28]
 8003ed0:	0549      	lsls	r1, r1, #21
 8003ed2:	430a      	orrs	r2, r1
 8003ed4:	61da      	str	r2, [r3, #28]
 8003ed6:	69db      	ldr	r3, [r3, #28]
 8003ed8:	400b      	ands	r3, r1
 8003eda:	9301      	str	r3, [sp, #4]
 8003edc:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ede:	b002      	add	sp, #8
 8003ee0:	4770      	bx	lr
 8003ee2:	46c0      	nop			; (mov r8, r8)
 8003ee4:	40021000 	.word	0x40021000

08003ee8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003eea:	0005      	movs	r5, r0
 8003eec:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003eee:	2214      	movs	r2, #20
 8003ef0:	2100      	movs	r1, #0
 8003ef2:	a803      	add	r0, sp, #12
 8003ef4:	f002 f8cb 	bl	800608e <memset>
  if(hadc->Instance==ADC1)
 8003ef8:	4b25      	ldr	r3, [pc, #148]	; (8003f90 <HAL_ADC_MspInit+0xa8>)
 8003efa:	682a      	ldr	r2, [r5, #0]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d144      	bne.n	8003f8a <HAL_ADC_MspInit+0xa2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003f00:	2180      	movs	r1, #128	; 0x80
 8003f02:	4b24      	ldr	r3, [pc, #144]	; (8003f94 <HAL_ADC_MspInit+0xac>)
 8003f04:	0089      	lsls	r1, r1, #2
 8003f06:	699a      	ldr	r2, [r3, #24]
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = M1_CURR_AMPL_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(M1_CURR_AMPL_GPIO_Port, &GPIO_InitStruct);
 8003f08:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003f0a:	430a      	orrs	r2, r1
 8003f0c:	619a      	str	r2, [r3, #24]
 8003f0e:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f10:	2403      	movs	r4, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003f12:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f14:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003f16:	9200      	str	r2, [sp, #0]
 8003f18:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f1a:	695a      	ldr	r2, [r3, #20]
 8003f1c:	0289      	lsls	r1, r1, #10
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	615a      	str	r2, [r3, #20]
 8003f22:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_Pin;
 8003f24:	2720      	movs	r7, #32
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f26:	400a      	ands	r2, r1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f28:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f2a:	9201      	str	r2, [sp, #4]
 8003f2c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f2e:	695a      	ldr	r2, [r3, #20]
 8003f30:	02c9      	lsls	r1, r1, #11
 8003f32:	430a      	orrs	r2, r1
 8003f34:	615a      	str	r2, [r3, #20]
 8003f36:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(M1_CURR_AMPL_GPIO_Port, &GPIO_InitStruct);
 8003f38:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f3a:	400b      	ands	r3, r1
 8003f3c:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(M1_CURR_AMPL_GPIO_Port, &GPIO_InitStruct);
 8003f3e:	a903      	add	r1, sp, #12

    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f40:	2600      	movs	r6, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f42:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f44:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_Pin;
 8003f46:	9703      	str	r7, [sp, #12]
    HAL_GPIO_Init(M1_CURR_AMPL_GPIO_Port, &GPIO_InitStruct);
 8003f48:	f000 fcf0 	bl	800492c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin;
 8003f4c:	2302      	movs	r3, #2
    HAL_GPIO_Init(M1_BUS_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8003f4e:	4812      	ldr	r0, [pc, #72]	; (8003f98 <HAL_ADC_MspInit+0xb0>)
 8003f50:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin;
 8003f52:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f54:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f56:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(M1_BUS_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8003f58:	f000 fce8 	bl	800492c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8003f5c:	4c0f      	ldr	r4, [pc, #60]	; (8003f9c <HAL_ADC_MspInit+0xb4>)
 8003f5e:	4b10      	ldr	r3, [pc, #64]	; (8003fa0 <HAL_ADC_MspInit+0xb8>)
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc.Init.Mode = DMA_CIRCULAR;
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8003f60:	0020      	movs	r0, r4
    hdma_adc.Instance = DMA1_Channel1;
 8003f62:	6023      	str	r3, [r4, #0]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8003f64:	2380      	movs	r3, #128	; 0x80
 8003f66:	60e3      	str	r3, [r4, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003f68:	18db      	adds	r3, r3, r3
 8003f6a:	6123      	str	r3, [r4, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003f6c:	2380      	movs	r3, #128	; 0x80
 8003f6e:	00db      	lsls	r3, r3, #3
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f70:	6066      	str	r6, [r4, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f72:	60a6      	str	r6, [r4, #8]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003f74:	6163      	str	r3, [r4, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8003f76:	61a7      	str	r7, [r4, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8003f78:	61e6      	str	r6, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8003f7a:	f000 fca5 	bl	80048c8 <HAL_DMA_Init>
 8003f7e:	42b0      	cmp	r0, r6
 8003f80:	d001      	beq.n	8003f86 <HAL_ADC_MspInit+0x9e>
    {
      Error_Handler();
 8003f82:	f7fd fc0b 	bl	800179c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8003f86:	632c      	str	r4, [r5, #48]	; 0x30
 8003f88:	6265      	str	r5, [r4, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003f8a:	b009      	add	sp, #36	; 0x24
 8003f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f8e:	46c0      	nop			; (mov r8, r8)
 8003f90:	40012400 	.word	0x40012400
 8003f94:	40021000 	.word	0x40021000
 8003f98:	48000400 	.word	0x48000400
 8003f9c:	200003dc 	.word	0x200003dc
 8003fa0:	40020008 	.word	0x40020008

08003fa4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003fa4:	b530      	push	{r4, r5, lr}
 8003fa6:	0005      	movs	r5, r0
 8003fa8:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003faa:	2214      	movs	r2, #20
 8003fac:	2100      	movs	r1, #0
 8003fae:	a803      	add	r0, sp, #12
 8003fb0:	f002 f86d 	bl	800608e <memset>
  if(htim_pwm->Instance==TIM1)
 8003fb4:	4b2f      	ldr	r3, [pc, #188]	; (8004074 <HAL_TIM_PWM_MspInit+0xd0>)
 8003fb6:	682a      	ldr	r2, [r5, #0]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d159      	bne.n	8004070 <HAL_TIM_PWM_MspInit+0xcc>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003fbc:	2180      	movs	r1, #128	; 0x80
 8003fbe:	4b2e      	ldr	r3, [pc, #184]	; (8004078 <HAL_TIM_PWM_MspInit+0xd4>)
 8003fc0:	0109      	lsls	r1, r1, #4
 8003fc2:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pin = M1_OCP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8003fc4:	482d      	ldr	r0, [pc, #180]	; (800407c <HAL_TIM_PWM_MspInit+0xd8>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	619a      	str	r2, [r3, #24]
 8003fca:	699a      	ldr	r2, [r3, #24]
 8003fcc:	400a      	ands	r2, r1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fce:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003fd0:	9201      	str	r2, [sp, #4]
 8003fd2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fd4:	695a      	ldr	r2, [r3, #20]
 8003fd6:	02c9      	lsls	r1, r1, #11
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	615a      	str	r2, [r3, #20]
 8003fdc:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003fde:	2201      	movs	r2, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fe0:	400b      	ands	r3, r1
 8003fe2:	9302      	str	r3, [sp, #8]
 8003fe4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 8003fe6:	2380      	movs	r3, #128	; 0x80
 8003fe8:	015b      	lsls	r3, r3, #5
 8003fea:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fec:	2302      	movs	r3, #2
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8003fee:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ff0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003ff2:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ff4:	9205      	str	r2, [sp, #20]
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8003ff6:	f000 fc99 	bl	800492c <HAL_GPIO_Init>

    /* TIM1 DMA Init */
    /* TIM1_CH4_TRIG_COM Init */
    hdma_tim1_ch4_trig_com.Instance = DMA1_Channel4;
 8003ffa:	4c21      	ldr	r4, [pc, #132]	; (8004080 <HAL_TIM_PWM_MspInit+0xdc>)
 8003ffc:	4b21      	ldr	r3, [pc, #132]	; (8004084 <HAL_TIM_PWM_MspInit+0xe0>)
    hdma_tim1_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
    hdma_tim1_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_tim1_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_tim1_ch4_trig_com.Init.Mode = DMA_CIRCULAR;
    hdma_tim1_ch4_trig_com.Init.Priority = DMA_PRIORITY_HIGH;
    if (HAL_DMA_Init(&hdma_tim1_ch4_trig_com) != HAL_OK)
 8003ffe:	0020      	movs	r0, r4
    hdma_tim1_ch4_trig_com.Instance = DMA1_Channel4;
 8004000:	6023      	str	r3, [r4, #0]
    hdma_tim1_ch4_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004002:	2310      	movs	r3, #16
 8004004:	6063      	str	r3, [r4, #4]
    hdma_tim1_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 8004006:	2300      	movs	r3, #0
 8004008:	60a3      	str	r3, [r4, #8]
    hdma_tim1_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 800400a:	3380      	adds	r3, #128	; 0x80
 800400c:	60e3      	str	r3, [r4, #12]
    hdma_tim1_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800400e:	3380      	adds	r3, #128	; 0x80
 8004010:	6123      	str	r3, [r4, #16]
    hdma_tim1_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004012:	2380      	movs	r3, #128	; 0x80
 8004014:	00db      	lsls	r3, r3, #3
 8004016:	6163      	str	r3, [r4, #20]
    hdma_tim1_ch4_trig_com.Init.Mode = DMA_CIRCULAR;
 8004018:	2320      	movs	r3, #32
 800401a:	61a3      	str	r3, [r4, #24]
    hdma_tim1_ch4_trig_com.Init.Priority = DMA_PRIORITY_HIGH;
 800401c:	2380      	movs	r3, #128	; 0x80
 800401e:	019b      	lsls	r3, r3, #6
 8004020:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch4_trig_com) != HAL_OK)
 8004022:	f000 fc51 	bl	80048c8 <HAL_DMA_Init>
 8004026:	2800      	cmp	r0, #0
 8004028:	d001      	beq.n	800402e <HAL_TIM_PWM_MspInit+0x8a>
    {
      Error_Handler();
 800402a:	f7fd fbb7 	bl	800179c <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim1_ch4_trig_com);
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim1_ch4_trig_com);
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim1_ch4_trig_com);

    /* TIM1_CH3_UP Init */
    hdma_tim1_ch3_up.Instance = DMA1_Channel5;
 800402e:	4b16      	ldr	r3, [pc, #88]	; (8004088 <HAL_TIM_PWM_MspInit+0xe4>)
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim1_ch4_trig_com);
 8004030:	632c      	str	r4, [r5, #48]	; 0x30
 8004032:	6265      	str	r5, [r4, #36]	; 0x24
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim1_ch4_trig_com);
 8004034:	63ac      	str	r4, [r5, #56]	; 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim1_ch4_trig_com);
 8004036:	636c      	str	r4, [r5, #52]	; 0x34
    hdma_tim1_ch3_up.Instance = DMA1_Channel5;
 8004038:	4c14      	ldr	r4, [pc, #80]	; (800408c <HAL_TIM_PWM_MspInit+0xe8>)
 800403a:	6023      	str	r3, [r4, #0]
    hdma_tim1_ch3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800403c:	2310      	movs	r3, #16
 800403e:	6063      	str	r3, [r4, #4]
    hdma_tim1_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8004040:	2300      	movs	r3, #0
 8004042:	60a3      	str	r3, [r4, #8]
    hdma_tim1_ch3_up.Init.MemInc = DMA_MINC_ENABLE;
 8004044:	3380      	adds	r3, #128	; 0x80
 8004046:	60e3      	str	r3, [r4, #12]
    hdma_tim1_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004048:	3380      	adds	r3, #128	; 0x80
 800404a:	6123      	str	r3, [r4, #16]
    hdma_tim1_ch3_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800404c:	2380      	movs	r3, #128	; 0x80
 800404e:	00db      	lsls	r3, r3, #3
 8004050:	6163      	str	r3, [r4, #20]
    hdma_tim1_ch3_up.Init.Mode = DMA_CIRCULAR;
 8004052:	2320      	movs	r3, #32
 8004054:	61a3      	str	r3, [r4, #24]
    hdma_tim1_ch3_up.Init.Priority = DMA_PRIORITY_HIGH;
 8004056:	2380      	movs	r3, #128	; 0x80
    if (HAL_DMA_Init(&hdma_tim1_ch3_up) != HAL_OK)
 8004058:	0020      	movs	r0, r4
    hdma_tim1_ch3_up.Init.Priority = DMA_PRIORITY_HIGH;
 800405a:	019b      	lsls	r3, r3, #6
 800405c:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch3_up) != HAL_OK)
 800405e:	f000 fc33 	bl	80048c8 <HAL_DMA_Init>
 8004062:	2800      	cmp	r0, #0
 8004064:	d001      	beq.n	800406a <HAL_TIM_PWM_MspInit+0xc6>
    {
      Error_Handler();
 8004066:	f7fd fb99 	bl	800179c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3_up);
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_ch3_up);
 800406a:	622c      	str	r4, [r5, #32]
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3_up);
 800406c:	62ec      	str	r4, [r5, #44]	; 0x2c
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_ch3_up);
 800406e:	6265      	str	r5, [r4, #36]	; 0x24
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004070:	b009      	add	sp, #36	; 0x24
 8004072:	bd30      	pop	{r4, r5, pc}
 8004074:	40012c00 	.word	0x40012c00
 8004078:	40021000 	.word	0x40021000
 800407c:	48000400 	.word	0x48000400
 8004080:	20000464 	.word	0x20000464
 8004084:	40020044 	.word	0x40020044
 8004088:	40020058 	.word	0x40020058
 800408c:	20000420 	.word	0x20000420

08004090 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004090:	b510      	push	{r4, lr}
 8004092:	0004      	movs	r4, r0
 8004094:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004096:	2214      	movs	r2, #20
 8004098:	2100      	movs	r1, #0
 800409a:	a803      	add	r0, sp, #12
 800409c:	f001 fff7 	bl	800608e <memset>
  if(htim_base->Instance==TIM2)
 80040a0:	2380      	movs	r3, #128	; 0x80
 80040a2:	6822      	ldr	r2, [r4, #0]
 80040a4:	05db      	lsls	r3, r3, #23
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d11d      	bne.n	80040e6 <HAL_TIM_Base_MspInit+0x56>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80040aa:	2101      	movs	r1, #1
 80040ac:	4b0f      	ldr	r3, [pc, #60]	; (80040ec <HAL_TIM_Base_MspInit+0x5c>)
    GPIO_InitStruct.Pin = M1_HALL_H1_Pin|M1_HALL_H2_Pin|M1_HALL_H3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040ae:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_TIM2_CLK_ENABLE();
 80040b0:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040b2:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_TIM2_CLK_ENABLE();
 80040b4:	430a      	orrs	r2, r1
 80040b6:	61da      	str	r2, [r3, #28]
 80040b8:	69da      	ldr	r2, [r3, #28]
 80040ba:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040bc:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_TIM2_CLK_ENABLE();
 80040be:	9201      	str	r2, [sp, #4]
 80040c0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040c2:	695a      	ldr	r2, [r3, #20]
 80040c4:	0289      	lsls	r1, r1, #10
 80040c6:	430a      	orrs	r2, r1
 80040c8:	615a      	str	r2, [r3, #20]
 80040ca:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80040cc:	2203      	movs	r2, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040ce:	400b      	ands	r3, r1
 80040d0:	9302      	str	r3, [sp, #8]
 80040d2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = M1_HALL_H1_Pin|M1_HALL_H2_Pin|M1_HALL_H3_Pin;
 80040d4:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040d6:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = M1_HALL_H1_Pin|M1_HALL_H2_Pin|M1_HALL_H3_Pin;
 80040d8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040da:	3b05      	subs	r3, #5
 80040dc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80040de:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80040e0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040e2:	f000 fc23 	bl	800492c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80040e6:	b008      	add	sp, #32
 80040e8:	bd10      	pop	{r4, pc}
 80040ea:	46c0      	nop			; (mov r8, r8)
 80040ec:	40021000 	.word	0x40021000

080040f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80040f0:	b570      	push	{r4, r5, r6, lr}
 80040f2:	0004      	movs	r4, r0
 80040f4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040f6:	2214      	movs	r2, #20
 80040f8:	2100      	movs	r1, #0
 80040fa:	a803      	add	r0, sp, #12
 80040fc:	f001 ffc7 	bl	800608e <memset>
  if(htim->Instance==TIM1)
 8004100:	4b19      	ldr	r3, [pc, #100]	; (8004168 <HAL_TIM_MspPostInit+0x78>)
 8004102:	6822      	ldr	r2, [r4, #0]
 8004104:	429a      	cmp	r2, r3
 8004106:	d12c      	bne.n	8004162 <HAL_TIM_MspPostInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004108:	2180      	movs	r1, #128	; 0x80
 800410a:	4b18      	ldr	r3, [pc, #96]	; (800416c <HAL_TIM_MspPostInit+0x7c>)
 800410c:	02c9      	lsls	r1, r1, #11
 800410e:	695a      	ldr	r2, [r3, #20]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004110:	2402      	movs	r4, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004112:	430a      	orrs	r2, r1
 8004114:	615a      	str	r2, [r3, #20]
 8004116:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004118:	2601      	movs	r6, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800411a:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800411c:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800411e:	9201      	str	r2, [sp, #4]
 8004120:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004122:	695a      	ldr	r2, [r3, #20]
 8004124:	0289      	lsls	r1, r1, #10
 8004126:	430a      	orrs	r2, r1
 8004128:	615a      	str	r2, [r3, #20]
 800412a:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800412c:	2503      	movs	r5, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800412e:	400b      	ands	r3, r1
 8004130:	9302      	str	r3, [sp, #8]
 8004132:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8004134:	23e0      	movs	r3, #224	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004136:	480e      	ldr	r0, [pc, #56]	; (8004170 <HAL_TIM_MspPostInit+0x80>)
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8004138:	021b      	lsls	r3, r3, #8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800413a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 800413c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800413e:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004140:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004142:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8004144:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004146:	f000 fbf1 	bl	800492c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 800414a:	23e0      	movs	r3, #224	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800414c:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 800414e:	00db      	lsls	r3, r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004150:	a903      	add	r1, sp, #12
 8004152:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8004154:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004156:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004158:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800415a:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800415c:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800415e:	f000 fbe5 	bl	800492c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004162:	b008      	add	sp, #32
 8004164:	bd70      	pop	{r4, r5, r6, pc}
 8004166:	46c0      	nop			; (mov r8, r8)
 8004168:	40012c00 	.word	0x40012c00
 800416c:	40021000 	.word	0x40021000
 8004170:	48000400 	.word	0x48000400

08004174 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004174:	b530      	push	{r4, r5, lr}
 8004176:	0005      	movs	r5, r0
 8004178:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800417a:	2214      	movs	r2, #20
 800417c:	2100      	movs	r1, #0
 800417e:	a803      	add	r0, sp, #12
 8004180:	f001 ff85 	bl	800608e <memset>
  if(huart->Instance==USART1)
 8004184:	4b25      	ldr	r3, [pc, #148]	; (800421c <HAL_UART_MspInit+0xa8>)
 8004186:	682a      	ldr	r2, [r5, #0]
 8004188:	429a      	cmp	r2, r3
 800418a:	d145      	bne.n	8004218 <HAL_UART_MspInit+0xa4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800418c:	2180      	movs	r1, #128	; 0x80
 800418e:	4b24      	ldr	r3, [pc, #144]	; (8004220 <HAL_UART_MspInit+0xac>)
 8004190:	01c9      	lsls	r1, r1, #7
 8004192:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004194:	4823      	ldr	r0, [pc, #140]	; (8004224 <HAL_UART_MspInit+0xb0>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8004196:	430a      	orrs	r2, r1
 8004198:	619a      	str	r2, [r3, #24]
 800419a:	699a      	ldr	r2, [r3, #24]
 800419c:	400a      	ands	r2, r1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800419e:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 80041a0:	9201      	str	r2, [sp, #4]
 80041a2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041a4:	695a      	ldr	r2, [r3, #20]
 80041a6:	02c9      	lsls	r1, r1, #11
 80041a8:	430a      	orrs	r2, r1
 80041aa:	615a      	str	r2, [r3, #20]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	400b      	ands	r3, r1
 80041b0:	9302      	str	r3, [sp, #8]
 80041b2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 80041b4:	23c0      	movs	r3, #192	; 0xc0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041b6:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 80041b8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041ba:	3bbe      	subs	r3, #190	; 0xbe
 80041bc:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041be:	f000 fbb5 	bl	800492c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 80041c2:	4c19      	ldr	r4, [pc, #100]	; (8004228 <HAL_UART_MspInit+0xb4>)
 80041c4:	4b19      	ldr	r3, [pc, #100]	; (800422c <HAL_UART_MspInit+0xb8>)
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80041c6:	2280      	movs	r2, #128	; 0x80
    hdma_usart1_rx.Instance = DMA1_Channel3;
 80041c8:	6023      	str	r3, [r4, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80041ca:	2300      	movs	r3, #0
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80041cc:	0020      	movs	r0, r4
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80041ce:	6063      	str	r3, [r4, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80041d0:	60a3      	str	r3, [r4, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80041d2:	60e2      	str	r2, [r4, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80041d4:	6123      	str	r3, [r4, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80041d6:	6163      	str	r3, [r4, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80041d8:	61a3      	str	r3, [r4, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80041da:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80041dc:	f000 fb74 	bl	80048c8 <HAL_DMA_Init>
 80041e0:	2800      	cmp	r0, #0
 80041e2:	d001      	beq.n	80041e8 <HAL_UART_MspInit+0x74>
    {
      Error_Handler();
 80041e4:	f7fd fada 	bl	800179c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 80041e8:	4b11      	ldr	r3, [pc, #68]	; (8004230 <HAL_UART_MspInit+0xbc>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80041ea:	676c      	str	r4, [r5, #116]	; 0x74
 80041ec:	6265      	str	r5, [r4, #36]	; 0x24
    hdma_usart1_tx.Instance = DMA1_Channel2;
 80041ee:	4c11      	ldr	r4, [pc, #68]	; (8004234 <HAL_UART_MspInit+0xc0>)
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80041f0:	2280      	movs	r2, #128	; 0x80
    hdma_usart1_tx.Instance = DMA1_Channel2;
 80041f2:	6023      	str	r3, [r4, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80041f4:	2310      	movs	r3, #16
 80041f6:	6063      	str	r3, [r4, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80041f8:	2300      	movs	r3, #0
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80041fa:	0020      	movs	r0, r4
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80041fc:	60a3      	str	r3, [r4, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80041fe:	60e2      	str	r2, [r4, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004200:	6123      	str	r3, [r4, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004202:	6163      	str	r3, [r4, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004204:	61a3      	str	r3, [r4, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004206:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004208:	f000 fb5e 	bl	80048c8 <HAL_DMA_Init>
 800420c:	2800      	cmp	r0, #0
 800420e:	d001      	beq.n	8004214 <HAL_UART_MspInit+0xa0>
    {
      Error_Handler();
 8004210:	f7fd fac4 	bl	800179c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8004214:	672c      	str	r4, [r5, #112]	; 0x70
 8004216:	6265      	str	r5, [r4, #36]	; 0x24
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004218:	b009      	add	sp, #36	; 0x24
 800421a:	bd30      	pop	{r4, r5, pc}
 800421c:	40013800 	.word	0x40013800
 8004220:	40021000 	.word	0x40021000
 8004224:	48000400 	.word	0x48000400
 8004228:	200004a8 	.word	0x200004a8
 800422c:	40020030 	.word	0x40020030
 8004230:	4002001c 	.word	0x4002001c
 8004234:	200004ec 	.word	0x200004ec

08004238 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004238:	e7fe      	b.n	8004238 <NMI_Handler>

0800423a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800423a:	4770      	bx	lr

0800423c <DMA1_Channel1_IRQHandler>:
  /* USER CODE BEGIN CURRENT_REGULATION_IRQn 0 */

  /* USER CODE END CURRENT_REGULATION_IRQn 0 */

  /* Clear Flags */
  DMA1->IFCR = (LL_DMA_ISR_GIF1|LL_DMA_ISR_TCIF1|LL_DMA_ISR_HTIF1);
 800423c:	2207      	movs	r2, #7
{
 800423e:	b510      	push	{r4, lr}
  DMA1->IFCR = (LL_DMA_ISR_GIF1|LL_DMA_ISR_TCIF1|LL_DMA_ISR_HTIF1);
 8004240:	4b02      	ldr	r3, [pc, #8]	; (800424c <DMA1_Channel1_IRQHandler+0x10>)
 8004242:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN CURRENT_REGULATION_IRQn 1 */

  /* USER CODE END CURRENT_REGULATION_IRQn 1 */
    TSK_HighFrequencyTask();
 8004244:	f7fd feb2 	bl	8001fac <TSK_HighFrequencyTask>

  /* USER CODE BEGIN CURRENT_REGULATION_IRQn 2 */

  /* USER CODE END CURRENT_REGULATION_IRQn 2 */
}
 8004248:	bd10      	pop	{r4, pc}
 800424a:	46c0      	nop			; (mov r8, r8)
 800424c:	40020000 	.word	0x40020000

08004250 <TIM1_BRK_UP_TRG_COM_IRQHandler>:
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8004250:	2301      	movs	r3, #1
/**
  * @brief  This function handles first motor TIMx Update, Break-in interrupt request.
  * @param  None
  */
void TIMx_UP_BRK_M1_IRQHandler(void)
{
 8004252:	b510      	push	{r4, lr}
 8004254:	4c0d      	ldr	r4, [pc, #52]	; (800428c <TIM1_BRK_UP_TRG_COM_IRQHandler+0x3c>)
 8004256:	6922      	ldr	r2, [r4, #16]
 8004258:	421a      	tst	r2, r3
 800425a:	d008      	beq.n	800426e <TIM1_BRK_UP_TRG_COM_IRQHandler+0x1e>
  return ((READ_BIT(TIMx->DIER, TIM_DIER_UIE) == (TIM_DIER_UIE)) ? 1UL : 0UL);
 800425c:	68e2      	ldr	r2, [r4, #12]
 800425e:	421a      	tst	r2, r3
 8004260:	d005      	beq.n	800426e <TIM1_BRK_UP_TRG_COM_IRQHandler+0x1e>

  /* USER CODE END TIMx_UP_BRK_M1_IRQn 0 */

  if(LL_TIM_IsActiveFlag_UPDATE(TIM1) && LL_TIM_IsEnabledIT_UPDATE(TIM1))
  {
    R1_TIM1_UP_IRQHandler(&PWM_Handle_M1);
 8004262:	480b      	ldr	r0, [pc, #44]	; (8004290 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x40>)
 8004264:	f7ff fa00 	bl	8003668 <R1_TIM1_UP_IRQHandler>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004268:	2302      	movs	r3, #2
 800426a:	425b      	negs	r3, r3
 800426c:	6123      	str	r3, [r4, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 800426e:	2380      	movs	r3, #128	; 0x80
 8004270:	6922      	ldr	r2, [r4, #16]
 8004272:	421a      	tst	r2, r3
 8004274:	d008      	beq.n	8004288 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x38>
  return ((READ_BIT(TIMx->DIER, TIM_DIER_BIE) == (TIM_DIER_BIE)) ? 1UL : 0UL);
 8004276:	68e2      	ldr	r2, [r4, #12]
 8004278:	421a      	tst	r2, r3
 800427a:	d005      	beq.n	8004288 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x38>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 800427c:	3b02      	subs	r3, #2
 800427e:	3bff      	subs	r3, #255	; 0xff
    /* USER CODE END PWM_Update */
  }
  if(LL_TIM_IsActiveFlag_BRK(TIM1) && LL_TIM_IsEnabledIT_BRK(TIM1))
  {
    LL_TIM_ClearFlag_BRK(TIM1);
    PWMC_OCP_Handler(&PWM_Handle_M1._Super);
 8004280:	4803      	ldr	r0, [pc, #12]	; (8004290 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x40>)
 8004282:	6123      	str	r3, [r4, #16]
 8004284:	f7fe fad8 	bl	8002838 <PWMC_OCP_Handler>
   /* No other interrupts are routed to this handler */
  }
  /* USER CODE BEGIN TIMx_UP_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_UP_BRK_M1_IRQn 1 */
}
 8004288:	bd10      	pop	{r4, pc}
 800428a:	46c0      	nop			; (mov r8, r8)
 800428c:	40012c00 	.word	0x40012c00
 8004290:	20000180 	.word	0x20000180

08004294 <DMA1_Channel4_5_IRQHandler>:
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF5) == (DMA_ISR_TCIF5));
 8004294:	2280      	movs	r2, #128	; 0x80
 8004296:	4b05      	ldr	r3, [pc, #20]	; (80042ac <DMA1_Channel4_5_IRQHandler+0x18>)
 8004298:	0292      	lsls	r2, r2, #10
 800429a:	6819      	ldr	r1, [r3, #0]
  * @brief  This function handles first motor DMAx TC interrupt request.
  *         Required only for R1 with rep rate > 1
  * @param  None
  */
void DMAx_R1_M1_IRQHandler(void)
{
 800429c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMAx_R1_M1_IRQn 0 */

  /* USER CODE END DMAx_R1_M1_IRQn 0 */
  if (LL_DMA_IsActiveFlag_TC5(DMA1))
 800429e:	4211      	tst	r1, r2
 80042a0:	d003      	beq.n	80042aa <DMA1_Channel4_5_IRQHandler+0x16>
  {
    LL_DMA_ClearFlag_TC5(DMA1);
    R1_DMAx_TC_IRQHandler(&PWM_Handle_M1);
 80042a2:	4803      	ldr	r0, [pc, #12]	; (80042b0 <DMA1_Channel4_5_IRQHandler+0x1c>)
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF5);
 80042a4:	605a      	str	r2, [r3, #4]
 80042a6:	f7ff f9fd 	bl	80036a4 <R1_DMAx_TC_IRQHandler>
  }

  /* USER CODE BEGIN DMAx_R1_M1_IRQn 1 */

  /* USER CODE END DMAx_R1_M1_IRQn 1 */
}
 80042aa:	bd10      	pop	{r4, pc}
 80042ac:	40020000 	.word	0x40020000
 80042b0:	20000180 	.word	0x20000180

080042b4 <TIM2_IRQHandler>:
/**
  * @brief  This function handles TIMx global interrupt request for M1 Speed Sensor.
  * @param  None
  */
void SPD_TIM_M1_IRQHandler(void)
{
 80042b4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 0 */

  /* USER CODE END SPD_TIM_M1_IRQn 0 */

  /* HALL Timer Update IT always enabled, no need to check enable UPDATE state */
  if (LL_TIM_IsActiveFlag_UPDATE(HALL_M1.TIMx) != 0)
 80042b6:	4c0b      	ldr	r4, [pc, #44]	; (80042e4 <TIM2_IRQHandler+0x30>)
 80042b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80042ba:	691a      	ldr	r2, [r3, #16]
 80042bc:	07d2      	lsls	r2, r2, #31
 80042be:	d505      	bpl.n	80042cc <TIM2_IRQHandler+0x18>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80042c0:	2202      	movs	r2, #2
 80042c2:	4252      	negs	r2, r2
  {
    LL_TIM_ClearFlag_UPDATE(HALL_M1.TIMx);
    HALL_TIMx_UP_IRQHandler(&HALL_M1);
 80042c4:	0020      	movs	r0, r4
 80042c6:	611a      	str	r2, [r3, #16]
 80042c8:	f7fd f82a 	bl	8001320 <HALL_TIMx_UP_IRQHandler>
  else
  {
    /* Nothing to do */
  }
  /* HALL Timer CC1 IT always enabled, no need to check enable CC1 state */
  if (LL_TIM_IsActiveFlag_CC1 (HALL_M1.TIMx))
 80042cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 80042ce:	691a      	ldr	r2, [r3, #16]
 80042d0:	0792      	lsls	r2, r2, #30
 80042d2:	d505      	bpl.n	80042e0 <TIM2_IRQHandler+0x2c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80042d4:	2203      	movs	r2, #3
 80042d6:	4252      	negs	r2, r2
  {
    LL_TIM_ClearFlag_CC1(HALL_M1.TIMx);
    HALL_TIMx_CC_IRQHandler(&HALL_M1);
 80042d8:	0020      	movs	r0, r4
 80042da:	611a      	str	r2, [r3, #16]
 80042dc:	f7fc febe 	bl	800105c <HALL_TIMx_CC_IRQHandler>
  /* Nothing to do */
  }
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 1 */

  /* USER CODE END SPD_TIM_M1_IRQn 1 */
}
 80042e0:	bd10      	pop	{r4, pc}
 80042e2:	46c0      	nop			; (mov r8, r8)
 80042e4:	20000020 	.word	0x20000020

080042e8 <DMA1_Channel2_3_IRQHandler>:
  return ((NULL == DMAx) ? 0U : ((READ_BIT(DMAx->ISR,
 80042e8:	2280      	movs	r2, #128	; 0x80
 80042ea:	4b05      	ldr	r3, [pc, #20]	; (8004300 <DMA1_Channel2_3_IRQHandler+0x18>)
 80042ec:	0092      	lsls	r2, r2, #2
 80042ee:	6819      	ldr	r1, [r3, #0]

void DMA1_Channel2_3_IRQHandler (void)
{
 80042f0:	b510      	push	{r4, lr}
 80042f2:	4211      	tst	r1, r2
 80042f4:	d003      	beq.n	80042fe <DMA1_Channel2_3_IRQHandler+0x16>
  /* Buffer is ready by the HW layer to be processed */
  if (LL_DMA_IsActiveFlag_TC (DMA_RX_A, DMACH_RX_A) ){
    LL_DMA_ClearFlag_TC (DMA_RX_A, DMACH_RX_A);
    ASPEP_HWDataReceivedIT (&aspepOverUartA);
 80042f6:	4803      	ldr	r0, [pc, #12]	; (8004304 <DMA1_Channel2_3_IRQHandler+0x1c>)
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 80042f8:	605a      	str	r2, [r3, #4]
 80042fa:	f7fc fca5 	bl	8000c48 <ASPEP_HWDataReceivedIT>
  }
}
 80042fe:	bd10      	pop	{r4, pc}
 8004300:	40020000 	.word	0x40020000
 8004304:	20000314 	.word	0x20000314

08004308 <USART1_IRQHandler>:
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8004308:	2240      	movs	r2, #64	; 0x40

void USART1_IRQHandler(void)
{
 800430a:	b510      	push	{r4, lr}
 800430c:	4c22      	ldr	r4, [pc, #136]	; (8004398 <USART1_IRQHandler+0x90>)
 800430e:	69e3      	ldr	r3, [r4, #28]
 8004310:	4213      	tst	r3, r2
 8004312:	d008      	beq.n	8004326 <USART1_IRQHandler+0x1e>
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8004314:	2001      	movs	r0, #1
 8004316:	4921      	ldr	r1, [pc, #132]	; (800439c <USART1_IRQHandler+0x94>)
 8004318:	680b      	ldr	r3, [r1, #0]
 800431a:	4383      	bics	r3, r0
 800431c:	600b      	str	r3, [r1, #0]
    /* Disable the DMA channel to prepare the next chunck of data*/
    LL_DMA_DisableChannel( DMA_TX_A, DMACH_TX_A );
    LL_USART_ClearFlag_TC (USARTA);
    /* Data Sent by UART*/
    /* Need to free the buffer, and to check pending transfer*/
    ASPEP_HWDataTransmittedIT (&aspepOverUartA);
 800431e:	4820      	ldr	r0, [pc, #128]	; (80043a0 <USART1_IRQHandler+0x98>)
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8004320:	6222      	str	r2, [r4, #32]
 8004322:	f7fc fbd5 	bl	8000ad0 <ASPEP_HWDataTransmittedIT>
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8004326:	2308      	movs	r3, #8
 8004328:	69e2      	ldr	r2, [r4, #28]
 800432a:	421a      	tst	r2, r3
 800432c:	d00b      	beq.n	8004346 <USART1_IRQHandler+0x3e>
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 800432e:	6223      	str	r3, [r4, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004330:	f3ef 8210 	mrs	r2, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004334:	3b07      	subs	r3, #7
 8004336:	f383 8810 	msr	PRIMASK, r3
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 800433a:	6821      	ldr	r1, [r4, #0]
 800433c:	330f      	adds	r3, #15
 800433e:	430b      	orrs	r3, r1
 8004340:	6023      	str	r3, [r4, #0]
 8004342:	f382 8810 	msr	PRIMASK, r2
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8004346:	2110      	movs	r1, #16
 8004348:	69e3      	ldr	r3, [r4, #28]
 800434a:	420b      	tst	r3, r1
 800434c:	d023      	beq.n	8004396 <USART1_IRQHandler+0x8e>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_IDLE(const USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 800434e:	6823      	ldr	r3, [r4, #0]
 8004350:	420b      	tst	r3, r1
 8004352:	d020      	beq.n	8004396 <USART1_IRQHandler+0x8e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004354:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004358:	2201      	movs	r2, #1
 800435a:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 800435e:	6823      	ldr	r3, [r4, #0]
 8004360:	438b      	bics	r3, r1
 8004362:	6023      	str	r3, [r4, #0]
 8004364:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004368:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800436c:	f382 8810 	msr	PRIMASK, r2
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableDMAReq_RX(USART_TypeDef *USARTx)
{
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_DMAR);
 8004370:	2340      	movs	r3, #64	; 0x40
 8004372:	68a1      	ldr	r1, [r4, #8]
 8004374:	4399      	bics	r1, r3
 8004376:	60a1      	str	r1, [r4, #8]
 8004378:	f380 8810 	msr	PRIMASK, r0
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 800437c:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800437e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004382:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8004386:	68a2      	ldr	r2, [r4, #8]
 8004388:	4313      	orrs	r3, r2
 800438a:	60a3      	str	r3, [r4, #8]
 800438c:	f381 8810 	msr	PRIMASK, r1
    /* To be sure we fetch the potential pendig data*/
    /* We disable the DMA request, Read the dummy data, endable back the DMA request */
    LL_USART_DisableDMAReq_RX (USARTA);
    LL_USART_ReceiveData8(USARTA);
    LL_USART_EnableDMAReq_RX (USARTA);
    ASPEP_HWDMAReset (&aspepOverUartA);
 8004390:	4803      	ldr	r0, [pc, #12]	; (80043a0 <USART1_IRQHandler+0x98>)
 8004392:	f7fc fca5 	bl	8000ce0 <ASPEP_HWDMAReset>
  /* USER CODE END USART1_IRQHandlern 0 */

  /* USER CODE BEGIN USART1_IRQHandler 1 */

  /* USER CODE END USART1_IRQHandler 1 */
}
 8004396:	bd10      	pop	{r4, pc}
 8004398:	40013800 	.word	0x40013800
 800439c:	4002001c 	.word	0x4002001c
 80043a0:	20000314 	.word	0x20000314

080043a4 <HardFault_Handler>:
/**
  * @brief  This function handles Hard Fault exception.
  * @param  None
  */
void HardFault_Handler(void)
{
 80043a4:	b510      	push	{r4, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 80043a6:	f7fd fedd 	bl	8002164 <TSK_HardwareFaultTask>

  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80043aa:	e7fe      	b.n	80043aa <HardFault_Handler+0x6>

080043ac <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 80043ac:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 80043ae:	4c0d      	ldr	r4, [pc, #52]	; (80043e4 <SysTick_Handler+0x38>)
 80043b0:	7823      	ldrb	r3, [r4, #0]
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d105      	bne.n	80043c2 <SysTick_Handler+0x16>
  {
    HAL_IncTick();
 80043b6:	f000 f8f7 	bl	80045a8 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 80043ba:	f000 fa80 	bl	80048be <HAL_SYSTICK_IRQHandler>
    SystickDividerCounter = 0;
 80043be:	2300      	movs	r3, #0
 80043c0:	7023      	strb	r3, [r4, #0]
  return ((NULL == DMAx) ? 0U : ((READ_BIT(DMAx->ISR,
 80043c2:	2280      	movs	r2, #128	; 0x80
  }
  else
  {
    /* Nothing to do */
  }
  SystickDividerCounter ++;
 80043c4:	7823      	ldrb	r3, [r4, #0]
 80043c6:	0092      	lsls	r2, r2, #2
 80043c8:	3301      	adds	r3, #1
 80043ca:	7023      	strb	r3, [r4, #0]
 80043cc:	4b06      	ldr	r3, [pc, #24]	; (80043e8 <SysTick_Handler+0x3c>)
 80043ce:	6819      	ldr	r1, [r3, #0]
 80043d0:	4211      	tst	r1, r2
 80043d2:	d003      	beq.n	80043dc <SysTick_Handler+0x30>

  /* Buffer is ready by the HW layer to be processed */
  if (LL_DMA_IsActiveFlag_TC (DMA_RX_A, DMACH_RX_A))
  {
    LL_DMA_ClearFlag_TC (DMA_RX_A, DMACH_RX_A);
    ASPEP_HWDataReceivedIT(&aspepOverUartA);
 80043d4:	4805      	ldr	r0, [pc, #20]	; (80043ec <SysTick_Handler+0x40>)
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 80043d6:	605a      	str	r2, [r3, #4]
 80043d8:	f7fc fc36 	bl	8000c48 <ASPEP_HWDataReceivedIT>
  }

  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */

    MC_RunMotorControlTasks();
 80043dc:	f7fd feb6 	bl	800214c <MC_RunMotorControlTasks>

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 80043e0:	bd10      	pop	{r4, pc}
 80043e2:	46c0      	nop			; (mov r8, r8)
 80043e4:	20000370 	.word	0x20000370
 80043e8:	40020000 	.word	0x40020000
 80043ec:	20000314 	.word	0x20000314

080043f0 <EXTI4_15_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR, ExtiLine));
 80043f0:	2280      	movs	r2, #128	; 0x80
 80043f2:	4b05      	ldr	r3, [pc, #20]	; (8004408 <EXTI4_15_IRQHandler+0x18>)
 80043f4:	0212      	lsls	r2, r2, #8
 80043f6:	6959      	ldr	r1, [r3, #20]

/**
  * @brief  This function handles Button IRQ on PIN PC15.
  */
void EXTI4_15_IRQHandler (void)
{
 80043f8:	b510      	push	{r4, lr}
	/* USER CODE BEGIN START_STOP_BTN */
  if ( LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_15) )
 80043fa:	4211      	tst	r1, r2
 80043fc:	d002      	beq.n	8004404 <EXTI4_15_IRQHandler+0x14>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 80043fe:	615a      	str	r2, [r3, #20]
  {
    LL_EXTI_ClearFlag_0_31 (LL_EXTI_LINE_15);
    UI_HandleStartStopButton_cb ();
 8004400:	f7fd fec0 	bl	8002184 <UI_HandleStartStopButton_cb>
  }

}
 8004404:	bd10      	pop	{r4, pc}
 8004406:	46c0      	nop			; (mov r8, r8)
 8004408:	40010400 	.word	0x40010400

0800440c <UASPEP_DAMCONFIG_TX>:
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 800440c:	2240      	movs	r2, #64	; 0x40
  }
  else
  {
#endif
    /* Enable DMA UART */
    LL_USART_ClearFlag_TC(pHandle->USARTx);
 800440e:	6803      	ldr	r3, [r0, #0]
{
 8004410:	b530      	push	{r4, r5, lr}
 8004412:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004414:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004418:	2401      	movs	r4, #1
 800441a:	f384 8810 	msr	PRIMASK, r4
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 800441e:	6819      	ldr	r1, [r3, #0]
 8004420:	4311      	orrs	r1, r2
 8004422:	6019      	str	r1, [r3, #0]
 8004424:	f385 8810 	msr	PRIMASK, r5
    LL_USART_EnableIT_TC(pHandle->USARTx);

    /* Enable DMA UART to start the TX request */
    LL_USART_EnableDMAReq_TX(pHandle->USARTx);
 8004428:	6801      	ldr	r1, [r0, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800442a:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800442e:	f384 8810 	msr	PRIMASK, r4
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8004432:	2380      	movs	r3, #128	; 0x80
 8004434:	688c      	ldr	r4, [r1, #8]
 8004436:	4323      	orrs	r3, r4
 8004438:	608b      	str	r3, [r1, #8]
 800443a:	f385 8810 	msr	PRIMASK, r5

    /* Write the USART_TDR register address in the DMA control register to configure it as
     * the destination of the transfer */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)&pHandle->USARTx->TDR);
 800443e:	6801      	ldr	r1, [r0, #0]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8004440:	6905      	ldr	r5, [r0, #16]
 8004442:	000c      	movs	r4, r1
 8004444:	4b04      	ldr	r3, [pc, #16]	; (8004458 <UASPEP_DAMCONFIG_TX+0x4c>)
 8004446:	3428      	adds	r4, #40	; 0x28
 8004448:	195b      	adds	r3, r3, r5
 800444a:	3b01      	subs	r3, #1
 800444c:	781d      	ldrb	r5, [r3, #0]
 800444e:	6883      	ldr	r3, [r0, #8]
 8004450:	195b      	adds	r3, r3, r5
 8004452:	609c      	str	r4, [r3, #8]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8004454:	620a      	str	r2, [r1, #32]
    /* DMA end of transfer on UART TX channel completion is not activated */
    /* We prefer to activate UART TC itself to avoid to trig IT while queued data are still to be transmitted */
#ifdef NULL_PTR_CHECK_USA_ASP_DRV
  }
#endif
}
 8004456:	bd30      	pop	{r4, r5, pc}
 8004458:	0800648e 	.word	0x0800648e

0800445c <UASPEP_DAMCONFIG_RX>:
  * @brief  Configures the DMA used for data reception from controller.
  *
  * @param  pHandle Handler of the current instance of the UASPEP component
  */
void UASPEP_DAMCONFIG_RX(UASPEP_Handle_t *pHandle)
{
 800445c:	b530      	push	{r4, r5, lr}
  else
  {
#endif
    /* DMA interrupt not used for F0 family */
    /* Enable Error interrupt (EIE) to unmask Overrun interrupt */
    LL_USART_EnableIT_ERROR(pHandle->USARTx);
 800445e:	6802      	ldr	r2, [r0, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004460:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004464:	2101      	movs	r1, #1
 8004466:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 800446a:	6893      	ldr	r3, [r2, #8]
 800446c:	430b      	orrs	r3, r1
 800446e:	6093      	str	r3, [r2, #8]
 8004470:	f384 8810 	msr	PRIMASK, r4

    /* Write the USART_RDR register address in the DMA control register to configure it as
     * the source of the transfer */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)&pHandle->USARTx->RDR);
 8004474:	6802      	ldr	r2, [r0, #0]
 8004476:	68c5      	ldr	r5, [r0, #12]
 8004478:	0014      	movs	r4, r2
 800447a:	4b0a      	ldr	r3, [pc, #40]	; (80044a4 <UASPEP_DAMCONFIG_RX+0x48>)
 800447c:	3424      	adds	r4, #36	; 0x24
 800447e:	195b      	adds	r3, r3, r5
 8004480:	3b01      	subs	r3, #1
 8004482:	781d      	ldrb	r5, [r3, #0]
 8004484:	6843      	ldr	r3, [r0, #4]
 8004486:	195b      	adds	r3, r3, r5
 8004488:	609c      	str	r4, [r3, #8]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 800448a:	2340      	movs	r3, #64	; 0x40
 800448c:	6213      	str	r3, [r2, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800448e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004492:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8004496:	6891      	ldr	r1, [r2, #8]
 8004498:	430b      	orrs	r3, r1
 800449a:	6093      	str	r3, [r2, #8]
 800449c:	f380 8810 	msr	PRIMASK, r0

    LL_USART_EnableDMAReq_RX(pHandle->USARTx);
#ifdef NULL_PTR_CHECK_USA_ASP_DRV
  }
#endif
}
 80044a0:	bd30      	pop	{r4, r5, pc}
 80044a2:	46c0      	nop			; (mov r8, r8)
 80044a4:	0800648e 	.word	0x0800648e

080044a8 <UASPEP_INIT>:
{
 80044a8:	b510      	push	{r4, lr}
 80044aa:	0004      	movs	r4, r0
  UASPEP_DAMCONFIG_TX(pHandle);
 80044ac:	f7ff ffae 	bl	800440c <UASPEP_DAMCONFIG_TX>
  UASPEP_DAMCONFIG_RX(pHandle);
 80044b0:	0020      	movs	r0, r4
 80044b2:	f7ff ffd3 	bl	800445c <UASPEP_DAMCONFIG_RX>
}
 80044b6:	bd10      	pop	{r4, pc}

080044b8 <UASPEP_SEND_PACKET>:
  * @param  pHWHandle Hardware components chosen for communication
  * @param  data Data to be transmitted to controller
  * @param  length Length of the data to be transmitted
  */
bool UASPEP_SEND_PACKET(void *pHWHandle, void *data, uint16_t length)
{
 80044b8:	b530      	push	{r4, r5, lr}
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  bool result;
  if (0U == LL_DMA_IsEnabledChannel(pHandle->txDMA, pHandle->txChannel))
 80044ba:	2501      	movs	r5, #1
{
 80044bc:	0014      	movs	r4, r2
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80044be:	4b0b      	ldr	r3, [pc, #44]	; (80044ec <UASPEP_SEND_PACKET+0x34>)
 80044c0:	6902      	ldr	r2, [r0, #16]
 80044c2:	189b      	adds	r3, r3, r2
 80044c4:	3b01      	subs	r3, #1
 80044c6:	781a      	ldrb	r2, [r3, #0]
 80044c8:	6883      	ldr	r3, [r0, #8]
    LL_DMA_EnableChannel(pHandle->txDMA, pHandle->txChannel);
    result = true;
  }
  else
  {
    result = false;
 80044ca:	2000      	movs	r0, #0
 80044cc:	189b      	adds	r3, r3, r2
 80044ce:	681a      	ldr	r2, [r3, #0]
  if (0U == LL_DMA_IsEnabledChannel(pHandle->txDMA, pHandle->txChannel))
 80044d0:	422a      	tst	r2, r5
 80044d2:	d109      	bne.n	80044e8 <UASPEP_SEND_PACKET+0x30>
    result = true;
 80044d4:	0028      	movs	r0, r5
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 80044d6:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80044d8:	685a      	ldr	r2, [r3, #4]
 80044da:	0c12      	lsrs	r2, r2, #16
 80044dc:	0412      	lsls	r2, r2, #16
 80044de:	4322      	orrs	r2, r4
 80044e0:	605a      	str	r2, [r3, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	432a      	orrs	r2, r5
 80044e6:	601a      	str	r2, [r3, #0]
  }
  return (result);
}
 80044e8:	bd30      	pop	{r4, r5, pc}
 80044ea:	46c0      	nop			; (mov r8, r8)
 80044ec:	0800648e 	.word	0x0800648e

080044f0 <UASPEP_RECEIVE_BUFFER>:
  * @param  pHWHandle Hardware components chosen for communication
  * @param  buffer Buffer which will receive the communicated data
  * @param  length Length of the received data
  */
void UASPEP_RECEIVE_BUFFER(void *pHWHandle, void* buffer, uint16_t length)
{
 80044f0:	b510      	push	{r4, lr}
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80044f2:	4b0a      	ldr	r3, [pc, #40]	; (800451c <UASPEP_RECEIVE_BUFFER+0x2c>)
 80044f4:	68c4      	ldr	r4, [r0, #12]
 80044f6:	191b      	adds	r3, r3, r4
 80044f8:	3b01      	subs	r3, #1
 80044fa:	781c      	ldrb	r4, [r3, #0]
 80044fc:	6843      	ldr	r3, [r0, #4]
 80044fe:	2001      	movs	r0, #1
 8004500:	191b      	adds	r3, r3, r4
 8004502:	681c      	ldr	r4, [r3, #0]
 8004504:	4384      	bics	r4, r0
 8004506:	601c      	str	r4, [r3, #0]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8004508:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 800450a:	6859      	ldr	r1, [r3, #4]
 800450c:	0c09      	lsrs	r1, r1, #16
 800450e:	0409      	lsls	r1, r1, #16
 8004510:	4311      	orrs	r1, r2
 8004512:	6059      	str	r1, [r3, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	4310      	orrs	r0, r2
 8004518:	6018      	str	r0, [r3, #0]
  //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
  LL_DMA_SetMemoryAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)buffer);
  LL_DMA_SetDataLength(pHandle->rxDMA, pHandle->rxChannel, length);

  LL_DMA_EnableChannel(pHandle->rxDMA, pHandle->rxChannel);
}
 800451a:	bd10      	pop	{r4, pc}
 800451c:	0800648e 	.word	0x0800648e

08004520 <UASPEP_IDLE_ENABLE>:
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8004520:	2310      	movs	r3, #16
  * @param  pHandle Handler of the current instance of the UASPEP component
  */
void UASPEP_IDLE_ENABLE(void *pHWHandle)
{
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  LL_USART_ClearFlag_IDLE(pHandle->USARTx);
 8004522:	6802      	ldr	r2, [r0, #0]
 8004524:	6213      	str	r3, [r2, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004526:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800452a:	2001      	movs	r0, #1
 800452c:	f380 8810 	msr	PRIMASK, r0
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8004530:	6810      	ldr	r0, [r2, #0]
 8004532:	4303      	orrs	r3, r0
 8004534:	6013      	str	r3, [r2, #0]
 8004536:	f381 8810 	msr	PRIMASK, r1
  LL_USART_EnableIT_IDLE(pHandle->USARTx);
}
 800453a:	4770      	bx	lr

0800453c <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800453c:	4770      	bx	lr
	...

08004540 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004540:	b570      	push	{r4, r5, r6, lr}
 8004542:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004544:	20fa      	movs	r0, #250	; 0xfa
 8004546:	4b0d      	ldr	r3, [pc, #52]	; (800457c <HAL_InitTick+0x3c>)
 8004548:	0080      	lsls	r0, r0, #2
 800454a:	7819      	ldrb	r1, [r3, #0]
 800454c:	f7fb fdf0 	bl	8000130 <__udivsi3>
 8004550:	4c0b      	ldr	r4, [pc, #44]	; (8004580 <HAL_InitTick+0x40>)
 8004552:	0001      	movs	r1, r0
 8004554:	6820      	ldr	r0, [r4, #0]
 8004556:	f7fb fdeb 	bl	8000130 <__udivsi3>
 800455a:	f000 f995 	bl	8004888 <HAL_SYSTICK_Config>
 800455e:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8004560:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004562:	2c00      	cmp	r4, #0
 8004564:	d109      	bne.n	800457a <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004566:	2d03      	cmp	r5, #3
 8004568:	d807      	bhi.n	800457a <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800456a:	3802      	subs	r0, #2
 800456c:	0022      	movs	r2, r4
 800456e:	0029      	movs	r1, r5
 8004570:	f000 f954 	bl	800481c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004574:	0020      	movs	r0, r4
 8004576:	4b03      	ldr	r3, [pc, #12]	; (8004584 <HAL_InitTick+0x44>)
 8004578:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 800457a:	bd70      	pop	{r4, r5, r6, pc}
 800457c:	20000378 	.word	0x20000378
 8004580:	20000374 	.word	0x20000374
 8004584:	2000037c 	.word	0x2000037c

08004588 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004588:	2310      	movs	r3, #16
 800458a:	4a06      	ldr	r2, [pc, #24]	; (80045a4 <HAL_Init+0x1c>)
{
 800458c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800458e:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8004590:	2002      	movs	r0, #2
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004592:	430b      	orrs	r3, r1
 8004594:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8004596:	f7ff ffd3 	bl	8004540 <HAL_InitTick>
  HAL_MspInit();
 800459a:	f7ff fc8d 	bl	8003eb8 <HAL_MspInit>
}
 800459e:	2000      	movs	r0, #0
 80045a0:	bd10      	pop	{r4, pc}
 80045a2:	46c0      	nop			; (mov r8, r8)
 80045a4:	40022000 	.word	0x40022000

080045a8 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80045a8:	4a03      	ldr	r2, [pc, #12]	; (80045b8 <HAL_IncTick+0x10>)
 80045aa:	4b04      	ldr	r3, [pc, #16]	; (80045bc <HAL_IncTick+0x14>)
 80045ac:	6811      	ldr	r1, [r2, #0]
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	185b      	adds	r3, r3, r1
 80045b2:	6013      	str	r3, [r2, #0]
}
 80045b4:	4770      	bx	lr
 80045b6:	46c0      	nop			; (mov r8, r8)
 80045b8:	20000824 	.word	0x20000824
 80045bc:	20000378 	.word	0x20000378

080045c0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80045c0:	4b01      	ldr	r3, [pc, #4]	; (80045c8 <HAL_GetTick+0x8>)
 80045c2:	6818      	ldr	r0, [r3, #0]
}
 80045c4:	4770      	bx	lr
 80045c6:	46c0      	nop			; (mov r8, r8)
 80045c8:	20000824 	.word	0x20000824

080045cc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80045cc:	b570      	push	{r4, r5, r6, lr}
 80045ce:	0004      	movs	r4, r0
  uint32_t tmpCFGR1 = 0U;

  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 80045d0:	2001      	movs	r0, #1
  if(hadc == NULL)
 80045d2:	2c00      	cmp	r4, #0
 80045d4:	d07e      	beq.n	80046d4 <HAL_ADC_Init+0x108>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80045d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d106      	bne.n	80045ea <HAL_ADC_Init+0x1e>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80045dc:	0022      	movs	r2, r4
 80045de:	3234      	adds	r2, #52	; 0x34
    ADC_CLEAR_ERRORCODE(hadc);
 80045e0:	63e3      	str	r3, [r4, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80045e2:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 80045e4:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 80045e6:	f7ff fc7f 	bl	8003ee8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80045ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80045ec:	06db      	lsls	r3, r3, #27
 80045ee:	d500      	bpl.n	80045f2 <HAL_ADC_Init+0x26>
 80045f0:	e084      	b.n	80046fc <HAL_ADC_Init+0x130>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80045f2:	6822      	ldr	r2, [r4, #0]
 80045f4:	6893      	ldr	r3, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 80045f6:	075b      	lsls	r3, r3, #29
 80045f8:	d500      	bpl.n	80045fc <HAL_ADC_Init+0x30>
 80045fa:	e07f      	b.n	80046fc <HAL_ADC_Init+0x130>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80045fc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80045fe:	4b42      	ldr	r3, [pc, #264]	; (8004708 <HAL_ADC_Init+0x13c>)
 8004600:	4019      	ands	r1, r3
 8004602:	3306      	adds	r3, #6
 8004604:	33ff      	adds	r3, #255	; 0xff
 8004606:	430b      	orrs	r3, r1
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8004608:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State,
 800460a:	63a3      	str	r3, [r4, #56]	; 0x38
    if (ADC_IS_ENABLE(hadc) == RESET)
 800460c:	6893      	ldr	r3, [r2, #8]
 800460e:	400b      	ands	r3, r1
 8004610:	2b01      	cmp	r3, #1
 8004612:	d105      	bne.n	8004620 <HAL_ADC_Init+0x54>
 8004614:	6811      	ldr	r1, [r2, #0]
 8004616:	4219      	tst	r1, r3
 8004618:	d10e      	bne.n	8004638 <HAL_ADC_Init+0x6c>
 800461a:	68d3      	ldr	r3, [r2, #12]
 800461c:	041b      	lsls	r3, r3, #16
 800461e:	d40b      	bmi.n	8004638 <HAL_ADC_Init+0x6c>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8004620:	2118      	movs	r1, #24
 8004622:	68d3      	ldr	r3, [r2, #12]
 8004624:	438b      	bics	r3, r1
 8004626:	68a1      	ldr	r1, [r4, #8]
 8004628:	430b      	orrs	r3, r1
 800462a:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800462c:	6913      	ldr	r3, [r2, #16]
 800462e:	6861      	ldr	r1, [r4, #4]
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	089b      	lsrs	r3, r3, #2
 8004634:	430b      	orrs	r3, r1
 8004636:	6113      	str	r3, [r2, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8004638:	68d3      	ldr	r3, [r2, #12]
 800463a:	4934      	ldr	r1, [pc, #208]	; (800470c <HAL_ADC_Init+0x140>)
 800463c:	400b      	ands	r3, r1
 800463e:	60d3      	str	r3, [r2, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004640:	7e23      	ldrb	r3, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8004642:	7e60      	ldrb	r0, [r4, #25]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004644:	039b      	lsls	r3, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8004646:	03c0      	lsls	r0, r0, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004648:	4303      	orrs	r3, r0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800464a:	7ea1      	ldrb	r1, [r4, #26]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
                 hadc->Init.DataAlign                                             |
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800464c:	68e0      	ldr	r0, [r4, #12]
 800464e:	4303      	orrs	r3, r0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004650:	0348      	lsls	r0, r1, #13
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8004652:	4303      	orrs	r3, r0
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8004654:	1d60      	adds	r0, r4, #5
 8004656:	7fc0      	ldrb	r0, [r0, #31]
 8004658:	0040      	lsls	r0, r0, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800465a:	4303      	orrs	r3, r0
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800465c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800465e:	3801      	subs	r0, #1
 8004660:	1e45      	subs	r5, r0, #1
 8004662:	41a8      	sbcs	r0, r5
 8004664:	0300      	lsls	r0, r0, #12
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8004666:	4303      	orrs	r3, r0
 8004668:	6920      	ldr	r0, [r4, #16]
 800466a:	3802      	subs	r0, #2
 800466c:	4245      	negs	r5, r0
 800466e:	4168      	adcs	r0, r5
 8004670:	0080      	lsls	r0, r0, #2
 8004672:	4303      	orrs	r3, r0
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004674:	7ee0      	ldrb	r0, [r4, #27]
 8004676:	2801      	cmp	r0, #1
 8004678:	d104      	bne.n	8004684 <HAL_ADC_Init+0xb8>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800467a:	2900      	cmp	r1, #0
 800467c:	d12b      	bne.n	80046d6 <HAL_ADC_Init+0x10a>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800467e:	2180      	movs	r1, #128	; 0x80
 8004680:	0249      	lsls	r1, r1, #9
 8004682:	430b      	orrs	r3, r1
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004684:	20c2      	movs	r0, #194	; 0xc2
 8004686:	69e1      	ldr	r1, [r4, #28]
 8004688:	30ff      	adds	r0, #255	; 0xff
 800468a:	4281      	cmp	r1, r0
 800468c:	d002      	beq.n	8004694 <HAL_ADC_Init+0xc8>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800468e:	6a20      	ldr	r0, [r4, #32]
 8004690:	4301      	orrs	r1, r0
 8004692:	430b      	orrs	r3, r1
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004694:	2080      	movs	r0, #128	; 0x80
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8004696:	68d1      	ldr	r1, [r2, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004698:	0540      	lsls	r0, r0, #21
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800469a:	4319      	orrs	r1, r3
 800469c:	60d1      	str	r1, [r2, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800469e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80046a0:	4281      	cmp	r1, r0
 80046a2:	d002      	beq.n	80046aa <HAL_ADC_Init+0xde>
 80046a4:	1e48      	subs	r0, r1, #1
 80046a6:	2806      	cmp	r0, #6
 80046a8:	d807      	bhi.n	80046ba <HAL_ADC_Init+0xee>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80046aa:	2507      	movs	r5, #7
 80046ac:	6950      	ldr	r0, [r2, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80046ae:	4029      	ands	r1, r5
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80046b0:	43a8      	bics	r0, r5
 80046b2:	6150      	str	r0, [r2, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80046b4:	6950      	ldr	r0, [r2, #20]
 80046b6:	4301      	orrs	r1, r0
 80046b8:	6151      	str	r1, [r2, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80046ba:	68d2      	ldr	r2, [r2, #12]
 80046bc:	4914      	ldr	r1, [pc, #80]	; (8004710 <HAL_ADC_Init+0x144>)
 80046be:	400a      	ands	r2, r1
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d110      	bne.n	80046e6 <HAL_ADC_Init+0x11a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80046c4:	2000      	movs	r0, #0
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80046c6:	2303      	movs	r3, #3
      ADC_CLEAR_ERRORCODE(hadc);
 80046c8:	63e0      	str	r0, [r4, #60]	; 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 80046ca:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80046cc:	439a      	bics	r2, r3
 80046ce:	3b02      	subs	r3, #2
 80046d0:	4313      	orrs	r3, r2
 80046d2:	63a3      	str	r3, [r4, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 80046d4:	bd70      	pop	{r4, r5, r6, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046d6:	2120      	movs	r1, #32
 80046d8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80046da:	4329      	orrs	r1, r5
 80046dc:	63a1      	str	r1, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046de:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80046e0:	4308      	orrs	r0, r1
 80046e2:	63e0      	str	r0, [r4, #60]	; 0x3c
 80046e4:	e7ce      	b.n	8004684 <HAL_ADC_Init+0xb8>
      ADC_STATE_CLR_SET(hadc->State,
 80046e6:	2312      	movs	r3, #18
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046e8:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 80046ea:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80046ec:	439a      	bics	r2, r3
 80046ee:	3b02      	subs	r3, #2
 80046f0:	4313      	orrs	r3, r2
 80046f2:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80046f6:	4303      	orrs	r3, r0
 80046f8:	63e3      	str	r3, [r4, #60]	; 0x3c
      tmp_hal_status = HAL_ERROR;
 80046fa:	e7eb      	b.n	80046d4 <HAL_ADC_Init+0x108>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046fc:	2310      	movs	r3, #16
 80046fe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 8004700:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004702:	4313      	orrs	r3, r2
 8004704:	63a3      	str	r3, [r4, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 8004706:	e7e5      	b.n	80046d4 <HAL_ADC_Init+0x108>
 8004708:	fffffefd 	.word	0xfffffefd
 800470c:	fffe0219 	.word	0xfffe0219
 8004710:	833fffe7 	.word	0x833fffe7

08004714 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004714:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8004716:	2200      	movs	r2, #0
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004718:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 800471a:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 800471c:	3434      	adds	r4, #52	; 0x34
 800471e:	7822      	ldrb	r2, [r4, #0]
{
 8004720:	0003      	movs	r3, r0
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004722:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  __HAL_LOCK(hadc);
 8004724:	2002      	movs	r0, #2
 8004726:	2a01      	cmp	r2, #1
 8004728:	d02a      	beq.n	8004780 <HAL_ADC_ConfigChannel+0x6c>
 800472a:	3801      	subs	r0, #1
 800472c:	7020      	strb	r0, [r4, #0]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	6896      	ldr	r6, [r2, #8]
 8004732:	0776      	lsls	r6, r6, #29
 8004734:	d45f      	bmi.n	80047f6 <HAL_ADC_ConfigChannel+0xe2>
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8004736:	680b      	ldr	r3, [r1, #0]
    if (sConfig->Rank != ADC_RANK_NONE)
 8004738:	684f      	ldr	r7, [r1, #4]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800473a:	001e      	movs	r6, r3
    if (sConfig->Rank != ADC_RANK_NONE)
 800473c:	46bc      	mov	ip, r7
 800473e:	4f30      	ldr	r7, [pc, #192]	; (8004800 <HAL_ADC_ConfigChannel+0xec>)
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8004740:	4098      	lsls	r0, r3
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004742:	3e10      	subs	r6, #16
    if (sConfig->Rank != ADC_RANK_NONE)
 8004744:	45bc      	cmp	ip, r7
 8004746:	d03f      	beq.n	80047c8 <HAL_ADC_ConfigChannel+0xb4>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8004748:	6a97      	ldr	r7, [r2, #40]	; 0x28
 800474a:	4338      	orrs	r0, r7
 800474c:	6290      	str	r0, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800474e:	2080      	movs	r0, #128	; 0x80
 8004750:	0540      	lsls	r0, r0, #21
 8004752:	4285      	cmp	r5, r0
 8004754:	d00f      	beq.n	8004776 <HAL_ADC_ConfigChannel+0x62>
 8004756:	3d01      	subs	r5, #1
 8004758:	2d06      	cmp	r5, #6
 800475a:	d90c      	bls.n	8004776 <HAL_ADC_ConfigChannel+0x62>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800475c:	2007      	movs	r0, #7
 800475e:	6955      	ldr	r5, [r2, #20]
 8004760:	6889      	ldr	r1, [r1, #8]
 8004762:	4005      	ands	r5, r0
 8004764:	42a9      	cmp	r1, r5
 8004766:	d006      	beq.n	8004776 <HAL_ADC_ConfigChannel+0x62>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8004768:	6955      	ldr	r5, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800476a:	4001      	ands	r1, r0
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800476c:	4385      	bics	r5, r0
 800476e:	6155      	str	r5, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8004770:	6955      	ldr	r5, [r2, #20]
 8004772:	4329      	orrs	r1, r5
 8004774:	6151      	str	r1, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004776:	2e02      	cmp	r6, #2
 8004778:	d903      	bls.n	8004782 <HAL_ADC_ConfigChannel+0x6e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800477a:	2000      	movs	r0, #0
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800477c:	2300      	movs	r3, #0
 800477e:	7023      	strb	r3, [r4, #0]
  
  /* Return function status */
  return tmp_hal_status;
}
 8004780:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8004782:	4820      	ldr	r0, [pc, #128]	; (8004804 <HAL_ADC_ConfigChannel+0xf0>)
 8004784:	6801      	ldr	r1, [r0, #0]
 8004786:	2b10      	cmp	r3, #16
 8004788:	d01b      	beq.n	80047c2 <HAL_ADC_ConfigChannel+0xae>
 800478a:	001a      	movs	r2, r3
 800478c:	3a11      	subs	r2, #17
 800478e:	4255      	negs	r5, r2
 8004790:	416a      	adcs	r2, r5
 8004792:	4d1d      	ldr	r5, [pc, #116]	; (8004808 <HAL_ADC_ConfigChannel+0xf4>)
 8004794:	4252      	negs	r2, r2
 8004796:	402a      	ands	r2, r5
 8004798:	2580      	movs	r5, #128	; 0x80
 800479a:	046d      	lsls	r5, r5, #17
 800479c:	1952      	adds	r2, r2, r5
 800479e:	430a      	orrs	r2, r1
 80047a0:	6002      	str	r2, [r0, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80047a2:	2b10      	cmp	r3, #16
 80047a4:	d1e9      	bne.n	800477a <HAL_ADC_ConfigChannel+0x66>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80047a6:	4b19      	ldr	r3, [pc, #100]	; (800480c <HAL_ADC_ConfigChannel+0xf8>)
 80047a8:	4919      	ldr	r1, [pc, #100]	; (8004810 <HAL_ADC_ConfigChannel+0xfc>)
 80047aa:	6818      	ldr	r0, [r3, #0]
 80047ac:	f7fb fcc0 	bl	8000130 <__udivsi3>
 80047b0:	230a      	movs	r3, #10
 80047b2:	4343      	muls	r3, r0
            wait_loop_index--;
 80047b4:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80047b6:	9b01      	ldr	r3, [sp, #4]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d0de      	beq.n	800477a <HAL_ADC_ConfigChannel+0x66>
            wait_loop_index--;
 80047bc:	9b01      	ldr	r3, [sp, #4]
 80047be:	3b01      	subs	r3, #1
 80047c0:	e7f8      	b.n	80047b4 <HAL_ADC_ConfigChannel+0xa0>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80047c2:	2280      	movs	r2, #128	; 0x80
 80047c4:	0412      	lsls	r2, r2, #16
 80047c6:	e7ea      	b.n	800479e <HAL_ADC_ConfigChannel+0x8a>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80047c8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80047ca:	4381      	bics	r1, r0
 80047cc:	6291      	str	r1, [r2, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80047ce:	2e02      	cmp	r6, #2
 80047d0:	d8d3      	bhi.n	800477a <HAL_ADC_ConfigChannel+0x66>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80047d2:	4a0c      	ldr	r2, [pc, #48]	; (8004804 <HAL_ADC_ConfigChannel+0xf0>)
 80047d4:	6811      	ldr	r1, [r2, #0]
 80047d6:	2b10      	cmp	r3, #16
 80047d8:	d00b      	beq.n	80047f2 <HAL_ADC_ConfigChannel+0xde>
 80047da:	3b11      	subs	r3, #17
 80047dc:	4258      	negs	r0, r3
 80047de:	4143      	adcs	r3, r0
 80047e0:	20c0      	movs	r0, #192	; 0xc0
 80047e2:	425b      	negs	r3, r3
 80047e4:	0400      	lsls	r0, r0, #16
 80047e6:	4003      	ands	r3, r0
 80047e8:	480a      	ldr	r0, [pc, #40]	; (8004814 <HAL_ADC_ConfigChannel+0x100>)
 80047ea:	181b      	adds	r3, r3, r0
 80047ec:	400b      	ands	r3, r1
 80047ee:	6013      	str	r3, [r2, #0]
 80047f0:	e7c3      	b.n	800477a <HAL_ADC_ConfigChannel+0x66>
 80047f2:	4b09      	ldr	r3, [pc, #36]	; (8004818 <HAL_ADC_ConfigChannel+0x104>)
 80047f4:	e7fa      	b.n	80047ec <HAL_ADC_ConfigChannel+0xd8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047f6:	2220      	movs	r2, #32
 80047f8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80047fa:	430a      	orrs	r2, r1
 80047fc:	639a      	str	r2, [r3, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 80047fe:	e7bd      	b.n	800477c <HAL_ADC_ConfigChannel+0x68>
 8004800:	00001001 	.word	0x00001001
 8004804:	40012708 	.word	0x40012708
 8004808:	ff400000 	.word	0xff400000
 800480c:	20000374 	.word	0x20000374
 8004810:	000f4240 	.word	0x000f4240
 8004814:	feffffff 	.word	0xfeffffff
 8004818:	ff7fffff 	.word	0xff7fffff

0800481c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800481c:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800481e:	25ff      	movs	r5, #255	; 0xff
 8004820:	2403      	movs	r4, #3
 8004822:	002a      	movs	r2, r5
 8004824:	4004      	ands	r4, r0
 8004826:	00e4      	lsls	r4, r4, #3
 8004828:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800482a:	0189      	lsls	r1, r1, #6
 800482c:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800482e:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004830:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004832:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 8004834:	2800      	cmp	r0, #0
 8004836:	db0a      	blt.n	800484e <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004838:	24c0      	movs	r4, #192	; 0xc0
 800483a:	4b0b      	ldr	r3, [pc, #44]	; (8004868 <HAL_NVIC_SetPriority+0x4c>)
 800483c:	0880      	lsrs	r0, r0, #2
 800483e:	0080      	lsls	r0, r0, #2
 8004840:	18c0      	adds	r0, r0, r3
 8004842:	00a4      	lsls	r4, r4, #2
 8004844:	5903      	ldr	r3, [r0, r4]
 8004846:	4013      	ands	r3, r2
 8004848:	430b      	orrs	r3, r1
 800484a:	5103      	str	r3, [r0, r4]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800484c:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800484e:	200f      	movs	r0, #15
 8004850:	4003      	ands	r3, r0
 8004852:	3b08      	subs	r3, #8
 8004854:	4805      	ldr	r0, [pc, #20]	; (800486c <HAL_NVIC_SetPriority+0x50>)
 8004856:	089b      	lsrs	r3, r3, #2
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	181b      	adds	r3, r3, r0
 800485c:	69d8      	ldr	r0, [r3, #28]
 800485e:	4002      	ands	r2, r0
 8004860:	430a      	orrs	r2, r1
 8004862:	61da      	str	r2, [r3, #28]
 8004864:	e7f2      	b.n	800484c <HAL_NVIC_SetPriority+0x30>
 8004866:	46c0      	nop			; (mov r8, r8)
 8004868:	e000e100 	.word	0xe000e100
 800486c:	e000ed00 	.word	0xe000ed00

08004870 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004870:	2800      	cmp	r0, #0
 8004872:	db05      	blt.n	8004880 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004874:	231f      	movs	r3, #31
 8004876:	4018      	ands	r0, r3
 8004878:	3b1e      	subs	r3, #30
 800487a:	4083      	lsls	r3, r0
 800487c:	4a01      	ldr	r2, [pc, #4]	; (8004884 <HAL_NVIC_EnableIRQ+0x14>)
 800487e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004880:	4770      	bx	lr
 8004882:	46c0      	nop			; (mov r8, r8)
 8004884:	e000e100 	.word	0xe000e100

08004888 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004888:	2280      	movs	r2, #128	; 0x80
 800488a:	1e43      	subs	r3, r0, #1
 800488c:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 800488e:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004890:	4293      	cmp	r3, r2
 8004892:	d20d      	bcs.n	80048b0 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004894:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004896:	4a07      	ldr	r2, [pc, #28]	; (80048b4 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004898:	4807      	ldr	r0, [pc, #28]	; (80048b8 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800489a:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800489c:	6a03      	ldr	r3, [r0, #32]
 800489e:	0609      	lsls	r1, r1, #24
 80048a0:	021b      	lsls	r3, r3, #8
 80048a2:	0a1b      	lsrs	r3, r3, #8
 80048a4:	430b      	orrs	r3, r1
 80048a6:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048a8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048aa:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048ac:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048ae:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80048b0:	4770      	bx	lr
 80048b2:	46c0      	nop			; (mov r8, r8)
 80048b4:	e000e010 	.word	0xe000e010
 80048b8:	e000ed00 	.word	0xe000ed00

080048bc <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80048bc:	4770      	bx	lr

080048be <HAL_SYSTICK_IRQHandler>:
{
 80048be:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 80048c0:	f7ff fffc 	bl	80048bc <HAL_SYSTICK_Callback>
}
 80048c4:	bd10      	pop	{r4, pc}
	...

080048c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80048c8:	b570      	push	{r4, r5, r6, lr}
 80048ca:	0004      	movs	r4, r0
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if (NULL == hdma)
  {
    return HAL_ERROR;
 80048cc:	2001      	movs	r0, #1
  if (NULL == hdma)
 80048ce:	2c00      	cmp	r4, #0
 80048d0:	d024      	beq.n	800491c <HAL_DMA_Init+0x54>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80048d2:	2302      	movs	r3, #2
 80048d4:	1ca5      	adds	r5, r4, #2
 80048d6:	77eb      	strb	r3, [r5, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80048d8:	6820      	ldr	r0, [r4, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80048da:	4b11      	ldr	r3, [pc, #68]	; (8004920 <HAL_DMA_Init+0x58>)
  tmp = hdma->Instance->CCR;
 80048dc:	6802      	ldr	r2, [r0, #0]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80048de:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80048e0:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 80048e2:	6863      	ldr	r3, [r4, #4]
 80048e4:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048e6:	68e1      	ldr	r1, [r4, #12]
 80048e8:	430b      	orrs	r3, r1
 80048ea:	6921      	ldr	r1, [r4, #16]
 80048ec:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048ee:	6961      	ldr	r1, [r4, #20]
 80048f0:	430b      	orrs	r3, r1
 80048f2:	69a1      	ldr	r1, [r4, #24]
 80048f4:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80048f6:	69e1      	ldr	r1, [r4, #28]
 80048f8:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 80048fa:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80048fc:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80048fe:	4b09      	ldr	r3, [pc, #36]	; (8004924 <HAL_DMA_Init+0x5c>)
 8004900:	2114      	movs	r1, #20
 8004902:	18c0      	adds	r0, r0, r3
 8004904:	f7fb fc14 	bl	8000130 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8004908:	4b07      	ldr	r3, [pc, #28]	; (8004928 <HAL_DMA_Init+0x60>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800490a:	0080      	lsls	r0, r0, #2
 800490c:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800490e:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004910:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8004912:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004914:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->Lock = HAL_UNLOCKED;
 8004916:	18e4      	adds	r4, r4, r3
  hdma->State = HAL_DMA_STATE_READY;
 8004918:	77eb      	strb	r3, [r5, #31]
  hdma->Lock = HAL_UNLOCKED;
 800491a:	77e0      	strb	r0, [r4, #31]
}
 800491c:	bd70      	pop	{r4, r5, r6, pc}
 800491e:	46c0      	nop			; (mov r8, r8)
 8004920:	ffffc00f 	.word	0xffffc00f
 8004924:	bffdfff8 	.word	0xbffdfff8
 8004928:	40020000 	.word	0x40020000

0800492c <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 800492c:	2300      	movs	r3, #0
{
 800492e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004930:	b087      	sub	sp, #28
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004932:	680a      	ldr	r2, [r1, #0]
 8004934:	0014      	movs	r4, r2
 8004936:	40dc      	lsrs	r4, r3
 8004938:	d101      	bne.n	800493e <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  } 
}
 800493a:	b007      	add	sp, #28
 800493c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800493e:	2501      	movs	r5, #1
 8004940:	0014      	movs	r4, r2
 8004942:	409d      	lsls	r5, r3
 8004944:	402c      	ands	r4, r5
 8004946:	9400      	str	r4, [sp, #0]
    if (iocurrent != 0x00u)
 8004948:	422a      	tst	r2, r5
 800494a:	d100      	bne.n	800494e <HAL_GPIO_Init+0x22>
 800494c:	e094      	b.n	8004a78 <HAL_GPIO_Init+0x14c>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800494e:	684a      	ldr	r2, [r1, #4]
 8004950:	005f      	lsls	r7, r3, #1
 8004952:	4694      	mov	ip, r2
 8004954:	2203      	movs	r2, #3
 8004956:	4664      	mov	r4, ip
 8004958:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800495a:	2403      	movs	r4, #3
 800495c:	40bc      	lsls	r4, r7
 800495e:	43e4      	mvns	r4, r4
 8004960:	9401      	str	r4, [sp, #4]
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004962:	1e54      	subs	r4, r2, #1
 8004964:	2c01      	cmp	r4, #1
 8004966:	d82e      	bhi.n	80049c6 <HAL_GPIO_Init+0x9a>
        temp = GPIOx->OSPEEDR;
 8004968:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800496a:	9c01      	ldr	r4, [sp, #4]
 800496c:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 800496e:	68cc      	ldr	r4, [r1, #12]
 8004970:	40bc      	lsls	r4, r7
 8004972:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8004974:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8004976:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004978:	2601      	movs	r6, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800497a:	43ac      	bics	r4, r5
 800497c:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800497e:	4664      	mov	r4, ip
 8004980:	0924      	lsrs	r4, r4, #4
 8004982:	4034      	ands	r4, r6
 8004984:	409c      	lsls	r4, r3
 8004986:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8004988:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 800498a:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800498c:	9c01      	ldr	r4, [sp, #4]
 800498e:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004990:	688c      	ldr	r4, [r1, #8]
 8004992:	40bc      	lsls	r4, r7
 8004994:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8004996:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004998:	2a02      	cmp	r2, #2
 800499a:	d116      	bne.n	80049ca <HAL_GPIO_Init+0x9e>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800499c:	2507      	movs	r5, #7
 800499e:	260f      	movs	r6, #15
 80049a0:	401d      	ands	r5, r3
 80049a2:	00ad      	lsls	r5, r5, #2
 80049a4:	40ae      	lsls	r6, r5
        temp = GPIOx->AFR[position >> 3u];
 80049a6:	08dc      	lsrs	r4, r3, #3
 80049a8:	00a4      	lsls	r4, r4, #2
 80049aa:	1904      	adds	r4, r0, r4
 80049ac:	9402      	str	r4, [sp, #8]
 80049ae:	6a24      	ldr	r4, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80049b0:	9603      	str	r6, [sp, #12]
 80049b2:	0026      	movs	r6, r4
 80049b4:	9c03      	ldr	r4, [sp, #12]
 80049b6:	43a6      	bics	r6, r4
 80049b8:	0034      	movs	r4, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80049ba:	690e      	ldr	r6, [r1, #16]
 80049bc:	40ae      	lsls	r6, r5
 80049be:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3u] = temp;
 80049c0:	9c02      	ldr	r4, [sp, #8]
 80049c2:	6226      	str	r6, [r4, #32]
 80049c4:	e001      	b.n	80049ca <HAL_GPIO_Init+0x9e>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049c6:	2a03      	cmp	r2, #3
 80049c8:	d1df      	bne.n	800498a <HAL_GPIO_Init+0x5e>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80049ca:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 80049cc:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80049ce:	9d01      	ldr	r5, [sp, #4]
 80049d0:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80049d2:	432a      	orrs	r2, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80049d4:	24c0      	movs	r4, #192	; 0xc0
      GPIOx->MODER = temp;
 80049d6:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80049d8:	4662      	mov	r2, ip
 80049da:	02a4      	lsls	r4, r4, #10
 80049dc:	4222      	tst	r2, r4
 80049de:	d04b      	beq.n	8004a78 <HAL_GPIO_Init+0x14c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049e0:	2501      	movs	r5, #1
 80049e2:	4a26      	ldr	r2, [pc, #152]	; (8004a7c <HAL_GPIO_Init+0x150>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80049e4:	2790      	movs	r7, #144	; 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049e6:	6994      	ldr	r4, [r2, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80049e8:	05ff      	lsls	r7, r7, #23
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049ea:	432c      	orrs	r4, r5
 80049ec:	6194      	str	r4, [r2, #24]
 80049ee:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 80049f0:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049f2:	402a      	ands	r2, r5
 80049f4:	9205      	str	r2, [sp, #20]
 80049f6:	9a05      	ldr	r2, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2u];
 80049f8:	4a21      	ldr	r2, [pc, #132]	; (8004a80 <HAL_GPIO_Init+0x154>)
 80049fa:	00a4      	lsls	r4, r4, #2
 80049fc:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80049fe:	220f      	movs	r2, #15
 8004a00:	3502      	adds	r5, #2
 8004a02:	401d      	ands	r5, r3
 8004a04:	00ad      	lsls	r5, r5, #2
 8004a06:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2u];
 8004a08:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004a0a:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	42b8      	cmp	r0, r7
 8004a10:	d008      	beq.n	8004a24 <HAL_GPIO_Init+0xf8>
 8004a12:	4f1c      	ldr	r7, [pc, #112]	; (8004a84 <HAL_GPIO_Init+0x158>)
 8004a14:	3201      	adds	r2, #1
 8004a16:	42b8      	cmp	r0, r7
 8004a18:	d004      	beq.n	8004a24 <HAL_GPIO_Init+0xf8>
 8004a1a:	4f1b      	ldr	r7, [pc, #108]	; (8004a88 <HAL_GPIO_Init+0x15c>)
 8004a1c:	3201      	adds	r2, #1
 8004a1e:	42b8      	cmp	r0, r7
 8004a20:	d000      	beq.n	8004a24 <HAL_GPIO_Init+0xf8>
 8004a22:	3203      	adds	r2, #3
 8004a24:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004a26:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004a28:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004a2a:	60a2      	str	r2, [r4, #8]
        temp = EXTI->RTSR;
 8004a2c:	4a17      	ldr	r2, [pc, #92]	; (8004a8c <HAL_GPIO_Init+0x160>)
        temp &= ~(iocurrent);
 8004a2e:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->RTSR;
 8004a30:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8004a32:	9d00      	ldr	r5, [sp, #0]
        temp &= ~(iocurrent);
 8004a34:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8004a36:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004a38:	02ff      	lsls	r7, r7, #11
 8004a3a:	d401      	bmi.n	8004a40 <HAL_GPIO_Init+0x114>
        temp &= ~(iocurrent);
 8004a3c:	0035      	movs	r5, r6
 8004a3e:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004a40:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 8004a42:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8004a44:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 8004a46:	9d00      	ldr	r5, [sp, #0]
 8004a48:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004a4a:	02bf      	lsls	r7, r7, #10
 8004a4c:	d401      	bmi.n	8004a52 <HAL_GPIO_Init+0x126>
        temp &= ~(iocurrent);
 8004a4e:	0035      	movs	r5, r6
 8004a50:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004a52:	4667      	mov	r7, ip
        EXTI->FTSR = temp;
 8004a54:	60d5      	str	r5, [r2, #12]
        temp = EXTI->EMR;
 8004a56:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8004a58:	9d00      	ldr	r5, [sp, #0]
 8004a5a:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004a5c:	03bf      	lsls	r7, r7, #14
 8004a5e:	d401      	bmi.n	8004a64 <HAL_GPIO_Init+0x138>
        temp &= ~(iocurrent);
 8004a60:	0035      	movs	r5, r6
 8004a62:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004a64:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 8004a66:	6055      	str	r5, [r2, #4]
        temp = EXTI->IMR;
 8004a68:	6815      	ldr	r5, [r2, #0]
          temp |= iocurrent;
 8004a6a:	9e00      	ldr	r6, [sp, #0]
 8004a6c:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004a6e:	03ff      	lsls	r7, r7, #15
 8004a70:	d401      	bmi.n	8004a76 <HAL_GPIO_Init+0x14a>
        temp &= ~(iocurrent);
 8004a72:	4025      	ands	r5, r4
 8004a74:	002e      	movs	r6, r5
        EXTI->IMR = temp;
 8004a76:	6016      	str	r6, [r2, #0]
    position++;
 8004a78:	3301      	adds	r3, #1
 8004a7a:	e75a      	b.n	8004932 <HAL_GPIO_Init+0x6>
 8004a7c:	40021000 	.word	0x40021000
 8004a80:	40010000 	.word	0x40010000
 8004a84:	48000400 	.word	0x48000400
 8004a88:	48000800 	.word	0x48000800
 8004a8c:	40010400 	.word	0x40010400

08004a90 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004a90:	2a00      	cmp	r2, #0
 8004a92:	d001      	beq.n	8004a98 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004a94:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004a96:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004a98:	6281      	str	r1, [r0, #40]	; 0x28
}
 8004a9a:	e7fc      	b.n	8004a96 <HAL_GPIO_WritePin+0x6>

08004a9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a9e:	0004      	movs	r4, r0
 8004aa0:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004aa2:	2800      	cmp	r0, #0
 8004aa4:	d045      	beq.n	8004b32 <HAL_RCC_OscConfig+0x96>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004aa6:	6803      	ldr	r3, [r0, #0]
 8004aa8:	07db      	lsls	r3, r3, #31
 8004aaa:	d42f      	bmi.n	8004b0c <HAL_RCC_OscConfig+0x70>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004aac:	6823      	ldr	r3, [r4, #0]
 8004aae:	079b      	lsls	r3, r3, #30
 8004ab0:	d500      	bpl.n	8004ab4 <HAL_RCC_OscConfig+0x18>
 8004ab2:	e081      	b.n	8004bb8 <HAL_RCC_OscConfig+0x11c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ab4:	6823      	ldr	r3, [r4, #0]
 8004ab6:	071b      	lsls	r3, r3, #28
 8004ab8:	d500      	bpl.n	8004abc <HAL_RCC_OscConfig+0x20>
 8004aba:	e0bc      	b.n	8004c36 <HAL_RCC_OscConfig+0x19a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004abc:	6823      	ldr	r3, [r4, #0]
 8004abe:	075b      	lsls	r3, r3, #29
 8004ac0:	d500      	bpl.n	8004ac4 <HAL_RCC_OscConfig+0x28>
 8004ac2:	e0df      	b.n	8004c84 <HAL_RCC_OscConfig+0x1e8>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004ac4:	6823      	ldr	r3, [r4, #0]
 8004ac6:	06db      	lsls	r3, r3, #27
 8004ac8:	d51a      	bpl.n	8004b00 <HAL_RCC_OscConfig+0x64>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004aca:	6962      	ldr	r2, [r4, #20]
 8004acc:	2304      	movs	r3, #4
 8004ace:	4db4      	ldr	r5, [pc, #720]	; (8004da0 <HAL_RCC_OscConfig+0x304>)
 8004ad0:	2a01      	cmp	r2, #1
 8004ad2:	d000      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x3a>
 8004ad4:	e148      	b.n	8004d68 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004ad6:	6b69      	ldr	r1, [r5, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004ad8:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8004ada:	430b      	orrs	r3, r1
 8004adc:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8004ade:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8004ae0:	431a      	orrs	r2, r3
 8004ae2:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8004ae4:	f7ff fd6c 	bl	80045c0 <HAL_GetTick>
 8004ae8:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004aea:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8004aec:	423b      	tst	r3, r7
 8004aee:	d100      	bne.n	8004af2 <HAL_RCC_OscConfig+0x56>
 8004af0:	e133      	b.n	8004d5a <HAL_RCC_OscConfig+0x2be>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004af2:	21f8      	movs	r1, #248	; 0xf8
 8004af4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8004af6:	69a3      	ldr	r3, [r4, #24]
 8004af8:	438a      	bics	r2, r1
 8004afa:	00db      	lsls	r3, r3, #3
 8004afc:	4313      	orrs	r3, r2
 8004afe:	636b      	str	r3, [r5, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b00:	6a23      	ldr	r3, [r4, #32]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d000      	beq.n	8004b08 <HAL_RCC_OscConfig+0x6c>
 8004b06:	e157      	b.n	8004db8 <HAL_RCC_OscConfig+0x31c>
        }
      }
    }
  }

  return HAL_OK;
 8004b08:	2000      	movs	r0, #0
 8004b0a:	e02a      	b.n	8004b62 <HAL_RCC_OscConfig+0xc6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004b0c:	220c      	movs	r2, #12
 8004b0e:	4da4      	ldr	r5, [pc, #656]	; (8004da0 <HAL_RCC_OscConfig+0x304>)
 8004b10:	686b      	ldr	r3, [r5, #4]
 8004b12:	4013      	ands	r3, r2
 8004b14:	2b04      	cmp	r3, #4
 8004b16:	d006      	beq.n	8004b26 <HAL_RCC_OscConfig+0x8a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004b18:	686b      	ldr	r3, [r5, #4]
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	2b08      	cmp	r3, #8
 8004b1e:	d10a      	bne.n	8004b36 <HAL_RCC_OscConfig+0x9a>
 8004b20:	686b      	ldr	r3, [r5, #4]
 8004b22:	03db      	lsls	r3, r3, #15
 8004b24:	d507      	bpl.n	8004b36 <HAL_RCC_OscConfig+0x9a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b26:	682b      	ldr	r3, [r5, #0]
 8004b28:	039b      	lsls	r3, r3, #14
 8004b2a:	d5bf      	bpl.n	8004aac <HAL_RCC_OscConfig+0x10>
 8004b2c:	6863      	ldr	r3, [r4, #4]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1bc      	bne.n	8004aac <HAL_RCC_OscConfig+0x10>
          return HAL_ERROR;
 8004b32:	2001      	movs	r0, #1
 8004b34:	e015      	b.n	8004b62 <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b36:	6863      	ldr	r3, [r4, #4]
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d114      	bne.n	8004b66 <HAL_RCC_OscConfig+0xca>
 8004b3c:	2380      	movs	r3, #128	; 0x80
 8004b3e:	682a      	ldr	r2, [r5, #0]
 8004b40:	025b      	lsls	r3, r3, #9
 8004b42:	4313      	orrs	r3, r2
 8004b44:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004b46:	f7ff fd3b 	bl	80045c0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b4a:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8004b4c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b4e:	02bf      	lsls	r7, r7, #10
 8004b50:	682b      	ldr	r3, [r5, #0]
 8004b52:	423b      	tst	r3, r7
 8004b54:	d1aa      	bne.n	8004aac <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b56:	f7ff fd33 	bl	80045c0 <HAL_GetTick>
 8004b5a:	1b80      	subs	r0, r0, r6
 8004b5c:	2864      	cmp	r0, #100	; 0x64
 8004b5e:	d9f7      	bls.n	8004b50 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
 8004b60:	2003      	movs	r0, #3
}
 8004b62:	b005      	add	sp, #20
 8004b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d116      	bne.n	8004b98 <HAL_RCC_OscConfig+0xfc>
 8004b6a:	682b      	ldr	r3, [r5, #0]
 8004b6c:	4a8d      	ldr	r2, [pc, #564]	; (8004da4 <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b6e:	2780      	movs	r7, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b70:	4013      	ands	r3, r2
 8004b72:	602b      	str	r3, [r5, #0]
 8004b74:	682b      	ldr	r3, [r5, #0]
 8004b76:	4a8c      	ldr	r2, [pc, #560]	; (8004da8 <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b78:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004b7e:	f7ff fd1f 	bl	80045c0 <HAL_GetTick>
 8004b82:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b84:	682b      	ldr	r3, [r5, #0]
 8004b86:	423b      	tst	r3, r7
 8004b88:	d100      	bne.n	8004b8c <HAL_RCC_OscConfig+0xf0>
 8004b8a:	e78f      	b.n	8004aac <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b8c:	f7ff fd18 	bl	80045c0 <HAL_GetTick>
 8004b90:	1b80      	subs	r0, r0, r6
 8004b92:	2864      	cmp	r0, #100	; 0x64
 8004b94:	d9f6      	bls.n	8004b84 <HAL_RCC_OscConfig+0xe8>
 8004b96:	e7e3      	b.n	8004b60 <HAL_RCC_OscConfig+0xc4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b98:	2b05      	cmp	r3, #5
 8004b9a:	d105      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x10c>
 8004b9c:	2380      	movs	r3, #128	; 0x80
 8004b9e:	682a      	ldr	r2, [r5, #0]
 8004ba0:	02db      	lsls	r3, r3, #11
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	602b      	str	r3, [r5, #0]
 8004ba6:	e7c9      	b.n	8004b3c <HAL_RCC_OscConfig+0xa0>
 8004ba8:	682b      	ldr	r3, [r5, #0]
 8004baa:	4a7e      	ldr	r2, [pc, #504]	; (8004da4 <HAL_RCC_OscConfig+0x308>)
 8004bac:	4013      	ands	r3, r2
 8004bae:	602b      	str	r3, [r5, #0]
 8004bb0:	682b      	ldr	r3, [r5, #0]
 8004bb2:	4a7d      	ldr	r2, [pc, #500]	; (8004da8 <HAL_RCC_OscConfig+0x30c>)
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	e7c5      	b.n	8004b44 <HAL_RCC_OscConfig+0xa8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004bb8:	220c      	movs	r2, #12
 8004bba:	4d79      	ldr	r5, [pc, #484]	; (8004da0 <HAL_RCC_OscConfig+0x304>)
 8004bbc:	686b      	ldr	r3, [r5, #4]
 8004bbe:	4213      	tst	r3, r2
 8004bc0:	d006      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x134>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004bc2:	686b      	ldr	r3, [r5, #4]
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	2b08      	cmp	r3, #8
 8004bc8:	d110      	bne.n	8004bec <HAL_RCC_OscConfig+0x150>
 8004bca:	686b      	ldr	r3, [r5, #4]
 8004bcc:	03db      	lsls	r3, r3, #15
 8004bce:	d40d      	bmi.n	8004bec <HAL_RCC_OscConfig+0x150>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bd0:	682b      	ldr	r3, [r5, #0]
 8004bd2:	079b      	lsls	r3, r3, #30
 8004bd4:	d502      	bpl.n	8004bdc <HAL_RCC_OscConfig+0x140>
 8004bd6:	68e3      	ldr	r3, [r4, #12]
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d1aa      	bne.n	8004b32 <HAL_RCC_OscConfig+0x96>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bdc:	21f8      	movs	r1, #248	; 0xf8
 8004bde:	682a      	ldr	r2, [r5, #0]
 8004be0:	6923      	ldr	r3, [r4, #16]
 8004be2:	438a      	bics	r2, r1
 8004be4:	00db      	lsls	r3, r3, #3
 8004be6:	4313      	orrs	r3, r2
 8004be8:	602b      	str	r3, [r5, #0]
 8004bea:	e763      	b.n	8004ab4 <HAL_RCC_OscConfig+0x18>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004bec:	68e2      	ldr	r2, [r4, #12]
 8004bee:	2301      	movs	r3, #1
 8004bf0:	2a00      	cmp	r2, #0
 8004bf2:	d00f      	beq.n	8004c14 <HAL_RCC_OscConfig+0x178>
        __HAL_RCC_HSI_ENABLE();
 8004bf4:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bf6:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004bfc:	f7ff fce0 	bl	80045c0 <HAL_GetTick>
 8004c00:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c02:	682b      	ldr	r3, [r5, #0]
 8004c04:	423b      	tst	r3, r7
 8004c06:	d1e9      	bne.n	8004bdc <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c08:	f7ff fcda 	bl	80045c0 <HAL_GetTick>
 8004c0c:	1b80      	subs	r0, r0, r6
 8004c0e:	2802      	cmp	r0, #2
 8004c10:	d9f7      	bls.n	8004c02 <HAL_RCC_OscConfig+0x166>
 8004c12:	e7a5      	b.n	8004b60 <HAL_RCC_OscConfig+0xc4>
        __HAL_RCC_HSI_DISABLE();
 8004c14:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c16:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 8004c18:	439a      	bics	r2, r3
 8004c1a:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 8004c1c:	f7ff fcd0 	bl	80045c0 <HAL_GetTick>
 8004c20:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c22:	682b      	ldr	r3, [r5, #0]
 8004c24:	423b      	tst	r3, r7
 8004c26:	d100      	bne.n	8004c2a <HAL_RCC_OscConfig+0x18e>
 8004c28:	e744      	b.n	8004ab4 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c2a:	f7ff fcc9 	bl	80045c0 <HAL_GetTick>
 8004c2e:	1b80      	subs	r0, r0, r6
 8004c30:	2802      	cmp	r0, #2
 8004c32:	d9f6      	bls.n	8004c22 <HAL_RCC_OscConfig+0x186>
 8004c34:	e794      	b.n	8004b60 <HAL_RCC_OscConfig+0xc4>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c36:	69e2      	ldr	r2, [r4, #28]
 8004c38:	2301      	movs	r3, #1
 8004c3a:	4d59      	ldr	r5, [pc, #356]	; (8004da0 <HAL_RCC_OscConfig+0x304>)
 8004c3c:	2a00      	cmp	r2, #0
 8004c3e:	d010      	beq.n	8004c62 <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_LSI_ENABLE();
 8004c40:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c42:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8004c44:	4313      	orrs	r3, r2
 8004c46:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8004c48:	f7ff fcba 	bl	80045c0 <HAL_GetTick>
 8004c4c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c4e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004c50:	423b      	tst	r3, r7
 8004c52:	d000      	beq.n	8004c56 <HAL_RCC_OscConfig+0x1ba>
 8004c54:	e732      	b.n	8004abc <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c56:	f7ff fcb3 	bl	80045c0 <HAL_GetTick>
 8004c5a:	1b80      	subs	r0, r0, r6
 8004c5c:	2802      	cmp	r0, #2
 8004c5e:	d9f6      	bls.n	8004c4e <HAL_RCC_OscConfig+0x1b2>
 8004c60:	e77e      	b.n	8004b60 <HAL_RCC_OscConfig+0xc4>
      __HAL_RCC_LSI_DISABLE();
 8004c62:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c64:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 8004c66:	439a      	bics	r2, r3
 8004c68:	626a      	str	r2, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8004c6a:	f7ff fca9 	bl	80045c0 <HAL_GetTick>
 8004c6e:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c70:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004c72:	423b      	tst	r3, r7
 8004c74:	d100      	bne.n	8004c78 <HAL_RCC_OscConfig+0x1dc>
 8004c76:	e721      	b.n	8004abc <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c78:	f7ff fca2 	bl	80045c0 <HAL_GetTick>
 8004c7c:	1b80      	subs	r0, r0, r6
 8004c7e:	2802      	cmp	r0, #2
 8004c80:	d9f6      	bls.n	8004c70 <HAL_RCC_OscConfig+0x1d4>
 8004c82:	e76d      	b.n	8004b60 <HAL_RCC_OscConfig+0xc4>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c84:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8004c86:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c88:	4d45      	ldr	r5, [pc, #276]	; (8004da0 <HAL_RCC_OscConfig+0x304>)
 8004c8a:	0552      	lsls	r2, r2, #21
 8004c8c:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 8004c8e:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c90:	4213      	tst	r3, r2
 8004c92:	d108      	bne.n	8004ca6 <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c94:	69eb      	ldr	r3, [r5, #28]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	61eb      	str	r3, [r5, #28]
 8004c9a:	69eb      	ldr	r3, [r5, #28]
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	9303      	str	r3, [sp, #12]
 8004ca0:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ca6:	2780      	movs	r7, #128	; 0x80
 8004ca8:	4e40      	ldr	r6, [pc, #256]	; (8004dac <HAL_RCC_OscConfig+0x310>)
 8004caa:	007f      	lsls	r7, r7, #1
 8004cac:	6833      	ldr	r3, [r6, #0]
 8004cae:	423b      	tst	r3, r7
 8004cb0:	d015      	beq.n	8004cde <HAL_RCC_OscConfig+0x242>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cb2:	68a3      	ldr	r3, [r4, #8]
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d122      	bne.n	8004cfe <HAL_RCC_OscConfig+0x262>
 8004cb8:	6a2a      	ldr	r2, [r5, #32]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8004cbe:	f7ff fc7f 	bl	80045c0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cc2:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8004cc4:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cc6:	6a2b      	ldr	r3, [r5, #32]
 8004cc8:	423b      	tst	r3, r7
 8004cca:	d03f      	beq.n	8004d4c <HAL_RCC_OscConfig+0x2b0>
    if(pwrclkchanged == SET)
 8004ccc:	9b00      	ldr	r3, [sp, #0]
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d000      	beq.n	8004cd4 <HAL_RCC_OscConfig+0x238>
 8004cd2:	e6f7      	b.n	8004ac4 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cd4:	69eb      	ldr	r3, [r5, #28]
 8004cd6:	4a36      	ldr	r2, [pc, #216]	; (8004db0 <HAL_RCC_OscConfig+0x314>)
 8004cd8:	4013      	ands	r3, r2
 8004cda:	61eb      	str	r3, [r5, #28]
 8004cdc:	e6f2      	b.n	8004ac4 <HAL_RCC_OscConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cde:	6833      	ldr	r3, [r6, #0]
 8004ce0:	433b      	orrs	r3, r7
 8004ce2:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004ce4:	f7ff fc6c 	bl	80045c0 <HAL_GetTick>
 8004ce8:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cea:	6833      	ldr	r3, [r6, #0]
 8004cec:	423b      	tst	r3, r7
 8004cee:	d1e0      	bne.n	8004cb2 <HAL_RCC_OscConfig+0x216>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cf0:	f7ff fc66 	bl	80045c0 <HAL_GetTick>
 8004cf4:	9b01      	ldr	r3, [sp, #4]
 8004cf6:	1ac0      	subs	r0, r0, r3
 8004cf8:	2864      	cmp	r0, #100	; 0x64
 8004cfa:	d9f6      	bls.n	8004cea <HAL_RCC_OscConfig+0x24e>
 8004cfc:	e730      	b.n	8004b60 <HAL_RCC_OscConfig+0xc4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cfe:	2201      	movs	r2, #1
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d114      	bne.n	8004d2e <HAL_RCC_OscConfig+0x292>
 8004d04:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d06:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d08:	4393      	bics	r3, r2
 8004d0a:	622b      	str	r3, [r5, #32]
 8004d0c:	6a2b      	ldr	r3, [r5, #32]
 8004d0e:	3203      	adds	r2, #3
 8004d10:	4393      	bics	r3, r2
 8004d12:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8004d14:	f7ff fc54 	bl	80045c0 <HAL_GetTick>
 8004d18:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d1a:	6a2b      	ldr	r3, [r5, #32]
 8004d1c:	423b      	tst	r3, r7
 8004d1e:	d0d5      	beq.n	8004ccc <HAL_RCC_OscConfig+0x230>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d20:	f7ff fc4e 	bl	80045c0 <HAL_GetTick>
 8004d24:	4b23      	ldr	r3, [pc, #140]	; (8004db4 <HAL_RCC_OscConfig+0x318>)
 8004d26:	1b80      	subs	r0, r0, r6
 8004d28:	4298      	cmp	r0, r3
 8004d2a:	d9f6      	bls.n	8004d1a <HAL_RCC_OscConfig+0x27e>
 8004d2c:	e718      	b.n	8004b60 <HAL_RCC_OscConfig+0xc4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d2e:	2b05      	cmp	r3, #5
 8004d30:	d105      	bne.n	8004d3e <HAL_RCC_OscConfig+0x2a2>
 8004d32:	6a29      	ldr	r1, [r5, #32]
 8004d34:	3b01      	subs	r3, #1
 8004d36:	430b      	orrs	r3, r1
 8004d38:	622b      	str	r3, [r5, #32]
 8004d3a:	6a2b      	ldr	r3, [r5, #32]
 8004d3c:	e7bd      	b.n	8004cba <HAL_RCC_OscConfig+0x21e>
 8004d3e:	6a2b      	ldr	r3, [r5, #32]
 8004d40:	4393      	bics	r3, r2
 8004d42:	2204      	movs	r2, #4
 8004d44:	622b      	str	r3, [r5, #32]
 8004d46:	6a2b      	ldr	r3, [r5, #32]
 8004d48:	4393      	bics	r3, r2
 8004d4a:	e7b7      	b.n	8004cbc <HAL_RCC_OscConfig+0x220>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d4c:	f7ff fc38 	bl	80045c0 <HAL_GetTick>
 8004d50:	4b18      	ldr	r3, [pc, #96]	; (8004db4 <HAL_RCC_OscConfig+0x318>)
 8004d52:	1b80      	subs	r0, r0, r6
 8004d54:	4298      	cmp	r0, r3
 8004d56:	d9b6      	bls.n	8004cc6 <HAL_RCC_OscConfig+0x22a>
 8004d58:	e702      	b.n	8004b60 <HAL_RCC_OscConfig+0xc4>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004d5a:	f7ff fc31 	bl	80045c0 <HAL_GetTick>
 8004d5e:	1b80      	subs	r0, r0, r6
 8004d60:	2802      	cmp	r0, #2
 8004d62:	d800      	bhi.n	8004d66 <HAL_RCC_OscConfig+0x2ca>
 8004d64:	e6c1      	b.n	8004aea <HAL_RCC_OscConfig+0x4e>
 8004d66:	e6fb      	b.n	8004b60 <HAL_RCC_OscConfig+0xc4>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004d68:	3205      	adds	r2, #5
 8004d6a:	d103      	bne.n	8004d74 <HAL_RCC_OscConfig+0x2d8>
      __HAL_RCC_HSI14ADC_ENABLE();
 8004d6c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8004d6e:	439a      	bics	r2, r3
 8004d70:	636a      	str	r2, [r5, #52]	; 0x34
 8004d72:	e6be      	b.n	8004af2 <HAL_RCC_OscConfig+0x56>
      __HAL_RCC_HSI14ADC_DISABLE();
 8004d74:	6b6a      	ldr	r2, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004d76:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8004d78:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8004d7a:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8004d7c:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8004d7e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8004d80:	4393      	bics	r3, r2
 8004d82:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8004d84:	f7ff fc1c 	bl	80045c0 <HAL_GetTick>
 8004d88:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004d8a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8004d8c:	423b      	tst	r3, r7
 8004d8e:	d100      	bne.n	8004d92 <HAL_RCC_OscConfig+0x2f6>
 8004d90:	e6b6      	b.n	8004b00 <HAL_RCC_OscConfig+0x64>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004d92:	f7ff fc15 	bl	80045c0 <HAL_GetTick>
 8004d96:	1b80      	subs	r0, r0, r6
 8004d98:	2802      	cmp	r0, #2
 8004d9a:	d9f6      	bls.n	8004d8a <HAL_RCC_OscConfig+0x2ee>
 8004d9c:	e6e0      	b.n	8004b60 <HAL_RCC_OscConfig+0xc4>
 8004d9e:	46c0      	nop			; (mov r8, r8)
 8004da0:	40021000 	.word	0x40021000
 8004da4:	fffeffff 	.word	0xfffeffff
 8004da8:	fffbffff 	.word	0xfffbffff
 8004dac:	40007000 	.word	0x40007000
 8004db0:	efffffff 	.word	0xefffffff
 8004db4:	00001388 	.word	0x00001388
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004db8:	210c      	movs	r1, #12
 8004dba:	4d34      	ldr	r5, [pc, #208]	; (8004e8c <HAL_RCC_OscConfig+0x3f0>)
 8004dbc:	686a      	ldr	r2, [r5, #4]
 8004dbe:	400a      	ands	r2, r1
 8004dc0:	2a08      	cmp	r2, #8
 8004dc2:	d047      	beq.n	8004e54 <HAL_RCC_OscConfig+0x3b8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dc4:	4a32      	ldr	r2, [pc, #200]	; (8004e90 <HAL_RCC_OscConfig+0x3f4>)
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d132      	bne.n	8004e30 <HAL_RCC_OscConfig+0x394>
        __HAL_RCC_PLL_DISABLE();
 8004dca:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dcc:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8004dce:	4013      	ands	r3, r2
 8004dd0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004dd2:	f7ff fbf5 	bl	80045c0 <HAL_GetTick>
 8004dd6:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dd8:	04bf      	lsls	r7, r7, #18
 8004dda:	682b      	ldr	r3, [r5, #0]
 8004ddc:	423b      	tst	r3, r7
 8004dde:	d121      	bne.n	8004e24 <HAL_RCC_OscConfig+0x388>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004de0:	220f      	movs	r2, #15
 8004de2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004de4:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004de6:	4393      	bics	r3, r2
 8004de8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004dea:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004dec:	4313      	orrs	r3, r2
 8004dee:	62eb      	str	r3, [r5, #44]	; 0x2c
 8004df0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004df2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004df4:	686a      	ldr	r2, [r5, #4]
 8004df6:	430b      	orrs	r3, r1
 8004df8:	4926      	ldr	r1, [pc, #152]	; (8004e94 <HAL_RCC_OscConfig+0x3f8>)
 8004dfa:	400a      	ands	r2, r1
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8004e00:	2380      	movs	r3, #128	; 0x80
 8004e02:	682a      	ldr	r2, [r5, #0]
 8004e04:	045b      	lsls	r3, r3, #17
 8004e06:	4313      	orrs	r3, r2
 8004e08:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004e0a:	f7ff fbd9 	bl	80045c0 <HAL_GetTick>
 8004e0e:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e10:	682b      	ldr	r3, [r5, #0]
 8004e12:	4233      	tst	r3, r6
 8004e14:	d000      	beq.n	8004e18 <HAL_RCC_OscConfig+0x37c>
 8004e16:	e677      	b.n	8004b08 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e18:	f7ff fbd2 	bl	80045c0 <HAL_GetTick>
 8004e1c:	1b00      	subs	r0, r0, r4
 8004e1e:	2802      	cmp	r0, #2
 8004e20:	d9f6      	bls.n	8004e10 <HAL_RCC_OscConfig+0x374>
 8004e22:	e69d      	b.n	8004b60 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e24:	f7ff fbcc 	bl	80045c0 <HAL_GetTick>
 8004e28:	1b80      	subs	r0, r0, r6
 8004e2a:	2802      	cmp	r0, #2
 8004e2c:	d9d5      	bls.n	8004dda <HAL_RCC_OscConfig+0x33e>
 8004e2e:	e697      	b.n	8004b60 <HAL_RCC_OscConfig+0xc4>
        __HAL_RCC_PLL_DISABLE();
 8004e30:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e32:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8004e34:	4013      	ands	r3, r2
 8004e36:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004e38:	f7ff fbc2 	bl	80045c0 <HAL_GetTick>
 8004e3c:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e3e:	04b6      	lsls	r6, r6, #18
 8004e40:	682b      	ldr	r3, [r5, #0]
 8004e42:	4233      	tst	r3, r6
 8004e44:	d100      	bne.n	8004e48 <HAL_RCC_OscConfig+0x3ac>
 8004e46:	e65f      	b.n	8004b08 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e48:	f7ff fbba 	bl	80045c0 <HAL_GetTick>
 8004e4c:	1b00      	subs	r0, r0, r4
 8004e4e:	2802      	cmp	r0, #2
 8004e50:	d9f6      	bls.n	8004e40 <HAL_RCC_OscConfig+0x3a4>
 8004e52:	e685      	b.n	8004b60 <HAL_RCC_OscConfig+0xc4>
        return HAL_ERROR;
 8004e54:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d100      	bne.n	8004e5c <HAL_RCC_OscConfig+0x3c0>
 8004e5a:	e682      	b.n	8004b62 <HAL_RCC_OscConfig+0xc6>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e5c:	2180      	movs	r1, #128	; 0x80
        pll_config  = RCC->CFGR;
 8004e5e:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e60:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004e62:	0249      	lsls	r1, r1, #9
        pll_config2 = RCC->CFGR2;
 8004e64:	6aea      	ldr	r2, [r5, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e66:	4019      	ands	r1, r3
 8004e68:	4281      	cmp	r1, r0
 8004e6a:	d000      	beq.n	8004e6e <HAL_RCC_OscConfig+0x3d2>
 8004e6c:	e661      	b.n	8004b32 <HAL_RCC_OscConfig+0x96>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004e6e:	210f      	movs	r1, #15
 8004e70:	400a      	ands	r2, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e72:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004e74:	428a      	cmp	r2, r1
 8004e76:	d000      	beq.n	8004e7a <HAL_RCC_OscConfig+0x3de>
 8004e78:	e65b      	b.n	8004b32 <HAL_RCC_OscConfig+0x96>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004e7a:	22f0      	movs	r2, #240	; 0xf0
 8004e7c:	0392      	lsls	r2, r2, #14
 8004e7e:	4013      	ands	r3, r2
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004e80:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d100      	bne.n	8004e88 <HAL_RCC_OscConfig+0x3ec>
 8004e86:	e63f      	b.n	8004b08 <HAL_RCC_OscConfig+0x6c>
 8004e88:	e653      	b.n	8004b32 <HAL_RCC_OscConfig+0x96>
 8004e8a:	46c0      	nop			; (mov r8, r8)
 8004e8c:	40021000 	.word	0x40021000
 8004e90:	feffffff 	.word	0xfeffffff
 8004e94:	ffc2ffff 	.word	0xffc2ffff

08004e98 <HAL_RCC_EnableCSS>:
  *         the Cortex-M0 NMI (Non-Maskable Interrupt) exception vector.  
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8004e98:	2380      	movs	r3, #128	; 0x80
 8004e9a:	4a03      	ldr	r2, [pc, #12]	; (8004ea8 <HAL_RCC_EnableCSS+0x10>)
 8004e9c:	031b      	lsls	r3, r3, #12
 8004e9e:	6811      	ldr	r1, [r2, #0]
 8004ea0:	430b      	orrs	r3, r1
 8004ea2:	6013      	str	r3, [r2, #0]
}
 8004ea4:	4770      	bx	lr
 8004ea6:	46c0      	nop			; (mov r8, r8)
 8004ea8:	40021000 	.word	0x40021000

08004eac <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004eac:	220c      	movs	r2, #12
{
 8004eae:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 8004eb0:	4d0c      	ldr	r5, [pc, #48]	; (8004ee4 <HAL_RCC_GetSysClockFreq+0x38>)
 8004eb2:	686b      	ldr	r3, [r5, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8004eb4:	401a      	ands	r2, r3
 8004eb6:	2a08      	cmp	r2, #8
 8004eb8:	d111      	bne.n	8004ede <HAL_RCC_GetSysClockFreq+0x32>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004eba:	200f      	movs	r0, #15
 8004ebc:	490a      	ldr	r1, [pc, #40]	; (8004ee8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004ebe:	0c9a      	lsrs	r2, r3, #18
 8004ec0:	4002      	ands	r2, r0
 8004ec2:	5c8c      	ldrb	r4, [r1, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004ec4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004ec6:	03db      	lsls	r3, r3, #15
 8004ec8:	d507      	bpl.n	8004eda <HAL_RCC_GetSysClockFreq+0x2e>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004eca:	4908      	ldr	r1, [pc, #32]	; (8004eec <HAL_RCC_GetSysClockFreq+0x40>)
 8004ecc:	4002      	ands	r2, r0
 8004ece:	5c89      	ldrb	r1, [r1, r2]
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004ed0:	4807      	ldr	r0, [pc, #28]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x44>)
 8004ed2:	f7fb f92d 	bl	8000130 <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004ed6:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004ed8:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004eda:	4806      	ldr	r0, [pc, #24]	; (8004ef4 <HAL_RCC_GetSysClockFreq+0x48>)
 8004edc:	e7fb      	b.n	8004ed6 <HAL_RCC_GetSysClockFreq+0x2a>
      sysclockfreq = HSE_VALUE;
 8004ede:	4804      	ldr	r0, [pc, #16]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x44>)
  return sysclockfreq;
 8004ee0:	e7fa      	b.n	8004ed8 <HAL_RCC_GetSysClockFreq+0x2c>
 8004ee2:	46c0      	nop			; (mov r8, r8)
 8004ee4:	40021000 	.word	0x40021000
 8004ee8:	080064ab 	.word	0x080064ab
 8004eec:	080064bb 	.word	0x080064bb
 8004ef0:	007a1200 	.word	0x007a1200
 8004ef4:	003d0900 	.word	0x003d0900

08004ef8 <HAL_RCC_ClockConfig>:
{
 8004ef8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004efa:	0004      	movs	r4, r0
 8004efc:	000e      	movs	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8004efe:	2800      	cmp	r0, #0
 8004f00:	d101      	bne.n	8004f06 <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 8004f02:	2001      	movs	r0, #1
}
 8004f04:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f06:	2201      	movs	r2, #1
 8004f08:	4d37      	ldr	r5, [pc, #220]	; (8004fe8 <HAL_RCC_ClockConfig+0xf0>)
 8004f0a:	682b      	ldr	r3, [r5, #0]
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	428b      	cmp	r3, r1
 8004f10:	d31c      	bcc.n	8004f4c <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f12:	6822      	ldr	r2, [r4, #0]
 8004f14:	0793      	lsls	r3, r2, #30
 8004f16:	d422      	bmi.n	8004f5e <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f18:	07d2      	lsls	r2, r2, #31
 8004f1a:	d42f      	bmi.n	8004f7c <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	682a      	ldr	r2, [r5, #0]
 8004f20:	401a      	ands	r2, r3
 8004f22:	42b2      	cmp	r2, r6
 8004f24:	d851      	bhi.n	8004fca <HAL_RCC_ClockConfig+0xd2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f26:	6823      	ldr	r3, [r4, #0]
 8004f28:	4d30      	ldr	r5, [pc, #192]	; (8004fec <HAL_RCC_ClockConfig+0xf4>)
 8004f2a:	075b      	lsls	r3, r3, #29
 8004f2c:	d454      	bmi.n	8004fd8 <HAL_RCC_ClockConfig+0xe0>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004f2e:	f7ff ffbd 	bl	8004eac <HAL_RCC_GetSysClockFreq>
 8004f32:	686b      	ldr	r3, [r5, #4]
 8004f34:	4a2e      	ldr	r2, [pc, #184]	; (8004ff0 <HAL_RCC_ClockConfig+0xf8>)
 8004f36:	061b      	lsls	r3, r3, #24
 8004f38:	0f1b      	lsrs	r3, r3, #28
 8004f3a:	5cd3      	ldrb	r3, [r2, r3]
 8004f3c:	492d      	ldr	r1, [pc, #180]	; (8004ff4 <HAL_RCC_ClockConfig+0xfc>)
 8004f3e:	40d8      	lsrs	r0, r3
 8004f40:	6008      	str	r0, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8004f42:	2002      	movs	r0, #2
 8004f44:	f7ff fafc 	bl	8004540 <HAL_InitTick>
  return HAL_OK;
 8004f48:	2000      	movs	r0, #0
 8004f4a:	e7db      	b.n	8004f04 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f4c:	682b      	ldr	r3, [r5, #0]
 8004f4e:	4393      	bics	r3, r2
 8004f50:	430b      	orrs	r3, r1
 8004f52:	602b      	str	r3, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f54:	682b      	ldr	r3, [r5, #0]
 8004f56:	4013      	ands	r3, r2
 8004f58:	428b      	cmp	r3, r1
 8004f5a:	d1d2      	bne.n	8004f02 <HAL_RCC_ClockConfig+0xa>
 8004f5c:	e7d9      	b.n	8004f12 <HAL_RCC_ClockConfig+0x1a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f5e:	4923      	ldr	r1, [pc, #140]	; (8004fec <HAL_RCC_ClockConfig+0xf4>)
 8004f60:	0753      	lsls	r3, r2, #29
 8004f62:	d504      	bpl.n	8004f6e <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004f64:	23e0      	movs	r3, #224	; 0xe0
 8004f66:	6848      	ldr	r0, [r1, #4]
 8004f68:	00db      	lsls	r3, r3, #3
 8004f6a:	4303      	orrs	r3, r0
 8004f6c:	604b      	str	r3, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f6e:	20f0      	movs	r0, #240	; 0xf0
 8004f70:	684b      	ldr	r3, [r1, #4]
 8004f72:	4383      	bics	r3, r0
 8004f74:	68a0      	ldr	r0, [r4, #8]
 8004f76:	4303      	orrs	r3, r0
 8004f78:	604b      	str	r3, [r1, #4]
 8004f7a:	e7cd      	b.n	8004f18 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f7c:	4f1b      	ldr	r7, [pc, #108]	; (8004fec <HAL_RCC_ClockConfig+0xf4>)
 8004f7e:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f80:	683b      	ldr	r3, [r7, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f82:	2a01      	cmp	r2, #1
 8004f84:	d119      	bne.n	8004fba <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f86:	039b      	lsls	r3, r3, #14
 8004f88:	d5bb      	bpl.n	8004f02 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f8a:	2103      	movs	r1, #3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	438b      	bics	r3, r1
 8004f90:	4313      	orrs	r3, r2
 8004f92:	607b      	str	r3, [r7, #4]
    tickstart = HAL_GetTick();
 8004f94:	f7ff fb14 	bl	80045c0 <HAL_GetTick>
 8004f98:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f9a:	230c      	movs	r3, #12
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	401a      	ands	r2, r3
 8004fa0:	6863      	ldr	r3, [r4, #4]
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d0b9      	beq.n	8004f1c <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fa8:	f7ff fb0a 	bl	80045c0 <HAL_GetTick>
 8004fac:	9b01      	ldr	r3, [sp, #4]
 8004fae:	1ac0      	subs	r0, r0, r3
 8004fb0:	4b11      	ldr	r3, [pc, #68]	; (8004ff8 <HAL_RCC_ClockConfig+0x100>)
 8004fb2:	4298      	cmp	r0, r3
 8004fb4:	d9f1      	bls.n	8004f9a <HAL_RCC_ClockConfig+0xa2>
        return HAL_TIMEOUT;
 8004fb6:	2003      	movs	r0, #3
 8004fb8:	e7a4      	b.n	8004f04 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fba:	2a02      	cmp	r2, #2
 8004fbc:	d102      	bne.n	8004fc4 <HAL_RCC_ClockConfig+0xcc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fbe:	019b      	lsls	r3, r3, #6
 8004fc0:	d4e3      	bmi.n	8004f8a <HAL_RCC_ClockConfig+0x92>
 8004fc2:	e79e      	b.n	8004f02 <HAL_RCC_ClockConfig+0xa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fc4:	079b      	lsls	r3, r3, #30
 8004fc6:	d4e0      	bmi.n	8004f8a <HAL_RCC_ClockConfig+0x92>
 8004fc8:	e79b      	b.n	8004f02 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fca:	682a      	ldr	r2, [r5, #0]
 8004fcc:	439a      	bics	r2, r3
 8004fce:	602a      	str	r2, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fd0:	682a      	ldr	r2, [r5, #0]
 8004fd2:	421a      	tst	r2, r3
 8004fd4:	d0a7      	beq.n	8004f26 <HAL_RCC_ClockConfig+0x2e>
 8004fd6:	e794      	b.n	8004f02 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004fd8:	686b      	ldr	r3, [r5, #4]
 8004fda:	4a08      	ldr	r2, [pc, #32]	; (8004ffc <HAL_RCC_ClockConfig+0x104>)
 8004fdc:	4013      	ands	r3, r2
 8004fde:	68e2      	ldr	r2, [r4, #12]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	606b      	str	r3, [r5, #4]
 8004fe4:	e7a3      	b.n	8004f2e <HAL_RCC_ClockConfig+0x36>
 8004fe6:	46c0      	nop			; (mov r8, r8)
 8004fe8:	40022000 	.word	0x40022000
 8004fec:	40021000 	.word	0x40021000
 8004ff0:	08006493 	.word	0x08006493
 8004ff4:	20000374 	.word	0x20000374
 8004ff8:	00001388 	.word	0x00001388
 8004ffc:	fffff8ff 	.word	0xfffff8ff

08005000 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8005000:	4b01      	ldr	r3, [pc, #4]	; (8005008 <HAL_RCC_GetHCLKFreq+0x8>)
 8005002:	6818      	ldr	r0, [r3, #0]
}
 8005004:	4770      	bx	lr
 8005006:	46c0      	nop			; (mov r8, r8)
 8005008:	20000374 	.word	0x20000374

0800500c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800500c:	4b04      	ldr	r3, [pc, #16]	; (8005020 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 800500e:	4a05      	ldr	r2, [pc, #20]	; (8005024 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	4905      	ldr	r1, [pc, #20]	; (8005028 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005014:	055b      	lsls	r3, r3, #21
 8005016:	0f5b      	lsrs	r3, r3, #29
 8005018:	5ccb      	ldrb	r3, [r1, r3]
 800501a:	6810      	ldr	r0, [r2, #0]
 800501c:	40d8      	lsrs	r0, r3
}    
 800501e:	4770      	bx	lr
 8005020:	40021000 	.word	0x40021000
 8005024:	20000374 	.word	0x20000374
 8005028:	080064a3 	.word	0x080064a3

0800502c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800502c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800502e:	6803      	ldr	r3, [r0, #0]
{
 8005030:	0005      	movs	r5, r0
 8005032:	b085      	sub	sp, #20
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005034:	03db      	lsls	r3, r3, #15
 8005036:	d52b      	bpl.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x64>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005038:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 800503a:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800503c:	4c38      	ldr	r4, [pc, #224]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 800503e:	0552      	lsls	r2, r2, #21
 8005040:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8005042:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005044:	4213      	tst	r3, r2
 8005046:	d108      	bne.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005048:	69e3      	ldr	r3, [r4, #28]
 800504a:	4313      	orrs	r3, r2
 800504c:	61e3      	str	r3, [r4, #28]
 800504e:	69e3      	ldr	r3, [r4, #28]
 8005050:	4013      	ands	r3, r2
 8005052:	9303      	str	r3, [sp, #12]
 8005054:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8005056:	2301      	movs	r3, #1
 8005058:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800505a:	2780      	movs	r7, #128	; 0x80
 800505c:	4e31      	ldr	r6, [pc, #196]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 800505e:	007f      	lsls	r7, r7, #1
 8005060:	6833      	ldr	r3, [r6, #0]
 8005062:	423b      	tst	r3, r7
 8005064:	d029      	beq.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x8e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005066:	6a21      	ldr	r1, [r4, #32]
 8005068:	22c0      	movs	r2, #192	; 0xc0
 800506a:	0008      	movs	r0, r1
 800506c:	0092      	lsls	r2, r2, #2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800506e:	686b      	ldr	r3, [r5, #4]
 8005070:	4e2d      	ldr	r6, [pc, #180]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005072:	4010      	ands	r0, r2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005074:	4211      	tst	r1, r2
 8005076:	d132      	bne.n	80050de <HAL_RCCEx_PeriphCLKConfig+0xb2>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005078:	6a23      	ldr	r3, [r4, #32]
 800507a:	686a      	ldr	r2, [r5, #4]
 800507c:	4033      	ands	r3, r6
 800507e:	4313      	orrs	r3, r2
 8005080:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005082:	9b00      	ldr	r3, [sp, #0]
 8005084:	2b01      	cmp	r3, #1
 8005086:	d103      	bne.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005088:	69e3      	ldr	r3, [r4, #28]
 800508a:	4a28      	ldr	r2, [pc, #160]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x100>)
 800508c:	4013      	ands	r3, r2
 800508e:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005090:	682a      	ldr	r2, [r5, #0]
 8005092:	07d3      	lsls	r3, r2, #31
 8005094:	d506      	bpl.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005096:	2003      	movs	r0, #3
 8005098:	4921      	ldr	r1, [pc, #132]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 800509a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800509c:	4383      	bics	r3, r0
 800509e:	68a8      	ldr	r0, [r5, #8]
 80050a0:	4303      	orrs	r3, r0
 80050a2:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80050a4:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80050a6:	0692      	lsls	r2, r2, #26
 80050a8:	d517      	bpl.n	80050da <HAL_RCCEx_PeriphCLKConfig+0xae>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80050aa:	2110      	movs	r1, #16
 80050ac:	4a1c      	ldr	r2, [pc, #112]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 80050ae:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80050b0:	438b      	bics	r3, r1
 80050b2:	68e9      	ldr	r1, [r5, #12]
 80050b4:	430b      	orrs	r3, r1
 80050b6:	6313      	str	r3, [r2, #48]	; 0x30
 80050b8:	e00f      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0xae>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050ba:	6833      	ldr	r3, [r6, #0]
 80050bc:	433b      	orrs	r3, r7
 80050be:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80050c0:	f7ff fa7e 	bl	80045c0 <HAL_GetTick>
 80050c4:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050c6:	6833      	ldr	r3, [r6, #0]
 80050c8:	423b      	tst	r3, r7
 80050ca:	d1cc      	bne.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050cc:	f7ff fa78 	bl	80045c0 <HAL_GetTick>
 80050d0:	9b01      	ldr	r3, [sp, #4]
 80050d2:	1ac0      	subs	r0, r0, r3
 80050d4:	2864      	cmp	r0, #100	; 0x64
 80050d6:	d9f6      	bls.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
          return HAL_TIMEOUT;
 80050d8:	2003      	movs	r0, #3
}
 80050da:	b005      	add	sp, #20
 80050dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80050de:	4013      	ands	r3, r2
 80050e0:	4283      	cmp	r3, r0
 80050e2:	d0c9      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      __HAL_RCC_BACKUPRESET_FORCE();
 80050e4:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050e6:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80050e8:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050ea:	0019      	movs	r1, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 80050ec:	0252      	lsls	r2, r2, #9
 80050ee:	4302      	orrs	r2, r0
 80050f0:	6222      	str	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80050f2:	6a22      	ldr	r2, [r4, #32]
 80050f4:	480e      	ldr	r0, [pc, #56]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x104>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050f6:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 80050f8:	4002      	ands	r2, r0
 80050fa:	6222      	str	r2, [r4, #32]
      RCC->BDCR = temp_reg;
 80050fc:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80050fe:	07db      	lsls	r3, r3, #31
 8005100:	d5ba      	bpl.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x4c>
        tickstart = HAL_GetTick();
 8005102:	f7ff fa5d 	bl	80045c0 <HAL_GetTick>
 8005106:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005108:	2202      	movs	r2, #2
 800510a:	6a23      	ldr	r3, [r4, #32]
 800510c:	4213      	tst	r3, r2
 800510e:	d1b3      	bne.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x4c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005110:	f7ff fa56 	bl	80045c0 <HAL_GetTick>
 8005114:	4b07      	ldr	r3, [pc, #28]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8005116:	1bc0      	subs	r0, r0, r7
 8005118:	4298      	cmp	r0, r3
 800511a:	d9f5      	bls.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 800511c:	e7dc      	b.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0xac>
 800511e:	46c0      	nop			; (mov r8, r8)
 8005120:	40021000 	.word	0x40021000
 8005124:	40007000 	.word	0x40007000
 8005128:	fffffcff 	.word	0xfffffcff
 800512c:	efffffff 	.word	0xefffffff
 8005130:	fffeffff 	.word	0xfffeffff
 8005134:	00001388 	.word	0x00001388

08005138 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005138:	2201      	movs	r2, #1
 800513a:	6a03      	ldr	r3, [r0, #32]
{
 800513c:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800513e:	4393      	bics	r3, r2
 8005140:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005142:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005144:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005146:	6985      	ldr	r5, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005148:	3272      	adds	r2, #114	; 0x72
 800514a:	4395      	bics	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800514c:	680a      	ldr	r2, [r1, #0]
 800514e:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005150:	2202      	movs	r2, #2
 8005152:	4393      	bics	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005154:	688a      	ldr	r2, [r1, #8]
 8005156:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005158:	4a11      	ldr	r2, [pc, #68]	; (80051a0 <TIM_OC1_SetConfig+0x68>)
 800515a:	4290      	cmp	r0, r2
 800515c:	d005      	beq.n	800516a <TIM_OC1_SetConfig+0x32>
 800515e:	4e11      	ldr	r6, [pc, #68]	; (80051a4 <TIM_OC1_SetConfig+0x6c>)
 8005160:	42b0      	cmp	r0, r6
 8005162:	d002      	beq.n	800516a <TIM_OC1_SetConfig+0x32>
 8005164:	4e10      	ldr	r6, [pc, #64]	; (80051a8 <TIM_OC1_SetConfig+0x70>)
 8005166:	42b0      	cmp	r0, r6
 8005168:	d113      	bne.n	8005192 <TIM_OC1_SetConfig+0x5a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800516a:	2608      	movs	r6, #8
 800516c:	43b3      	bics	r3, r6
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800516e:	68ce      	ldr	r6, [r1, #12]
 8005170:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005172:	2604      	movs	r6, #4
 8005174:	43b3      	bics	r3, r6
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005176:	4290      	cmp	r0, r2
 8005178:	d005      	beq.n	8005186 <TIM_OC1_SetConfig+0x4e>
 800517a:	4a0a      	ldr	r2, [pc, #40]	; (80051a4 <TIM_OC1_SetConfig+0x6c>)
 800517c:	4290      	cmp	r0, r2
 800517e:	d002      	beq.n	8005186 <TIM_OC1_SetConfig+0x4e>
 8005180:	4a09      	ldr	r2, [pc, #36]	; (80051a8 <TIM_OC1_SetConfig+0x70>)
 8005182:	4290      	cmp	r0, r2
 8005184:	d105      	bne.n	8005192 <TIM_OC1_SetConfig+0x5a>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005186:	4a09      	ldr	r2, [pc, #36]	; (80051ac <TIM_OC1_SetConfig+0x74>)
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005188:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800518a:	4022      	ands	r2, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 800518c:	694c      	ldr	r4, [r1, #20]
 800518e:	4334      	orrs	r4, r6
 8005190:	4314      	orrs	r4, r2

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005192:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005194:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005196:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8005198:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800519a:	6203      	str	r3, [r0, #32]
}
 800519c:	bd70      	pop	{r4, r5, r6, pc}
 800519e:	46c0      	nop			; (mov r8, r8)
 80051a0:	40012c00 	.word	0x40012c00
 80051a4:	40014400 	.word	0x40014400
 80051a8:	40014800 	.word	0x40014800
 80051ac:	fffffcff 	.word	0xfffffcff

080051b0 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051b0:	6a03      	ldr	r3, [r0, #32]
 80051b2:	4a17      	ldr	r2, [pc, #92]	; (8005210 <TIM_OC3_SetConfig+0x60>)
{
 80051b4:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051b6:	4013      	ands	r3, r2
 80051b8:	6203      	str	r3, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051ba:	2373      	movs	r3, #115	; 0x73
  tmpccer = TIMx->CCER;
 80051bc:	6a05      	ldr	r5, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80051be:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 80051c0:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051c2:	439c      	bics	r4, r3
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051c4:	680b      	ldr	r3, [r1, #0]
 80051c6:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80051c8:	4b12      	ldr	r3, [pc, #72]	; (8005214 <TIM_OC3_SetConfig+0x64>)
 80051ca:	401d      	ands	r5, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051cc:	688b      	ldr	r3, [r1, #8]
 80051ce:	021b      	lsls	r3, r3, #8
 80051d0:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051d2:	4d11      	ldr	r5, [pc, #68]	; (8005218 <TIM_OC3_SetConfig+0x68>)
 80051d4:	42a8      	cmp	r0, r5
 80051d6:	d10e      	bne.n	80051f6 <TIM_OC3_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80051d8:	4d10      	ldr	r5, [pc, #64]	; (800521c <TIM_OC3_SetConfig+0x6c>)
 80051da:	401d      	ands	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051dc:	68cb      	ldr	r3, [r1, #12]
 80051de:	021b      	lsls	r3, r3, #8
 80051e0:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80051e2:	4d0f      	ldr	r5, [pc, #60]	; (8005220 <TIM_OC3_SetConfig+0x70>)
 80051e4:	402b      	ands	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051e6:	4d0f      	ldr	r5, [pc, #60]	; (8005224 <TIM_OC3_SetConfig+0x74>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80051e8:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051ea:	4015      	ands	r5, r2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051ec:	698a      	ldr	r2, [r1, #24]
 80051ee:	4332      	orrs	r2, r6
 80051f0:	0112      	lsls	r2, r2, #4
 80051f2:	432a      	orrs	r2, r5
 80051f4:	e005      	b.n	8005202 <TIM_OC3_SetConfig+0x52>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051f6:	4d0c      	ldr	r5, [pc, #48]	; (8005228 <TIM_OC3_SetConfig+0x78>)
 80051f8:	42a8      	cmp	r0, r5
 80051fa:	d0f4      	beq.n	80051e6 <TIM_OC3_SetConfig+0x36>
 80051fc:	4d0b      	ldr	r5, [pc, #44]	; (800522c <TIM_OC3_SetConfig+0x7c>)
 80051fe:	42a8      	cmp	r0, r5
 8005200:	d0f1      	beq.n	80051e6 <TIM_OC3_SetConfig+0x36>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005202:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005204:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8005206:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8005208:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800520a:	6203      	str	r3, [r0, #32]
}
 800520c:	bd70      	pop	{r4, r5, r6, pc}
 800520e:	46c0      	nop			; (mov r8, r8)
 8005210:	fffffeff 	.word	0xfffffeff
 8005214:	fffffdff 	.word	0xfffffdff
 8005218:	40012c00 	.word	0x40012c00
 800521c:	fffff7ff 	.word	0xfffff7ff
 8005220:	fffffbff 	.word	0xfffffbff
 8005224:	ffffcfff 	.word	0xffffcfff
 8005228:	40014400 	.word	0x40014400
 800522c:	40014800 	.word	0x40014800

08005230 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005230:	6a03      	ldr	r3, [r0, #32]
 8005232:	4a12      	ldr	r2, [pc, #72]	; (800527c <TIM_OC4_SetConfig+0x4c>)
{
 8005234:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005236:	4013      	ands	r3, r2
 8005238:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800523a:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800523c:	4d10      	ldr	r5, [pc, #64]	; (8005280 <TIM_OC4_SetConfig+0x50>)
  tmpcr2 =  TIMx->CR2;
 800523e:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8005240:	69c2      	ldr	r2, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005242:	402a      	ands	r2, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005244:	680d      	ldr	r5, [r1, #0]
 8005246:	022d      	lsls	r5, r5, #8
 8005248:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800524a:	4a0e      	ldr	r2, [pc, #56]	; (8005284 <TIM_OC4_SetConfig+0x54>)
 800524c:	4014      	ands	r4, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800524e:	688a      	ldr	r2, [r1, #8]
 8005250:	0312      	lsls	r2, r2, #12
 8005252:	4322      	orrs	r2, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005254:	4c0c      	ldr	r4, [pc, #48]	; (8005288 <TIM_OC4_SetConfig+0x58>)
 8005256:	42a0      	cmp	r0, r4
 8005258:	d005      	beq.n	8005266 <TIM_OC4_SetConfig+0x36>
 800525a:	4c0c      	ldr	r4, [pc, #48]	; (800528c <TIM_OC4_SetConfig+0x5c>)
 800525c:	42a0      	cmp	r0, r4
 800525e:	d002      	beq.n	8005266 <TIM_OC4_SetConfig+0x36>
 8005260:	4c0b      	ldr	r4, [pc, #44]	; (8005290 <TIM_OC4_SetConfig+0x60>)
 8005262:	42a0      	cmp	r0, r4
 8005264:	d104      	bne.n	8005270 <TIM_OC4_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005266:	4c0b      	ldr	r4, [pc, #44]	; (8005294 <TIM_OC4_SetConfig+0x64>)
 8005268:	401c      	ands	r4, r3

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800526a:	694b      	ldr	r3, [r1, #20]
 800526c:	019b      	lsls	r3, r3, #6
 800526e:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005270:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005272:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8005274:	61c5      	str	r5, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8005276:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005278:	6202      	str	r2, [r0, #32]
}
 800527a:	bd30      	pop	{r4, r5, pc}
 800527c:	ffffefff 	.word	0xffffefff
 8005280:	ffff8cff 	.word	0xffff8cff
 8005284:	ffffdfff 	.word	0xffffdfff
 8005288:	40012c00 	.word	0x40012c00
 800528c:	40014400 	.word	0x40014400
 8005290:	40014800 	.word	0x40014800
 8005294:	ffffbfff 	.word	0xffffbfff

08005298 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005298:	4a1d      	ldr	r2, [pc, #116]	; (8005310 <TIM_Base_SetConfig+0x78>)
{
 800529a:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 800529c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800529e:	4290      	cmp	r0, r2
 80052a0:	d006      	beq.n	80052b0 <TIM_Base_SetConfig+0x18>
 80052a2:	2480      	movs	r4, #128	; 0x80
 80052a4:	05e4      	lsls	r4, r4, #23
 80052a6:	42a0      	cmp	r0, r4
 80052a8:	d002      	beq.n	80052b0 <TIM_Base_SetConfig+0x18>
 80052aa:	4c1a      	ldr	r4, [pc, #104]	; (8005314 <TIM_Base_SetConfig+0x7c>)
 80052ac:	42a0      	cmp	r0, r4
 80052ae:	d10c      	bne.n	80052ca <TIM_Base_SetConfig+0x32>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052b0:	2470      	movs	r4, #112	; 0x70
 80052b2:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 80052b4:	684c      	ldr	r4, [r1, #4]
 80052b6:	4323      	orrs	r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052b8:	4290      	cmp	r0, r2
 80052ba:	d00f      	beq.n	80052dc <TIM_Base_SetConfig+0x44>
 80052bc:	2480      	movs	r4, #128	; 0x80
 80052be:	05e4      	lsls	r4, r4, #23
 80052c0:	42a0      	cmp	r0, r4
 80052c2:	d00b      	beq.n	80052dc <TIM_Base_SetConfig+0x44>
 80052c4:	4c13      	ldr	r4, [pc, #76]	; (8005314 <TIM_Base_SetConfig+0x7c>)
 80052c6:	42a0      	cmp	r0, r4
 80052c8:	d008      	beq.n	80052dc <TIM_Base_SetConfig+0x44>
 80052ca:	4c13      	ldr	r4, [pc, #76]	; (8005318 <TIM_Base_SetConfig+0x80>)
 80052cc:	42a0      	cmp	r0, r4
 80052ce:	d005      	beq.n	80052dc <TIM_Base_SetConfig+0x44>
 80052d0:	4c12      	ldr	r4, [pc, #72]	; (800531c <TIM_Base_SetConfig+0x84>)
 80052d2:	42a0      	cmp	r0, r4
 80052d4:	d002      	beq.n	80052dc <TIM_Base_SetConfig+0x44>
 80052d6:	4c12      	ldr	r4, [pc, #72]	; (8005320 <TIM_Base_SetConfig+0x88>)
 80052d8:	42a0      	cmp	r0, r4
 80052da:	d103      	bne.n	80052e4 <TIM_Base_SetConfig+0x4c>
    tmpcr1 &= ~TIM_CR1_CKD;
 80052dc:	4c11      	ldr	r4, [pc, #68]	; (8005324 <TIM_Base_SetConfig+0x8c>)
 80052de:	401c      	ands	r4, r3
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052e0:	68cb      	ldr	r3, [r1, #12]
 80052e2:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052e4:	2480      	movs	r4, #128	; 0x80
 80052e6:	43a3      	bics	r3, r4
 80052e8:	694c      	ldr	r4, [r1, #20]
 80052ea:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 80052ec:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052ee:	688b      	ldr	r3, [r1, #8]
 80052f0:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80052f2:	680b      	ldr	r3, [r1, #0]
 80052f4:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052f6:	4290      	cmp	r0, r2
 80052f8:	d005      	beq.n	8005306 <TIM_Base_SetConfig+0x6e>
 80052fa:	4b08      	ldr	r3, [pc, #32]	; (800531c <TIM_Base_SetConfig+0x84>)
 80052fc:	4298      	cmp	r0, r3
 80052fe:	d002      	beq.n	8005306 <TIM_Base_SetConfig+0x6e>
 8005300:	4b07      	ldr	r3, [pc, #28]	; (8005320 <TIM_Base_SetConfig+0x88>)
 8005302:	4298      	cmp	r0, r3
 8005304:	d101      	bne.n	800530a <TIM_Base_SetConfig+0x72>
    TIMx->RCR = Structure->RepetitionCounter;
 8005306:	690b      	ldr	r3, [r1, #16]
 8005308:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800530a:	2301      	movs	r3, #1
 800530c:	6143      	str	r3, [r0, #20]
}
 800530e:	bd10      	pop	{r4, pc}
 8005310:	40012c00 	.word	0x40012c00
 8005314:	40000400 	.word	0x40000400
 8005318:	40002000 	.word	0x40002000
 800531c:	40014400 	.word	0x40014400
 8005320:	40014800 	.word	0x40014800
 8005324:	fffffcff 	.word	0xfffffcff

08005328 <HAL_TIM_Base_Init>:
{
 8005328:	b570      	push	{r4, r5, r6, lr}
 800532a:	0004      	movs	r4, r0
    return HAL_ERROR;
 800532c:	2001      	movs	r0, #1
  if (htim == NULL)
 800532e:	2c00      	cmp	r4, #0
 8005330:	d021      	beq.n	8005376 <HAL_TIM_Base_Init+0x4e>
  if (htim->State == HAL_TIM_STATE_RESET)
 8005332:	0025      	movs	r5, r4
 8005334:	353d      	adds	r5, #61	; 0x3d
 8005336:	782b      	ldrb	r3, [r5, #0]
 8005338:	b2da      	uxtb	r2, r3
 800533a:	2b00      	cmp	r3, #0
 800533c:	d105      	bne.n	800534a <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 800533e:	0023      	movs	r3, r4
 8005340:	333c      	adds	r3, #60	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005342:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8005344:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_MspInit(htim);
 8005346:	f7fe fea3 	bl	8004090 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800534a:	2302      	movs	r3, #2
 800534c:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800534e:	6820      	ldr	r0, [r4, #0]
 8005350:	1d21      	adds	r1, r4, #4
 8005352:	f7ff ffa1 	bl	8005298 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005356:	0022      	movs	r2, r4
 8005358:	2301      	movs	r3, #1
  return HAL_OK;
 800535a:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800535c:	3246      	adds	r2, #70	; 0x46
 800535e:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005360:	3445      	adds	r4, #69	; 0x45
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005362:	3a08      	subs	r2, #8
 8005364:	7013      	strb	r3, [r2, #0]
 8005366:	7053      	strb	r3, [r2, #1]
 8005368:	7093      	strb	r3, [r2, #2]
 800536a:	70d3      	strb	r3, [r2, #3]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800536c:	7113      	strb	r3, [r2, #4]
 800536e:	7153      	strb	r3, [r2, #5]
 8005370:	7193      	strb	r3, [r2, #6]
 8005372:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8005374:	702b      	strb	r3, [r5, #0]
}
 8005376:	bd70      	pop	{r4, r5, r6, pc}

08005378 <HAL_TIM_PWM_Init>:
{
 8005378:	b570      	push	{r4, r5, r6, lr}
 800537a:	0004      	movs	r4, r0
    return HAL_ERROR;
 800537c:	2001      	movs	r0, #1
  if (htim == NULL)
 800537e:	2c00      	cmp	r4, #0
 8005380:	d021      	beq.n	80053c6 <HAL_TIM_PWM_Init+0x4e>
  if (htim->State == HAL_TIM_STATE_RESET)
 8005382:	0025      	movs	r5, r4
 8005384:	353d      	adds	r5, #61	; 0x3d
 8005386:	782b      	ldrb	r3, [r5, #0]
 8005388:	b2da      	uxtb	r2, r3
 800538a:	2b00      	cmp	r3, #0
 800538c:	d105      	bne.n	800539a <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 800538e:	0023      	movs	r3, r4
 8005390:	333c      	adds	r3, #60	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8005392:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8005394:	701a      	strb	r2, [r3, #0]
    HAL_TIM_PWM_MspInit(htim);
 8005396:	f7fe fe05 	bl	8003fa4 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800539a:	2302      	movs	r3, #2
 800539c:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800539e:	6820      	ldr	r0, [r4, #0]
 80053a0:	1d21      	adds	r1, r4, #4
 80053a2:	f7ff ff79 	bl	8005298 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053a6:	0022      	movs	r2, r4
 80053a8:	2301      	movs	r3, #1
  return HAL_OK;
 80053aa:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053ac:	3246      	adds	r2, #70	; 0x46
 80053ae:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053b0:	3445      	adds	r4, #69	; 0x45
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053b2:	3a08      	subs	r2, #8
 80053b4:	7013      	strb	r3, [r2, #0]
 80053b6:	7053      	strb	r3, [r2, #1]
 80053b8:	7093      	strb	r3, [r2, #2]
 80053ba:	70d3      	strb	r3, [r2, #3]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053bc:	7113      	strb	r3, [r2, #4]
 80053be:	7153      	strb	r3, [r2, #5]
 80053c0:	7193      	strb	r3, [r2, #6]
 80053c2:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 80053c4:	702b      	strb	r3, [r5, #0]
}
 80053c6:	bd70      	pop	{r4, r5, r6, pc}

080053c8 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053c8:	2210      	movs	r2, #16
 80053ca:	6a03      	ldr	r3, [r0, #32]
{
 80053cc:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053ce:	4393      	bics	r3, r2
 80053d0:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80053d2:	6a05      	ldr	r5, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80053d4:	4c15      	ldr	r4, [pc, #84]	; (800542c <TIM_OC2_SetConfig+0x64>)
  tmpcr2 =  TIMx->CR2;
 80053d6:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80053d8:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80053da:	4022      	ands	r2, r4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053dc:	680c      	ldr	r4, [r1, #0]
 80053de:	0224      	lsls	r4, r4, #8
 80053e0:	4314      	orrs	r4, r2
  tmpccer &= ~TIM_CCER_CC2P;
 80053e2:	2220      	movs	r2, #32
 80053e4:	4395      	bics	r5, r2
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80053e6:	688a      	ldr	r2, [r1, #8]
 80053e8:	0112      	lsls	r2, r2, #4
 80053ea:	432a      	orrs	r2, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80053ec:	4d10      	ldr	r5, [pc, #64]	; (8005430 <TIM_OC2_SetConfig+0x68>)
 80053ee:	42a8      	cmp	r0, r5
 80053f0:	d10f      	bne.n	8005412 <TIM_OC2_SetConfig+0x4a>
    tmpccer &= ~TIM_CCER_CC2NP;
 80053f2:	2580      	movs	r5, #128	; 0x80
 80053f4:	43aa      	bics	r2, r5
 80053f6:	0016      	movs	r6, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053f8:	68ca      	ldr	r2, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NE;
 80053fa:	3d40      	subs	r5, #64	; 0x40
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053fc:	0112      	lsls	r2, r2, #4
 80053fe:	4332      	orrs	r2, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8005400:	43aa      	bics	r2, r5
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005402:	4d0c      	ldr	r5, [pc, #48]	; (8005434 <TIM_OC2_SetConfig+0x6c>)
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005404:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005406:	401d      	ands	r5, r3
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005408:	698b      	ldr	r3, [r1, #24]
 800540a:	4333      	orrs	r3, r6
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	432b      	orrs	r3, r5
 8005410:	e005      	b.n	800541e <TIM_OC2_SetConfig+0x56>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005412:	4d09      	ldr	r5, [pc, #36]	; (8005438 <TIM_OC2_SetConfig+0x70>)
 8005414:	42a8      	cmp	r0, r5
 8005416:	d0f4      	beq.n	8005402 <TIM_OC2_SetConfig+0x3a>
 8005418:	4d08      	ldr	r5, [pc, #32]	; (800543c <TIM_OC2_SetConfig+0x74>)
 800541a:	42a8      	cmp	r0, r5
 800541c:	d0f1      	beq.n	8005402 <TIM_OC2_SetConfig+0x3a>
  TIMx->CR2 = tmpcr2;
 800541e:	6043      	str	r3, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8005420:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005422:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8005424:	6383      	str	r3, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8005426:	6202      	str	r2, [r0, #32]
}
 8005428:	bd70      	pop	{r4, r5, r6, pc}
 800542a:	46c0      	nop			; (mov r8, r8)
 800542c:	ffff8cff 	.word	0xffff8cff
 8005430:	40012c00 	.word	0x40012c00
 8005434:	fffff3ff 	.word	0xfffff3ff
 8005438:	40014400 	.word	0x40014400
 800543c:	40014800 	.word	0x40014800

08005440 <HAL_TIM_PWM_ConfigChannel>:
{
 8005440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8005442:	0006      	movs	r6, r0
 8005444:	363c      	adds	r6, #60	; 0x3c
{
 8005446:	0014      	movs	r4, r2
  __HAL_LOCK(htim);
 8005448:	7832      	ldrb	r2, [r6, #0]
{
 800544a:	0003      	movs	r3, r0
 800544c:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 800544e:	2002      	movs	r0, #2
 8005450:	2a01      	cmp	r2, #1
 8005452:	d00a      	beq.n	800546a <HAL_TIM_PWM_ConfigChannel+0x2a>
 8005454:	3801      	subs	r0, #1
 8005456:	7030      	strb	r0, [r6, #0]
  switch (Channel)
 8005458:	2c08      	cmp	r4, #8
 800545a:	d041      	beq.n	80054e0 <HAL_TIM_PWM_ConfigChannel+0xa0>
 800545c:	d806      	bhi.n	800546c <HAL_TIM_PWM_ConfigChannel+0x2c>
 800545e:	2c00      	cmp	r4, #0
 8005460:	d019      	beq.n	8005496 <HAL_TIM_PWM_ConfigChannel+0x56>
 8005462:	2c04      	cmp	r4, #4
 8005464:	d029      	beq.n	80054ba <HAL_TIM_PWM_ConfigChannel+0x7a>
  __HAL_UNLOCK(htim);
 8005466:	2300      	movs	r3, #0
 8005468:	7033      	strb	r3, [r6, #0]
}
 800546a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (Channel)
 800546c:	2c0c      	cmp	r4, #12
 800546e:	d1fa      	bne.n	8005466 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005470:	681c      	ldr	r4, [r3, #0]
 8005472:	0020      	movs	r0, r4
 8005474:	f7ff fedc 	bl	8005230 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005478:	2380      	movs	r3, #128	; 0x80
 800547a:	69e2      	ldr	r2, [r4, #28]
 800547c:	011b      	lsls	r3, r3, #4
 800547e:	4313      	orrs	r3, r2
 8005480:	61e3      	str	r3, [r4, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005482:	69e3      	ldr	r3, [r4, #28]
 8005484:	4a1e      	ldr	r2, [pc, #120]	; (8005500 <HAL_TIM_PWM_ConfigChannel+0xc0>)
 8005486:	4013      	ands	r3, r2
 8005488:	61e3      	str	r3, [r4, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800548a:	692b      	ldr	r3, [r5, #16]
 800548c:	69e2      	ldr	r2, [r4, #28]
 800548e:	021b      	lsls	r3, r3, #8
 8005490:	4313      	orrs	r3, r2
 8005492:	61e3      	str	r3, [r4, #28]
 8005494:	e00f      	b.n	80054b6 <HAL_TIM_PWM_ConfigChannel+0x76>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005496:	681f      	ldr	r7, [r3, #0]
 8005498:	0038      	movs	r0, r7
 800549a:	f7ff fe4d 	bl	8005138 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800549e:	2308      	movs	r3, #8
 80054a0:	69ba      	ldr	r2, [r7, #24]
 80054a2:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80054a4:	2204      	movs	r2, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80054a6:	61bb      	str	r3, [r7, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	4393      	bics	r3, r2
 80054ac:	61bb      	str	r3, [r7, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	692a      	ldr	r2, [r5, #16]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80054b6:	2000      	movs	r0, #0
      break;
 80054b8:	e7d5      	b.n	8005466 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054ba:	681c      	ldr	r4, [r3, #0]
 80054bc:	0020      	movs	r0, r4
 80054be:	f7ff ff83 	bl	80053c8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054c2:	2380      	movs	r3, #128	; 0x80
 80054c4:	69a2      	ldr	r2, [r4, #24]
 80054c6:	011b      	lsls	r3, r3, #4
 80054c8:	4313      	orrs	r3, r2
 80054ca:	61a3      	str	r3, [r4, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054cc:	69a3      	ldr	r3, [r4, #24]
 80054ce:	4a0c      	ldr	r2, [pc, #48]	; (8005500 <HAL_TIM_PWM_ConfigChannel+0xc0>)
 80054d0:	4013      	ands	r3, r2
 80054d2:	61a3      	str	r3, [r4, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054d4:	692b      	ldr	r3, [r5, #16]
 80054d6:	69a2      	ldr	r2, [r4, #24]
 80054d8:	021b      	lsls	r3, r3, #8
 80054da:	4313      	orrs	r3, r2
 80054dc:	61a3      	str	r3, [r4, #24]
      break;
 80054de:	e7ea      	b.n	80054b6 <HAL_TIM_PWM_ConfigChannel+0x76>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054e0:	681f      	ldr	r7, [r3, #0]
 80054e2:	0038      	movs	r0, r7
 80054e4:	f7ff fe64 	bl	80051b0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054e8:	2204      	movs	r2, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	431c      	orrs	r4, r3
 80054ee:	61fc      	str	r4, [r7, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054f0:	69fb      	ldr	r3, [r7, #28]
 80054f2:	4393      	bics	r3, r2
 80054f4:	61fb      	str	r3, [r7, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	692a      	ldr	r2, [r5, #16]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	61fb      	str	r3, [r7, #28]
      break;
 80054fe:	e7da      	b.n	80054b6 <HAL_TIM_PWM_ConfigChannel+0x76>
 8005500:	fffffbff 	.word	0xfffffbff

08005504 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005504:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005506:	2601      	movs	r6, #1
{
 8005508:	0015      	movs	r5, r2
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800550a:	6a02      	ldr	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800550c:	4f0f      	ldr	r7, [pc, #60]	; (800554c <TIM_TI1_SetConfig+0x48>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800550e:	43b2      	bics	r2, r6
 8005510:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005512:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8005514:	6a04      	ldr	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005516:	42b8      	cmp	r0, r7
 8005518:	d014      	beq.n	8005544 <TIM_TI1_SetConfig+0x40>
 800551a:	2780      	movs	r7, #128	; 0x80
 800551c:	05ff      	lsls	r7, r7, #23
 800551e:	42b8      	cmp	r0, r7
 8005520:	d010      	beq.n	8005544 <TIM_TI1_SetConfig+0x40>
 8005522:	4f0b      	ldr	r7, [pc, #44]	; (8005550 <TIM_TI1_SetConfig+0x4c>)
 8005524:	42b8      	cmp	r0, r7
 8005526:	d00d      	beq.n	8005544 <TIM_TI1_SetConfig+0x40>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
    tmpccmr1 |= TIM_ICSelection;
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005528:	4332      	orrs	r2, r6
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800552a:	25f0      	movs	r5, #240	; 0xf0
 800552c:	43aa      	bics	r2, r5
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800552e:	011b      	lsls	r3, r3, #4
 8005530:	350f      	adds	r5, #15
 8005532:	402b      	ands	r3, r5
 8005534:	4313      	orrs	r3, r2

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005536:	220a      	movs	r2, #10
 8005538:	4394      	bics	r4, r2
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800553a:	4011      	ands	r1, r2
 800553c:	4321      	orrs	r1, r4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800553e:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8005540:	6201      	str	r1, [r0, #32]
}
 8005542:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005544:	2603      	movs	r6, #3
 8005546:	43b2      	bics	r2, r6
    tmpccmr1 |= TIM_ICSelection;
 8005548:	432a      	orrs	r2, r5
 800554a:	e7ee      	b.n	800552a <TIM_TI1_SetConfig+0x26>
 800554c:	40012c00 	.word	0x40012c00
 8005550:	40000400 	.word	0x40000400

08005554 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005554:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005556:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005558:	4d03      	ldr	r5, [pc, #12]	; (8005568 <TIM_ETR_SetConfig+0x14>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800555a:	430a      	orrs	r2, r1
 800555c:	021b      	lsls	r3, r3, #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800555e:	402c      	ands	r4, r5
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005560:	4313      	orrs	r3, r2
 8005562:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005564:	6083      	str	r3, [r0, #8]
}
 8005566:	bd30      	pop	{r4, r5, pc}
 8005568:	ffff00ff 	.word	0xffff00ff

0800556c <HAL_TIM_ConfigClockSource>:
{
 800556c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800556e:	0005      	movs	r5, r0
 8005570:	2402      	movs	r4, #2
 8005572:	353c      	adds	r5, #60	; 0x3c
 8005574:	782a      	ldrb	r2, [r5, #0]
{
 8005576:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8005578:	0020      	movs	r0, r4
 800557a:	2a01      	cmp	r2, #1
 800557c:	d01c      	beq.n	80055b8 <HAL_TIM_ConfigClockSource+0x4c>
  htim->State = HAL_TIM_STATE_BUSY;
 800557e:	001e      	movs	r6, r3
  __HAL_LOCK(htim);
 8005580:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8005582:	363d      	adds	r6, #61	; 0x3d
  __HAL_LOCK(htim);
 8005584:	702a      	strb	r2, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005586:	7034      	strb	r4, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 8005588:	681c      	ldr	r4, [r3, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800558a:	4843      	ldr	r0, [pc, #268]	; (8005698 <HAL_TIM_ConfigClockSource+0x12c>)
  tmpsmcr = htim->Instance->SMCR;
 800558c:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800558e:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8005590:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8005592:	680b      	ldr	r3, [r1, #0]
 8005594:	2b60      	cmp	r3, #96	; 0x60
 8005596:	d052      	beq.n	800563e <HAL_TIM_ConfigClockSource+0xd2>
 8005598:	d82f      	bhi.n	80055fa <HAL_TIM_ConfigClockSource+0x8e>
 800559a:	2b40      	cmp	r3, #64	; 0x40
 800559c:	d066      	beq.n	800566c <HAL_TIM_ConfigClockSource+0x100>
 800559e:	d814      	bhi.n	80055ca <HAL_TIM_ConfigClockSource+0x5e>
 80055a0:	2b20      	cmp	r3, #32
 80055a2:	d00c      	beq.n	80055be <HAL_TIM_ConfigClockSource+0x52>
 80055a4:	d809      	bhi.n	80055ba <HAL_TIM_ConfigClockSource+0x4e>
 80055a6:	2110      	movs	r1, #16
 80055a8:	0018      	movs	r0, r3
 80055aa:	4388      	bics	r0, r1
 80055ac:	d007      	beq.n	80055be <HAL_TIM_ConfigClockSource+0x52>
 80055ae:	0010      	movs	r0, r2
  htim->State = HAL_TIM_STATE_READY;
 80055b0:	2301      	movs	r3, #1
 80055b2:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 80055b4:	2300      	movs	r3, #0
 80055b6:	702b      	strb	r3, [r5, #0]
}
 80055b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 80055ba:	2b30      	cmp	r3, #48	; 0x30
 80055bc:	d1f7      	bne.n	80055ae <HAL_TIM_ConfigClockSource+0x42>
  tmpsmcr &= ~TIM_SMCR_TS;
 80055be:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 80055c0:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80055c2:	438a      	bics	r2, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055c4:	4313      	orrs	r3, r2
 80055c6:	2207      	movs	r2, #7
 80055c8:	e02b      	b.n	8005622 <HAL_TIM_ConfigClockSource+0xb6>
  switch (sClockSourceConfig->ClockSource)
 80055ca:	2b50      	cmp	r3, #80	; 0x50
 80055cc:	d1ef      	bne.n	80055ae <HAL_TIM_ConfigClockSource+0x42>
                               sClockSourceConfig->ClockPolarity,
 80055ce:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80055d0:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 80055d2:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055d4:	6a27      	ldr	r7, [r4, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055d6:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055d8:	4397      	bics	r7, r2
 80055da:	6227      	str	r7, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055dc:	27f0      	movs	r7, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 80055de:	69a2      	ldr	r2, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055e0:	43ba      	bics	r2, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055e2:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055e4:	220a      	movs	r2, #10
 80055e6:	4391      	bics	r1, r2
 80055e8:	000a      	movs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80055ea:	61a3      	str	r3, [r4, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 80055ec:	2370      	movs	r3, #112	; 0x70
  tmpccer |= TIM_ICPolarity;
 80055ee:	4302      	orrs	r2, r0
  TIMx->CCER = tmpccer;
 80055f0:	6222      	str	r2, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 80055f2:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80055f4:	439a      	bics	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055f6:	3b19      	subs	r3, #25
 80055f8:	e013      	b.n	8005622 <HAL_TIM_ConfigClockSource+0xb6>
  switch (sClockSourceConfig->ClockSource)
 80055fa:	2780      	movs	r7, #128	; 0x80
  HAL_StatusTypeDef status = HAL_OK;
 80055fc:	2000      	movs	r0, #0
  switch (sClockSourceConfig->ClockSource)
 80055fe:	017f      	lsls	r7, r7, #5
 8005600:	42bb      	cmp	r3, r7
 8005602:	d0d5      	beq.n	80055b0 <HAL_TIM_ConfigClockSource+0x44>
 8005604:	2080      	movs	r0, #128	; 0x80
 8005606:	0180      	lsls	r0, r0, #6
 8005608:	4283      	cmp	r3, r0
 800560a:	d00e      	beq.n	800562a <HAL_TIM_ConfigClockSource+0xbe>
 800560c:	0010      	movs	r0, r2
 800560e:	2b70      	cmp	r3, #112	; 0x70
 8005610:	d1ce      	bne.n	80055b0 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 8005612:	68cb      	ldr	r3, [r1, #12]
 8005614:	684a      	ldr	r2, [r1, #4]
 8005616:	0020      	movs	r0, r4
 8005618:	6889      	ldr	r1, [r1, #8]
 800561a:	f7ff ff9b 	bl	8005554 <TIM_ETR_SetConfig>
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800561e:	2377      	movs	r3, #119	; 0x77
      tmpsmcr = htim->Instance->SMCR;
 8005620:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005622:	4313      	orrs	r3, r2
  HAL_StatusTypeDef status = HAL_OK;
 8005624:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8005626:	60a3      	str	r3, [r4, #8]
}
 8005628:	e7c2      	b.n	80055b0 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 800562a:	68cb      	ldr	r3, [r1, #12]
 800562c:	684a      	ldr	r2, [r1, #4]
 800562e:	0020      	movs	r0, r4
 8005630:	6889      	ldr	r1, [r1, #8]
 8005632:	f7ff ff8f 	bl	8005554 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005636:	2380      	movs	r3, #128	; 0x80
 8005638:	68a2      	ldr	r2, [r4, #8]
 800563a:	01db      	lsls	r3, r3, #7
 800563c:	e7f1      	b.n	8005622 <HAL_TIM_ConfigClockSource+0xb6>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800563e:	2010      	movs	r0, #16
                               sClockSourceConfig->ClockPolarity,
 8005640:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8005642:	68ca      	ldr	r2, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005644:	6a21      	ldr	r1, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005646:	4f15      	ldr	r7, [pc, #84]	; (800569c <HAL_TIM_ConfigClockSource+0x130>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005648:	4381      	bics	r1, r0
 800564a:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800564c:	69a0      	ldr	r0, [r4, #24]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800564e:	0312      	lsls	r2, r2, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005650:	4038      	ands	r0, r7
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005652:	4302      	orrs	r2, r0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005654:	20a0      	movs	r0, #160	; 0xa0
  tmpccer = TIMx->CCER;
 8005656:	6a21      	ldr	r1, [r4, #32]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005658:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800565a:	4381      	bics	r1, r0
  tmpccer |= (TIM_ICPolarity << 4U);
 800565c:	430b      	orrs	r3, r1
  TIMx->CCMR1 = tmpccmr1 ;
 800565e:	61a2      	str	r2, [r4, #24]
  TIMx->CCER = tmpccer;
 8005660:	6223      	str	r3, [r4, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005662:	2370      	movs	r3, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8005664:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005666:	439a      	bics	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005668:	3b09      	subs	r3, #9
 800566a:	e7da      	b.n	8005622 <HAL_TIM_ConfigClockSource+0xb6>
                               sClockSourceConfig->ClockPolarity,
 800566c:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800566e:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8005670:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005672:	6a27      	ldr	r7, [r4, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005674:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005676:	4397      	bics	r7, r2
 8005678:	6227      	str	r7, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800567a:	27f0      	movs	r7, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 800567c:	69a2      	ldr	r2, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800567e:	43ba      	bics	r2, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005680:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005682:	220a      	movs	r2, #10
 8005684:	4391      	bics	r1, r2
 8005686:	000a      	movs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8005688:	61a3      	str	r3, [r4, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 800568a:	2370      	movs	r3, #112	; 0x70
  tmpccer |= TIM_ICPolarity;
 800568c:	4302      	orrs	r2, r0
  TIMx->CCER = tmpccer;
 800568e:	6222      	str	r2, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8005690:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005692:	439a      	bics	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005694:	3b29      	subs	r3, #41	; 0x29
 8005696:	e7c4      	b.n	8005622 <HAL_TIM_ConfigClockSource+0xb6>
 8005698:	ffff0088 	.word	0xffff0088
 800569c:	ffff0fff 	.word	0xffff0fff

080056a0 <HAL_TIMEx_HallSensor_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 80056a0:	4770      	bx	lr

080056a2 <HAL_TIMEx_HallSensor_Init>:
{
 80056a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056a4:	0004      	movs	r4, r0
 80056a6:	000e      	movs	r6, r1
    return HAL_ERROR;
 80056a8:	2001      	movs	r0, #1
{
 80056aa:	b08b      	sub	sp, #44	; 0x2c
  if (htim == NULL)
 80056ac:	2c00      	cmp	r4, #0
 80056ae:	d057      	beq.n	8005760 <HAL_TIMEx_HallSensor_Init+0xbe>
  if (htim->State == HAL_TIM_STATE_RESET)
 80056b0:	0023      	movs	r3, r4
 80056b2:	333d      	adds	r3, #61	; 0x3d
 80056b4:	9301      	str	r3, [sp, #4]
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	b2da      	uxtb	r2, r3
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d105      	bne.n	80056ca <HAL_TIMEx_HallSensor_Init+0x28>
    htim->Lock = HAL_UNLOCKED;
 80056be:	0023      	movs	r3, r4
 80056c0:	333c      	adds	r3, #60	; 0x3c
    HAL_TIMEx_HallSensor_MspInit(htim);
 80056c2:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 80056c4:	701a      	strb	r2, [r3, #0]
    HAL_TIMEx_HallSensor_MspInit(htim);
 80056c6:	f7ff ffeb 	bl	80056a0 <HAL_TIMEx_HallSensor_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80056ca:	2302      	movs	r3, #2
 80056cc:	9a01      	ldr	r2, [sp, #4]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056ce:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 80056d0:	7013      	strb	r3, [r2, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056d2:	6820      	ldr	r0, [r4, #0]
 80056d4:	f7ff fde0 	bl	8005298 <TIM_Base_SetConfig>
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 80056d8:	6820      	ldr	r0, [r4, #0]
 80056da:	2203      	movs	r2, #3
 80056dc:	68b3      	ldr	r3, [r6, #8]
 80056de:	6831      	ldr	r1, [r6, #0]
 80056e0:	f7ff ff10 	bl	8005504 <TIM_TI1_SetConfig>
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80056e4:	220c      	movs	r2, #12
 80056e6:	6820      	ldr	r0, [r4, #0]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 80056e8:	2770      	movs	r7, #112	; 0x70
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80056ea:	6983      	ldr	r3, [r0, #24]
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 80056ec:	2500      	movs	r5, #0
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80056ee:	4393      	bics	r3, r2
 80056f0:	6183      	str	r3, [r0, #24]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 80056f2:	6983      	ldr	r3, [r0, #24]
 80056f4:	6872      	ldr	r2, [r6, #4]
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 80056f6:	a903      	add	r1, sp, #12
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 80056f8:	4313      	orrs	r3, r2
 80056fa:	6183      	str	r3, [r0, #24]
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 80056fc:	2380      	movs	r3, #128	; 0x80
 80056fe:	6842      	ldr	r2, [r0, #4]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8005700:	9703      	str	r7, [sp, #12]
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8005702:	4313      	orrs	r3, r2
 8005704:	6043      	str	r3, [r0, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8005706:	6883      	ldr	r3, [r0, #8]
 8005708:	43bb      	bics	r3, r7
 800570a:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 800570c:	2340      	movs	r3, #64	; 0x40
 800570e:	6882      	ldr	r2, [r0, #8]
 8005710:	4313      	orrs	r3, r2
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8005712:	2207      	movs	r2, #7
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8005714:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8005716:	6883      	ldr	r3, [r0, #8]
 8005718:	4393      	bics	r3, r2
 800571a:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 800571c:	2304      	movs	r3, #4
 800571e:	6882      	ldr	r2, [r0, #8]
 8005720:	4313      	orrs	r3, r2
 8005722:	6083      	str	r3, [r0, #8]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8005724:	68f3      	ldr	r3, [r6, #12]
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8005726:	9507      	str	r5, [sp, #28]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8005728:	9304      	str	r3, [sp, #16]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 800572a:	9508      	str	r5, [sp, #32]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800572c:	9509      	str	r5, [sp, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800572e:	9506      	str	r5, [sp, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005730:	9505      	str	r5, [sp, #20]
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8005732:	f7ff fe49 	bl	80053c8 <TIM_OC2_SetConfig>
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8005736:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 8005738:	0028      	movs	r0, r5
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800573a:	685a      	ldr	r2, [r3, #4]
 800573c:	43ba      	bics	r2, r7
 800573e:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8005740:	2250      	movs	r2, #80	; 0x50
 8005742:	6859      	ldr	r1, [r3, #4]
 8005744:	430a      	orrs	r2, r1
 8005746:	605a      	str	r2, [r3, #4]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005748:	0022      	movs	r2, r4
 800574a:	2301      	movs	r3, #1
 800574c:	3246      	adds	r2, #70	; 0x46
 800574e:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005750:	3a08      	subs	r2, #8
 8005752:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005754:	7053      	strb	r3, [r2, #1]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005756:	7113      	strb	r3, [r2, #4]
  htim->State = HAL_TIM_STATE_READY;
 8005758:	9a01      	ldr	r2, [sp, #4]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800575a:	3443      	adds	r4, #67	; 0x43
 800575c:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 800575e:	7013      	strb	r3, [r2, #0]
}
 8005760:	b00b      	add	sp, #44	; 0x2c
 8005762:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005764 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005764:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005766:	0004      	movs	r4, r0
 8005768:	2202      	movs	r2, #2
 800576a:	343c      	adds	r4, #60	; 0x3c
 800576c:	7825      	ldrb	r5, [r4, #0]
{
 800576e:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8005770:	0010      	movs	r0, r2
 8005772:	2d01      	cmp	r5, #1
 8005774:	d01d      	beq.n	80057b2 <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005776:	001d      	movs	r5, r3

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005778:	2670      	movs	r6, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 800577a:	353d      	adds	r5, #61	; 0x3d
 800577c:	702a      	strb	r2, [r5, #0]
  tmpcr2 = htim->Instance->CR2;
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8005782:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8005784:	43b0      	bics	r0, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005786:	680e      	ldr	r6, [r1, #0]
 8005788:	4330      	orrs	r0, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800578a:	6058      	str	r0, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800578c:	4809      	ldr	r0, [pc, #36]	; (80057b4 <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 800578e:	4283      	cmp	r3, r0
 8005790:	d006      	beq.n	80057a0 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8005792:	2080      	movs	r0, #128	; 0x80
 8005794:	05c0      	lsls	r0, r0, #23
 8005796:	4283      	cmp	r3, r0
 8005798:	d002      	beq.n	80057a0 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800579a:	4807      	ldr	r0, [pc, #28]	; (80057b8 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 800579c:	4283      	cmp	r3, r0
 800579e:	d104      	bne.n	80057aa <HAL_TIMEx_MasterConfigSynchronization+0x46>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057a0:	2080      	movs	r0, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057a2:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057a4:	4382      	bics	r2, r0
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057a6:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057aa:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 80057ac:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80057ae:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 80057b0:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 80057b2:	bd70      	pop	{r4, r5, r6, pc}
 80057b4:	40012c00 	.word	0x40012c00
 80057b8:	40000400 	.word	0x40000400

080057bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80057bc:	b510      	push	{r4, lr}
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80057be:	0004      	movs	r4, r0
 80057c0:	343c      	adds	r4, #60	; 0x3c
 80057c2:	7823      	ldrb	r3, [r4, #0]
{
 80057c4:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 80057c6:	2002      	movs	r0, #2
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d01c      	beq.n	8005806 <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80057cc:	68cb      	ldr	r3, [r1, #12]
 80057ce:	480e      	ldr	r0, [pc, #56]	; (8005808 <HAL_TIMEx_ConfigBreakDeadTime+0x4c>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80057d0:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80057d2:	4003      	ands	r3, r0
 80057d4:	6888      	ldr	r0, [r1, #8]
 80057d6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80057d8:	480c      	ldr	r0, [pc, #48]	; (800580c <HAL_TIMEx_ConfigBreakDeadTime+0x50>)
 80057da:	4003      	ands	r3, r0
 80057dc:	6848      	ldr	r0, [r1, #4]
 80057de:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80057e0:	480b      	ldr	r0, [pc, #44]	; (8005810 <HAL_TIMEx_ConfigBreakDeadTime+0x54>)
 80057e2:	4003      	ands	r3, r0
 80057e4:	6808      	ldr	r0, [r1, #0]
 80057e6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80057e8:	480a      	ldr	r0, [pc, #40]	; (8005814 <HAL_TIMEx_ConfigBreakDeadTime+0x58>)
 80057ea:	4003      	ands	r3, r0
 80057ec:	6908      	ldr	r0, [r1, #16]
 80057ee:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80057f0:	4809      	ldr	r0, [pc, #36]	; (8005818 <HAL_TIMEx_ConfigBreakDeadTime+0x5c>)
 80057f2:	4003      	ands	r3, r0
 80057f4:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80057f6:	69c9      	ldr	r1, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80057f8:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80057fa:	4808      	ldr	r0, [pc, #32]	; (800581c <HAL_TIMEx_ConfigBreakDeadTime+0x60>)
 80057fc:	4003      	ands	r3, r0

  __HAL_UNLOCK(htim);
 80057fe:	2000      	movs	r0, #0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005800:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 8005802:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8005804:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8005806:	bd10      	pop	{r4, pc}
 8005808:	fffffcff 	.word	0xfffffcff
 800580c:	fffffbff 	.word	0xfffffbff
 8005810:	fffff7ff 	.word	0xfffff7ff
 8005814:	ffffefff 	.word	0xffffefff
 8005818:	ffffdfff 	.word	0xffffdfff
 800581c:	ffffbfff 	.word	0xffffbfff

08005820 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005820:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005822:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005826:	2201      	movs	r2, #1
 8005828:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800582c:	6801      	ldr	r1, [r0, #0]
 800582e:	4d12      	ldr	r5, [pc, #72]	; (8005878 <UART_EndRxTransfer+0x58>)
 8005830:	680b      	ldr	r3, [r1, #0]
 8005832:	402b      	ands	r3, r5
 8005834:	600b      	str	r3, [r1, #0]
 8005836:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800583a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800583e:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005842:	6801      	ldr	r1, [r0, #0]
 8005844:	688b      	ldr	r3, [r1, #8]
 8005846:	4393      	bics	r3, r2
 8005848:	608b      	str	r3, [r1, #8]
 800584a:	f384 8810 	msr	PRIMASK, r4

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800584e:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8005850:	4293      	cmp	r3, r2
 8005852:	d10a      	bne.n	800586a <UART_EndRxTransfer+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005854:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005858:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800585c:	2410      	movs	r4, #16
 800585e:	6802      	ldr	r2, [r0, #0]
 8005860:	6813      	ldr	r3, [r2, #0]
 8005862:	43a3      	bics	r3, r4
 8005864:	6013      	str	r3, [r2, #0]
 8005866:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800586a:	2220      	movs	r2, #32
 800586c:	1d03      	adds	r3, r0, #4
 800586e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005870:	2300      	movs	r3, #0
 8005872:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005874:	6683      	str	r3, [r0, #104]	; 0x68
}
 8005876:	bd30      	pop	{r4, r5, pc}
 8005878:	fffffedf 	.word	0xfffffedf

0800587c <UART_SetConfig>:
{
 800587c:	b570      	push	{r4, r5, r6, lr}
 800587e:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005880:	6925      	ldr	r5, [r4, #16]
 8005882:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005884:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005886:	432a      	orrs	r2, r5
 8005888:	6965      	ldr	r5, [r4, #20]
 800588a:	69c3      	ldr	r3, [r0, #28]
 800588c:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800588e:	6808      	ldr	r0, [r1, #0]
 8005890:	4d38      	ldr	r5, [pc, #224]	; (8005974 <UART_SetConfig+0xf8>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005892:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005894:	4028      	ands	r0, r5
 8005896:	4302      	orrs	r2, r0
 8005898:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800589a:	684a      	ldr	r2, [r1, #4]
 800589c:	4836      	ldr	r0, [pc, #216]	; (8005978 <UART_SetConfig+0xfc>)
  tmpreg |= huart->Init.OneBitSampling;
 800589e:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058a0:	4002      	ands	r2, r0
 80058a2:	68e0      	ldr	r0, [r4, #12]
 80058a4:	4302      	orrs	r2, r0
 80058a6:	604a      	str	r2, [r1, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80058a8:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80058aa:	6888      	ldr	r0, [r1, #8]
  tmpreg |= huart->Init.OneBitSampling;
 80058ac:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80058ae:	4d33      	ldr	r5, [pc, #204]	; (800597c <UART_SetConfig+0x100>)
 80058b0:	4028      	ands	r0, r5
 80058b2:	4302      	orrs	r2, r0
 80058b4:	608a      	str	r2, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058b6:	2103      	movs	r1, #3
 80058b8:	4a31      	ldr	r2, [pc, #196]	; (8005980 <UART_SetConfig+0x104>)
 80058ba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80058bc:	400a      	ands	r2, r1
 80058be:	2180      	movs	r1, #128	; 0x80
 80058c0:	3a01      	subs	r2, #1
 80058c2:	0209      	lsls	r1, r1, #8
 80058c4:	2a02      	cmp	r2, #2
 80058c6:	d849      	bhi.n	800595c <UART_SetConfig+0xe0>
 80058c8:	482e      	ldr	r0, [pc, #184]	; (8005984 <UART_SetConfig+0x108>)
 80058ca:	5c80      	ldrb	r0, [r0, r2]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058cc:	428b      	cmp	r3, r1
 80058ce:	d123      	bne.n	8005918 <UART_SetConfig+0x9c>
    switch (clocksource)
 80058d0:	2808      	cmp	r0, #8
 80058d2:	d815      	bhi.n	8005900 <UART_SetConfig+0x84>
 80058d4:	f7fa fc22 	bl	800011c <__gnu_thumb1_case_uqi>
 80058d8:	14081444 	.word	0x14081444
 80058dc:	14141405 	.word	0x14141405
 80058e0:	09          	.byte	0x09
 80058e1:	00          	.byte	0x00
        pclk = HAL_RCC_GetSysClockFreq();
 80058e2:	f7ff fae3 	bl	8004eac <HAL_RCC_GetSysClockFreq>
 80058e6:	e03d      	b.n	8005964 <UART_SetConfig+0xe8>
    switch (clocksource)
 80058e8:	4b27      	ldr	r3, [pc, #156]	; (8005988 <UART_SetConfig+0x10c>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80058ea:	6861      	ldr	r1, [r4, #4]
 80058ec:	0058      	lsls	r0, r3, #1
 80058ee:	084b      	lsrs	r3, r1, #1
 80058f0:	18c0      	adds	r0, r0, r3
 80058f2:	f7fa fc1d 	bl	8000130 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058f6:	0002      	movs	r2, r0
 80058f8:	4b24      	ldr	r3, [pc, #144]	; (800598c <UART_SetConfig+0x110>)
 80058fa:	3a10      	subs	r2, #16
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d901      	bls.n	8005904 <UART_SetConfig+0x88>
    switch (clocksource)
 8005900:	2001      	movs	r0, #1
 8005902:	e032      	b.n	800596a <UART_SetConfig+0xee>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005904:	230f      	movs	r3, #15
 8005906:	0002      	movs	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005908:	0700      	lsls	r0, r0, #28
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800590a:	439a      	bics	r2, r3
 800590c:	b293      	uxth	r3, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800590e:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 8005910:	6822      	ldr	r2, [r4, #0]
 8005912:	4303      	orrs	r3, r0
 8005914:	60d3      	str	r3, [r2, #12]
 8005916:	e027      	b.n	8005968 <UART_SetConfig+0xec>
    switch (clocksource)
 8005918:	2808      	cmp	r0, #8
 800591a:	d8f1      	bhi.n	8005900 <UART_SetConfig+0x84>
 800591c:	f7fa fbf4 	bl	8000108 <__gnu_thumb1_case_sqi>
 8005920:	f01cf014 	.word	0xf01cf014
 8005924:	f0f0f019 	.word	0xf0f0f019
 8005928:	05          	.byte	0x05
 8005929:	00          	.byte	0x00
 800592a:	2080      	movs	r0, #128	; 0x80
 800592c:	0200      	lsls	r0, r0, #8
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800592e:	6861      	ldr	r1, [r4, #4]
 8005930:	084b      	lsrs	r3, r1, #1
 8005932:	1818      	adds	r0, r3, r0
 8005934:	f7fa fbfc 	bl	8000130 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005938:	0002      	movs	r2, r0
 800593a:	4b14      	ldr	r3, [pc, #80]	; (800598c <UART_SetConfig+0x110>)
 800593c:	3a10      	subs	r2, #16
 800593e:	429a      	cmp	r2, r3
 8005940:	d8de      	bhi.n	8005900 <UART_SetConfig+0x84>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005942:	6823      	ldr	r3, [r4, #0]
 8005944:	60d8      	str	r0, [r3, #12]
 8005946:	e00f      	b.n	8005968 <UART_SetConfig+0xec>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005948:	f7ff fb60 	bl	800500c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800594c:	2800      	cmp	r0, #0
 800594e:	d00b      	beq.n	8005968 <UART_SetConfig+0xec>
 8005950:	e7ed      	b.n	800592e <UART_SetConfig+0xb2>
        pclk = HAL_RCC_GetSysClockFreq();
 8005952:	f7ff faab 	bl	8004eac <HAL_RCC_GetSysClockFreq>
        break;
 8005956:	e7f9      	b.n	800594c <UART_SetConfig+0xd0>
        pclk = (uint32_t) HSI_VALUE;
 8005958:	480b      	ldr	r0, [pc, #44]	; (8005988 <UART_SetConfig+0x10c>)
 800595a:	e7e8      	b.n	800592e <UART_SetConfig+0xb2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800595c:	428b      	cmp	r3, r1
 800595e:	d1f3      	bne.n	8005948 <UART_SetConfig+0xcc>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005960:	f7ff fb54 	bl	800500c <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 8005964:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 8005966:	d1c0      	bne.n	80058ea <UART_SetConfig+0x6e>
 8005968:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 800596a:	2300      	movs	r3, #0
 800596c:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 800596e:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8005970:	bd70      	pop	{r4, r5, r6, pc}
 8005972:	46c0      	nop			; (mov r8, r8)
 8005974:	ffff69f3 	.word	0xffff69f3
 8005978:	ffffcfff 	.word	0xffffcfff
 800597c:	fffff4ff 	.word	0xfffff4ff
 8005980:	40021000 	.word	0x40021000
 8005984:	080064cb 	.word	0x080064cb
 8005988:	007a1200 	.word	0x007a1200
 800598c:	0000ffef 	.word	0x0000ffef

08005990 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005990:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8005992:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005994:	07da      	lsls	r2, r3, #31
 8005996:	d506      	bpl.n	80059a6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005998:	6801      	ldr	r1, [r0, #0]
 800599a:	4c28      	ldr	r4, [pc, #160]	; (8005a3c <UART_AdvFeatureConfig+0xac>)
 800599c:	684a      	ldr	r2, [r1, #4]
 800599e:	4022      	ands	r2, r4
 80059a0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80059a2:	4322      	orrs	r2, r4
 80059a4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059a6:	079a      	lsls	r2, r3, #30
 80059a8:	d506      	bpl.n	80059b8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059aa:	6801      	ldr	r1, [r0, #0]
 80059ac:	4c24      	ldr	r4, [pc, #144]	; (8005a40 <UART_AdvFeatureConfig+0xb0>)
 80059ae:	684a      	ldr	r2, [r1, #4]
 80059b0:	4022      	ands	r2, r4
 80059b2:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80059b4:	4322      	orrs	r2, r4
 80059b6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80059b8:	075a      	lsls	r2, r3, #29
 80059ba:	d506      	bpl.n	80059ca <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059bc:	6801      	ldr	r1, [r0, #0]
 80059be:	4c21      	ldr	r4, [pc, #132]	; (8005a44 <UART_AdvFeatureConfig+0xb4>)
 80059c0:	684a      	ldr	r2, [r1, #4]
 80059c2:	4022      	ands	r2, r4
 80059c4:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80059c6:	4322      	orrs	r2, r4
 80059c8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059ca:	071a      	lsls	r2, r3, #28
 80059cc:	d506      	bpl.n	80059dc <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059ce:	6801      	ldr	r1, [r0, #0]
 80059d0:	4c1d      	ldr	r4, [pc, #116]	; (8005a48 <UART_AdvFeatureConfig+0xb8>)
 80059d2:	684a      	ldr	r2, [r1, #4]
 80059d4:	4022      	ands	r2, r4
 80059d6:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80059d8:	4322      	orrs	r2, r4
 80059da:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80059dc:	06da      	lsls	r2, r3, #27
 80059de:	d506      	bpl.n	80059ee <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80059e0:	6801      	ldr	r1, [r0, #0]
 80059e2:	4c1a      	ldr	r4, [pc, #104]	; (8005a4c <UART_AdvFeatureConfig+0xbc>)
 80059e4:	688a      	ldr	r2, [r1, #8]
 80059e6:	4022      	ands	r2, r4
 80059e8:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80059ea:	4322      	orrs	r2, r4
 80059ec:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80059ee:	069a      	lsls	r2, r3, #26
 80059f0:	d506      	bpl.n	8005a00 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80059f2:	6801      	ldr	r1, [r0, #0]
 80059f4:	4c16      	ldr	r4, [pc, #88]	; (8005a50 <UART_AdvFeatureConfig+0xc0>)
 80059f6:	688a      	ldr	r2, [r1, #8]
 80059f8:	4022      	ands	r2, r4
 80059fa:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80059fc:	4322      	orrs	r2, r4
 80059fe:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a00:	065a      	lsls	r2, r3, #25
 8005a02:	d510      	bpl.n	8005a26 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a04:	6801      	ldr	r1, [r0, #0]
 8005a06:	4d13      	ldr	r5, [pc, #76]	; (8005a54 <UART_AdvFeatureConfig+0xc4>)
 8005a08:	684a      	ldr	r2, [r1, #4]
 8005a0a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8005a0c:	402a      	ands	r2, r5
 8005a0e:	4322      	orrs	r2, r4
 8005a10:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a12:	2280      	movs	r2, #128	; 0x80
 8005a14:	0352      	lsls	r2, r2, #13
 8005a16:	4294      	cmp	r4, r2
 8005a18:	d105      	bne.n	8005a26 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a1a:	684a      	ldr	r2, [r1, #4]
 8005a1c:	4c0e      	ldr	r4, [pc, #56]	; (8005a58 <UART_AdvFeatureConfig+0xc8>)
 8005a1e:	4022      	ands	r2, r4
 8005a20:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8005a22:	4322      	orrs	r2, r4
 8005a24:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a26:	061b      	lsls	r3, r3, #24
 8005a28:	d506      	bpl.n	8005a38 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a2a:	6802      	ldr	r2, [r0, #0]
 8005a2c:	490b      	ldr	r1, [pc, #44]	; (8005a5c <UART_AdvFeatureConfig+0xcc>)
 8005a2e:	6853      	ldr	r3, [r2, #4]
 8005a30:	400b      	ands	r3, r1
 8005a32:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005a34:	430b      	orrs	r3, r1
 8005a36:	6053      	str	r3, [r2, #4]
}
 8005a38:	bd30      	pop	{r4, r5, pc}
 8005a3a:	46c0      	nop			; (mov r8, r8)
 8005a3c:	fffdffff 	.word	0xfffdffff
 8005a40:	fffeffff 	.word	0xfffeffff
 8005a44:	fffbffff 	.word	0xfffbffff
 8005a48:	ffff7fff 	.word	0xffff7fff
 8005a4c:	ffffefff 	.word	0xffffefff
 8005a50:	ffffdfff 	.word	0xffffdfff
 8005a54:	ffefffff 	.word	0xffefffff
 8005a58:	ff9fffff 	.word	0xff9fffff
 8005a5c:	fff7ffff 	.word	0xfff7ffff

08005a60 <UART_WaitOnFlagUntilTimeout>:
{
 8005a60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a62:	0004      	movs	r4, r0
 8005a64:	000d      	movs	r5, r1
 8005a66:	0017      	movs	r7, r2
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a68:	2608      	movs	r6, #8
{
 8005a6a:	9300      	str	r3, [sp, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a6c:	6822      	ldr	r2, [r4, #0]
 8005a6e:	69d3      	ldr	r3, [r2, #28]
 8005a70:	402b      	ands	r3, r5
 8005a72:	1b5b      	subs	r3, r3, r5
 8005a74:	4259      	negs	r1, r3
 8005a76:	414b      	adcs	r3, r1
 8005a78:	42bb      	cmp	r3, r7
 8005a7a:	d001      	beq.n	8005a80 <UART_WaitOnFlagUntilTimeout+0x20>
  return HAL_OK;
 8005a7c:	2000      	movs	r0, #0
 8005a7e:	e021      	b.n	8005ac4 <UART_WaitOnFlagUntilTimeout+0x64>
    if (Timeout != HAL_MAX_DELAY)
 8005a80:	9b08      	ldr	r3, [sp, #32]
 8005a82:	3301      	adds	r3, #1
 8005a84:	d0f3      	beq.n	8005a6e <UART_WaitOnFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a86:	f7fe fd9b 	bl	80045c0 <HAL_GetTick>
 8005a8a:	9b00      	ldr	r3, [sp, #0]
 8005a8c:	1ac0      	subs	r0, r0, r3
 8005a8e:	9b08      	ldr	r3, [sp, #32]
 8005a90:	4298      	cmp	r0, r3
 8005a92:	d828      	bhi.n	8005ae6 <UART_WaitOnFlagUntilTimeout+0x86>
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d026      	beq.n	8005ae6 <UART_WaitOnFlagUntilTimeout+0x86>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a98:	2104      	movs	r1, #4
 8005a9a:	6823      	ldr	r3, [r4, #0]
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	420a      	tst	r2, r1
 8005aa0:	d0e4      	beq.n	8005a6c <UART_WaitOnFlagUntilTimeout+0xc>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005aa2:	69da      	ldr	r2, [r3, #28]
 8005aa4:	0011      	movs	r1, r2
 8005aa6:	4031      	ands	r1, r6
 8005aa8:	9101      	str	r1, [sp, #4]
 8005aaa:	4232      	tst	r2, r6
 8005aac:	d00b      	beq.n	8005ac6 <UART_WaitOnFlagUntilTimeout+0x66>
           UART_EndRxTransfer(huart);
 8005aae:	0020      	movs	r0, r4
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ab0:	621e      	str	r6, [r3, #32]
           UART_EndRxTransfer(huart);
 8005ab2:	f7ff feb5 	bl	8005820 <UART_EndRxTransfer>
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005ab6:	0023      	movs	r3, r4
 8005ab8:	3308      	adds	r3, #8
 8005aba:	67de      	str	r6, [r3, #124]	; 0x7c
           __HAL_UNLOCK(huart);
 8005abc:	2300      	movs	r3, #0
           return HAL_ERROR;
 8005abe:	2001      	movs	r0, #1
           __HAL_UNLOCK(huart);
 8005ac0:	3478      	adds	r4, #120	; 0x78
 8005ac2:	7023      	strb	r3, [r4, #0]
}
 8005ac4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ac6:	2280      	movs	r2, #128	; 0x80
 8005ac8:	69d9      	ldr	r1, [r3, #28]
 8005aca:	0112      	lsls	r2, r2, #4
 8005acc:	4211      	tst	r1, r2
 8005ace:	d0cd      	beq.n	8005a6c <UART_WaitOnFlagUntilTimeout+0xc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ad0:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 8005ad2:	0020      	movs	r0, r4
 8005ad4:	f7ff fea4 	bl	8005820 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ad8:	0023      	movs	r3, r4
 8005ada:	2220      	movs	r2, #32
 8005adc:	3308      	adds	r3, #8
 8005ade:	67da      	str	r2, [r3, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8005ae0:	9b01      	ldr	r3, [sp, #4]
 8005ae2:	3478      	adds	r4, #120	; 0x78
 8005ae4:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 8005ae6:	2003      	movs	r0, #3
 8005ae8:	e7ec      	b.n	8005ac4 <UART_WaitOnFlagUntilTimeout+0x64>
	...

08005aec <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aec:	0003      	movs	r3, r0
{
 8005aee:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005af0:	2500      	movs	r5, #0
{
 8005af2:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005af4:	3308      	adds	r3, #8
 8005af6:	67dd      	str	r5, [r3, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8005af8:	f7fe fd62 	bl	80045c0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005afc:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8005afe:	0006      	movs	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	071b      	lsls	r3, r3, #28
 8005b04:	d51d      	bpl.n	8005b42 <UART_CheckIdleState+0x56>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b06:	2180      	movs	r1, #128	; 0x80
 8005b08:	4b26      	ldr	r3, [pc, #152]	; (8005ba4 <UART_CheckIdleState+0xb8>)
 8005b0a:	002a      	movs	r2, r5
 8005b0c:	9300      	str	r3, [sp, #0]
 8005b0e:	0389      	lsls	r1, r1, #14
 8005b10:	0003      	movs	r3, r0
 8005b12:	0020      	movs	r0, r4
 8005b14:	f7ff ffa4 	bl	8005a60 <UART_WaitOnFlagUntilTimeout>
 8005b18:	42a8      	cmp	r0, r5
 8005b1a:	d012      	beq.n	8005b42 <UART_CheckIdleState+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b1c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b20:	2301      	movs	r3, #1
 8005b22:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005b26:	2080      	movs	r0, #128	; 0x80
 8005b28:	6822      	ldr	r2, [r4, #0]
 8005b2a:	6813      	ldr	r3, [r2, #0]
 8005b2c:	4383      	bics	r3, r0
 8005b2e:	6013      	str	r3, [r2, #0]
 8005b30:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8005b34:	2320      	movs	r3, #32
 8005b36:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 8005b38:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	3478      	adds	r4, #120	; 0x78
 8005b3e:	7023      	strb	r3, [r4, #0]
}
 8005b40:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b42:	0025      	movs	r5, r4
 8005b44:	cd08      	ldmia	r5!, {r3}
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	075b      	lsls	r3, r3, #29
 8005b4a:	d523      	bpl.n	8005b94 <UART_CheckIdleState+0xa8>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b4c:	2180      	movs	r1, #128	; 0x80
 8005b4e:	4b15      	ldr	r3, [pc, #84]	; (8005ba4 <UART_CheckIdleState+0xb8>)
 8005b50:	2200      	movs	r2, #0
 8005b52:	9300      	str	r3, [sp, #0]
 8005b54:	0020      	movs	r0, r4
 8005b56:	0033      	movs	r3, r6
 8005b58:	03c9      	lsls	r1, r1, #15
 8005b5a:	f7ff ff81 	bl	8005a60 <UART_WaitOnFlagUntilTimeout>
 8005b5e:	2800      	cmp	r0, #0
 8005b60:	d018      	beq.n	8005b94 <UART_CheckIdleState+0xa8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b62:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b66:	2201      	movs	r2, #1
 8005b68:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b6c:	6821      	ldr	r1, [r4, #0]
 8005b6e:	4e0e      	ldr	r6, [pc, #56]	; (8005ba8 <UART_CheckIdleState+0xbc>)
 8005b70:	680b      	ldr	r3, [r1, #0]
 8005b72:	4033      	ands	r3, r6
 8005b74:	600b      	str	r3, [r1, #0]
 8005b76:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b7a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b7e:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b82:	6821      	ldr	r1, [r4, #0]
 8005b84:	688b      	ldr	r3, [r1, #8]
 8005b86:	4393      	bics	r3, r2
 8005b88:	608b      	str	r3, [r1, #8]
 8005b8a:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8005b8e:	2320      	movs	r3, #32
 8005b90:	67eb      	str	r3, [r5, #124]	; 0x7c
 8005b92:	e7d1      	b.n	8005b38 <UART_CheckIdleState+0x4c>
  huart->gState = HAL_UART_STATE_READY;
 8005b94:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b96:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8005b98:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005b9a:	67eb      	str	r3, [r5, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b9c:	6620      	str	r0, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b9e:	6660      	str	r0, [r4, #100]	; 0x64
  return HAL_OK;
 8005ba0:	e7cb      	b.n	8005b3a <UART_CheckIdleState+0x4e>
 8005ba2:	46c0      	nop			; (mov r8, r8)
 8005ba4:	01ffffff 	.word	0x01ffffff
 8005ba8:	fffffedf 	.word	0xfffffedf

08005bac <HAL_UART_Init>:
{
 8005bac:	b510      	push	{r4, lr}
 8005bae:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8005bb0:	d101      	bne.n	8005bb6 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8005bb2:	2001      	movs	r0, #1
}
 8005bb4:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8005bb6:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d104      	bne.n	8005bc6 <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8005bbc:	0002      	movs	r2, r0
 8005bbe:	3278      	adds	r2, #120	; 0x78
 8005bc0:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8005bc2:	f7fe fad7 	bl	8004174 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8005bc6:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8005bc8:	2101      	movs	r1, #1
 8005bca:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005bcc:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8005bce:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005bd0:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8005bd2:	438b      	bics	r3, r1
 8005bd4:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005bd6:	f7ff fe51 	bl	800587c <UART_SetConfig>
 8005bda:	2801      	cmp	r0, #1
 8005bdc:	d0e9      	beq.n	8005bb2 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005bde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d002      	beq.n	8005bea <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 8005be4:	0020      	movs	r0, r4
 8005be6:	f7ff fed3 	bl	8005990 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bea:	6823      	ldr	r3, [r4, #0]
 8005bec:	4907      	ldr	r1, [pc, #28]	; (8005c0c <HAL_UART_Init+0x60>)
 8005bee:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8005bf0:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bf2:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bf4:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bf6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bf8:	689a      	ldr	r2, [r3, #8]
 8005bfa:	438a      	bics	r2, r1
 8005bfc:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8005bfe:	2201      	movs	r2, #1
 8005c00:	6819      	ldr	r1, [r3, #0]
 8005c02:	430a      	orrs	r2, r1
 8005c04:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8005c06:	f7ff ff71 	bl	8005aec <UART_CheckIdleState>
 8005c0a:	e7d3      	b.n	8005bb4 <HAL_UART_Init+0x8>
 8005c0c:	ffffb7ff 	.word	0xffffb7ff

08005c10 <VBS_GetAvBusVoltage_V>:
  * @brief  It return latest averaged Vbus measurement expressed in Volt format
  * @param  pHandle related Handle of BusVoltageSensor_Handle_t
  * @retval uint16_t Latest averaged Vbus measurement in Volt format
  */
__weak uint16_t VBS_GetAvBusVoltage_V(const BusVoltageSensor_Handle_t *pHandle)
{
 8005c10:	0003      	movs	r3, r0
    temp = 0U;
  }
  else
  {
#endif
    temp = (uint32_t)(pHandle->AvBusVoltage_d);
 8005c12:	88c0      	ldrh	r0, [r0, #6]
    temp *= pHandle->ConversionFactor;
 8005c14:	885b      	ldrh	r3, [r3, #2]
 8005c16:	4358      	muls	r0, r3
    temp /= 65536U;
#ifdef NULL_PTR_CHECK_BUS_VOLT
  }
#endif
  return ((uint16_t)temp);
 8005c18:	0c00      	lsrs	r0, r0, #16
}
 8005c1a:	4770      	bx	lr

08005c1c <Circle_Limitation>:
  *  @f$v_q = \sqrt(MaxModule^2-v_d^2\ ) @f$

  *
  */
__weak qd_t Circle_Limitation(const CircleLimitation_Handle_t *pHandle, qd_t Vqd)
{
 8005c1c:	b20b      	sxth	r3, r1
 8005c1e:	1409      	asrs	r1, r1, #16
 8005c20:	b5f0      	push	{r4, r5, r6, r7, lr}
    int32_t new_d;

    maxModule = (int32_t)pHandle->MaxModule;

    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
    square_d = ((int32_t)(Vqd.d)) * Vqd.d;
 8005c22:	000e      	movs	r6, r1
    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
 8005c24:	001d      	movs	r5, r3
    maxModule = (int32_t)pHandle->MaxModule;
 8005c26:	8802      	ldrh	r2, [r0, #0]
    square_d = ((int32_t)(Vqd.d)) * Vqd.d;
 8005c28:	434e      	muls	r6, r1
    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
 8005c2a:	435d      	muls	r5, r3
    square_limit = maxModule * maxModule;
 8005c2c:	4352      	muls	r2, r2
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
    square_sum = square_q + square_d;
 8005c2e:	19ad      	adds	r5, r5, r6
    square_d = ((int32_t)(Vqd.d)) * Vqd.d;
 8005c30:	000c      	movs	r4, r1
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
 8005c32:	8840      	ldrh	r0, [r0, #2]
{
 8005c34:	b085      	sub	sp, #20

    if (square_sum > square_limit)
 8005c36:	42aa      	cmp	r2, r5
 8005c38:	da11      	bge.n	8005c5e <Circle_Limitation+0x42>
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
 8005c3a:	0007      	movs	r7, r0
 8005c3c:	4347      	muls	r7, r0
    {
      if (square_d <= vd_square_limit)
 8005c3e:	4d0f      	ldr	r5, [pc, #60]	; (8005c7c <Circle_Limitation+0x60>)
 8005c40:	42be      	cmp	r6, r7
 8005c42:	dc11      	bgt.n	8005c68 <Circle_Limitation+0x4c>
      {
#if defined CIRCLE_LIMITATION_SQRT_M0
        square_temp = (square_limit - square_d) / 1048576;
 8005c44:	1b96      	subs	r6, r2, r6
 8005c46:	17f2      	asrs	r2, r6, #31
 8005c48:	0312      	lsls	r2, r2, #12
 8005c4a:	0b12      	lsrs	r2, r2, #12
 8005c4c:	1992      	adds	r2, r2, r6
        else
        {
          /* Nothing to do */
        }
#if defined CIRCLE_LIMITATION_SQRT_M0
        square_temp = (square_limit - vd_square_limit) / 1048576;
 8005c4e:	1512      	asrs	r2, r2, #20
        new_q = SqrtTable[square_temp];
 8005c50:	0052      	lsls	r2, r2, #1
 8005c52:	5aaa      	ldrh	r2, [r5, r2]
#else
        square_temp = square_limit - vd_square_limit;
        new_q = MCM_Sqrt(square_temp);
#endif
        if (Vqd.q < 0)
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	da00      	bge.n	8005c5a <Circle_Limitation+0x3e>
        {
          new_q = - new_q;
 8005c58:	4252      	negs	r2, r2
        else
        {
          /* Nothing to do */
        }
      }
      local_vqd.q = (int16_t)new_q;
 8005c5a:	b213      	sxth	r3, r2
      local_vqd.d = (int16_t)new_d;
 8005c5c:	b221      	sxth	r1, r4
    }
#ifdef NULL_PTR_CHECK_CRC_LIM
  }
#endif
  return (local_vqd);
 8005c5e:	0409      	lsls	r1, r1, #16
 8005c60:	b298      	uxth	r0, r3
 8005c62:	4308      	orrs	r0, r1
}
 8005c64:	b005      	add	sp, #20
 8005c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
        new_d = (int32_t)pHandle->MaxVd;
 8005c68:	0004      	movs	r4, r0
        if (Vqd.d < 0)
 8005c6a:	2900      	cmp	r1, #0
 8005c6c:	da00      	bge.n	8005c70 <Circle_Limitation+0x54>
          new_d = -new_d;
 8005c6e:	4244      	negs	r4, r0
        square_temp = (square_limit - vd_square_limit) / 1048576;
 8005c70:	1bd7      	subs	r7, r2, r7
 8005c72:	17fa      	asrs	r2, r7, #31
 8005c74:	0312      	lsls	r2, r2, #12
 8005c76:	0b12      	lsrs	r2, r2, #12
 8005c78:	19d2      	adds	r2, r2, r7
 8005c7a:	e7e8      	b.n	8005c4e <Circle_Limitation+0x32>
 8005c7c:	080064ce 	.word	0x080064ce

08005c80 <NTC_Clear>:
    /* nothing to do */
  }
  else
  {
#endif
    pHandle->hAvTemp_d = 0U;
 8005c80:	2300      	movs	r3, #0
 8005c82:	8043      	strh	r3, [r0, #2]
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
}
 8005c84:	4770      	bx	lr

08005c86 <NTC_Init>:
    if (REAL_SENSOR == pHandle->bSensorType)
 8005c86:	7803      	ldrb	r3, [r0, #0]
{
 8005c88:	b510      	push	{r4, lr}
    if (REAL_SENSOR == pHandle->bSensorType)
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d102      	bne.n	8005c94 <NTC_Init+0xe>
      NTC_Clear(pHandle);
 8005c8e:	f7ff fff7 	bl	8005c80 <NTC_Clear>
}
 8005c92:	bd10      	pop	{r4, pc}
      pHandle->hFaultState = MC_NO_ERROR;
 8005c94:	2300      	movs	r3, #0
 8005c96:	8103      	strh	r3, [r0, #8]
      pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8005c98:	8883      	ldrh	r3, [r0, #4]
 8005c9a:	8043      	strh	r3, [r0, #2]
}
 8005c9c:	e7f9      	b.n	8005c92 <NTC_Init+0xc>

08005c9e <NTC_GetAvTemp_C>:
  else
  {
#endif
    int32_t wTemp;

    if (REAL_SENSOR == pHandle->bSensorType)
 8005c9e:	7803      	ldrb	r3, [r0, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d10a      	bne.n	8005cba <NTC_GetAvTemp_C+0x1c>
    {
      wTemp = (int32_t)pHandle->hAvTemp_d;
      wTemp -= ((int32_t)pHandle->wV0);
 8005ca4:	6942      	ldr	r2, [r0, #20]
      wTemp = (int32_t)pHandle->hAvTemp_d;
 8005ca6:	8843      	ldrh	r3, [r0, #2]
      wTemp -= ((int32_t)pHandle->wV0);
 8005ca8:	1a9b      	subs	r3, r3, r2
      wTemp *= pHandle->hSensitivity;
 8005caa:	2110      	movs	r1, #16
 8005cac:	5e42      	ldrsh	r2, [r0, r1]
#ifndef FULL_MISRA_C_COMPLIANCY_NTC_TEMP
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 8005cae:	8b00      	ldrh	r0, [r0, #24]
      wTemp *= pHandle->hSensitivity;
 8005cb0:	4353      	muls	r3, r2
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 8005cb2:	141b      	asrs	r3, r3, #16
 8005cb4:	18c0      	adds	r0, r0, r3
    }
    returnValue = (int16_t)wTemp;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
 8005cb6:	b200      	sxth	r0, r0
}
 8005cb8:	4770      	bx	lr
      wTemp = (int32_t)pHandle->hExpectedTemp_C;
 8005cba:	88c0      	ldrh	r0, [r0, #6]
 8005cbc:	e7fb      	b.n	8005cb6 <NTC_GetAvTemp_C+0x18>

08005cbe <PID_HandleInit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKpGain =  pHandle->hDefKpGain;
 8005cbe:	6803      	ldr	r3, [r0, #0]
 8005cc0:	6043      	str	r3, [r0, #4]
    pHandle->hKiGain =  pHandle->hDefKiGain;
    pHandle->hKdGain =  pHandle->hDefKdGain;
 8005cc2:	8c03      	ldrh	r3, [r0, #32]
 8005cc4:	8443      	strh	r3, [r0, #34]	; 0x22
    pHandle->wIntegralTerm = 0;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	6083      	str	r3, [r0, #8]
    pHandle->wPrevProcessVarError = 0;
 8005cca:	6283      	str	r3, [r0, #40]	; 0x28
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8005ccc:	4770      	bx	lr

08005cce <PID_SetKP>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKpGain = hKpGain;
 8005cce:	8081      	strh	r1, [r0, #4]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8005cd0:	4770      	bx	lr

08005cd2 <PID_SetKI>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKiGain = hKiGain;
 8005cd2:	80c1      	strh	r1, [r0, #6]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8005cd4:	4770      	bx	lr

08005cd6 <PID_GetKP>:
__weak int16_t PID_GetKP(PID_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKpGain);
#else
  return (pHandle->hKpGain);
 8005cd6:	2304      	movs	r3, #4
 8005cd8:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 8005cda:	4770      	bx	lr

08005cdc <PID_GetKI>:
__weak int16_t PID_GetKI(PID_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKiGain);
#else
  return (pHandle->hKiGain);
 8005cdc:	2306      	movs	r3, #6
 8005cde:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 8005ce0:	4770      	bx	lr

08005ce2 <PID_SetIntegralTerm>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wIntegralTerm = wIntegralTermValue;
 8005ce2:	6081      	str	r1, [r0, #8]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return;
}
 8005ce4:	4770      	bx	lr

08005ce6 <PID_SetKD>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKdGain = hKdGain;
 8005ce6:	8441      	strh	r1, [r0, #34]	; 0x22
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8005ce8:	4770      	bx	lr

08005cea <PID_GetKD>:
__weak int16_t PID_GetKD(PID_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKdGain);
#else
  return (pHandle->hKdGain);
 8005cea:	2322      	movs	r3, #34	; 0x22
 8005cec:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 8005cee:	4770      	bx	lr

08005cf0 <PI_Controller>:
  * 
  * The resulting value is then saturated by the upper and lower output limit values before 
  * being returned.
  */
__weak int16_t PI_Controller(PID_Handle_t *pHandle, int32_t wProcessVarError)
{
 8005cf0:	b570      	push	{r4, r5, r6, lr}
    int32_t wProportional_Term;
    int32_t wIntegral_Term;
    int32_t wOutput_32;
    int32_t wIntegral_sum_temp;
    int32_t wDischarge = 0;
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8005cf2:	2314      	movs	r3, #20
 8005cf4:	5ec5      	ldrsh	r5, [r0, r3]
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8005cf6:	2316      	movs	r3, #22
 8005cf8:	5ec4      	ldrsh	r4, [r0, r3]

    /* Proportional term computation*/
    wProportional_Term = pHandle->hKpGain * wProcessVarError;

    /* Integral term computation */
    if (0 == pHandle->hKiGain)
 8005cfa:	2206      	movs	r2, #6
 8005cfc:	5e86      	ldrsh	r6, [r0, r2]
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8005cfe:	2204      	movs	r2, #4
 8005d00:	5e83      	ldrsh	r3, [r0, r2]
 8005d02:	2200      	movs	r2, #0
 8005d04:	434b      	muls	r3, r1
    if (0 == pHandle->hKiGain)
 8005d06:	4296      	cmp	r6, r2
 8005d08:	d00f      	beq.n	8005d2a <PI_Controller+0x3a>
    {
      pHandle->wIntegralTerm = 0;
    }
    else
    {
      wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8005d0a:	4371      	muls	r1, r6
      wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 8005d0c:	6882      	ldr	r2, [r0, #8]

      if (wIntegral_sum_temp < 0)
 8005d0e:	1856      	adds	r6, r2, r1
 8005d10:	d519      	bpl.n	8005d46 <PI_Controller+0x56>
      {
        if (pHandle->wIntegralTerm > 0)
 8005d12:	2a00      	cmp	r2, #0
 8005d14:	dd02      	ble.n	8005d1c <PI_Controller+0x2c>
        {
          if (wIntegral_Term > 0)
 8005d16:	2900      	cmp	r1, #0
 8005d18:	dd00      	ble.n	8005d1c <PI_Controller+0x2c>
          {
            wIntegral_sum_temp = INT32_MAX;
 8005d1a:	4e11      	ldr	r6, [pc, #68]	; (8005d60 <PI_Controller+0x70>)
        {
          /* Nothing to do */
        }
      }

      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8005d1c:	68c2      	ldr	r2, [r0, #12]
 8005d1e:	42b2      	cmp	r2, r6
 8005d20:	db03      	blt.n	8005d2a <PI_Controller+0x3a>
      {
        pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
      }
      else if (wIntegral_sum_temp < pHandle->wLowerIntegralLimit)
 8005d22:	6902      	ldr	r2, [r0, #16]
 8005d24:	42b2      	cmp	r2, r6
 8005d26:	da00      	bge.n	8005d2a <PI_Controller+0x3a>
 8005d28:	0032      	movs	r2, r6
    /* WARNING: the below instruction is not MISRA compliant, user should verify
               that Cortex-M3 assembly instruction ASR (arithmetic shift right)
               is used by the compiler to perform the shifts (instead of LSR
               logical shift right)*/
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    wOutput_32 = (wProportional_Term >> pHandle->hKpDivisorPOW2) + (pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2);
 8005d2a:	0016      	movs	r6, r2
 8005d2c:	8b81      	ldrh	r1, [r0, #28]
 8005d2e:	410b      	asrs	r3, r1
 8005d30:	8bc1      	ldrh	r1, [r0, #30]
 8005d32:	410e      	asrs	r6, r1
 8005d34:	199b      	adds	r3, r3, r6
#else
    wOutput_32 = (wProportional_Term / (int32_t)pHandle->hKpDivisor)
              + (pHandle->wIntegralTerm / (int32_t)pHandle->hKiDivisor);
#endif

    if (wOutput_32 > hUpperOutputLimit)
 8005d36:	429d      	cmp	r5, r3
 8005d38:	da0b      	bge.n	8005d52 <PI_Controller+0x62>
    {
      wDischarge = hUpperOutputLimit - wOutput_32;
 8005d3a:	1ae9      	subs	r1, r5, r3
      wOutput_32 = hUpperOutputLimit;
 8005d3c:	002b      	movs	r3, r5
    else
    {
      /* Nothing to do here */
    }

    pHandle->wIntegralTerm += wDischarge;
 8005d3e:	1889      	adds	r1, r1, r2
 8005d40:	6081      	str	r1, [r0, #8]
    returnValue = (int16_t)wOutput_32;
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return (returnValue);
 8005d42:	b218      	sxth	r0, r3
}
 8005d44:	bd70      	pop	{r4, r5, r6, pc}
        if (pHandle->wIntegralTerm < 0)
 8005d46:	2a00      	cmp	r2, #0
 8005d48:	dae8      	bge.n	8005d1c <PI_Controller+0x2c>
          if (wIntegral_Term < 0)
 8005d4a:	2900      	cmp	r1, #0
 8005d4c:	dae6      	bge.n	8005d1c <PI_Controller+0x2c>
            wIntegral_sum_temp = -INT32_MAX;
 8005d4e:	4e05      	ldr	r6, [pc, #20]	; (8005d64 <PI_Controller+0x74>)
 8005d50:	e7e4      	b.n	8005d1c <PI_Controller+0x2c>
    int32_t wDischarge = 0;
 8005d52:	2100      	movs	r1, #0
    else if (wOutput_32 < hLowerOutputLimit)
 8005d54:	429c      	cmp	r4, r3
 8005d56:	ddf2      	ble.n	8005d3e <PI_Controller+0x4e>
      wDischarge = hLowerOutputLimit - wOutput_32;
 8005d58:	1ae1      	subs	r1, r4, r3
      wOutput_32 = hLowerOutputLimit;
 8005d5a:	0023      	movs	r3, r4
 8005d5c:	e7ef      	b.n	8005d3e <PI_Controller+0x4e>
 8005d5e:	46c0      	nop			; (mov r8, r8)
 8005d60:	7fffffff 	.word	0x7fffffff
 8005d64:	80000001 	.word	0x80000001

08005d68 <PQD_CalcElMotorPower>:
  * computed as an int16_t value.
  * 
  * @param pHandle Handle on the related PQD Motor Power Measurement component instance.
  */
__weak void PQD_CalcElMotorPower(PQD_MotorPowMeas_Handle_t *pHandle)
{
 8005d68:	b510      	push	{r4, lr}
  }
  else
  {
#endif
    int32_t wAux;
    qd_t Iqd = pHandle->pFOCVars->Iqd;
 8005d6a:	6883      	ldr	r3, [r0, #8]
    qd_t Vqd = pHandle->pFOCVars->Vqd;

    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
 8005d6c:	210c      	movs	r1, #12
 8005d6e:	5e5a      	ldrsh	r2, [r3, r1]
 8005d70:	2416      	movs	r4, #22
 8005d72:	5f19      	ldrsh	r1, [r3, r4]
 8005d74:	4351      	muls	r1, r2
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 8005d76:	240e      	movs	r4, #14
 8005d78:	5f1a      	ldrsh	r2, [r3, r4]
 8005d7a:	2418      	movs	r4, #24
 8005d7c:	5f1b      	ldrsh	r3, [r3, r4]
    wAux /= 65536;

    /* pHandle->hAvrgElMotorPower += (wAux - pHandle->hAvrgElMotorPower) >> 4 */
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 8005d7e:	240f      	movs	r4, #15
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 8005d80:	4353      	muls	r3, r2
    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
 8005d82:	18c9      	adds	r1, r1, r3
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 8005d84:	2300      	movs	r3, #0
 8005d86:	5ec2      	ldrsh	r2, [r0, r3]
    wAux /= 65536;
 8005d88:	17cb      	asrs	r3, r1, #31
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	185b      	adds	r3, r3, r1
 8005d8e:	141b      	asrs	r3, r3, #16
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 8005d90:	1a9b      	subs	r3, r3, r2
 8005d92:	17d9      	asrs	r1, r3, #31
 8005d94:	4021      	ands	r1, r4
 8005d96:	18cb      	adds	r3, r1, r3
 8005d98:	111b      	asrs	r3, r3, #4
 8005d9a:	189b      	adds	r3, r3, r2
 8005d9c:	8003      	strh	r3, [r0, #0]

#ifdef NULL_PTR_CHECK_PQD_MOT_POW_MEAS
  }
#endif
}
 8005d9e:	bd10      	pop	{r4, pc}

08005da0 <PQD_Clear>:
    /* nothing to do */
  }
  else
  {
#endif
    pHandle->hAvrgElMotorPower = 0;
 8005da0:	2300      	movs	r3, #0
 8005da2:	8003      	strh	r3, [r0, #0]
#ifdef NULL_PTR_CHECK_MOT_POW_MES
  }
#endif
}
 8005da4:	4770      	bx	lr

08005da6 <PQD_GetAvrgElMotorPowerW>:
  * 
  * @param pHandle pointer on the related component instance.
  * @retval float_t The average measured motor power expressed in Watts.
  */
__weak float_t PQD_GetAvrgElMotorPowerW(const PQD_MotorPowMeas_Handle_t *pHandle)
{
 8005da6:	b570      	push	{r4, r5, r6, lr}
 8005da8:	0004      	movs	r4, r0
  else
  {
#endif

  /* First perform an integer multiplication, then a float one. */
  PowerW = ((float_t)pHandle->hAvrgElMotorPower * (float_t)VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 8005daa:	2300      	movs	r3, #0
 8005dac:	5ec0      	ldrsh	r0, [r0, r3]
 8005dae:	f7fa fc83 	bl	80006b8 <__aeabi_i2f>
 8005db2:	1c05      	adds	r5, r0, #0
 8005db4:	68e0      	ldr	r0, [r4, #12]
 8005db6:	f7ff ff2b 	bl	8005c10 <VBS_GetAvBusVoltage_V>
 8005dba:	f7fa fccf 	bl	800075c <__aeabi_ui2f>
 8005dbe:	1c29      	adds	r1, r5, #0
 8005dc0:	f7fa fb2c 	bl	800041c <__aeabi_fmul>
 8005dc4:	6861      	ldr	r1, [r4, #4]
 8005dc6:	f7fa fb29 	bl	800041c <__aeabi_fmul>

#ifdef NULL_PTR_CHECK_PQD_MOT_POW_MEAS
  }
#endif
  return (PowerW);
}
 8005dca:	bd70      	pop	{r4, r5, r6, pc}

08005dcc <waitForPolarizationEnd>:
  * @param  repCnt Repetition counter value.
  * @param  cnt Polarization counter value.
  */
//cstat !MISRAC2012-Rule-8.13
__weak void waitForPolarizationEnd(TIM_TypeDef *TIMx, uint16_t  *SWerror, uint8_t repCnt, volatile uint8_t *cnt)
{
 8005dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dce:	2503      	movs	r5, #3
  {
#endif
    uint16_t hCalibrationPeriodCounter;
    uint16_t hMaxPeriodsNumber;

    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 8005dd0:	3201      	adds	r2, #1
 8005dd2:	0854      	lsrs	r4, r2, #1
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8005dd4:	2702      	movs	r7, #2

    /* Wait for NB_CONVERSIONS to be executed */
    LL_TIM_ClearFlag_CC1(TIMx);
    hCalibrationPeriodCounter = 0u;
 8005dd6:	2200      	movs	r2, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8005dd8:	426d      	negs	r5, r5
    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 8005dda:	0164      	lsls	r4, r4, #5
 8005ddc:	6105      	str	r5, [r0, #16]
    while (*cnt < NB_CONVERSIONS)
 8005dde:	781e      	ldrb	r6, [r3, #0]
 8005de0:	2e0f      	cmp	r6, #15
 8005de2:	d80c      	bhi.n	8005dfe <waitForPolarizationEnd+0x32>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8005de4:	6906      	ldr	r6, [r0, #16]
 8005de6:	423e      	tst	r6, r7
 8005de8:	d0f9      	beq.n	8005dde <waitForPolarizationEnd+0x12>
    {
      if ((uint32_t)ERROR == LL_TIM_IsActiveFlag_CC1(TIMx))
      {
        LL_TIM_ClearFlag_CC1(TIMx);
        hCalibrationPeriodCounter++;
 8005dea:	3201      	adds	r2, #1
 8005dec:	b292      	uxth	r2, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8005dee:	6105      	str	r5, [r0, #16]
        if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 8005df0:	4294      	cmp	r4, r2
 8005df2:	d8f4      	bhi.n	8005dde <waitForPolarizationEnd+0x12>
        {
          if (*cnt < NB_CONVERSIONS)
 8005df4:	781e      	ldrb	r6, [r3, #0]
 8005df6:	2e0f      	cmp	r6, #15
 8005df8:	d8f1      	bhi.n	8005dde <waitForPolarizationEnd+0x12>
          {
            *SWerror = 1u;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	800b      	strh	r3, [r1, #0]
      }
    }
#ifdef NULL_PTR_CHECK_POW_COM
  }
#endif
  }
 8005dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005e00 <RVBS_Clear>:
  {
#endif
    uint16_t aux;
    uint16_t index;

    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 8005e00:	8a42      	ldrh	r2, [r0, #18]
 8005e02:	8983      	ldrh	r3, [r0, #12]
{
 8005e04:	b510      	push	{r4, lr}
    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 8005e06:	189b      	adds	r3, r3, r2
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8005e08:	2200      	movs	r2, #0
    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 8005e0a:	085b      	lsrs	r3, r3, #1
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8005e0c:	8941      	ldrh	r1, [r0, #10]
 8005e0e:	4291      	cmp	r1, r2
 8005e10:	d804      	bhi.n	8005e1c <RVBS_Clear+0x1c>
    {
      pHandle->aBuffer[index] = aux;
    }
    pHandle->_Super.LatestConv = aux;
 8005e12:	8083      	strh	r3, [r0, #4]
    pHandle->_Super.AvBusVoltage_d = aux;
 8005e14:	80c3      	strh	r3, [r0, #6]
    pHandle->index = 0U;
 8005e16:	2300      	movs	r3, #0
 8005e18:	7643      	strb	r3, [r0, #25]
#ifdef NULL_PTR_CHECK_RDIV_BUS_VLT_SNS
  }
#endif
}
 8005e1a:	bd10      	pop	{r4, pc}
      pHandle->aBuffer[index] = aux;
 8005e1c:	6941      	ldr	r1, [r0, #20]
 8005e1e:	0054      	lsls	r4, r2, #1
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8005e20:	3201      	adds	r2, #1
      pHandle->aBuffer[index] = aux;
 8005e22:	5263      	strh	r3, [r4, r1]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8005e24:	b292      	uxth	r2, r2
 8005e26:	e7f1      	b.n	8005e0c <RVBS_Clear+0xc>

08005e28 <RVBS_Init>:
{
 8005e28:	b510      	push	{r4, lr}
    RVBS_Clear(pHandle);
 8005e2a:	f7ff ffe9 	bl	8005e00 <RVBS_Clear>
}
 8005e2e:	bd10      	pop	{r4, pc}

08005e30 <RVBS_CheckFaultState>:
  *         bus voltage and protection threshold values
  * @param  pHandle related RDivider_Handle_t
  * @retval uint16_t Fault code error
  */
__weak uint16_t RVBS_CheckFaultState(RDivider_Handle_t *pHandle)
{
 8005e30:	b530      	push	{r4, r5, lr}
  }
  else
  {
#endif
	/* If both thresholds are equal, single threshold feature is used */
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 8005e32:	8981      	ldrh	r1, [r0, #12]
 8005e34:	89c5      	ldrh	r5, [r0, #14]
{
 8005e36:	0003      	movs	r3, r0
	{
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8005e38:	88c2      	ldrh	r2, [r0, #6]
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 8005e3a:	42a9      	cmp	r1, r5
 8005e3c:	d108      	bne.n	8005e50 <RVBS_CheckFaultState+0x20>
      {
        fault = MC_OVER_VOLT;
 8005e3e:	2002      	movs	r0, #2
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8005e40:	4291      	cmp	r1, r2
 8005e42:	d304      	bcc.n	8005e4e <RVBS_CheckFaultState+0x1e>
      }
      else if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 8005e44:	8a5b      	ldrh	r3, [r3, #18]
 8005e46:	429a      	cmp	r2, r3
 8005e48:	4192      	sbcs	r2, r2
 8005e4a:	4252      	negs	r2, r2
 8005e4c:	0090      	lsls	r0, r2, #2
    }
#ifdef NULL_PTR_CHECK_RDIV_BUS_VLT_SNS
  }
#endif
  return (fault);
}
 8005e4e:	bd30      	pop	{r4, r5, pc}
      if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 8005e50:	8a44      	ldrh	r4, [r0, #18]
        fault = MC_UNDER_VOLT;
 8005e52:	2004      	movs	r0, #4
      if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 8005e54:	4294      	cmp	r4, r2
 8005e56:	d8fa      	bhi.n	8005e4e <RVBS_CheckFaultState+0x1e>
      else if ( false == pHandle->OverVoltageHysteresisUpDir )
 8005e58:	7c1c      	ldrb	r4, [r3, #16]
 8005e5a:	2c00      	cmp	r4, #0
 8005e5c:	d106      	bne.n	8005e6c <RVBS_CheckFaultState+0x3c>
        fault = MC_OVER_VOLT;
 8005e5e:	3802      	subs	r0, #2
        if (pHandle->_Super.AvBusVoltage_d < pHandle->OverVoltageThresholdLow)
 8005e60:	4295      	cmp	r5, r2
 8005e62:	d9f4      	bls.n	8005e4e <RVBS_CheckFaultState+0x1e>
          pHandle->OverVoltageHysteresisUpDir = true;
 8005e64:	2201      	movs	r2, #1
          fault = MC_NO_ERROR;
 8005e66:	0020      	movs	r0, r4
          pHandle->OverVoltageHysteresisUpDir = true;
 8005e68:	741a      	strb	r2, [r3, #16]
          fault = MC_NO_ERROR;
 8005e6a:	e7f0      	b.n	8005e4e <RVBS_CheckFaultState+0x1e>
        if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8005e6c:	2000      	movs	r0, #0
 8005e6e:	4291      	cmp	r1, r2
 8005e70:	d2ed      	bcs.n	8005e4e <RVBS_CheckFaultState+0x1e>
          pHandle->OverVoltageHysteresisUpDir = false;
 8005e72:	7418      	strb	r0, [r3, #16]
          fault = MC_OVER_VOLT;
 8005e74:	3002      	adds	r0, #2
 8005e76:	e7ea      	b.n	8005e4e <RVBS_CheckFaultState+0x1e>

08005e78 <RVBS_CalcAvVbus>:
{
 8005e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (0xFFFFU == hAux)
 8005e7a:	4b13      	ldr	r3, [pc, #76]	; (8005ec8 <RVBS_CalcAvVbus+0x50>)
{
 8005e7c:	0004      	movs	r4, r0
 8005e7e:	000f      	movs	r7, r1
    if (0xFFFFU == hAux)
 8005e80:	4299      	cmp	r1, r3
 8005e82:	d014      	beq.n	8005eae <RVBS_CalcAvVbus+0x36>
      pHandle->aBuffer[pHandle->index] = hAux;
 8005e84:	7e45      	ldrb	r5, [r0, #25]
 8005e86:	6943      	ldr	r3, [r0, #20]
 8005e88:	006a      	lsls	r2, r5, #1
 8005e8a:	52d1      	strh	r1, [r2, r3]
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8005e8c:	8946      	ldrh	r6, [r0, #10]
      wtemp = 0u;
 8005e8e:	2000      	movs	r0, #0
 8005e90:	b2f2      	uxtb	r2, r6
 8005e92:	0052      	lsls	r2, r2, #1
 8005e94:	189a      	adds	r2, r3, r2
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d10e      	bne.n	8005eb8 <RVBS_CalcAvVbus+0x40>
      wtemp /= pHandle->LowPassFilterBW;
 8005e9a:	0031      	movs	r1, r6
 8005e9c:	f7fa f948 	bl	8000130 <__udivsi3>
      if ((uint16_t)pHandle->index < (pHandle->LowPassFilterBW - 1U))
 8005ea0:	3e01      	subs	r6, #1
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 8005ea2:	80e0      	strh	r0, [r4, #6]
      pHandle->_Super.LatestConv = hAux;
 8005ea4:	80a7      	strh	r7, [r4, #4]
      if ((uint16_t)pHandle->index < (pHandle->LowPassFilterBW - 1U))
 8005ea6:	42b5      	cmp	r5, r6
 8005ea8:	d20a      	bcs.n	8005ec0 <RVBS_CalcAvVbus+0x48>
        pHandle->index++;
 8005eaa:	3501      	adds	r5, #1
 8005eac:	7665      	strb	r5, [r4, #25]
    pHandle->_Super.FaultState = RVBS_CheckFaultState(pHandle);
 8005eae:	0020      	movs	r0, r4
 8005eb0:	f7ff ffbe 	bl	8005e30 <RVBS_CheckFaultState>
 8005eb4:	8120      	strh	r0, [r4, #8]
}
 8005eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        wtemp += pHandle->aBuffer[i];
 8005eb8:	8819      	ldrh	r1, [r3, #0]
 8005eba:	3302      	adds	r3, #2
 8005ebc:	1840      	adds	r0, r0, r1
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8005ebe:	e7ea      	b.n	8005e96 <RVBS_CalcAvVbus+0x1e>
        pHandle->index = 0U;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	7663      	strb	r3, [r4, #25]
 8005ec4:	e7f3      	b.n	8005eae <RVBS_CalcAvVbus+0x36>
 8005ec6:	46c0      	nop			; (mov r8, r8)
 8005ec8:	0000ffff 	.word	0x0000ffff

08005ecc <REMNG_Init>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->Ext = 0;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	6083      	str	r3, [r0, #8]
    pHandle->TargetFinal = 0;
 8005ed0:	6043      	str	r3, [r0, #4]
    pHandle->RampRemainingStep = 0U;
 8005ed2:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 8005ed4:	6103      	str	r3, [r0, #16]
    pHandle->ScalingFactor = 1U;
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	6143      	str	r3, [r0, #20]
#ifdef NULL_PTR_CHECK_RMP_EXT_MNG
  }
#endif
}
 8005eda:	4770      	bx	lr

08005edc <SPD_GetElAngle>:
__weak int16_t SPD_GetElAngle(const SpeednPosFdbk_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hElAngle);
#else
  return (pHandle->hElAngle);
 8005edc:	2304      	movs	r3, #4
 8005ede:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 8005ee0:	4770      	bx	lr

08005ee2 <SPD_GetAvrgMecSpeedUnit>:
__weak int16_t SPD_GetAvrgMecSpeedUnit(const SpeednPosFdbk_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hAvrMecSpeedUnit);
#else
  return (pHandle->hAvrMecSpeedUnit);
 8005ee2:	230c      	movs	r3, #12
 8005ee4:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 8005ee6:	4770      	bx	lr

08005ee8 <SPD_GetInstElSpeedDpp>:
__weak int16_t SPD_GetInstElSpeedDpp(const SpeednPosFdbk_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->InstantaneousElSpeedDpp);
#else
  return (pHandle->InstantaneousElSpeedDpp);
 8005ee8:	2310      	movs	r3, #16
 8005eea:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 8005eec:	4770      	bx	lr

08005eee <SPD_IsMecSpeedReliable>:
  * - Called at least with the same periodicity on which speed control is executed.
  *         -

  */
__weak bool SPD_IsMecSpeedReliable(SpeednPosFdbk_Handle_t *pHandle, const int16_t *pMecSpeedUnit)
{
 8005eee:	b570      	push	{r4, r5, r6, lr}
    bool SpeedError = false;

    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

    /* Compute absoulte value of mechanical speed */
    if (*pMecSpeedUnit < 0)
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	5e89      	ldrsh	r1, [r1, r2]
    uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 8005ef4:	78c4      	ldrb	r4, [r0, #3]
    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 8005ef6:	7803      	ldrb	r3, [r0, #0]
    {
      hAux = -(*pMecSpeedUnit);
 8005ef8:	b28a      	uxth	r2, r1
    if (*pMecSpeedUnit < 0)
 8005efa:	2900      	cmp	r1, #0
 8005efc:	da01      	bge.n	8005f02 <SPD_IsMecSpeedReliable+0x14>
      hAux = -(*pMecSpeedUnit);
 8005efe:	4252      	negs	r2, r2
 8005f00:	b292      	uxth	r2, r2
    else
    {
      /* Nothing to do */
    }

    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 8005f02:	8ac6      	ldrh	r6, [r0, #22]
    {
      SpeedError = true;
 8005f04:	2101      	movs	r1, #1
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 8005f06:	8a85      	ldrh	r5, [r0, #20]
    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 8005f08:	4296      	cmp	r6, r2
 8005f0a:	d802      	bhi.n	8005f12 <SPD_IsMecSpeedReliable+0x24>
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 8005f0c:	4295      	cmp	r5, r2
 8005f0e:	4192      	sbcs	r2, r2
 8005f10:	4251      	negs	r1, r2
    {
      /* Nothing to do */
    }

    /* Compute absoulte value of mechanical acceleration */
    if (pHandle->hMecAccelUnitP < 0)
 8005f12:	2212      	movs	r2, #18
 8005f14:	5e85      	ldrsh	r5, [r0, r2]
    {
      hAux = -(pHandle->hMecAccelUnitP);
 8005f16:	b2aa      	uxth	r2, r5
    if (pHandle->hMecAccelUnitP < 0)
 8005f18:	2d00      	cmp	r5, #0
 8005f1a:	da01      	bge.n	8005f20 <SPD_IsMecSpeedReliable+0x32>
      hAux = -(pHandle->hMecAccelUnitP);
 8005f1c:	4252      	negs	r2, r2
 8005f1e:	b292      	uxth	r2, r2
    else
    {
      hAbsMecAccelUnitP = (uint16_t)pHandle->hMecAccelUnitP;
    }

    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 8005f20:	8b05      	ldrh	r5, [r0, #24]
 8005f22:	4295      	cmp	r5, r2
 8005f24:	d301      	bcc.n	8005f2a <SPD_IsMecSpeedReliable+0x3c>
    else
    {
      /* Nothing to do */
    }

    if (true == SpeedError)
 8005f26:	2900      	cmp	r1, #0
 8005f28:	d009      	beq.n	8005f3e <SPD_IsMecSpeedReliable+0x50>
    {
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 8005f2a:	429c      	cmp	r4, r3
 8005f2c:	d901      	bls.n	8005f32 <SPD_IsMecSpeedReliable+0x44>
      {
        bSpeedErrorNumber++;
 8005f2e:	3301      	adds	r3, #1
 8005f30:	b2db      	uxtb	r3, r3
    else
    {
      /* Nothing to do */
    }

    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8005f32:	7003      	strb	r3, [r0, #0]
    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
 8005f34:	1b18      	subs	r0, r3, r4
 8005f36:	1e42      	subs	r2, r0, #1
 8005f38:	4190      	sbcs	r0, r2
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  }
#endif
  return (SpeedSensorReliability);
 8005f3a:	b2c0      	uxtb	r0, r0
}
 8005f3c:	bd70      	pop	{r4, r5, r6, pc}
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 8005f3e:	429c      	cmp	r4, r3
 8005f40:	d9f7      	bls.n	8005f32 <SPD_IsMecSpeedReliable+0x44>
        bSpeedErrorNumber = 0u;
 8005f42:	000b      	movs	r3, r1
 8005f44:	e7f5      	b.n	8005f32 <SPD_IsMecSpeedReliable+0x44>

08005f46 <STC_Init>:
  else
  {
#endif
    pHandle->PISpeed = pPI;
    pHandle->SPD = SPD_Handle;
    pHandle->Mode = pHandle->ModeDefault;
 8005f46:	0003      	movs	r3, r0
    pHandle->SPD = SPD_Handle;
 8005f48:	6142      	str	r2, [r0, #20]
    pHandle->PISpeed = pPI;
 8005f4a:	6101      	str	r1, [r0, #16]
    pHandle->Mode = pHandle->ModeDefault;
 8005f4c:	332a      	adds	r3, #42	; 0x2a
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	7003      	strb	r3, [r0, #0]
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 8005f52:	222c      	movs	r2, #44	; 0x2c
 8005f54:	5e83      	ldrsh	r3, [r0, r2]
 8005f56:	041b      	lsls	r3, r3, #16
 8005f58:	6043      	str	r3, [r0, #4]
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 8005f5a:	222e      	movs	r2, #46	; 0x2e
 8005f5c:	5e83      	ldrsh	r3, [r0, r2]
 8005f5e:	041b      	lsls	r3, r3, #16
 8005f60:	6083      	str	r3, [r0, #8]
    pHandle->TargetFinal = 0;
 8005f62:	2300      	movs	r3, #0
 8005f64:	8043      	strh	r3, [r0, #2]
    pHandle->RampRemainingStep = 0U;
 8005f66:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 8005f68:	6183      	str	r3, [r0, #24]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8005f6a:	4770      	bx	lr

08005f6c <STC_GetSpeedSensor>:
__weak SpeednPosFdbk_Handle_t *STC_GetSpeedSensor(SpeednTorqCtrl_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  return ((MC_NULL ==  pHandle) ? MC_NULL : pHandle->SPD);
#else
  return (pHandle->SPD);
 8005f6c:	6940      	ldr	r0, [r0, #20]
#endif
}
 8005f6e:	4770      	bx	lr

08005f70 <STC_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (MCM_SPEED_MODE == pHandle->Mode)
 8005f70:	7803      	ldrb	r3, [r0, #0]
{
 8005f72:	b510      	push	{r4, lr}
    if (MCM_SPEED_MODE == pHandle->Mode)
 8005f74:	2b03      	cmp	r3, #3
 8005f76:	d103      	bne.n	8005f80 <STC_Clear+0x10>
    {
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
 8005f78:	2100      	movs	r1, #0
 8005f7a:	6900      	ldr	r0, [r0, #16]
 8005f7c:	f7ff feb1 	bl	8005ce2 <PID_SetIntegralTerm>
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8005f80:	bd10      	pop	{r4, pc}

08005f82 <STC_GetMecSpeedRefUnit>:
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->SpeedRefUnitExt >> 16));
#else
  return ((int16_t)(pHandle->SpeedRefUnitExt >> 16));
 8005f82:	6840      	ldr	r0, [r0, #4]
 8005f84:	1400      	asrs	r0, r0, #16
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->SpeedRefUnitExt / 65536));
#else
  return ((int16_t)(pHandle->SpeedRefUnitExt / 65536));
#endif
#endif
}
 8005f86:	4770      	bx	lr

08005f88 <STC_GetTorqueRef>:
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->TorqueRef >> 16));
#else
  return ((int16_t)(pHandle->TorqueRef >> 16));
 8005f88:	6880      	ldr	r0, [r0, #8]
 8005f8a:	1400      	asrs	r0, r0, #16
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->TorqueRef / 65536));
#else
  return ((int16_t)(pHandle->TorqueRef / 65536));
#endif
#endif
}
 8005f8c:	4770      	bx	lr

08005f8e <STC_SetControlMode>:
  }
  else
  {
#endif
    pHandle->Mode = bMode;
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp */
 8005f8e:	2300      	movs	r3, #0
    pHandle->Mode = bMode;
 8005f90:	7001      	strb	r1, [r0, #0]
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp */
 8005f92:	60c3      	str	r3, [r0, #12]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8005f94:	4770      	bx	lr

08005f96 <STC_ExecRamp>:
  * @ref EncAlignCtrl "Encoder Alignment Control",
  * @ref PositionControl "Position Control" loop or
  * speed regulation with @ref SpeedRegulatorPotentiometer Speed potentiometer.
  */
__weak bool STC_ExecRamp(SpeednTorqCtrl_Handle_t *pHandle, int16_t hTargetFinal, uint32_t hDurationms)
{
 8005f96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t wAux;
    int32_t wAux1;
    int16_t hCurrentReference;

    /* Check if the hTargetFinal is out of the bound of application */
    if (MCM_TORQUE_MODE == pHandle->Mode)
 8005f98:	7803      	ldrb	r3, [r0, #0]
{
 8005f9a:	0004      	movs	r4, r0
 8005f9c:	000d      	movs	r5, r1
 8005f9e:	0017      	movs	r7, r2
    if (MCM_TORQUE_MODE == pHandle->Mode)
 8005fa0:	2b04      	cmp	r3, #4
 8005fa2:	d109      	bne.n	8005fb8 <STC_ExecRamp+0x22>
    {
      hCurrentReference = STC_GetTorqueRef(pHandle);
 8005fa4:	f7ff fff0 	bl	8005f88 <STC_GetTorqueRef>
      }
      else
      {
        /* Nothing to do */
      }
      if ((int32_t)hTargetFinal < (int32_t)pHandle->MinNegativeTorque)
 8005fa8:	2128      	movs	r1, #40	; 0x28
 8005faa:	5e62      	ldrsh	r2, [r4, r1]
      hCurrentReference = STC_GetTorqueRef(pHandle);
 8005fac:	0006      	movs	r6, r0
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxPositiveTorque)
 8005fae:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
      if ((int32_t)hTargetFinal < (int32_t)pHandle->MinNegativeTorque)
 8005fb0:	42aa      	cmp	r2, r5
 8005fb2:	dd0f      	ble.n	8005fd4 <STC_ExecRamp+0x3e>
      {
        allowedRange = false;
 8005fb4:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (allowedRange);
}
 8005fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
 8005fb8:	6846      	ldr	r6, [r0, #4]
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 8005fba:	8bc3      	ldrh	r3, [r0, #30]
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
 8005fbc:	1436      	asrs	r6, r6, #16
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 8005fbe:	428b      	cmp	r3, r1
 8005fc0:	dbf8      	blt.n	8005fb4 <STC_ExecRamp+0x1e>
      else if (hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit)
 8005fc2:	2224      	movs	r2, #36	; 0x24
 8005fc4:	5e83      	ldrsh	r3, [r0, r2]
 8005fc6:	428b      	cmp	r3, r1
 8005fc8:	dcf4      	bgt.n	8005fb4 <STC_ExecRamp+0x1e>
      else if ((int32_t)hTargetFinal < (int32_t)pHandle->MinAppPositiveMecSpeedUnit)
 8005fca:	8c03      	ldrh	r3, [r0, #32]
 8005fcc:	428b      	cmp	r3, r1
 8005fce:	dd03      	ble.n	8005fd8 <STC_ExecRamp+0x42>
        if (hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit)
 8005fd0:	2222      	movs	r2, #34	; 0x22
 8005fd2:	5e83      	ldrsh	r3, [r0, r2]
    if (true == allowedRange)
 8005fd4:	42ab      	cmp	r3, r5
 8005fd6:	dbed      	blt.n	8005fb4 <STC_ExecRamp+0x1e>
      if (0U == hDurationms)
 8005fd8:	2f00      	cmp	r7, #0
 8005fda:	d10b      	bne.n	8005ff4 <STC_ExecRamp+0x5e>
        if (MCM_SPEED_MODE == pHandle->Mode)
 8005fdc:	7823      	ldrb	r3, [r4, #0]
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 8005fde:	042d      	lsls	r5, r5, #16
        if (MCM_SPEED_MODE == pHandle->Mode)
 8005fe0:	2b03      	cmp	r3, #3
 8005fe2:	d105      	bne.n	8005ff0 <STC_ExecRamp+0x5a>
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 8005fe4:	6065      	str	r5, [r4, #4]
        pHandle->RampRemainingStep = 0U;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	60e3      	str	r3, [r4, #12]
        pHandle->IncDecAmount = 0;
 8005fea:	61a3      	str	r3, [r4, #24]
        pHandle->IncDecAmount = wAux1;
 8005fec:	2001      	movs	r0, #1
 8005fee:	e7e2      	b.n	8005fb6 <STC_ExecRamp+0x20>
          pHandle->TorqueRef = ((int32_t)hTargetFinal) * 65536;
 8005ff0:	60a5      	str	r5, [r4, #8]
 8005ff2:	e7f8      	b.n	8005fe6 <STC_ExecRamp+0x50>
        wAux /= 1000U;
 8005ff4:	21fa      	movs	r1, #250	; 0xfa
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 8005ff6:	8ba0      	ldrh	r0, [r4, #28]
        pHandle->TargetFinal = hTargetFinal;
 8005ff8:	8065      	strh	r5, [r4, #2]
        wAux /= 1000U;
 8005ffa:	0089      	lsls	r1, r1, #2
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 8005ffc:	4378      	muls	r0, r7
        wAux /= 1000U;
 8005ffe:	f7fa f897 	bl	8000130 <__udivsi3>
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 8006002:	1bad      	subs	r5, r5, r6
        pHandle->RampRemainingStep++;
 8006004:	1c41      	adds	r1, r0, #1
 8006006:	60e1      	str	r1, [r4, #12]
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 8006008:	0428      	lsls	r0, r5, #16
        wAux1 /= ((int32_t)pHandle->RampRemainingStep);
 800600a:	f7fa f91b 	bl	8000244 <__divsi3>
        pHandle->IncDecAmount = wAux1;
 800600e:	61a0      	str	r0, [r4, #24]
 8006010:	e7ec      	b.n	8005fec <STC_ExecRamp+0x56>

08006012 <STC_StopRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->RampRemainingStep = 0U;
 8006012:	2300      	movs	r3, #0
 8006014:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 8006016:	6183      	str	r3, [r0, #24]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8006018:	4770      	bx	lr

0800601a <STC_CalcTorqueReference>:
    int32_t wCurrentReference;
    int16_t hMeasuredSpeed;
    int16_t hTargetSpeed;
    int16_t hError;

    if (MCM_TORQUE_MODE == pHandle->Mode)
 800601a:	7802      	ldrb	r2, [r0, #0]
{
 800601c:	b570      	push	{r4, r5, r6, lr}
 800601e:	0004      	movs	r4, r0
    if (MCM_TORQUE_MODE == pHandle->Mode)
 8006020:	2a04      	cmp	r2, #4
 8006022:	d116      	bne.n	8006052 <STC_CalcTorqueReference+0x38>
    {
      wCurrentReference = pHandle->TorqueRef;
 8006024:	6885      	ldr	r5, [r0, #8]
      wCurrentReference = pHandle->SpeedRefUnitExt;
    }

    /* Update the speed reference or the torque reference according to the mode
       and terminates the ramp if needed */
    if (pHandle->RampRemainingStep > 1U)
 8006026:	68e3      	ldr	r3, [r4, #12]
 8006028:	2b01      	cmp	r3, #1
 800602a:	d914      	bls.n	8006056 <STC_CalcTorqueReference+0x3c>
    {
      /* Increment/decrement the reference value */
      wCurrentReference += pHandle->IncDecAmount;
 800602c:	69a1      	ldr	r1, [r4, #24]

      /* Decrement the number of remaining steps */
      pHandle->RampRemainingStep--;
 800602e:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 8006030:	186d      	adds	r5, r5, r1
    }
    else if (1U == pHandle->RampRemainingStep)
    {
      /* Set the backup value of hTargetFinal */
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
      pHandle->RampRemainingStep = 0U;
 8006032:	60e3      	str	r3, [r4, #12]
      /* Run the speed control loop */

      /* Compute speed error */
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hTargetSpeed = (int16_t)(wCurrentReference >> 16);
 8006034:	142e      	asrs	r6, r5, #16
    if (MCM_SPEED_MODE == pHandle->Mode)
 8006036:	2a03      	cmp	r2, #3
 8006038:	d114      	bne.n	8006064 <STC_CalcTorqueReference+0x4a>
#else
      hTargetSpeed = (int16_t)(wCurrentReference / 65536);
#endif
      hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit(pHandle->SPD);
 800603a:	6960      	ldr	r0, [r4, #20]
 800603c:	f7ff ff51 	bl	8005ee2 <SPD_GetAvrgMecSpeedUnit>
      hError = hTargetSpeed - hMeasuredSpeed;
 8006040:	1a31      	subs	r1, r6, r0
      hTorqueReference = PI_Controller(pHandle->PISpeed, (int32_t)hError);
 8006042:	b209      	sxth	r1, r1
 8006044:	6920      	ldr	r0, [r4, #16]
 8006046:	f7ff fe53 	bl	8005cf0 <PI_Controller>

      pHandle->SpeedRefUnitExt = wCurrentReference;
 800604a:	6065      	str	r5, [r4, #4]
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 800604c:	0405      	lsls	r5, r0, #16
 800604e:	60a5      	str	r5, [r4, #8]
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (hTorqueReference);
}
 8006050:	bd70      	pop	{r4, r5, r6, pc}
      wCurrentReference = pHandle->SpeedRefUnitExt;
 8006052:	6845      	ldr	r5, [r0, #4]
 8006054:	e7e7      	b.n	8006026 <STC_CalcTorqueReference+0xc>
    else if (1U == pHandle->RampRemainingStep)
 8006056:	2b01      	cmp	r3, #1
 8006058:	d1ec      	bne.n	8006034 <STC_CalcTorqueReference+0x1a>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 800605a:	2302      	movs	r3, #2
 800605c:	5ee5      	ldrsh	r5, [r4, r3]
      pHandle->RampRemainingStep = 0U;
 800605e:	2300      	movs	r3, #0
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8006060:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep = 0U;
 8006062:	e7e6      	b.n	8006032 <STC_CalcTorqueReference+0x18>
      hTorqueReference = (int16_t)(wCurrentReference >> 16);
 8006064:	b230      	sxth	r0, r6
 8006066:	e7f2      	b.n	800604e <STC_CalcTorqueReference+0x34>

08006068 <STC_GetMecSpeedRefUnitDefault>:
__weak int16_t STC_GetMecSpeedRefUnitDefault(SpeednTorqCtrl_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  return ((MC_NULL == pHandle) ? 0 : pHandle->MecSpeedRefUnitDefault);
#else
  return (pHandle->MecSpeedRefUnitDefault);
 8006068:	232c      	movs	r3, #44	; 0x2c
 800606a:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 800606c:	4770      	bx	lr

0800606e <STC_GetDefaultIqdref>:
    IqdRefDefault.q = pHandle->TorqueRefDefault;
    IqdRefDefault.d = pHandle->IdrefDefault;
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (IqdRefDefault);
 800606e:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 8006070:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8006072:	0412      	lsls	r2, r2, #16
 8006074:	b298      	uxth	r0, r3
{
 8006076:	b082      	sub	sp, #8
  return (IqdRefDefault);
 8006078:	4310      	orrs	r0, r2
}
 800607a:	b002      	add	sp, #8
 800607c:	4770      	bx	lr

0800607e <STC_ForceSpeedReferenceToCurrentSpeed>:
  *
  * - Called during the CHARGE_BOOT_CAP, SWITCH_OVER and WAIT_STOP_MOTOR states of the MC state machine
  * into MediumFrequencyTask to initialize the speed reference.
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed(SpeednTorqCtrl_Handle_t *pHandle)
{
 800607e:	b510      	push	{r4, lr}
 8006080:	0004      	movs	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SpeedRefUnitExt = ((int32_t)SPD_GetAvrgMecSpeedUnit(pHandle->SPD)) * (int32_t)65536;
 8006082:	6940      	ldr	r0, [r0, #20]
 8006084:	f7ff ff2d 	bl	8005ee2 <SPD_GetAvrgMecSpeedUnit>
 8006088:	0400      	lsls	r0, r0, #16
 800608a:	6060      	str	r0, [r4, #4]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 800608c:	bd10      	pop	{r4, pc}

0800608e <memset>:
 800608e:	0003      	movs	r3, r0
 8006090:	1882      	adds	r2, r0, r2
 8006092:	4293      	cmp	r3, r2
 8006094:	d100      	bne.n	8006098 <memset+0xa>
 8006096:	4770      	bx	lr
 8006098:	7019      	strb	r1, [r3, #0]
 800609a:	3301      	adds	r3, #1
 800609c:	e7f9      	b.n	8006092 <memset+0x4>
	...

080060a0 <__libc_init_array>:
 80060a0:	b570      	push	{r4, r5, r6, lr}
 80060a2:	2600      	movs	r6, #0
 80060a4:	4c0c      	ldr	r4, [pc, #48]	; (80060d8 <__libc_init_array+0x38>)
 80060a6:	4d0d      	ldr	r5, [pc, #52]	; (80060dc <__libc_init_array+0x3c>)
 80060a8:	1b64      	subs	r4, r4, r5
 80060aa:	10a4      	asrs	r4, r4, #2
 80060ac:	42a6      	cmp	r6, r4
 80060ae:	d109      	bne.n	80060c4 <__libc_init_array+0x24>
 80060b0:	2600      	movs	r6, #0
 80060b2:	f000 f823 	bl	80060fc <_init>
 80060b6:	4c0a      	ldr	r4, [pc, #40]	; (80060e0 <__libc_init_array+0x40>)
 80060b8:	4d0a      	ldr	r5, [pc, #40]	; (80060e4 <__libc_init_array+0x44>)
 80060ba:	1b64      	subs	r4, r4, r5
 80060bc:	10a4      	asrs	r4, r4, #2
 80060be:	42a6      	cmp	r6, r4
 80060c0:	d105      	bne.n	80060ce <__libc_init_array+0x2e>
 80060c2:	bd70      	pop	{r4, r5, r6, pc}
 80060c4:	00b3      	lsls	r3, r6, #2
 80060c6:	58eb      	ldr	r3, [r5, r3]
 80060c8:	4798      	blx	r3
 80060ca:	3601      	adds	r6, #1
 80060cc:	e7ee      	b.n	80060ac <__libc_init_array+0xc>
 80060ce:	00b3      	lsls	r3, r6, #2
 80060d0:	58eb      	ldr	r3, [r5, r3]
 80060d2:	4798      	blx	r3
 80060d4:	3601      	adds	r6, #1
 80060d6:	e7f2      	b.n	80060be <__libc_init_array+0x1e>
 80060d8:	08006cd0 	.word	0x08006cd0
 80060dc:	08006cd0 	.word	0x08006cd0
 80060e0:	08006cd4 	.word	0x08006cd4
 80060e4:	08006cd0 	.word	0x08006cd0

080060e8 <memcpy>:
 80060e8:	2300      	movs	r3, #0
 80060ea:	b510      	push	{r4, lr}
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d100      	bne.n	80060f2 <memcpy+0xa>
 80060f0:	bd10      	pop	{r4, pc}
 80060f2:	5ccc      	ldrb	r4, [r1, r3]
 80060f4:	54c4      	strb	r4, [r0, r3]
 80060f6:	3301      	adds	r3, #1
 80060f8:	e7f8      	b.n	80060ec <memcpy+0x4>
	...

080060fc <_init>:
 80060fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060fe:	46c0      	nop			; (mov r8, r8)
 8006100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006102:	bc08      	pop	{r3}
 8006104:	469e      	mov	lr, r3
 8006106:	4770      	bx	lr

08006108 <_fini>:
 8006108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800610a:	46c0      	nop			; (mov r8, r8)
 800610c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800610e:	bc08      	pop	{r3}
 8006110:	469e      	mov	lr, r3
 8006112:	4770      	bx	lr
