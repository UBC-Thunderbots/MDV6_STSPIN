
MDV6 HALL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c80  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e4c  08005d40  08005d40  00006d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b8c  08006b8c  000083d4  2**0
                  CONTENTS
  4 .ARM          00000000  08006b8c  08006b8c  000083d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006b8c  08006b8c  000083d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b8c  08006b8c  00007b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b90  08006b90  00007b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003d4  20000000  08006b94  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  200003d4  08006f68  000083d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000480  200005a0  08006f68  000085a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000083d4  2**0
                  CONTENTS, READONLY
 12 .debug_line   0002bda1  00000000  00000000  000083fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 00000072  00000000  00000000  0003419d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00029725  00000000  00000000  0003420f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007107  00000000  00000000  0005d934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001190  00000000  00000000  00064a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00079192  00000000  00000000  00065bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000022f8  00000000  00000000  000ded62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 0000d56a  00000000  00000000  000e105a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0001a4bf  00000000  00000000  000ee5c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00108a83  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00002868  00000000  00000000  00108ac8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200003d4 	.word	0x200003d4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005d28 	.word	0x08005d28

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200003d8 	.word	0x200003d8
 8000104:	08005d28 	.word	0x08005d28

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <__aeabi_fmul>:
 80003f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003f6:	464f      	mov	r7, r9
 80003f8:	4646      	mov	r6, r8
 80003fa:	46d6      	mov	lr, sl
 80003fc:	0044      	lsls	r4, r0, #1
 80003fe:	b5c0      	push	{r6, r7, lr}
 8000400:	0246      	lsls	r6, r0, #9
 8000402:	1c0f      	adds	r7, r1, #0
 8000404:	0a76      	lsrs	r6, r6, #9
 8000406:	0e24      	lsrs	r4, r4, #24
 8000408:	0fc5      	lsrs	r5, r0, #31
 800040a:	2c00      	cmp	r4, #0
 800040c:	d100      	bne.n	8000410 <__aeabi_fmul+0x1c>
 800040e:	e0da      	b.n	80005c6 <__aeabi_fmul+0x1d2>
 8000410:	2cff      	cmp	r4, #255	@ 0xff
 8000412:	d074      	beq.n	80004fe <__aeabi_fmul+0x10a>
 8000414:	2380      	movs	r3, #128	@ 0x80
 8000416:	00f6      	lsls	r6, r6, #3
 8000418:	04db      	lsls	r3, r3, #19
 800041a:	431e      	orrs	r6, r3
 800041c:	2300      	movs	r3, #0
 800041e:	4699      	mov	r9, r3
 8000420:	469a      	mov	sl, r3
 8000422:	3c7f      	subs	r4, #127	@ 0x7f
 8000424:	027b      	lsls	r3, r7, #9
 8000426:	0a5b      	lsrs	r3, r3, #9
 8000428:	4698      	mov	r8, r3
 800042a:	007b      	lsls	r3, r7, #1
 800042c:	0e1b      	lsrs	r3, r3, #24
 800042e:	0fff      	lsrs	r7, r7, #31
 8000430:	2b00      	cmp	r3, #0
 8000432:	d074      	beq.n	800051e <__aeabi_fmul+0x12a>
 8000434:	2bff      	cmp	r3, #255	@ 0xff
 8000436:	d100      	bne.n	800043a <__aeabi_fmul+0x46>
 8000438:	e08e      	b.n	8000558 <__aeabi_fmul+0x164>
 800043a:	4642      	mov	r2, r8
 800043c:	2180      	movs	r1, #128	@ 0x80
 800043e:	00d2      	lsls	r2, r2, #3
 8000440:	04c9      	lsls	r1, r1, #19
 8000442:	4311      	orrs	r1, r2
 8000444:	3b7f      	subs	r3, #127	@ 0x7f
 8000446:	002a      	movs	r2, r5
 8000448:	18e4      	adds	r4, r4, r3
 800044a:	464b      	mov	r3, r9
 800044c:	407a      	eors	r2, r7
 800044e:	4688      	mov	r8, r1
 8000450:	b2d2      	uxtb	r2, r2
 8000452:	2b0a      	cmp	r3, #10
 8000454:	dc75      	bgt.n	8000542 <__aeabi_fmul+0x14e>
 8000456:	464b      	mov	r3, r9
 8000458:	2000      	movs	r0, #0
 800045a:	2b02      	cmp	r3, #2
 800045c:	dd0f      	ble.n	800047e <__aeabi_fmul+0x8a>
 800045e:	4649      	mov	r1, r9
 8000460:	2301      	movs	r3, #1
 8000462:	408b      	lsls	r3, r1
 8000464:	21a6      	movs	r1, #166	@ 0xa6
 8000466:	00c9      	lsls	r1, r1, #3
 8000468:	420b      	tst	r3, r1
 800046a:	d169      	bne.n	8000540 <__aeabi_fmul+0x14c>
 800046c:	2190      	movs	r1, #144	@ 0x90
 800046e:	0089      	lsls	r1, r1, #2
 8000470:	420b      	tst	r3, r1
 8000472:	d000      	beq.n	8000476 <__aeabi_fmul+0x82>
 8000474:	e100      	b.n	8000678 <__aeabi_fmul+0x284>
 8000476:	2188      	movs	r1, #136	@ 0x88
 8000478:	4219      	tst	r1, r3
 800047a:	d000      	beq.n	800047e <__aeabi_fmul+0x8a>
 800047c:	e0f5      	b.n	800066a <__aeabi_fmul+0x276>
 800047e:	4641      	mov	r1, r8
 8000480:	0409      	lsls	r1, r1, #16
 8000482:	0c09      	lsrs	r1, r1, #16
 8000484:	4643      	mov	r3, r8
 8000486:	0008      	movs	r0, r1
 8000488:	0c35      	lsrs	r5, r6, #16
 800048a:	0436      	lsls	r6, r6, #16
 800048c:	0c1b      	lsrs	r3, r3, #16
 800048e:	0c36      	lsrs	r6, r6, #16
 8000490:	4370      	muls	r0, r6
 8000492:	4369      	muls	r1, r5
 8000494:	435e      	muls	r6, r3
 8000496:	435d      	muls	r5, r3
 8000498:	1876      	adds	r6, r6, r1
 800049a:	0c03      	lsrs	r3, r0, #16
 800049c:	199b      	adds	r3, r3, r6
 800049e:	4299      	cmp	r1, r3
 80004a0:	d903      	bls.n	80004aa <__aeabi_fmul+0xb6>
 80004a2:	2180      	movs	r1, #128	@ 0x80
 80004a4:	0249      	lsls	r1, r1, #9
 80004a6:	468c      	mov	ip, r1
 80004a8:	4465      	add	r5, ip
 80004aa:	0400      	lsls	r0, r0, #16
 80004ac:	0419      	lsls	r1, r3, #16
 80004ae:	0c00      	lsrs	r0, r0, #16
 80004b0:	1809      	adds	r1, r1, r0
 80004b2:	018e      	lsls	r6, r1, #6
 80004b4:	1e70      	subs	r0, r6, #1
 80004b6:	4186      	sbcs	r6, r0
 80004b8:	0c1b      	lsrs	r3, r3, #16
 80004ba:	0e89      	lsrs	r1, r1, #26
 80004bc:	195b      	adds	r3, r3, r5
 80004be:	430e      	orrs	r6, r1
 80004c0:	019b      	lsls	r3, r3, #6
 80004c2:	431e      	orrs	r6, r3
 80004c4:	011b      	lsls	r3, r3, #4
 80004c6:	d46c      	bmi.n	80005a2 <__aeabi_fmul+0x1ae>
 80004c8:	0023      	movs	r3, r4
 80004ca:	337f      	adds	r3, #127	@ 0x7f
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	dc00      	bgt.n	80004d2 <__aeabi_fmul+0xde>
 80004d0:	e0b1      	b.n	8000636 <__aeabi_fmul+0x242>
 80004d2:	0015      	movs	r5, r2
 80004d4:	0771      	lsls	r1, r6, #29
 80004d6:	d00b      	beq.n	80004f0 <__aeabi_fmul+0xfc>
 80004d8:	200f      	movs	r0, #15
 80004da:	0021      	movs	r1, r4
 80004dc:	4030      	ands	r0, r6
 80004de:	2804      	cmp	r0, #4
 80004e0:	d006      	beq.n	80004f0 <__aeabi_fmul+0xfc>
 80004e2:	3604      	adds	r6, #4
 80004e4:	0132      	lsls	r2, r6, #4
 80004e6:	d503      	bpl.n	80004f0 <__aeabi_fmul+0xfc>
 80004e8:	4b6e      	ldr	r3, [pc, #440]	@ (80006a4 <__aeabi_fmul+0x2b0>)
 80004ea:	401e      	ands	r6, r3
 80004ec:	000b      	movs	r3, r1
 80004ee:	3380      	adds	r3, #128	@ 0x80
 80004f0:	2bfe      	cmp	r3, #254	@ 0xfe
 80004f2:	dd00      	ble.n	80004f6 <__aeabi_fmul+0x102>
 80004f4:	e0bd      	b.n	8000672 <__aeabi_fmul+0x27e>
 80004f6:	01b2      	lsls	r2, r6, #6
 80004f8:	0a52      	lsrs	r2, r2, #9
 80004fa:	b2db      	uxtb	r3, r3
 80004fc:	e048      	b.n	8000590 <__aeabi_fmul+0x19c>
 80004fe:	2e00      	cmp	r6, #0
 8000500:	d000      	beq.n	8000504 <__aeabi_fmul+0x110>
 8000502:	e092      	b.n	800062a <__aeabi_fmul+0x236>
 8000504:	2308      	movs	r3, #8
 8000506:	4699      	mov	r9, r3
 8000508:	3b06      	subs	r3, #6
 800050a:	469a      	mov	sl, r3
 800050c:	027b      	lsls	r3, r7, #9
 800050e:	0a5b      	lsrs	r3, r3, #9
 8000510:	4698      	mov	r8, r3
 8000512:	007b      	lsls	r3, r7, #1
 8000514:	24ff      	movs	r4, #255	@ 0xff
 8000516:	0e1b      	lsrs	r3, r3, #24
 8000518:	0fff      	lsrs	r7, r7, #31
 800051a:	2b00      	cmp	r3, #0
 800051c:	d18a      	bne.n	8000434 <__aeabi_fmul+0x40>
 800051e:	4642      	mov	r2, r8
 8000520:	2a00      	cmp	r2, #0
 8000522:	d164      	bne.n	80005ee <__aeabi_fmul+0x1fa>
 8000524:	4649      	mov	r1, r9
 8000526:	3201      	adds	r2, #1
 8000528:	4311      	orrs	r1, r2
 800052a:	4689      	mov	r9, r1
 800052c:	290a      	cmp	r1, #10
 800052e:	dc08      	bgt.n	8000542 <__aeabi_fmul+0x14e>
 8000530:	407d      	eors	r5, r7
 8000532:	2001      	movs	r0, #1
 8000534:	b2ea      	uxtb	r2, r5
 8000536:	2902      	cmp	r1, #2
 8000538:	dc91      	bgt.n	800045e <__aeabi_fmul+0x6a>
 800053a:	0015      	movs	r5, r2
 800053c:	2200      	movs	r2, #0
 800053e:	e027      	b.n	8000590 <__aeabi_fmul+0x19c>
 8000540:	0015      	movs	r5, r2
 8000542:	4653      	mov	r3, sl
 8000544:	2b02      	cmp	r3, #2
 8000546:	d100      	bne.n	800054a <__aeabi_fmul+0x156>
 8000548:	e093      	b.n	8000672 <__aeabi_fmul+0x27e>
 800054a:	2b03      	cmp	r3, #3
 800054c:	d01a      	beq.n	8000584 <__aeabi_fmul+0x190>
 800054e:	2b01      	cmp	r3, #1
 8000550:	d12c      	bne.n	80005ac <__aeabi_fmul+0x1b8>
 8000552:	2300      	movs	r3, #0
 8000554:	2200      	movs	r2, #0
 8000556:	e01b      	b.n	8000590 <__aeabi_fmul+0x19c>
 8000558:	4643      	mov	r3, r8
 800055a:	34ff      	adds	r4, #255	@ 0xff
 800055c:	2b00      	cmp	r3, #0
 800055e:	d055      	beq.n	800060c <__aeabi_fmul+0x218>
 8000560:	2103      	movs	r1, #3
 8000562:	464b      	mov	r3, r9
 8000564:	430b      	orrs	r3, r1
 8000566:	0019      	movs	r1, r3
 8000568:	2b0a      	cmp	r3, #10
 800056a:	dc00      	bgt.n	800056e <__aeabi_fmul+0x17a>
 800056c:	e092      	b.n	8000694 <__aeabi_fmul+0x2a0>
 800056e:	2b0f      	cmp	r3, #15
 8000570:	d000      	beq.n	8000574 <__aeabi_fmul+0x180>
 8000572:	e08c      	b.n	800068e <__aeabi_fmul+0x29a>
 8000574:	2280      	movs	r2, #128	@ 0x80
 8000576:	03d2      	lsls	r2, r2, #15
 8000578:	4216      	tst	r6, r2
 800057a:	d003      	beq.n	8000584 <__aeabi_fmul+0x190>
 800057c:	4643      	mov	r3, r8
 800057e:	4213      	tst	r3, r2
 8000580:	d100      	bne.n	8000584 <__aeabi_fmul+0x190>
 8000582:	e07d      	b.n	8000680 <__aeabi_fmul+0x28c>
 8000584:	2280      	movs	r2, #128	@ 0x80
 8000586:	03d2      	lsls	r2, r2, #15
 8000588:	4332      	orrs	r2, r6
 800058a:	0252      	lsls	r2, r2, #9
 800058c:	0a52      	lsrs	r2, r2, #9
 800058e:	23ff      	movs	r3, #255	@ 0xff
 8000590:	05d8      	lsls	r0, r3, #23
 8000592:	07ed      	lsls	r5, r5, #31
 8000594:	4310      	orrs	r0, r2
 8000596:	4328      	orrs	r0, r5
 8000598:	bce0      	pop	{r5, r6, r7}
 800059a:	46ba      	mov	sl, r7
 800059c:	46b1      	mov	r9, r6
 800059e:	46a8      	mov	r8, r5
 80005a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005a2:	2301      	movs	r3, #1
 80005a4:	0015      	movs	r5, r2
 80005a6:	0871      	lsrs	r1, r6, #1
 80005a8:	401e      	ands	r6, r3
 80005aa:	430e      	orrs	r6, r1
 80005ac:	0023      	movs	r3, r4
 80005ae:	3380      	adds	r3, #128	@ 0x80
 80005b0:	1c61      	adds	r1, r4, #1
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	dd41      	ble.n	800063a <__aeabi_fmul+0x246>
 80005b6:	0772      	lsls	r2, r6, #29
 80005b8:	d094      	beq.n	80004e4 <__aeabi_fmul+0xf0>
 80005ba:	220f      	movs	r2, #15
 80005bc:	4032      	ands	r2, r6
 80005be:	2a04      	cmp	r2, #4
 80005c0:	d000      	beq.n	80005c4 <__aeabi_fmul+0x1d0>
 80005c2:	e78e      	b.n	80004e2 <__aeabi_fmul+0xee>
 80005c4:	e78e      	b.n	80004e4 <__aeabi_fmul+0xf0>
 80005c6:	2e00      	cmp	r6, #0
 80005c8:	d105      	bne.n	80005d6 <__aeabi_fmul+0x1e2>
 80005ca:	2304      	movs	r3, #4
 80005cc:	4699      	mov	r9, r3
 80005ce:	3b03      	subs	r3, #3
 80005d0:	2400      	movs	r4, #0
 80005d2:	469a      	mov	sl, r3
 80005d4:	e726      	b.n	8000424 <__aeabi_fmul+0x30>
 80005d6:	0030      	movs	r0, r6
 80005d8:	f000 f8fc 	bl	80007d4 <__clzsi2>
 80005dc:	2476      	movs	r4, #118	@ 0x76
 80005de:	1f43      	subs	r3, r0, #5
 80005e0:	409e      	lsls	r6, r3
 80005e2:	2300      	movs	r3, #0
 80005e4:	4264      	negs	r4, r4
 80005e6:	4699      	mov	r9, r3
 80005e8:	469a      	mov	sl, r3
 80005ea:	1a24      	subs	r4, r4, r0
 80005ec:	e71a      	b.n	8000424 <__aeabi_fmul+0x30>
 80005ee:	4640      	mov	r0, r8
 80005f0:	f000 f8f0 	bl	80007d4 <__clzsi2>
 80005f4:	464b      	mov	r3, r9
 80005f6:	1a24      	subs	r4, r4, r0
 80005f8:	3c76      	subs	r4, #118	@ 0x76
 80005fa:	2b0a      	cmp	r3, #10
 80005fc:	dca1      	bgt.n	8000542 <__aeabi_fmul+0x14e>
 80005fe:	4643      	mov	r3, r8
 8000600:	3805      	subs	r0, #5
 8000602:	4083      	lsls	r3, r0
 8000604:	407d      	eors	r5, r7
 8000606:	4698      	mov	r8, r3
 8000608:	b2ea      	uxtb	r2, r5
 800060a:	e724      	b.n	8000456 <__aeabi_fmul+0x62>
 800060c:	464a      	mov	r2, r9
 800060e:	3302      	adds	r3, #2
 8000610:	4313      	orrs	r3, r2
 8000612:	002a      	movs	r2, r5
 8000614:	407a      	eors	r2, r7
 8000616:	b2d2      	uxtb	r2, r2
 8000618:	2b0a      	cmp	r3, #10
 800061a:	dc92      	bgt.n	8000542 <__aeabi_fmul+0x14e>
 800061c:	4649      	mov	r1, r9
 800061e:	0015      	movs	r5, r2
 8000620:	2900      	cmp	r1, #0
 8000622:	d026      	beq.n	8000672 <__aeabi_fmul+0x27e>
 8000624:	4699      	mov	r9, r3
 8000626:	2002      	movs	r0, #2
 8000628:	e719      	b.n	800045e <__aeabi_fmul+0x6a>
 800062a:	230c      	movs	r3, #12
 800062c:	4699      	mov	r9, r3
 800062e:	3b09      	subs	r3, #9
 8000630:	24ff      	movs	r4, #255	@ 0xff
 8000632:	469a      	mov	sl, r3
 8000634:	e6f6      	b.n	8000424 <__aeabi_fmul+0x30>
 8000636:	0015      	movs	r5, r2
 8000638:	0021      	movs	r1, r4
 800063a:	2201      	movs	r2, #1
 800063c:	1ad3      	subs	r3, r2, r3
 800063e:	2b1b      	cmp	r3, #27
 8000640:	dd00      	ble.n	8000644 <__aeabi_fmul+0x250>
 8000642:	e786      	b.n	8000552 <__aeabi_fmul+0x15e>
 8000644:	319e      	adds	r1, #158	@ 0x9e
 8000646:	0032      	movs	r2, r6
 8000648:	408e      	lsls	r6, r1
 800064a:	40da      	lsrs	r2, r3
 800064c:	1e73      	subs	r3, r6, #1
 800064e:	419e      	sbcs	r6, r3
 8000650:	4332      	orrs	r2, r6
 8000652:	0753      	lsls	r3, r2, #29
 8000654:	d004      	beq.n	8000660 <__aeabi_fmul+0x26c>
 8000656:	230f      	movs	r3, #15
 8000658:	4013      	ands	r3, r2
 800065a:	2b04      	cmp	r3, #4
 800065c:	d000      	beq.n	8000660 <__aeabi_fmul+0x26c>
 800065e:	3204      	adds	r2, #4
 8000660:	0153      	lsls	r3, r2, #5
 8000662:	d510      	bpl.n	8000686 <__aeabi_fmul+0x292>
 8000664:	2301      	movs	r3, #1
 8000666:	2200      	movs	r2, #0
 8000668:	e792      	b.n	8000590 <__aeabi_fmul+0x19c>
 800066a:	003d      	movs	r5, r7
 800066c:	4646      	mov	r6, r8
 800066e:	4682      	mov	sl, r0
 8000670:	e767      	b.n	8000542 <__aeabi_fmul+0x14e>
 8000672:	23ff      	movs	r3, #255	@ 0xff
 8000674:	2200      	movs	r2, #0
 8000676:	e78b      	b.n	8000590 <__aeabi_fmul+0x19c>
 8000678:	2280      	movs	r2, #128	@ 0x80
 800067a:	2500      	movs	r5, #0
 800067c:	03d2      	lsls	r2, r2, #15
 800067e:	e786      	b.n	800058e <__aeabi_fmul+0x19a>
 8000680:	003d      	movs	r5, r7
 8000682:	431a      	orrs	r2, r3
 8000684:	e783      	b.n	800058e <__aeabi_fmul+0x19a>
 8000686:	0192      	lsls	r2, r2, #6
 8000688:	2300      	movs	r3, #0
 800068a:	0a52      	lsrs	r2, r2, #9
 800068c:	e780      	b.n	8000590 <__aeabi_fmul+0x19c>
 800068e:	003d      	movs	r5, r7
 8000690:	4646      	mov	r6, r8
 8000692:	e777      	b.n	8000584 <__aeabi_fmul+0x190>
 8000694:	002a      	movs	r2, r5
 8000696:	2301      	movs	r3, #1
 8000698:	407a      	eors	r2, r7
 800069a:	408b      	lsls	r3, r1
 800069c:	2003      	movs	r0, #3
 800069e:	b2d2      	uxtb	r2, r2
 80006a0:	e6e9      	b.n	8000476 <__aeabi_fmul+0x82>
 80006a2:	46c0      	nop			@ (mov r8, r8)
 80006a4:	f7ffffff 	.word	0xf7ffffff

080006a8 <__aeabi_i2f>:
 80006a8:	b570      	push	{r4, r5, r6, lr}
 80006aa:	2800      	cmp	r0, #0
 80006ac:	d012      	beq.n	80006d4 <__aeabi_i2f+0x2c>
 80006ae:	17c3      	asrs	r3, r0, #31
 80006b0:	18c5      	adds	r5, r0, r3
 80006b2:	405d      	eors	r5, r3
 80006b4:	0fc4      	lsrs	r4, r0, #31
 80006b6:	0028      	movs	r0, r5
 80006b8:	f000 f88c 	bl	80007d4 <__clzsi2>
 80006bc:	239e      	movs	r3, #158	@ 0x9e
 80006be:	1a1b      	subs	r3, r3, r0
 80006c0:	2b96      	cmp	r3, #150	@ 0x96
 80006c2:	dc0f      	bgt.n	80006e4 <__aeabi_i2f+0x3c>
 80006c4:	2808      	cmp	r0, #8
 80006c6:	d038      	beq.n	800073a <__aeabi_i2f+0x92>
 80006c8:	3808      	subs	r0, #8
 80006ca:	4085      	lsls	r5, r0
 80006cc:	026d      	lsls	r5, r5, #9
 80006ce:	0a6d      	lsrs	r5, r5, #9
 80006d0:	b2d8      	uxtb	r0, r3
 80006d2:	e002      	b.n	80006da <__aeabi_i2f+0x32>
 80006d4:	2400      	movs	r4, #0
 80006d6:	2000      	movs	r0, #0
 80006d8:	2500      	movs	r5, #0
 80006da:	05c0      	lsls	r0, r0, #23
 80006dc:	4328      	orrs	r0, r5
 80006de:	07e4      	lsls	r4, r4, #31
 80006e0:	4320      	orrs	r0, r4
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	2b99      	cmp	r3, #153	@ 0x99
 80006e6:	dc14      	bgt.n	8000712 <__aeabi_i2f+0x6a>
 80006e8:	1f42      	subs	r2, r0, #5
 80006ea:	4095      	lsls	r5, r2
 80006ec:	002a      	movs	r2, r5
 80006ee:	4915      	ldr	r1, [pc, #84]	@ (8000744 <__aeabi_i2f+0x9c>)
 80006f0:	4011      	ands	r1, r2
 80006f2:	0755      	lsls	r5, r2, #29
 80006f4:	d01c      	beq.n	8000730 <__aeabi_i2f+0x88>
 80006f6:	250f      	movs	r5, #15
 80006f8:	402a      	ands	r2, r5
 80006fa:	2a04      	cmp	r2, #4
 80006fc:	d018      	beq.n	8000730 <__aeabi_i2f+0x88>
 80006fe:	3104      	adds	r1, #4
 8000700:	08ca      	lsrs	r2, r1, #3
 8000702:	0149      	lsls	r1, r1, #5
 8000704:	d515      	bpl.n	8000732 <__aeabi_i2f+0x8a>
 8000706:	239f      	movs	r3, #159	@ 0x9f
 8000708:	0252      	lsls	r2, r2, #9
 800070a:	1a18      	subs	r0, r3, r0
 800070c:	0a55      	lsrs	r5, r2, #9
 800070e:	b2c0      	uxtb	r0, r0
 8000710:	e7e3      	b.n	80006da <__aeabi_i2f+0x32>
 8000712:	2205      	movs	r2, #5
 8000714:	0029      	movs	r1, r5
 8000716:	1a12      	subs	r2, r2, r0
 8000718:	40d1      	lsrs	r1, r2
 800071a:	0002      	movs	r2, r0
 800071c:	321b      	adds	r2, #27
 800071e:	4095      	lsls	r5, r2
 8000720:	002a      	movs	r2, r5
 8000722:	1e55      	subs	r5, r2, #1
 8000724:	41aa      	sbcs	r2, r5
 8000726:	430a      	orrs	r2, r1
 8000728:	4906      	ldr	r1, [pc, #24]	@ (8000744 <__aeabi_i2f+0x9c>)
 800072a:	4011      	ands	r1, r2
 800072c:	0755      	lsls	r5, r2, #29
 800072e:	d1e2      	bne.n	80006f6 <__aeabi_i2f+0x4e>
 8000730:	08ca      	lsrs	r2, r1, #3
 8000732:	0252      	lsls	r2, r2, #9
 8000734:	0a55      	lsrs	r5, r2, #9
 8000736:	b2d8      	uxtb	r0, r3
 8000738:	e7cf      	b.n	80006da <__aeabi_i2f+0x32>
 800073a:	026d      	lsls	r5, r5, #9
 800073c:	0a6d      	lsrs	r5, r5, #9
 800073e:	308e      	adds	r0, #142	@ 0x8e
 8000740:	e7cb      	b.n	80006da <__aeabi_i2f+0x32>
 8000742:	46c0      	nop			@ (mov r8, r8)
 8000744:	fbffffff 	.word	0xfbffffff

08000748 <__aeabi_ui2f>:
 8000748:	b510      	push	{r4, lr}
 800074a:	1e04      	subs	r4, r0, #0
 800074c:	d00d      	beq.n	800076a <__aeabi_ui2f+0x22>
 800074e:	f000 f841 	bl	80007d4 <__clzsi2>
 8000752:	239e      	movs	r3, #158	@ 0x9e
 8000754:	1a1b      	subs	r3, r3, r0
 8000756:	2b96      	cmp	r3, #150	@ 0x96
 8000758:	dc0c      	bgt.n	8000774 <__aeabi_ui2f+0x2c>
 800075a:	2808      	cmp	r0, #8
 800075c:	d034      	beq.n	80007c8 <__aeabi_ui2f+0x80>
 800075e:	3808      	subs	r0, #8
 8000760:	4084      	lsls	r4, r0
 8000762:	0264      	lsls	r4, r4, #9
 8000764:	0a64      	lsrs	r4, r4, #9
 8000766:	b2d8      	uxtb	r0, r3
 8000768:	e001      	b.n	800076e <__aeabi_ui2f+0x26>
 800076a:	2000      	movs	r0, #0
 800076c:	2400      	movs	r4, #0
 800076e:	05c0      	lsls	r0, r0, #23
 8000770:	4320      	orrs	r0, r4
 8000772:	bd10      	pop	{r4, pc}
 8000774:	2b99      	cmp	r3, #153	@ 0x99
 8000776:	dc13      	bgt.n	80007a0 <__aeabi_ui2f+0x58>
 8000778:	1f42      	subs	r2, r0, #5
 800077a:	4094      	lsls	r4, r2
 800077c:	4a14      	ldr	r2, [pc, #80]	@ (80007d0 <__aeabi_ui2f+0x88>)
 800077e:	4022      	ands	r2, r4
 8000780:	0761      	lsls	r1, r4, #29
 8000782:	d01c      	beq.n	80007be <__aeabi_ui2f+0x76>
 8000784:	210f      	movs	r1, #15
 8000786:	4021      	ands	r1, r4
 8000788:	2904      	cmp	r1, #4
 800078a:	d018      	beq.n	80007be <__aeabi_ui2f+0x76>
 800078c:	3204      	adds	r2, #4
 800078e:	08d4      	lsrs	r4, r2, #3
 8000790:	0152      	lsls	r2, r2, #5
 8000792:	d515      	bpl.n	80007c0 <__aeabi_ui2f+0x78>
 8000794:	239f      	movs	r3, #159	@ 0x9f
 8000796:	0264      	lsls	r4, r4, #9
 8000798:	1a18      	subs	r0, r3, r0
 800079a:	0a64      	lsrs	r4, r4, #9
 800079c:	b2c0      	uxtb	r0, r0
 800079e:	e7e6      	b.n	800076e <__aeabi_ui2f+0x26>
 80007a0:	0002      	movs	r2, r0
 80007a2:	0021      	movs	r1, r4
 80007a4:	321b      	adds	r2, #27
 80007a6:	4091      	lsls	r1, r2
 80007a8:	000a      	movs	r2, r1
 80007aa:	1e51      	subs	r1, r2, #1
 80007ac:	418a      	sbcs	r2, r1
 80007ae:	2105      	movs	r1, #5
 80007b0:	1a09      	subs	r1, r1, r0
 80007b2:	40cc      	lsrs	r4, r1
 80007b4:	4314      	orrs	r4, r2
 80007b6:	4a06      	ldr	r2, [pc, #24]	@ (80007d0 <__aeabi_ui2f+0x88>)
 80007b8:	4022      	ands	r2, r4
 80007ba:	0761      	lsls	r1, r4, #29
 80007bc:	d1e2      	bne.n	8000784 <__aeabi_ui2f+0x3c>
 80007be:	08d4      	lsrs	r4, r2, #3
 80007c0:	0264      	lsls	r4, r4, #9
 80007c2:	0a64      	lsrs	r4, r4, #9
 80007c4:	b2d8      	uxtb	r0, r3
 80007c6:	e7d2      	b.n	800076e <__aeabi_ui2f+0x26>
 80007c8:	0264      	lsls	r4, r4, #9
 80007ca:	0a64      	lsrs	r4, r4, #9
 80007cc:	308e      	adds	r0, #142	@ 0x8e
 80007ce:	e7ce      	b.n	800076e <__aeabi_ui2f+0x26>
 80007d0:	fbffffff 	.word	0xfbffffff

080007d4 <__clzsi2>:
 80007d4:	211c      	movs	r1, #28
 80007d6:	2301      	movs	r3, #1
 80007d8:	041b      	lsls	r3, r3, #16
 80007da:	4298      	cmp	r0, r3
 80007dc:	d301      	bcc.n	80007e2 <__clzsi2+0xe>
 80007de:	0c00      	lsrs	r0, r0, #16
 80007e0:	3910      	subs	r1, #16
 80007e2:	0a1b      	lsrs	r3, r3, #8
 80007e4:	4298      	cmp	r0, r3
 80007e6:	d301      	bcc.n	80007ec <__clzsi2+0x18>
 80007e8:	0a00      	lsrs	r0, r0, #8
 80007ea:	3908      	subs	r1, #8
 80007ec:	091b      	lsrs	r3, r3, #4
 80007ee:	4298      	cmp	r0, r3
 80007f0:	d301      	bcc.n	80007f6 <__clzsi2+0x22>
 80007f2:	0900      	lsrs	r0, r0, #4
 80007f4:	3904      	subs	r1, #4
 80007f6:	a202      	add	r2, pc, #8	@ (adr r2, 8000800 <__clzsi2+0x2c>)
 80007f8:	5c10      	ldrb	r0, [r2, r0]
 80007fa:	1840      	adds	r0, r0, r1
 80007fc:	4770      	bx	lr
 80007fe:	46c0      	nop			@ (mov r8, r8)
 8000800:	02020304 	.word	0x02020304
 8000804:	01010101 	.word	0x01010101
	...

08000810 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000810:	480d      	ldr	r0, [pc, #52]	@ (8000848 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000812:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000814:	f004 fbdc 	bl	8004fd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000818:	480c      	ldr	r0, [pc, #48]	@ (800084c <LoopForever+0x6>)
  ldr r1, =_edata
 800081a:	490d      	ldr	r1, [pc, #52]	@ (8000850 <LoopForever+0xa>)
  ldr r2, =_sidata
 800081c:	4a0d      	ldr	r2, [pc, #52]	@ (8000854 <LoopForever+0xe>)
  movs r3, #0
 800081e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000820:	e002      	b.n	8000828 <LoopCopyDataInit>

08000822 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000822:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000824:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000826:	3304      	adds	r3, #4

08000828 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000828:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800082a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800082c:	d3f9      	bcc.n	8000822 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800082e:	4a0a      	ldr	r2, [pc, #40]	@ (8000858 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000830:	4c0a      	ldr	r4, [pc, #40]	@ (800085c <LoopForever+0x16>)
  movs r3, #0
 8000832:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000834:	e001      	b.n	800083a <LoopFillZerobss>

08000836 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000836:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000838:	3204      	adds	r2, #4

0800083a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800083a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800083c:	d3fb      	bcc.n	8000836 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800083e:	f005 fa45 	bl	8005ccc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000842:	f000 fff9 	bl	8001838 <main>

08000846 <LoopForever>:

LoopForever:
    b LoopForever
 8000846:	e7fe      	b.n	8000846 <LoopForever>
  ldr   r0, =_estack
 8000848:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 800084c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000850:	200003d4 	.word	0x200003d4
  ldr r2, =_sidata
 8000854:	08006b94 	.word	0x08006b94
  ldr r2, =_sbss
 8000858:	200003d4 	.word	0x200003d4
  ldr r4, =_ebss
 800085c:	200005a0 	.word	0x200005a0

08000860 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000860:	e7fe      	b.n	8000860 <ADC1_IRQHandler>
	...

08000864 <ASPEP_start>:
  * @brief  Starts ASPEP communication by configuring UART.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_start(ASPEP_Handle_t *pHandle)
{
 8000864:	b510      	push	{r4, lr}
 8000866:	0004      	movs	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->fASPEP_HWInit(pHandle->ASPEPIp);
 8000868:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800086a:	6940      	ldr	r0, [r0, #20]
 800086c:	4798      	blx	r3
    pHandle->ASPEP_State = ASPEP_IDLE;
 800086e:	2200      	movs	r2, #0
 8000870:	234c      	movs	r3, #76	@ 0x4c
    pHandle->ASPEP_TL_State = WAITING_PACKET;
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/
    /* Configure UART to receive first packet*/
    pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000872:	0021      	movs	r1, r4
    pHandle->ASPEP_State = ASPEP_IDLE;
 8000874:	52e2      	strh	r2, [r4, r3]
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/
 8000876:	3b04      	subs	r3, #4
 8000878:	54e2      	strb	r2, [r4, r3]
    pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 800087a:	6960      	ldr	r0, [r4, #20]
 800087c:	2204      	movs	r2, #4
 800087e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8000880:	311c      	adds	r1, #28
 8000882:	4798      	blx	r3
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8000884:	bd10      	pop	{r4, pc}
 8000886:	46c0      	nop			@ (mov r8, r8)

08000888 <ASPEP_sendBeacon>:
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  * @param  *capabilities Matched capabilities between controller and performer
  */
void ASPEP_sendBeacon(ASPEP_Handle_t *pHandle, ASPEP_Capabilities_def *capabilities)
{
 8000888:	b570      	push	{r4, r5, r6, lr}
  {
#endif
    uint32_t *packet = (uint32_t *)pHandle->ctrlBuffer.buffer; //cstat !MISRAC2012-Rule-11.3
    *packet = (BEACON
             | (((uint32_t)capabilities->version) << 4U)
             | (((uint32_t)capabilities->DATA_CRC) << 7U)
 800088a:	780a      	ldrb	r2, [r1, #0]
             | (((uint32_t)capabilities->version) << 4U)
 800088c:	790b      	ldrb	r3, [r1, #4]
             | (((uint32_t)capabilities->DATA_CRC) << 7U)
 800088e:	01d2      	lsls	r2, r2, #7
             | (((uint32_t)capabilities->version) << 4U)
 8000890:	011b      	lsls	r3, r3, #4
             | (((uint32_t)capabilities->DATA_CRC) << 7U)
 8000892:	4313      	orrs	r3, r2
             | (((uint32_t)capabilities->RX_maxSize) << 8U)
 8000894:	784a      	ldrb	r2, [r1, #1]
{
 8000896:	0004      	movs	r4, r0
             | (((uint32_t)capabilities->RX_maxSize) << 8U)
 8000898:	0212      	lsls	r2, r2, #8
 800089a:	4313      	orrs	r3, r2
             | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 800089c:	788a      	ldrb	r2, [r1, #2]
  header &= 0x0fffffffU;
 800089e:	2005      	movs	r0, #5
             | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 80008a0:	0392      	lsls	r2, r2, #14
 80008a2:	4313      	orrs	r3, r2
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 80008a4:	78ca      	ldrb	r2, [r1, #3]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 80008a6:	21ff      	movs	r1, #255	@ 0xff
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 80008a8:	0552      	lsls	r2, r2, #21
 80008aa:	4313      	orrs	r3, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 80008ac:	4d16      	ldr	r5, [pc, #88]	@ (8000908 <ASPEP_sendBeacon+0x80>)
 80008ae:	4019      	ands	r1, r3
 80008b0:	4301      	orrs	r1, r0
  header &= 0x0fffffffU;
 80008b2:	011a      	lsls	r2, r3, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 80008b4:	5c69      	ldrb	r1, [r5, r1]
 80008b6:	0b16      	lsrs	r6, r2, #12
 80008b8:	4071      	eors	r1, r6
 80008ba:	b2c9      	uxtb	r1, r1
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 80008bc:	5c69      	ldrb	r1, [r5, r1]
 80008be:	0d16      	lsrs	r6, r2, #20
 80008c0:	4071      	eors	r1, r6
 80008c2:	b2c9      	uxtb	r1, r1
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 80008c4:	5c69      	ldrb	r1, [r5, r1]
 80008c6:	0f12      	lsrs	r2, r2, #28
 80008c8:	404a      	eors	r2, r1
 80008ca:	4910      	ldr	r1, [pc, #64]	@ (800090c <ASPEP_sendBeacon+0x84>)
  *headerPtr |= (uint32_t)crc << 28;
 80008cc:	5c8a      	ldrb	r2, [r1, r2]
 80008ce:	0712      	lsls	r2, r2, #28
 80008d0:	4313      	orrs	r3, r2
 80008d2:	4303      	orrs	r3, r0
 80008d4:	6223      	str	r3, [r4, #32]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d6:	b672      	cpsid	i
  {
#endif
    /* Insert CRC header in the packet to send */
    ASPEP_ComputeHeaderCRC((uint32_t *)txBuffer); //cstat !MISRAC2012-Rule-11.5
    __disable_irq(); /*TODO: Disable High frequency task is enough */
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 80008d8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d007      	beq.n	80008ee <ASPEP_sendBeacon+0x66>
  __ASM volatile ("cpsie i" : : : "memory");
 80008de:	b662      	cpsie	i
          pHandle->syncBuffer.length = bufferLength;
        }
      }
      else if(ASPEP_CTRL == dataType)
      {
        if (pHandle->ctrlBuffer.state != available)
 80008e0:	2324      	movs	r3, #36	@ 0x24
 80008e2:	5ce2      	ldrb	r2, [r4, r3]
 80008e4:	2a00      	cmp	r2, #0
 80008e6:	d101      	bne.n	80008ec <ASPEP_sendBeacon+0x64>
        {
          result = ASPEP_BUFFER_ERROR;
        }
        else
        {
          pHandle->ctrlBuffer.state = pending;
 80008e8:	3202      	adds	r2, #2
 80008ea:	54e2      	strb	r2, [r4, r3]
}
 80008ec:	bd70      	pop	{r4, r5, r6, pc}
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 80008ee:	0021      	movs	r1, r4
        pHandle->ctrlBuffer.state = readLock;
 80008f0:	2203      	movs	r2, #3
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 80008f2:	3120      	adds	r1, #32
        pHandle->ctrlBuffer.state = readLock;
 80008f4:	3324      	adds	r3, #36	@ 0x24
 80008f6:	54e2      	strb	r2, [r4, r3]
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 80008f8:	6321      	str	r1, [r4, #48]	@ 0x30
 80008fa:	b662      	cpsie	i
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 80008fc:	6960      	ldr	r0, [r4, #20]
 80008fe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000900:	3201      	adds	r2, #1
 8000902:	4798      	blx	r3
 8000904:	e7f2      	b.n	80008ec <ASPEP_sendBeacon+0x64>
 8000906:	46c0      	nop			@ (mov r8, r8)
 8000908:	08005d50 	.word	0x08005d50
 800090c:	08005d40 	.word	0x08005d40

08000910 <ASPEP_sendPing>:
{
 8000910:	000b      	movs	r3, r1
    uint8_t Nbit = pHandle->syncPacketCount & 0x1U; /* Keep only LSB */
 8000912:	2148      	movs	r1, #72	@ 0x48
{
 8000914:	b570      	push	{r4, r5, r6, lr}
 8000916:	0004      	movs	r4, r0
    uint8_t Nbit = pHandle->syncPacketCount & 0x1U; /* Keep only LSB */
 8000918:	5c41      	ldrb	r1, [r0, r1]
                   | (uint32_t)((uint32_t)Nbit << 6U)
 800091a:	2001      	movs	r0, #1
 800091c:	4008      	ands	r0, r1
    *packet = PING | (uint32_t)((uint32_t)cBit << 4U)
 800091e:	0119      	lsls	r1, r3, #4
                   | (uint32_t)((uint32_t)cBit << 5U)
 8000920:	015b      	lsls	r3, r3, #5
 8000922:	4319      	orrs	r1, r3
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000924:	0313      	lsls	r3, r2, #12
 8000926:	430b      	orrs	r3, r1
                   | (uint32_t)((uint32_t)Nbit << 6U)
 8000928:	0182      	lsls	r2, r0, #6
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 800092a:	4313      	orrs	r3, r2
    uint8_t ipID = pHandle->liid & 0xFU;
 800092c:	224b      	movs	r2, #75	@ 0x4b
 800092e:	5ca1      	ldrb	r1, [r4, r2]
                   | (uint32_t)((uint32_t)ipID << 8U)
 8000930:	3a3c      	subs	r2, #60	@ 0x3c
                   | (uint32_t)((uint32_t)Nbit << 7U)
 8000932:	01c0      	lsls	r0, r0, #7
                   | (uint32_t)((uint32_t)ipID << 8U)
 8000934:	400a      	ands	r2, r1
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000936:	4303      	orrs	r3, r0
                   | (uint32_t)((uint32_t)ipID << 8U)
 8000938:	0212      	lsls	r2, r2, #8
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 800093a:	4313      	orrs	r3, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 800093c:	22ff      	movs	r2, #255	@ 0xff
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 800093e:	2506      	movs	r5, #6
 8000940:	0018      	movs	r0, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000942:	4916      	ldr	r1, [pc, #88]	@ (800099c <ASPEP_sendPing+0x8c>)
 8000944:	401a      	ands	r2, r3
 8000946:	432a      	orrs	r2, r5
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000948:	5c8a      	ldrb	r2, [r1, r2]
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 800094a:	4328      	orrs	r0, r5
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 800094c:	0a1d      	lsrs	r5, r3, #8
 800094e:	406a      	eors	r2, r5
 8000950:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000952:	5c8a      	ldrb	r2, [r1, r2]
 8000954:	0c1d      	lsrs	r5, r3, #16
 8000956:	406a      	eors	r2, r5
 8000958:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 800095a:	5c8a      	ldrb	r2, [r1, r2]
 800095c:	0e1b      	lsrs	r3, r3, #24
 800095e:	4053      	eors	r3, r2
 8000960:	4a0f      	ldr	r2, [pc, #60]	@ (80009a0 <ASPEP_sendPing+0x90>)
  *headerPtr |= (uint32_t)crc << 28;
 8000962:	5cd3      	ldrb	r3, [r2, r3]
 8000964:	071b      	lsls	r3, r3, #28
 8000966:	4303      	orrs	r3, r0
 8000968:	6223      	str	r3, [r4, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800096a:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 800096c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800096e:	2b00      	cmp	r3, #0
 8000970:	d007      	beq.n	8000982 <ASPEP_sendPing+0x72>
  __ASM volatile ("cpsie i" : : : "memory");
 8000972:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 8000974:	2324      	movs	r3, #36	@ 0x24
 8000976:	5ce2      	ldrb	r2, [r4, r3]
 8000978:	2a00      	cmp	r2, #0
 800097a:	d101      	bne.n	8000980 <ASPEP_sendPing+0x70>
          pHandle->ctrlBuffer.state = pending;
 800097c:	3202      	adds	r2, #2
 800097e:	54e2      	strb	r2, [r4, r3]
}
 8000980:	bd70      	pop	{r4, r5, r6, pc}
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000982:	0021      	movs	r1, r4
        pHandle->ctrlBuffer.state = readLock;
 8000984:	2203      	movs	r2, #3
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000986:	3120      	adds	r1, #32
        pHandle->ctrlBuffer.state = readLock;
 8000988:	3324      	adds	r3, #36	@ 0x24
 800098a:	54e2      	strb	r2, [r4, r3]
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 800098c:	6321      	str	r1, [r4, #48]	@ 0x30
 800098e:	b662      	cpsie	i
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 8000990:	6960      	ldr	r0, [r4, #20]
 8000992:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000994:	3201      	adds	r2, #1
 8000996:	4798      	blx	r3
 8000998:	e7f2      	b.n	8000980 <ASPEP_sendPing+0x70>
 800099a:	46c0      	nop			@ (mov r8, r8)
 800099c:	08005d50 	.word	0x08005d50
 80009a0:	08005d40 	.word	0x08005d40

080009a4 <ASPEP_getBuffer>:
{
 80009a4:	0003      	movs	r3, r0
 80009a6:	b510      	push	{r4, lr}
        result = false;
 80009a8:	2000      	movs	r0, #0
    if (MCTL_SYNC == syncAsync)
 80009aa:	2a0a      	cmp	r2, #10
 80009ac:	d000      	beq.n	80009b0 <ASPEP_getBuffer+0xc>
}
 80009ae:	bd10      	pop	{r4, pc}
      if (pHandle->syncBuffer.state <= writeLock) /* Possible values are free or writeLock*/
 80009b0:	3224      	adds	r2, #36	@ 0x24
 80009b2:	5c9c      	ldrb	r4, [r3, r2]
 80009b4:	2c01      	cmp	r4, #1
 80009b6:	d8fa      	bhi.n	80009ae <ASPEP_getBuffer+0xa>
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 80009b8:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80009ba:	3004      	adds	r0, #4
 80009bc:	6008      	str	r0, [r1, #0]
        pHandle->syncBuffer.state = writeLock;
 80009be:	2101      	movs	r1, #1
  bool result = true;
 80009c0:	2001      	movs	r0, #1
        pHandle->syncBuffer.state = writeLock;
 80009c2:	5499      	strb	r1, [r3, r2]
 80009c4:	e7f3      	b.n	80009ae <ASPEP_getBuffer+0xa>
 80009c6:	46c0      	nop			@ (mov r8, r8)

080009c8 <ASPEP_sendPacket>:
{
 80009c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009ca:	46c6      	mov	lr, r8
 80009cc:	0004      	movs	r4, r0
    if (ASPEP_CONNECTED == pHandle-> ASPEP_State)
 80009ce:	204c      	movs	r0, #76	@ 0x4c
{
 80009d0:	b500      	push	{lr}
    if (ASPEP_CONNECTED == pHandle-> ASPEP_State)
 80009d2:	5c25      	ldrb	r5, [r4, r0]
      result = ASPEP_NOT_CONNECTED;
 80009d4:	384a      	subs	r0, #74	@ 0x4a
    if (ASPEP_CONNECTED == pHandle-> ASPEP_State)
 80009d6:	2d02      	cmp	r5, #2
 80009d8:	d002      	beq.n	80009e0 <ASPEP_sendPacket+0x18>
}
 80009da:	bc80      	pop	{r7}
 80009dc:	46b8      	mov	r8, r7
 80009de:	bdf0      	pop	{r4, r5, r6, r7, pc}
      tmpHeader = ((uint32_t)((uint32_t)txDataLengthTemp << (uint32_t)4) | (uint32_t)syncAsync);
 80009e0:	0110      	lsls	r0, r2, #4
 80009e2:	4318      	orrs	r0, r3
      *header = tmpHeader;
 80009e4:	1f0e      	subs	r6, r1, #4
 80009e6:	6030      	str	r0, [r6, #0]
      if (1U == pHandle->Capabilities.DATA_CRC)
 80009e8:	2054      	movs	r0, #84	@ 0x54
 80009ea:	5c20      	ldrb	r0, [r4, r0]
 80009ec:	2801      	cmp	r0, #1
 80009ee:	d106      	bne.n	80009fe <ASPEP_sendPacket+0x36>
        packet[txDataLengthTemp] = (uint8_t)0xCA; /* Dummy CRC */
 80009f0:	30c9      	adds	r0, #201	@ 0xc9
 80009f2:	5488      	strb	r0, [r1, r2]
        packet[txDataLengthTemp + 1U] = (uint8_t)0xFE; /* Dummy CRC */
 80009f4:	1889      	adds	r1, r1, r2
 80009f6:	3034      	adds	r0, #52	@ 0x34
        txDataLengthTemp += (uint16_t)ASPEP_DATACRC_SIZE;
 80009f8:	3202      	adds	r2, #2
        packet[txDataLengthTemp + 1U] = (uint8_t)0xFE; /* Dummy CRC */
 80009fa:	7048      	strb	r0, [r1, #1]
        txDataLengthTemp += (uint16_t)ASPEP_DATACRC_SIZE;
 80009fc:	b292      	uxth	r2, r2
      if (MCTL_SYNC == syncAsync)
 80009fe:	2b0a      	cmp	r3, #10
 8000a00:	d105      	bne.n	8000a0e <ASPEP_sendPacket+0x46>
        if (pSupHandle->MCP_PacketAvailable)
 8000a02:	7c21      	ldrb	r1, [r4, #16]
          result = MCTL_SYNC_NOT_EXPECTED;
 8000a04:	2001      	movs	r0, #1
        if (pSupHandle->MCP_PacketAvailable)
 8000a06:	2900      	cmp	r1, #0
 8000a08:	d0e7      	beq.n	80009da <ASPEP_sendPacket+0x12>
          pSupHandle->MCP_PacketAvailable = false; /* CMD from controller is processed*/
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	7421      	strb	r1, [r4, #16]
  uint32_t header = *headerPtr;
 8000a0e:	6837      	ldr	r7, [r6, #0]
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 8000a10:	3204      	adds	r2, #4
  header &= 0x0fffffffU;
 8000a12:	0138      	lsls	r0, r7, #4
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 8000a14:	b292      	uxth	r2, r2
 8000a16:	4694      	mov	ip, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000a18:	21ff      	movs	r1, #255	@ 0xff
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000a1a:	0b02      	lsrs	r2, r0, #12
 8000a1c:	4690      	mov	r8, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000a1e:	4d24      	ldr	r5, [pc, #144]	@ (8000ab0 <ASPEP_sendPacket+0xe8>)
 8000a20:	4039      	ands	r1, r7
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000a22:	002a      	movs	r2, r5
 8000a24:	5c69      	ldrb	r1, [r5, r1]
 8000a26:	4645      	mov	r5, r8
 8000a28:	4069      	eors	r1, r5
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000a2a:	0d05      	lsrs	r5, r0, #20
 8000a2c:	46a8      	mov	r8, r5
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000a2e:	b2c9      	uxtb	r1, r1
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000a30:	5c55      	ldrb	r5, [r2, r1]
 8000a32:	4641      	mov	r1, r8
 8000a34:	404d      	eors	r5, r1
 8000a36:	b2ed      	uxtb	r5, r5
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000a38:	5d51      	ldrb	r1, [r2, r5]
 8000a3a:	0f00      	lsrs	r0, r0, #28
 8000a3c:	4041      	eors	r1, r0
 8000a3e:	481d      	ldr	r0, [pc, #116]	@ (8000ab4 <ASPEP_sendPacket+0xec>)
  *headerPtr |= (uint32_t)crc << 28;
 8000a40:	5c40      	ldrb	r0, [r0, r1]
 8000a42:	0700      	lsls	r0, r0, #28
 8000a44:	4338      	orrs	r0, r7
 8000a46:	6030      	str	r0, [r6, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000a48:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000a4a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8000a4c:	2900      	cmp	r1, #0
 8000a4e:	d017      	beq.n	8000a80 <ASPEP_sendPacket+0xb8>
  __ASM volatile ("cpsie i" : : : "memory");
 8000a50:	b662      	cpsie	i
      if (MCTL_SYNC == dataType)
 8000a52:	2b0a      	cmp	r3, #10
 8000a54:	d009      	beq.n	8000a6a <ASPEP_sendPacket+0xa2>
      else if(ASPEP_CTRL == dataType)
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d105      	bne.n	8000a66 <ASPEP_sendPacket+0x9e>
        if (pHandle->ctrlBuffer.state != available)
 8000a5a:	3324      	adds	r3, #36	@ 0x24
 8000a5c:	5ce2      	ldrb	r2, [r4, r3]
 8000a5e:	2a00      	cmp	r2, #0
 8000a60:	d124      	bne.n	8000aac <ASPEP_sendPacket+0xe4>
          pHandle->ctrlBuffer.state = pending;
 8000a62:	3202      	adds	r2, #2
 8000a64:	54e2      	strb	r2, [r4, r3]
  uint8_t result = ASPEP_OK;
 8000a66:	2000      	movs	r0, #0
 8000a68:	e7b7      	b.n	80009da <ASPEP_sendPacket+0x12>
        if (pHandle -> syncBuffer.state != writeLock)
 8000a6a:	3324      	adds	r3, #36	@ 0x24
 8000a6c:	5ce1      	ldrb	r1, [r4, r3]
          result = ASPEP_BUFFER_ERROR;
 8000a6e:	2003      	movs	r0, #3
        if (pHandle -> syncBuffer.state != writeLock)
 8000a70:	2901      	cmp	r1, #1
 8000a72:	d1b2      	bne.n	80009da <ASPEP_sendPacket+0x12>
          pHandle->syncBuffer.state = pending;
 8000a74:	3101      	adds	r1, #1
 8000a76:	54e1      	strb	r1, [r4, r3]
          pHandle->syncBuffer.length = bufferLength;
 8000a78:	4663      	mov	r3, ip
  uint8_t result = ASPEP_OK;
 8000a7a:	2000      	movs	r0, #0
          pHandle->syncBuffer.length = bufferLength;
 8000a7c:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 8000a7e:	e7ac      	b.n	80009da <ASPEP_sendPacket+0x12>
      if (MCTL_SYNC == dataType)
 8000a80:	2b0a      	cmp	r3, #10
 8000a82:	d00d      	beq.n	8000aa0 <ASPEP_sendPacket+0xd8>
        pHandle->ctrlBuffer.state = readLock;
 8000a84:	2324      	movs	r3, #36	@ 0x24
 8000a86:	2103      	movs	r1, #3
 8000a88:	54e1      	strb	r1, [r4, r3]
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000a8a:	0023      	movs	r3, r4
 8000a8c:	3320      	adds	r3, #32
 8000a8e:	6323      	str	r3, [r4, #48]	@ 0x30
 8000a90:	b662      	cpsie	i
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 8000a92:	6960      	ldr	r0, [r4, #20]
 8000a94:	4662      	mov	r2, ip
 8000a96:	0031      	movs	r1, r6
 8000a98:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000a9a:	4798      	blx	r3
  uint8_t result = ASPEP_OK;
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	e79c      	b.n	80009da <ASPEP_sendPacket+0x12>
        pHandle->syncBuffer.state = readLock;
 8000aa0:	3324      	adds	r3, #36	@ 0x24
 8000aa2:	3103      	adds	r1, #3
 8000aa4:	54e1      	strb	r1, [r4, r3]
        pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8000aa6:	0023      	movs	r3, r4
 8000aa8:	3328      	adds	r3, #40	@ 0x28
 8000aaa:	e7f0      	b.n	8000a8e <ASPEP_sendPacket+0xc6>
          result = ASPEP_BUFFER_ERROR;
 8000aac:	2003      	movs	r0, #3
 8000aae:	e794      	b.n	80009da <ASPEP_sendPacket+0x12>
 8000ab0:	08005d50 	.word	0x08005d50
 8000ab4:	08005d40 	.word	0x08005d40

08000ab8 <ASPEP_HWDataTransmittedIT>:
  * Therefore, there is no need to protect this ISR against another higher priority ISR (HF Task).
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDataTransmittedIT(ASPEP_Handle_t *pHandle)
{
 8000ab8:	b570      	push	{r4, r5, r6, lr}
  }
  else
  {
#endif
    /* First free previous readLock buffer */
    if (pHandle->ctrlBuffer.state == readLock)
 8000aba:	2524      	movs	r5, #36	@ 0x24
 8000abc:	5d43      	ldrb	r3, [r0, r5]
{
 8000abe:	0004      	movs	r4, r0
    if (pHandle->ctrlBuffer.state == readLock)
 8000ac0:	2b03      	cmp	r3, #3
 8000ac2:	d012      	beq.n	8000aea <ASPEP_HWDataTransmittedIT+0x32>
      pHandle->ctrlBuffer.state = available;
    }
    else /* if previous buffer was not ASPEP_CTRL, then the buffer locked is a MCTL_Buff_t */
    {
      MCTL_Buff_t *tempBuff = (MCTL_Buff_t *)pHandle->lockBuffer; //cstat !MISRAC2012-Rule-11.5
      tempBuff->state = available;
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8000ac8:	7191      	strb	r1, [r2, #6]
    }
    if (pHandle->syncBuffer.state == pending)
 8000aca:	222e      	movs	r2, #46	@ 0x2e
 8000acc:	5c82      	ldrb	r2, [r0, r2]
 8000ace:	2a02      	cmp	r2, #2
 8000ad0:	d011      	beq.n	8000af6 <ASPEP_HWDataTransmittedIT+0x3e>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
      pHandle->syncBuffer.state = readLock;
    }
    /* Second prepare transfer of pending buffer */
    else if (pHandle->ctrlBuffer.state == pending)
 8000ad2:	2b02      	cmp	r3, #2
 8000ad4:	d11b      	bne.n	8000b0e <ASPEP_HWDataTransmittedIT+0x56>
    {
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 8000ad6:	0001      	movs	r1, r0
 8000ad8:	3120      	adds	r1, #32
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 8000ada:	6c23      	ldr	r3, [r4, #64]	@ 0x40
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 8000adc:	6301      	str	r1, [r0, #48]	@ 0x30
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 8000ade:	2204      	movs	r2, #4
 8000ae0:	6940      	ldr	r0, [r0, #20]
 8000ae2:	4798      	blx	r3
      pHandle->ctrlBuffer.state = readLock;
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	5563      	strb	r3, [r4, r5]
      pHandle->lockBuffer = NULL;
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8000ae8:	bd70      	pop	{r4, r5, r6, pc}
      pHandle->ctrlBuffer.state = available;
 8000aea:	2300      	movs	r3, #0
 8000aec:	5543      	strb	r3, [r0, r5]
    if (pHandle->syncBuffer.state == pending)
 8000aee:	332e      	adds	r3, #46	@ 0x2e
 8000af0:	5cc3      	ldrb	r3, [r0, r3]
 8000af2:	2b02      	cmp	r3, #2
 8000af4:	d10b      	bne.n	8000b0e <ASPEP_HWDataTransmittedIT+0x56>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8000af6:	0023      	movs	r3, r4
 8000af8:	3328      	adds	r3, #40	@ 0x28
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 8000afa:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8000afc:	6323      	str	r3, [r4, #48]	@ 0x30
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 8000afe:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8000b00:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000b02:	6960      	ldr	r0, [r4, #20]
 8000b04:	4798      	blx	r3
      pHandle->syncBuffer.state = readLock;
 8000b06:	232e      	movs	r3, #46	@ 0x2e
 8000b08:	2203      	movs	r2, #3
 8000b0a:	54e2      	strb	r2, [r4, r3]
 8000b0c:	e7ec      	b.n	8000ae8 <ASPEP_HWDataTransmittedIT+0x30>
      pHandle->lockBuffer = NULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	6323      	str	r3, [r4, #48]	@ 0x30
}
 8000b12:	e7e9      	b.n	8000ae8 <ASPEP_HWDataTransmittedIT+0x30>

08000b14 <ASPEP_RXframeProcess>:
  * @param  *packetLength Length of the packet to be processed
  *
  * @return Returns the buffer of data transmitted by the MCP controller device
  */
uint8_t *ASPEP_RXframeProcess(MCTL_Handle_t *pSupHandle, uint16_t *packetLength)
{
 8000b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b16:	46de      	mov	lr, fp
 8000b18:	4657      	mov	r7, sl
 8000b1a:	464e      	mov	r6, r9
 8000b1c:	4645      	mov	r5, r8
    uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
    uint16_t packetNumber;
#if VALID_CRC_DATA
    bool validCRCData = true;
#endif
    *packetLength = 0;
 8000b1e:	2200      	movs	r2, #0
{
 8000b20:	b5e0      	push	{r5, r6, r7, lr}
    uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
 8000b22:	69c3      	ldr	r3, [r0, #28]
{
 8000b24:	b085      	sub	sp, #20
    *packetLength = 0;
 8000b26:	800a      	strh	r2, [r1, #0]
    if (pHandle->NewPacketAvailable)
 8000b28:	3249      	adds	r2, #73	@ 0x49
{
 8000b2a:	0004      	movs	r4, r0
    if (pHandle->NewPacketAvailable)
 8000b2c:	5c80      	ldrb	r0, [r0, r2]
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	d011      	beq.n	8000b56 <ASPEP_RXframeProcess+0x42>
    {
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
 8000b32:	2000      	movs	r0, #0
      switch (pHandle->ASPEP_State)
 8000b34:	254c      	movs	r5, #76	@ 0x4c
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
 8000b36:	54a0      	strb	r0, [r4, r2]
      switch (pHandle->ASPEP_State)
 8000b38:	5d62      	ldrb	r2, [r4, r5]
 8000b3a:	2a01      	cmp	r2, #1
 8000b3c:	d060      	beq.n	8000c00 <ASPEP_RXframeProcess+0xec>
 8000b3e:	2a02      	cmp	r2, #2
 8000b40:	d016      	beq.n	8000b70 <ASPEP_RXframeProcess+0x5c>
 8000b42:	2a00      	cmp	r2, #0
 8000b44:	d028      	beq.n	8000b98 <ASPEP_RXframeProcess+0x84>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 8000b46:	2500      	movs	r5, #0

        default:
          break;
      }
      /* The valid received packet is now safely consumes, we are ready to receive a new packet */
      pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000b48:	0021      	movs	r1, r4
 8000b4a:	2204      	movs	r2, #4
 8000b4c:	6960      	ldr	r0, [r4, #20]
 8000b4e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8000b50:	311c      	adds	r1, #28
 8000b52:	4798      	blx	r3
 8000b54:	e004      	b.n	8000b60 <ASPEP_RXframeProcess+0x4c>
    }
    else if (pHandle->badPacketFlag > ASPEP_OK)
 8000b56:	234a      	movs	r3, #74	@ 0x4a
 8000b58:	5ce2      	ldrb	r2, [r4, r3]
 8000b5a:	2a00      	cmp	r2, #0
 8000b5c:	d129      	bne.n	8000bb2 <ASPEP_RXframeProcess+0x9e>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 8000b5e:	2500      	movs	r5, #0
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
  return (result);
}
 8000b60:	0028      	movs	r0, r5
 8000b62:	b005      	add	sp, #20
 8000b64:	bcf0      	pop	{r4, r5, r6, r7}
 8000b66:	46bb      	mov	fp, r7
 8000b68:	46b2      	mov	sl, r6
 8000b6a:	46a9      	mov	r9, r5
 8000b6c:	46a0      	mov	r8, r4
 8000b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (BEACON == pHandle->rxPacketType)
 8000b70:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8000b72:	2a05      	cmp	r2, #5
 8000b74:	d100      	bne.n	8000b78 <ASPEP_RXframeProcess+0x64>
 8000b76:	e09e      	b.n	8000cb6 <ASPEP_RXframeProcess+0x1a2>
          else if (PING == pHandle->rxPacketType)
 8000b78:	2a06      	cmp	r2, #6
 8000b7a:	d100      	bne.n	8000b7e <ASPEP_RXframeProcess+0x6a>
 8000b7c:	e151      	b.n	8000e22 <ASPEP_RXframeProcess+0x30e>
          else if (DATA_PACKET == pHandle->rxPacketType)
 8000b7e:	2a09      	cmp	r2, #9
 8000b80:	d1e1      	bne.n	8000b46 <ASPEP_RXframeProcess+0x32>
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 8000b82:	323f      	adds	r2, #63	@ 0x3f
 8000b84:	5ca3      	ldrb	r3, [r4, r2]
 8000b86:	3301      	adds	r3, #1
 8000b88:	54a3      	strb	r3, [r4, r2]
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	7423      	strb	r3, [r4, #16]
              *packetLength = pHandle->rxLengthASPEP;
 8000b8e:	3343      	adds	r3, #67	@ 0x43
 8000b90:	5ae3      	ldrh	r3, [r4, r3]
              result = pHandle->rxBuffer;
 8000b92:	69a5      	ldr	r5, [r4, #24]
              *packetLength = pHandle->rxLengthASPEP;
 8000b94:	800b      	strh	r3, [r1, #0]
              result = pHandle->rxBuffer;
 8000b96:	e7d7      	b.n	8000b48 <ASPEP_RXframeProcess+0x34>
          if (BEACON == pHandle->rxPacketType)
 8000b98:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8000b9a:	2a05      	cmp	r2, #5
 8000b9c:	d100      	bne.n	8000ba0 <ASPEP_RXframeProcess+0x8c>
 8000b9e:	e0e0      	b.n	8000d62 <ASPEP_RXframeProcess+0x24e>
          else if (PING == pHandle->rxPacketType)
 8000ba0:	2a06      	cmp	r2, #6
 8000ba2:	d1d0      	bne.n	8000b46 <ASPEP_RXframeProcess+0x32>
            packetNumber = (uint16_t)((packetHeader & 0x0FFFF000U) >> (uint16_t)12U);
 8000ba4:	0b1b      	lsrs	r3, r3, #12
            ASPEP_sendPing(pHandle, ASPEP_PING_RESET, packetNumber);
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	0020      	movs	r0, r4
 8000baa:	b29a      	uxth	r2, r3
 8000bac:	f7ff feb0 	bl	8000910 <ASPEP_sendPing>
 8000bb0:	e7c9      	b.n	8000b46 <ASPEP_RXframeProcess+0x32>
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000bb2:	2509      	movs	r5, #9
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 8000bb4:	200f      	movs	r0, #15
 8000bb6:	0213      	lsls	r3, r2, #8
 8000bb8:	189b      	adds	r3, r3, r2
 8000bba:	021b      	lsls	r3, r3, #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000bbc:	0a1a      	lsrs	r2, r3, #8
 8000bbe:	49a2      	ldr	r1, [pc, #648]	@ (8000e48 <ASPEP_RXframeProcess+0x334>)
 8000bc0:	406a      	eors	r2, r5
 8000bc2:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000bc4:	5c8a      	ldrb	r2, [r1, r2]
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 8000bc6:	4318      	orrs	r0, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000bc8:	0c1b      	lsrs	r3, r3, #16
 8000bca:	4053      	eors	r3, r2
 8000bcc:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000bce:	5ccb      	ldrb	r3, [r1, r3]
 8000bd0:	4a9e      	ldr	r2, [pc, #632]	@ (8000e4c <ASPEP_RXframeProcess+0x338>)
  *headerPtr |= (uint32_t)crc << 28;
 8000bd2:	5cd3      	ldrb	r3, [r2, r3]
 8000bd4:	071b      	lsls	r3, r3, #28
 8000bd6:	4303      	orrs	r3, r0
 8000bd8:	6223      	str	r3, [r4, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8000bda:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000bdc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d100      	bne.n	8000be4 <ASPEP_RXframeProcess+0xd0>
 8000be2:	e125      	b.n	8000e30 <ASPEP_RXframeProcess+0x31c>
  __ASM volatile ("cpsie i" : : : "memory");
 8000be4:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 8000be6:	2324      	movs	r3, #36	@ 0x24
 8000be8:	5ce2      	ldrb	r2, [r4, r3]
 8000bea:	2a00      	cmp	r2, #0
 8000bec:	d101      	bne.n	8000bf2 <ASPEP_RXframeProcess+0xde>
          pHandle->ctrlBuffer.state = pending;
 8000bee:	3202      	adds	r2, #2
 8000bf0:	54e2      	strb	r2, [r4, r3]
      pHandle->badPacketFlag = ASPEP_OK;
 8000bf2:	234a      	movs	r3, #74	@ 0x4a
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	54e2      	strb	r2, [r4, r3]
      pHandle->fASPEP_HWSync(pHandle->ASPEPIp);
 8000bf8:	6960      	ldr	r0, [r4, #20]
 8000bfa:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8000bfc:	4798      	blx	r3
 8000bfe:	e7ae      	b.n	8000b5e <ASPEP_RXframeProcess+0x4a>
          if (BEACON == pHandle->rxPacketType)
 8000c00:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8000c02:	2a05      	cmp	r2, #5
 8000c04:	d00a      	beq.n	8000c1c <ASPEP_RXframeProcess+0x108>
          else if (PING == pHandle->rxPacketType)
 8000c06:	2a06      	cmp	r2, #6
 8000c08:	d19d      	bne.n	8000b46 <ASPEP_RXframeProcess+0x32>
            packetNumber = (uint16_t)((packetHeader & 0x0FFFF000U) >> (uint16_t)12U);
 8000c0a:	0b1b      	lsrs	r3, r3, #12
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8000c0c:	b29a      	uxth	r2, r3
 8000c0e:	2101      	movs	r1, #1
 8000c10:	0020      	movs	r0, r4
 8000c12:	f7ff fe7d 	bl	8000910 <ASPEP_sendPing>
            pHandle->ASPEP_State = ASPEP_CONNECTED;
 8000c16:	2302      	movs	r3, #2
 8000c18:	5563      	strb	r3, [r4, r5]
 8000c1a:	e794      	b.n	8000b46 <ASPEP_RXframeProcess+0x32>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000c1c:	213f      	movs	r1, #63	@ 0x3f
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000c1e:	257f      	movs	r5, #127	@ 0x7f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000c20:	7f62      	ldrb	r2, [r4, #29]
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000c22:	7f26      	ldrb	r6, [r4, #28]
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000c24:	4011      	ands	r1, r2
 8000c26:	468c      	mov	ip, r1
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8000c28:	0d5a      	lsrs	r2, r3, #21
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000c2a:	0b99      	lsrs	r1, r3, #14
 8000c2c:	4029      	ands	r1, r5
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8000c2e:	4015      	ands	r5, r2
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000c30:	2254      	movs	r2, #84	@ 0x54
 8000c32:	5ca2      	ldrb	r2, [r4, r2]
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000c34:	09f6      	lsrs	r6, r6, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000c36:	4690      	mov	r8, r2
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000c38:	2255      	movs	r2, #85	@ 0x55
 8000c3a:	5ca2      	ldrb	r2, [r4, r2]
 8000c3c:	1c17      	adds	r7, r2, #0
 8000c3e:	4562      	cmp	r2, ip
 8000c40:	d900      	bls.n	8000c44 <ASPEP_RXframeProcess+0x130>
 8000c42:	4667      	mov	r7, ip
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000c44:	2256      	movs	r2, #86	@ 0x56
 8000c46:	5ca2      	ldrb	r2, [r4, r2]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000c48:	b2ff      	uxtb	r7, r7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000c4a:	4691      	mov	r9, r2
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000c4c:	2257      	movs	r2, #87	@ 0x57
 8000c4e:	5ca2      	ldrb	r2, [r4, r2]
 8000c50:	4692      	mov	sl, r2
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000c52:	1c32      	adds	r2, r6, #0
 8000c54:	4546      	cmp	r6, r8
 8000c56:	d900      	bls.n	8000c5a <ASPEP_RXframeProcess+0x146>
 8000c58:	4642      	mov	r2, r8
 8000c5a:	0238      	lsls	r0, r7, #8
 8000c5c:	b2d2      	uxtb	r2, r2
 8000c5e:	4302      	orrs	r2, r0
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000c60:	1c08      	adds	r0, r1, #0
 8000c62:	4549      	cmp	r1, r9
 8000c64:	d900      	bls.n	8000c68 <ASPEP_RXframeProcess+0x154>
 8000c66:	4648      	mov	r0, r9
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000c68:	b2c0      	uxtb	r0, r0
 8000c6a:	0400      	lsls	r0, r0, #16
 8000c6c:	9001      	str	r0, [sp, #4]
 8000c6e:	4878      	ldr	r0, [pc, #480]	@ (8000e50 <ASPEP_RXframeProcess+0x33c>)
 8000c70:	4002      	ands	r2, r0
 8000c72:	9801      	ldr	r0, [sp, #4]
 8000c74:	4302      	orrs	r2, r0
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000c76:	1c28      	adds	r0, r5, #0
 8000c78:	4555      	cmp	r5, sl
 8000c7a:	d900      	bls.n	8000c7e <ASPEP_RXframeProcess+0x16a>
 8000c7c:	4650      	mov	r0, sl
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000c7e:	0212      	lsls	r2, r2, #8
 8000c80:	0600      	lsls	r0, r0, #24
 8000c82:	0a12      	lsrs	r2, r2, #8
 8000c84:	4302      	orrs	r2, r0
 8000c86:	6562      	str	r2, [r4, #84]	@ 0x54
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000c88:	4546      	cmp	r6, r8
 8000c8a:	d80b      	bhi.n	8000ca4 <ASPEP_RXframeProcess+0x190>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000c8c:	45bc      	cmp	ip, r7
 8000c8e:	d809      	bhi.n	8000ca4 <ASPEP_RXframeProcess+0x190>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000c90:	4549      	cmp	r1, r9
 8000c92:	d807      	bhi.n	8000ca4 <ASPEP_RXframeProcess+0x190>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000c94:	4555      	cmp	r5, sl
 8000c96:	d805      	bhi.n	8000ca4 <ASPEP_RXframeProcess+0x190>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000c98:	2258      	movs	r2, #88	@ 0x58
 8000c9a:	5ca2      	ldrb	r2, [r4, r2]
  MasterCapabilities.version = (uint8_t)((packetHeader &0x70U)>> 4U);           /*Bits 4 to 6*/
 8000c9c:	065b      	lsls	r3, r3, #25
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000c9e:	0f5b      	lsrs	r3, r3, #29
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d002      	beq.n	8000caa <ASPEP_RXframeProcess+0x196>
              pHandle->ASPEP_State = ASPEP_IDLE;
 8000ca4:	234c      	movs	r3, #76	@ 0x4c
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	54e2      	strb	r2, [r4, r3]
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 8000caa:	0021      	movs	r1, r4
 8000cac:	0020      	movs	r0, r4
 8000cae:	3154      	adds	r1, #84	@ 0x54
 8000cb0:	f7ff fdea 	bl	8000888 <ASPEP_sendBeacon>
 8000cb4:	e747      	b.n	8000b46 <ASPEP_RXframeProcess+0x32>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000cb6:	213f      	movs	r1, #63	@ 0x3f
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000cb8:	257f      	movs	r5, #127	@ 0x7f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000cba:	7f62      	ldrb	r2, [r4, #29]
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000cbc:	0b98      	lsrs	r0, r3, #14
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000cbe:	4011      	ands	r1, r2
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8000cc0:	0d5a      	lsrs	r2, r3, #21
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000cc2:	4028      	ands	r0, r5
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8000cc4:	4015      	ands	r5, r2
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000cc6:	2254      	movs	r2, #84	@ 0x54
 8000cc8:	5ca2      	ldrb	r2, [r4, r2]
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000cca:	7f26      	ldrb	r6, [r4, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000ccc:	4694      	mov	ip, r2
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000cce:	2255      	movs	r2, #85	@ 0x55
 8000cd0:	5ca2      	ldrb	r2, [r4, r2]
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000cd2:	09f6      	lsrs	r6, r6, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000cd4:	1c17      	adds	r7, r2, #0
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	d900      	bls.n	8000cdc <ASPEP_RXframeProcess+0x1c8>
 8000cda:	1c0f      	adds	r7, r1, #0
 8000cdc:	b2fa      	uxtb	r2, r7
 8000cde:	9201      	str	r2, [sp, #4]
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000ce0:	2256      	movs	r2, #86	@ 0x56
 8000ce2:	5ca2      	ldrb	r2, [r4, r2]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000ce4:	46b3      	mov	fp, r6
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000ce6:	4690      	mov	r8, r2
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000ce8:	2257      	movs	r2, #87	@ 0x57
 8000cea:	5ca2      	ldrb	r2, [r4, r2]
 8000cec:	4691      	mov	r9, r2
 8000cee:	2254      	movs	r2, #84	@ 0x54
 8000cf0:	4692      	mov	sl, r2
 8000cf2:	44a2      	add	sl, r4
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000cf4:	4566      	cmp	r6, ip
 8000cf6:	d900      	bls.n	8000cfa <ASPEP_RXframeProcess+0x1e6>
 8000cf8:	46e3      	mov	fp, ip
 8000cfa:	465f      	mov	r7, fp
 8000cfc:	9a01      	ldr	r2, [sp, #4]
 8000cfe:	b2ff      	uxtb	r7, r7
 8000d00:	0212      	lsls	r2, r2, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000d02:	4683      	mov	fp, r0
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000d04:	433a      	orrs	r2, r7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000d06:	4540      	cmp	r0, r8
 8000d08:	d900      	bls.n	8000d0c <ASPEP_RXframeProcess+0x1f8>
 8000d0a:	46c3      	mov	fp, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000d0c:	465f      	mov	r7, fp
 8000d0e:	b2ff      	uxtb	r7, r7
 8000d10:	043f      	lsls	r7, r7, #16
 8000d12:	46bb      	mov	fp, r7
 8000d14:	4f4e      	ldr	r7, [pc, #312]	@ (8000e50 <ASPEP_RXframeProcess+0x33c>)
 8000d16:	403a      	ands	r2, r7
 8000d18:	465f      	mov	r7, fp
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000d1a:	46ab      	mov	fp, r5
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000d1c:	433a      	orrs	r2, r7
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000d1e:	454d      	cmp	r5, r9
 8000d20:	d900      	bls.n	8000d24 <ASPEP_RXframeProcess+0x210>
 8000d22:	46cb      	mov	fp, r9
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000d24:	465f      	mov	r7, fp
 8000d26:	0212      	lsls	r2, r2, #8
 8000d28:	063f      	lsls	r7, r7, #24
 8000d2a:	0a12      	lsrs	r2, r2, #8
 8000d2c:	433a      	orrs	r2, r7
 8000d2e:	6562      	str	r2, [r4, #84]	@ 0x54
              pHandle->ASPEP_State = ASPEP_IDLE;
 8000d30:	2200      	movs	r2, #0
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000d32:	4566      	cmp	r6, ip
 8000d34:	d80e      	bhi.n	8000d54 <ASPEP_RXframeProcess+0x240>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000d36:	9e01      	ldr	r6, [sp, #4]
 8000d38:	42b1      	cmp	r1, r6
 8000d3a:	d80b      	bhi.n	8000d54 <ASPEP_RXframeProcess+0x240>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000d3c:	4540      	cmp	r0, r8
 8000d3e:	d809      	bhi.n	8000d54 <ASPEP_RXframeProcess+0x240>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000d40:	454d      	cmp	r5, r9
 8000d42:	d807      	bhi.n	8000d54 <ASPEP_RXframeProcess+0x240>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000d44:	3258      	adds	r2, #88	@ 0x58
 8000d46:	5ca2      	ldrb	r2, [r4, r2]
  MasterCapabilities.version = (uint8_t)((packetHeader &0x70U)>> 4U);           /*Bits 4 to 6*/
 8000d48:	065b      	lsls	r3, r3, #25
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000d4a:	0f5b      	lsrs	r3, r3, #29
 8000d4c:	1ad2      	subs	r2, r2, r3
 8000d4e:	4253      	negs	r3, r2
 8000d50:	415a      	adcs	r2, r3
 8000d52:	b2d2      	uxtb	r2, r2
 8000d54:	234c      	movs	r3, #76	@ 0x4c
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 8000d56:	4651      	mov	r1, sl
 8000d58:	0020      	movs	r0, r4
 8000d5a:	54e2      	strb	r2, [r4, r3]
 8000d5c:	f7ff fd94 	bl	8000888 <ASPEP_sendBeacon>
 8000d60:	e6f1      	b.n	8000b46 <ASPEP_RXframeProcess+0x32>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000d62:	213f      	movs	r1, #63	@ 0x3f
 8000d64:	7f62      	ldrb	r2, [r4, #29]
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000d66:	3533      	adds	r5, #51	@ 0x33
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000d68:	4011      	ands	r1, r2
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000d6a:	0b98      	lsrs	r0, r3, #14
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8000d6c:	0d5a      	lsrs	r2, r3, #21
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000d6e:	4028      	ands	r0, r5
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8000d70:	4015      	ands	r5, r2
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000d72:	2254      	movs	r2, #84	@ 0x54
 8000d74:	5ca2      	ldrb	r2, [r4, r2]
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000d76:	468c      	mov	ip, r1
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000d78:	4690      	mov	r8, r2
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000d7a:	2255      	movs	r2, #85	@ 0x55
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000d7c:	7f26      	ldrb	r6, [r4, #28]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000d7e:	5ca1      	ldrb	r1, [r4, r2]
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000d80:	09f6      	lsrs	r6, r6, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000d82:	1c0a      	adds	r2, r1, #0
 8000d84:	4561      	cmp	r1, ip
 8000d86:	d900      	bls.n	8000d8a <ASPEP_RXframeProcess+0x276>
 8000d88:	4662      	mov	r2, ip
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000d8a:	2156      	movs	r1, #86	@ 0x56
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000d8c:	b2d2      	uxtb	r2, r2
 8000d8e:	9201      	str	r2, [sp, #4]
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000d90:	5c62      	ldrb	r2, [r4, r1]
 8000d92:	1c01      	adds	r1, r0, #0
 8000d94:	4691      	mov	r9, r2
 8000d96:	4290      	cmp	r0, r2
 8000d98:	d900      	bls.n	8000d9c <ASPEP_RXframeProcess+0x288>
 8000d9a:	1c11      	adds	r1, r2, #0
 8000d9c:	b2ca      	uxtb	r2, r1
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000d9e:	2157      	movs	r1, #87	@ 0x57
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000da0:	9202      	str	r2, [sp, #8]
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000da2:	5c62      	ldrb	r2, [r4, r1]
 8000da4:	1c29      	adds	r1, r5, #0
 8000da6:	4692      	mov	sl, r2
 8000da8:	4295      	cmp	r5, r2
 8000daa:	d900      	bls.n	8000dae <ASPEP_RXframeProcess+0x29a>
 8000dac:	1c11      	adds	r1, r2, #0
 8000dae:	b2ca      	uxtb	r2, r1
 8000db0:	9203      	str	r2, [sp, #12]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000db2:	1c31      	adds	r1, r6, #0
 8000db4:	4546      	cmp	r6, r8
 8000db6:	d900      	bls.n	8000dba <ASPEP_RXframeProcess+0x2a6>
 8000db8:	4641      	mov	r1, r8
 8000dba:	9a01      	ldr	r2, [sp, #4]
 8000dbc:	0217      	lsls	r7, r2, #8
 8000dbe:	b2ca      	uxtb	r2, r1
 8000dc0:	4693      	mov	fp, r2
 8000dc2:	9a02      	ldr	r2, [sp, #8]
 8000dc4:	0411      	lsls	r1, r2, #16
 8000dc6:	465a      	mov	r2, fp
 8000dc8:	433a      	orrs	r2, r7
 8000dca:	4693      	mov	fp, r2
 8000dcc:	9a03      	ldr	r2, [sp, #12]
 8000dce:	0617      	lsls	r7, r2, #24
 8000dd0:	465a      	mov	r2, fp
 8000dd2:	4311      	orrs	r1, r2
 8000dd4:	4339      	orrs	r1, r7
 8000dd6:	6561      	str	r1, [r4, #84]	@ 0x54
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000dd8:	4546      	cmp	r6, r8
 8000dda:	d900      	bls.n	8000dde <ASPEP_RXframeProcess+0x2ca>
 8000ddc:	e765      	b.n	8000caa <ASPEP_RXframeProcess+0x196>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000dde:	9a01      	ldr	r2, [sp, #4]
 8000de0:	4594      	cmp	ip, r2
 8000de2:	d900      	bls.n	8000de6 <ASPEP_RXframeProcess+0x2d2>
 8000de4:	e761      	b.n	8000caa <ASPEP_RXframeProcess+0x196>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000de6:	4548      	cmp	r0, r9
 8000de8:	d900      	bls.n	8000dec <ASPEP_RXframeProcess+0x2d8>
 8000dea:	e75e      	b.n	8000caa <ASPEP_RXframeProcess+0x196>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000dec:	4555      	cmp	r5, sl
 8000dee:	d900      	bls.n	8000df2 <ASPEP_RXframeProcess+0x2de>
 8000df0:	e75b      	b.n	8000caa <ASPEP_RXframeProcess+0x196>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000df2:	2158      	movs	r1, #88	@ 0x58
 8000df4:	5c61      	ldrb	r1, [r4, r1]
  MasterCapabilities.version = (uint8_t)((packetHeader &0x70U)>> 4U);           /*Bits 4 to 6*/
 8000df6:	065b      	lsls	r3, r3, #25
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000df8:	0f5b      	lsrs	r3, r3, #29
 8000dfa:	4299      	cmp	r1, r3
 8000dfc:	d000      	beq.n	8000e00 <ASPEP_RXframeProcess+0x2ec>
 8000dfe:	e754      	b.n	8000caa <ASPEP_RXframeProcess+0x196>
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000e00:	9b02      	ldr	r3, [sp, #8]
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000e02:	3201      	adds	r2, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000e04:	3301      	adds	r3, #1
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	015b      	lsls	r3, r3, #5
 8000e0a:	81a3      	strh	r3, [r4, #12]
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 8000e0c:	9b03      	ldr	r3, [sp, #12]
 8000e0e:	019b      	lsls	r3, r3, #6
 8000e10:	81e3      	strh	r3, [r4, #14]
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000e12:	b2d3      	uxtb	r3, r2
 8000e14:	2246      	movs	r2, #70	@ 0x46
 8000e16:	015b      	lsls	r3, r3, #5
 8000e18:	52a3      	strh	r3, [r4, r2]
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8000e1a:	234c      	movs	r3, #76	@ 0x4c
 8000e1c:	3a45      	subs	r2, #69	@ 0x45
 8000e1e:	54e2      	strb	r2, [r4, r3]
 8000e20:	e743      	b.n	8000caa <ASPEP_RXframeProcess+0x196>
            packetNumber = (uint16_t)((packetHeader & 0x0FFFF000U) >> (uint16_t)12U);
 8000e22:	0b1b      	lsrs	r3, r3, #12
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8000e24:	2101      	movs	r1, #1
 8000e26:	0020      	movs	r0, r4
 8000e28:	b29a      	uxth	r2, r3
 8000e2a:	f7ff fd71 	bl	8000910 <ASPEP_sendPing>
 8000e2e:	e68a      	b.n	8000b46 <ASPEP_RXframeProcess+0x32>
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000e30:	0021      	movs	r1, r4
        pHandle->ctrlBuffer.state = readLock;
 8000e32:	2203      	movs	r2, #3
 8000e34:	3324      	adds	r3, #36	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000e36:	3120      	adds	r1, #32
        pHandle->ctrlBuffer.state = readLock;
 8000e38:	54e2      	strb	r2, [r4, r3]
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000e3a:	6321      	str	r1, [r4, #48]	@ 0x30
 8000e3c:	b662      	cpsie	i
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 8000e3e:	6960      	ldr	r0, [r4, #20]
 8000e40:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000e42:	3201      	adds	r2, #1
 8000e44:	4798      	blx	r3
 8000e46:	e6d4      	b.n	8000bf2 <ASPEP_RXframeProcess+0xde>
 8000e48:	08005d50 	.word	0x08005d50
 8000e4c:	08005d40 	.word	0x08005d40
 8000e50:	ff00ffff 	.word	0xff00ffff

08000e54 <ASPEP_HWDataReceivedIT>:
  * If the packet received contains an error in the header, the HW IP will be re-synchronised first, and DMA will be configured after.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDataReceivedIT(ASPEP_Handle_t *pHandle)
{
 8000e54:	b570      	push	{r4, r5, r6, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    switch (pHandle->ASPEP_TL_State)
 8000e56:	254d      	movs	r5, #77	@ 0x4d
 8000e58:	5d43      	ldrb	r3, [r0, r5]
{
 8000e5a:	0004      	movs	r4, r0
    switch (pHandle->ASPEP_TL_State)
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d007      	beq.n	8000e70 <ASPEP_HWDataReceivedIT+0x1c>
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d000      	beq.n	8000e66 <ASPEP_HWDataReceivedIT+0x12>
        break;
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8000e64:	bd70      	pop	{r4, r5, r6, pc}
        pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000e66:	2200      	movs	r2, #0
 8000e68:	5542      	strb	r2, [r0, r5]
        pHandle->NewPacketAvailable = true;
 8000e6a:	3249      	adds	r2, #73	@ 0x49
 8000e6c:	5483      	strb	r3, [r0, r2]
}
 8000e6e:	e7f9      	b.n	8000e64 <ASPEP_HWDataReceivedIT+0x10>
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000e70:	4b1f      	ldr	r3, [pc, #124]	@ (8000ef0 <ASPEP_HWDataReceivedIT+0x9c>)
 8000e72:	7f01      	ldrb	r1, [r0, #28]
 8000e74:	69c2      	ldr	r2, [r0, #28]
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000e76:	5c59      	ldrb	r1, [r3, r1]
 8000e78:	0a10      	lsrs	r0, r2, #8
 8000e7a:	4041      	eors	r1, r0
 8000e7c:	b2c9      	uxtb	r1, r1
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000e7e:	5c59      	ldrb	r1, [r3, r1]
 8000e80:	0c10      	lsrs	r0, r2, #16
 8000e82:	4041      	eors	r1, r0
 8000e84:	b2c9      	uxtb	r1, r1
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 24U) & 0xffU)];
 8000e86:	5c59      	ldrb	r1, [r3, r1]
 8000e88:	0e12      	lsrs	r2, r2, #24
 8000e8a:	404a      	eors	r2, r1
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 8000e8c:	5c9b      	ldrb	r3, [r3, r2]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d10b      	bne.n	8000eaa <ASPEP_HWDataReceivedIT+0x56>
          pHandle->rxPacketType = (ASPEP_packetType)(((uint32_t)pHandle->rxHeader[0]) & ID_MASK);
 8000e92:	7f22      	ldrb	r2, [r4, #28]
 8000e94:	330f      	adds	r3, #15
 8000e96:	4013      	ands	r3, r2
 8000e98:	6523      	str	r3, [r4, #80]	@ 0x50
          switch (pHandle->rxPacketType)
 8000e9a:	2b06      	cmp	r3, #6
 8000e9c:	d809      	bhi.n	8000eb2 <ASPEP_HWDataReceivedIT+0x5e>
 8000e9e:	2b04      	cmp	r3, #4
 8000ea0:	d91d      	bls.n	8000ede <ASPEP_HWDataReceivedIT+0x8a>
              pHandle->NewPacketAvailable = true;
 8000ea2:	2349      	movs	r3, #73	@ 0x49
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	54e2      	strb	r2, [r4, r3]
              break;
 8000ea8:	e7dc      	b.n	8000e64 <ASPEP_HWDataReceivedIT+0x10>
          pHandle->badPacketFlag = ASPEP_BAD_CRC_HEADER;
 8000eaa:	234a      	movs	r3, #74	@ 0x4a
 8000eac:	2204      	movs	r2, #4
 8000eae:	54e2      	strb	r2, [r4, r3]
 8000eb0:	e7d8      	b.n	8000e64 <ASPEP_HWDataReceivedIT+0x10>
          switch (pHandle->rxPacketType)
 8000eb2:	2b09      	cmp	r3, #9
 8000eb4:	d113      	bne.n	8000ede <ASPEP_HWDataReceivedIT+0x8a>
              pHandle->rxLengthASPEP = (uint16_t)((*((uint16_t *)pHandle->rxHeader) & 0x1FFF0U) >> (uint16_t)4);
 8000eb6:	8ba2      	ldrh	r2, [r4, #28]
 8000eb8:	333b      	adds	r3, #59	@ 0x3b
 8000eba:	0912      	lsrs	r2, r2, #4
 8000ebc:	52e2      	strh	r2, [r4, r3]
              if (0U == pHandle->rxLengthASPEP) /* data packet with length 0 is a valid packet */
 8000ebe:	d0f0      	beq.n	8000ea2 <ASPEP_HWDataReceivedIT+0x4e>
              else if (pHandle->rxLengthASPEP <= pHandle->maxRXPayload)
 8000ec0:	2346      	movs	r3, #70	@ 0x46
 8000ec2:	5ae3      	ldrh	r3, [r4, r3]
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d30e      	bcc.n	8000ee6 <ASPEP_HWDataReceivedIT+0x92>
                                        (pHandle->rxLengthASPEP + ((uint16_t)ASPEP_DATACRC_SIZE * (uint16_t)pHandle->Capabilities.DATA_CRC)));
 8000ec8:	2354      	movs	r3, #84	@ 0x54
                pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxBuffer,  /* need to read + 2 bytes CRC*/
 8000eca:	5ce3      	ldrb	r3, [r4, r3]
 8000ecc:	69a1      	ldr	r1, [r4, #24]
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	18d2      	adds	r2, r2, r3
 8000ed2:	6960      	ldr	r0, [r4, #20]
 8000ed4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8000ed6:	4798      	blx	r3
                pHandle->ASPEP_TL_State = WAITING_PAYLOAD;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	5563      	strb	r3, [r4, r5]
 8000edc:	e7c2      	b.n	8000e64 <ASPEP_HWDataReceivedIT+0x10>
              pHandle->badPacketFlag = ASPEP_BAD_PACKET_TYPE;
 8000ede:	234a      	movs	r3, #74	@ 0x4a
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	54e2      	strb	r2, [r4, r3]
              break;
 8000ee4:	e7be      	b.n	8000e64 <ASPEP_HWDataReceivedIT+0x10>
                pHandle->badPacketFlag = ASPEP_BAD_PACKET_SIZE;
 8000ee6:	234a      	movs	r3, #74	@ 0x4a
 8000ee8:	2202      	movs	r2, #2
 8000eea:	54e2      	strb	r2, [r4, r3]
 8000eec:	e7ba      	b.n	8000e64 <ASPEP_HWDataReceivedIT+0x10>
 8000eee:	46c0      	nop			@ (mov r8, r8)
 8000ef0:	08005d50 	.word	0x08005d50

08000ef4 <ASPEP_HWReset>:
  {
#endif
    /* We must reset the RX state machine to be sure to not be in Waiting packet state */
    /* Otherwise the arrival of a new packet will trigger a NewPacketAvailable despite */
    /* the fact that bytes have been lost because of overrun (debugger paused for instance) */
    pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000ef4:	224d      	movs	r2, #77	@ 0x4d
 8000ef6:	2100      	movs	r1, #0
{
 8000ef8:	b510      	push	{r4, lr}
 8000efa:	0003      	movs	r3, r0
    pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000efc:	5481      	strb	r1, [r0, r2]
    pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000efe:	0001      	movs	r1, r0
 8000f00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f02:	6940      	ldr	r0, [r0, #20]
 8000f04:	311c      	adds	r1, #28
 8000f06:	3a49      	subs	r2, #73	@ 0x49
 8000f08:	4798      	blx	r3
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8000f0a:	bd10      	pop	{r4, pc}

08000f0c <HALL_Init>:
            required for the speed position sensor management using HALL
            sensors.
  * @param  pHandle: handler of the current instance of the hall_speed_pos_fdbk component
  */
__weak void HALL_Init(HALL_Handle_t *pHandle)
{
 8000f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f0e:	4647      	mov	r7, r8
 8000f10:	46ce      	mov	lr, r9
 8000f12:	b580      	push	{r7, lr}

    /* Adjustment factor: maximum measurable speed is x time greater than the
    maximum reliable speed */
    hMaxReliableElSpeedUnit *= 2U;

    pHandle->OvfFreq = (uint16_t)(pHandle->TIMClockFreq / 65536U);
 8000f14:	6a87      	ldr	r7, [r0, #40]	@ 0x28
    uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit * pHandle->_Super.bElToMecRatio;
 8000f16:	7842      	ldrb	r2, [r0, #1]
 8000f18:	8ac3      	ldrh	r3, [r0, #22]
    hMaxReliableElSpeedUnit *= 2U;
 8000f1a:	8a86      	ldrh	r6, [r0, #20]
    uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit * pHandle->_Super.bElToMecRatio;
 8000f1c:	4353      	muls	r3, r2
    hMaxReliableElSpeedUnit *= 2U;
 8000f1e:	4356      	muls	r6, r2
    pHandle->OvfFreq = (uint16_t)(pHandle->TIMClockFreq / 65536U);
 8000f20:	0c3a      	lsrs	r2, r7, #16
 8000f22:	4690      	mov	r8, r2
 8000f24:	22c6      	movs	r2, #198	@ 0xc6
 8000f26:	4641      	mov	r1, r8
    hMaxReliableElSpeedUnit *= 2U;
 8000f28:	0076      	lsls	r6, r6, #1
    uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit * pHandle->_Super.bElToMecRatio;
 8000f2a:	b29b      	uxth	r3, r3
    TIM_TypeDef *TIMx = pHandle->TIMx;
 8000f2c:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
{
 8000f2e:	0004      	movs	r4, r0
    hMaxReliableElSpeedUnit *= 2U;
 8000f30:	b2b6      	uxth	r6, r6
    pHandle->OvfFreq = (uint16_t)(pHandle->TIMClockFreq / 65536U);
 8000f32:	5281      	strh	r1, [r0, r2]

    /* SW Init */
    if (0U == hMinReliableElSpeedUnit)
 8000f34:	2b03      	cmp	r3, #3
 8000f36:	d800      	bhi.n	8000f3a <HALL_Init+0x2e>
 8000f38:	e06d      	b.n	8001016 <HALL_Init+0x10a>
    else
    {
      /* Set accordingly the min reliable speed */
      /* 1000 comes from mS
      * 6 comes from the fact that sensors are toggling each 60 deg = 360/6 deg */
      pHandle->HallTimeout = (1000U * (uint16_t)SPEED_UNIT) / (6U * hMinReliableElSpeedUnit);
 8000f3a:	089b      	lsrs	r3, r3, #2
 8000f3c:	0059      	lsls	r1, r3, #1
 8000f3e:	18c9      	adds	r1, r1, r3
 8000f40:	4836      	ldr	r0, [pc, #216]	@ (800101c <HALL_Init+0x110>)
 8000f42:	0049      	lsls	r1, r1, #1
 8000f44:	f7ff f8e0 	bl	8000108 <__udivsi3>
 8000f48:	b282      	uxth	r2, r0
 8000f4a:	23c4      	movs	r3, #196	@ 0xc4
    }

    /* Compute the prescaler to the closet value of the TimeOut (in mS )*/
    pHandle->HALLMaxRatio = (pHandle->HallTimeout * pHandle->OvfFreq) / 1000U ;
 8000f4c:	21fa      	movs	r1, #250	@ 0xfa
 8000f4e:	52e2      	strh	r2, [r4, r3]
 8000f50:	4643      	mov	r3, r8
 8000f52:	0089      	lsls	r1, r1, #2
 8000f54:	4358      	muls	r0, r3
 8000f56:	f7ff f8d7 	bl	8000108 <__udivsi3>
 8000f5a:	23b4      	movs	r3, #180	@ 0xb4
 8000f5c:	52e0      	strh	r0, [r4, r3]

    /* Align MaxPeriod to a multiple of Overflow.*/
    pHandle->MaxPeriod = pHandle->HALLMaxRatio * 65536UL;
 8000f5e:	0400      	lsls	r0, r0, #16
 8000f60:	0c03      	lsrs	r3, r0, #16
 8000f62:	4698      	mov	r8, r3
 8000f64:	23bc      	movs	r3, #188	@ 0xbc
 8000f66:	50e0      	str	r0, [r4, r3]

    pHandle->SatSpeed = hMaxReliableElSpeedUnit;
 8000f68:	3b06      	subs	r3, #6
 8000f6a:	52e6      	strh	r6, [r4, r3]

    pHandle->PseudoFreqConv = ((pHandle->TIMClockFreq / 6U) / pHandle->_Super.hMeasurementFrequency)
 8000f6c:	2106      	movs	r1, #6
 8000f6e:	0038      	movs	r0, r7
 8000f70:	f7ff f8ca 	bl	8000108 <__udivsi3>
 8000f74:	8b67      	ldrh	r7, [r4, #26]
 8000f76:	4681      	mov	r9, r0
 8000f78:	0039      	movs	r1, r7
 8000f7a:	f7ff f8c5 	bl	8000108 <__udivsi3>
 8000f7e:	22b8      	movs	r2, #184	@ 0xb8
                              * pHandle->_Super.DPPConvFactor;
 8000f80:	69e3      	ldr	r3, [r4, #28]
 8000f82:	4343      	muls	r3, r0
    pHandle->PseudoFreqConv = ((pHandle->TIMClockFreq / 6U) / pHandle->_Super.hMeasurementFrequency)
 8000f84:	50a3      	str	r3, [r4, r2]

    if (0U == hMaxReliableElSpeedUnit)
    {
      pHandle->MinPeriod = ((uint32_t)SPEED_UNIT * (pHandle->TIMClockFreq / 6UL));
 8000f86:	464b      	mov	r3, r9
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	444b      	add	r3, r9
 8000f8c:	0058      	lsls	r0, r3, #1
    if (0U == hMaxReliableElSpeedUnit)
 8000f8e:	2e00      	cmp	r6, #0
 8000f90:	d002      	beq.n	8000f98 <HALL_Init+0x8c>
    }
    else
    {
      pHandle->MinPeriod = (((uint32_t)SPEED_UNIT * (pHandle->TIMClockFreq / 6UL)) / hMaxReliableElSpeedUnit);
 8000f92:	0031      	movs	r1, r6
 8000f94:	f7ff f8b8 	bl	8000108 <__udivsi3>
 8000f98:	23c0      	movs	r3, #192	@ 0xc0
 8000f9a:	50e0      	str	r0, [r4, r3]
    }

    pHandle->PWMNbrPSamplingFreq = ((pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8000f9c:	330a      	adds	r3, #10
 8000f9e:	5ce0      	ldrb	r0, [r4, r3]
                                    pHandle->SpeedSamplingFreqHz) - 1U;
 8000fa0:	8ca1      	ldrh	r1, [r4, #36]	@ 0x24
    pHandle->PWMNbrPSamplingFreq = ((pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8000fa2:	4378      	muls	r0, r7
 8000fa4:	f7ff f93a 	bl	800021c <__divsi3>
 8000fa8:	23c8      	movs	r3, #200	@ 0xc8

    /* Reset speed reliability */
    pHandle->SensorIsReliable = true;
 8000faa:	224c      	movs	r2, #76	@ 0x4c
                                    pHandle->SpeedSamplingFreqHz) - 1U;
 8000fac:	3801      	subs	r0, #1
    pHandle->PWMNbrPSamplingFreq = ((pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8000fae:	52e0      	strh	r0, [r4, r3]
  */
__STATIC_INLINE void LL_TIM_IC_SetFilter(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICFilter)
{
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8000fb0:	20f0      	movs	r0, #240	@ 0xf0
    pHandle->SensorIsReliable = true;
 8000fb2:	3bc7      	subs	r3, #199	@ 0xc7
 8000fb4:	69a9      	ldr	r1, [r5, #24]
 8000fb6:	54a3      	strb	r3, [r4, r2]
 8000fb8:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8000fba:	4381      	bics	r1, r0
 8000fbc:	0c12      	lsrs	r2, r2, #16
 8000fbe:	430a      	orrs	r2, r1
 8000fc0:	61aa      	str	r2, [r5, #24]
  WRITE_REG(TIMx->PSC, Prescaler);
 8000fc2:	4642      	mov	r2, r8
    */
    LL_TIM_SetPrescaler(TIMx, pHandle->HALLMaxRatio);
    LL_TIM_GenerateEvent_UPDATE(TIMx);

    /* Clear the TIMx's pending flags */
    WRITE_REG(TIMx->SR, 0);
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	62aa      	str	r2, [r5, #40]	@ 0x28
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8000fc8:	696a      	ldr	r2, [r5, #20]
  MODIFY_REG(TIMx->CR1, TIM_CR1_URS, UpdateSource);
 8000fca:	38ec      	subs	r0, #236	@ 0xec
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8000fcc:	431a      	orrs	r2, r3
 8000fce:	616a      	str	r2, [r5, #20]
 8000fd0:	6129      	str	r1, [r5, #16]
  MODIFY_REG(TIMx->CR1, TIM_CR1_URS, UpdateSource);
 8000fd2:	682a      	ldr	r2, [r5, #0]
 8000fd4:	4302      	orrs	r2, r0
 8000fd6:	602a      	str	r2, [r5, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8000fd8:	68ea      	ldr	r2, [r5, #12]
 8000fda:	3802      	subs	r0, #2
 8000fdc:	4302      	orrs	r2, r0
 8000fde:	60ea      	str	r2, [r5, #12]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8000fe0:	68ea      	ldr	r2, [r5, #12]
 8000fe2:	431a      	orrs	r2, r3
 8000fe4:	60ea      	str	r2, [r5, #12]
  WRITE_REG(TIMx->CNT, Counter);
 8000fe6:	6269      	str	r1, [r5, #36]	@ 0x24
  SET_BIT(TIMx->CCER, Channels);
 8000fe8:	6a2a      	ldr	r2, [r5, #32]
 8000fea:	431a      	orrs	r2, r3
 8000fec:	622a      	str	r2, [r5, #32]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000fee:	682a      	ldr	r2, [r5, #0]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	602b      	str	r3, [r5, #0]

    LL_TIM_CC_EnableChannel(TIMx, LL_TIM_CHANNEL_CH1);
    LL_TIM_EnableCounter(TIMx);

    /* Erase speed buffer */
    bSpeedBufferSize = pHandle->SpeedBufferSize;
 8000ff4:	2326      	movs	r3, #38	@ 0x26
 8000ff6:	5ce2      	ldrb	r2, [r4, r3]

    for (bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++)
 8000ff8:	2a00      	cmp	r2, #0
 8000ffa:	d008      	beq.n	800100e <HALL_Init+0x102>
    {
      pHandle->SensorPeriod[bIndex]  = (int32_t)pHandle->MaxPeriod;
 8000ffc:	3396      	adds	r3, #150	@ 0x96
 8000ffe:	58e1      	ldr	r1, [r4, r3]
    for (bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++)
 8001000:	2300      	movs	r3, #0
 8001002:	3454      	adds	r4, #84	@ 0x54
 8001004:	3301      	adds	r3, #1
 8001006:	b2db      	uxtb	r3, r3
      pHandle->SensorPeriod[bIndex]  = (int32_t)pHandle->MaxPeriod;
 8001008:	c402      	stmia	r4!, {r1}
    for (bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++)
 800100a:	429a      	cmp	r2, r3
 800100c:	d1fa      	bne.n	8001004 <HALL_Init+0xf8>
    }
#ifdef NULL_PTR_CHECK_HALL_SPD_POS_FDB
  }
#endif
}
 800100e:	bcc0      	pop	{r6, r7}
 8001010:	46b9      	mov	r9, r7
 8001012:	46b0      	mov	r8, r6
 8001014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001016:	2096      	movs	r0, #150	@ 0x96
      pHandle->HallTimeout = 150U;
 8001018:	2296      	movs	r2, #150	@ 0x96
 800101a:	e796      	b.n	8000f4a <HALL_Init+0x3e>
 800101c:	00002710 	.word	0x00002710

08001020 <HALL_Clear>:
  *         This function must be called before starting the motor to initialize
  *         the speed measurement process.
  * @param  pHandle: handler of the current instance of the hall_speed_pos_fdbk component*
  */
__weak void HALL_Clear(HALL_Handle_t *pHandle)
{
 8001020:	b5f0      	push	{r4, r5, r6, r7, lr}
  CLEAR_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8001022:	2502      	movs	r5, #2
    /* Nothing to do */
  }
  else
  {
#endif
    TIM_TypeDef *TIMx = pHandle->TIMx;
 8001024:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c

    /* Mask interrupts to insure a clean intialization */
    LL_TIM_DisableIT_CC1(TIMx);

    pHandle->RatioDec = false;
 8001026:	2100      	movs	r1, #0
 8001028:	68da      	ldr	r2, [r3, #12]
    pHandle->RatioInc = false;

    /* Reset speed reliability */
    pHandle->SensorIsReliable = true;
 800102a:	2401      	movs	r4, #1
 800102c:	43aa      	bics	r2, r5
 800102e:	60da      	str	r2, [r3, #12]
    pHandle->RatioDec = false;
 8001030:	224d      	movs	r2, #77	@ 0x4d
 8001032:	5481      	strb	r1, [r0, r2]
    pHandle->RatioInc = false;
 8001034:	3201      	adds	r2, #1
 8001036:	5481      	strb	r1, [r0, r2]
    pHandle->SensorIsReliable = true;
 8001038:	3a02      	subs	r2, #2
 800103a:	5484      	strb	r4, [r0, r2]

    /* Acceleration measurement not implemented.*/
    pHandle->_Super.hMecAccelUnitP = 0;

    pHandle->FirstCapt = 0U;
 800103c:	264f      	movs	r6, #79	@ 0x4f
    pHandle->_Super.hMecAccelUnitP = 0;
 800103e:	2200      	movs	r2, #0
 8001040:	8241      	strh	r1, [r0, #18]
    pHandle->FirstCapt = 0U;
 8001042:	5582      	strb	r2, [r0, r6]
    pHandle->BufferFilled = 0U;
 8001044:	3601      	adds	r6, #1
 8001046:	5582      	strb	r2, [r0, r6]
    pHandle->OVFCounter = 0U;
 8001048:	3601      	adds	r6, #1
 800104a:	5582      	strb	r2, [r0, r6]

    pHandle->CompSpeed = 0;

    pHandle->Direction = POSITIVE;
 800104c:	3655      	adds	r6, #85	@ 0x55
 800104e:	5584      	strb	r4, [r0, r6]

    /* Initialize speed buffer index */
    pHandle->SpeedFIFOIdx = 0U;
 8001050:	3e0a      	subs	r6, #10
 8001052:	5582      	strb	r2, [r0, r6]

    /* Clear speed error counter */
    pHandle->_Super.bSpeedErrorNumber = 0;
 8001054:	7002      	strb	r2, [r0, #0]

    /* Re-initialize partly the timer */
    LL_TIM_SetPrescaler(TIMx, pHandle->HALLMaxRatio);
 8001056:	22b4      	movs	r2, #180	@ 0xb4
 8001058:	5a82      	ldrh	r2, [r0, r2]
  {
#endif
    if (DEGREES_120 == pHandle->SensorPlacement)
    {
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
                                      | (LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) << 1U)
 800105a:	6b87      	ldr	r7, [r0, #56]	@ 0x38
  WRITE_REG(TIMx->PSC, Prescaler);
 800105c:	629a      	str	r2, [r3, #40]	@ 0x28
  WRITE_REG(TIMx->CNT, Counter);
 800105e:	6259      	str	r1, [r3, #36]	@ 0x24
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8001064:	4322      	orrs	r2, r4
 8001066:	601a      	str	r2, [r3, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8001068:	68da      	ldr	r2, [r3, #12]
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 800106a:	6c46      	ldr	r6, [r0, #68]	@ 0x44
 800106c:	432a      	orrs	r2, r5
 800106e:	60da      	str	r2, [r3, #12]
    if (DEGREES_120 == pHandle->SensorPlacement)
 8001070:	2220      	movs	r2, #32
 8001072:	5c82      	ldrb	r2, [r0, r2]
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 8001074:	6c05      	ldr	r5, [r0, #64]	@ 0x40
                                      | LL_GPIO_IsInputPinSet(pHandle->H1Port, pHandle->H1Pin));
 8001076:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8001078:	6b44      	ldr	r4, [r0, #52]	@ 0x34
    if (DEGREES_120 == pHandle->SensorPlacement)
 800107a:	2a00      	cmp	r2, #0
 800107c:	d11a      	bne.n	80010b4 <HALL_Clear+0x94>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 800107e:	692a      	ldr	r2, [r5, #16]
 8001080:	693d      	ldr	r5, [r7, #16]
 8001082:	4032      	ands	r2, r6
 8001084:	400d      	ands	r5, r1
 8001086:	1b92      	subs	r2, r2, r6
 8001088:	1a69      	subs	r1, r5, r1
 800108a:	4256      	negs	r6, r2
 800108c:	4172      	adcs	r2, r6
 800108e:	424d      	negs	r5, r1
 8001090:	4169      	adcs	r1, r5
 8001092:	691b      	ldr	r3, [r3, #16]
                                      | (LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) << 1U)
 8001094:	0049      	lsls	r1, r1, #1
 8001096:	4023      	ands	r3, r4
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 8001098:	0092      	lsls	r2, r2, #2
 800109a:	1b1b      	subs	r3, r3, r4
                                      | (LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) << 1U)
 800109c:	430a      	orrs	r2, r1
 800109e:	4259      	negs	r1, r3
 80010a0:	414b      	adcs	r3, r1
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 80010a2:	4313      	orrs	r3, r2
 80010a4:	22aa      	movs	r2, #170	@ 0xaa
 80010a6:	5483      	strb	r3, [r0, r2]
      pHandle->HallState  = (uint8_t)(((LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) ^ 1U) << 2U)
                                      | (LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 1U)
                                      | LL_GPIO_IsInputPinSet(pHandle->H1Port, pHandle->H1Pin));
    }

    switch (pHandle->HallState)
 80010a8:	2b06      	cmp	r3, #6
 80010aa:	d849      	bhi.n	8001140 <HALL_Clear+0x120>
 80010ac:	4a27      	ldr	r2, [pc, #156]	@ (800114c <HALL_Clear+0x12c>)
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	58d3      	ldr	r3, [r2, r3]
 80010b2:	469f      	mov	pc, r3
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	692d      	ldr	r5, [r5, #16]
 80010b8:	691b      	ldr	r3, [r3, #16]
 80010ba:	400a      	ands	r2, r1
 80010bc:	4035      	ands	r5, r6
 80010be:	4023      	ands	r3, r4
 80010c0:	1a52      	subs	r2, r2, r1
 80010c2:	1bad      	subs	r5, r5, r6
 80010c4:	4251      	negs	r1, r2
 80010c6:	414a      	adcs	r2, r1
 80010c8:	426e      	negs	r6, r5
 80010ca:	4175      	adcs	r5, r6
 80010cc:	1b1b      	subs	r3, r3, r4
 80010ce:	425c      	negs	r4, r3
 80010d0:	4163      	adcs	r3, r4
      pHandle->HallState  = (uint8_t)(((LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) ^ 1U) << 2U)
 80010d2:	2104      	movs	r1, #4
                                      | (LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 1U)
 80010d4:	006d      	lsls	r5, r5, #1
      pHandle->HallState  = (uint8_t)(((LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) ^ 1U) << 2U)
 80010d6:	0092      	lsls	r2, r2, #2
 80010d8:	432b      	orrs	r3, r5
 80010da:	404a      	eors	r2, r1
 80010dc:	4313      	orrs	r3, r2
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	e7e0      	b.n	80010a4 <HALL_Clear+0x84>
        break;
      }

      case STATE_6:
      {
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift - S16_60_PHASE_SHIFT - (S16_60_PHASE_SHIFT / 2));
 80010e2:	4a1b      	ldr	r2, [pc, #108]	@ (8001150 <HALL_Clear+0x130>)
 80010e4:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 80010e6:	4694      	mov	ip, r2
 80010e8:	4463      	add	r3, ip
 80010ea:	b21b      	sxth	r3, r3
 80010ec:	8083      	strh	r3, [r0, #4]
    }
    /* Reset incremental value */
    pHandle->IncrementElAngle = 0;

    /* Initialize the measured angle */
    pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 80010ee:	22ae      	movs	r2, #174	@ 0xae
 80010f0:	5283      	strh	r3, [r0, r2]
    pHandle->IncrementElAngle = 0;
 80010f2:	23b0      	movs	r3, #176	@ 0xb0
 80010f4:	2200      	movs	r2, #0
 80010f6:	50c2      	str	r2, [r0, r3]
}
 80010f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift + S16_60_PHASE_SHIFT + (S16_60_PHASE_SHIFT / 2));
 80010fa:	4a16      	ldr	r2, [pc, #88]	@ (8001154 <HALL_Clear+0x134>)
 80010fc:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 80010fe:	4694      	mov	ip, r2
 8001100:	4463      	add	r3, ip
 8001102:	b21b      	sxth	r3, r3
 8001104:	8083      	strh	r3, [r0, #4]
        break;
 8001106:	e7f2      	b.n	80010ee <HALL_Clear+0xce>
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift - S16_120_PHASE_SHIFT - (S16_60_PHASE_SHIFT / 2));
 8001108:	4a13      	ldr	r2, [pc, #76]	@ (8001158 <HALL_Clear+0x138>)
 800110a:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 800110c:	4694      	mov	ip, r2
 800110e:	4463      	add	r3, ip
 8001110:	b21b      	sxth	r3, r3
 8001112:	8083      	strh	r3, [r0, #4]
        break;
 8001114:	e7eb      	b.n	80010ee <HALL_Clear+0xce>
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT + (S16_60_PHASE_SHIFT / 2));
 8001116:	4a11      	ldr	r2, [pc, #68]	@ (800115c <HALL_Clear+0x13c>)
 8001118:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 800111a:	4694      	mov	ip, r2
 800111c:	4463      	add	r3, ip
 800111e:	b21b      	sxth	r3, r3
 8001120:	8083      	strh	r3, [r0, #4]
        break;
 8001122:	e7e4      	b.n	80010ee <HALL_Clear+0xce>
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift - (S16_60_PHASE_SHIFT / 2));
 8001124:	4a0e      	ldr	r2, [pc, #56]	@ (8001160 <HALL_Clear+0x140>)
 8001126:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8001128:	4694      	mov	ip, r2
 800112a:	4463      	add	r3, ip
 800112c:	b21b      	sxth	r3, r3
 800112e:	8083      	strh	r3, [r0, #4]
        break;
 8001130:	e7dd      	b.n	80010ee <HALL_Clear+0xce>
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift + (S16_60_PHASE_SHIFT / 2));
 8001132:	4a0c      	ldr	r2, [pc, #48]	@ (8001164 <HALL_Clear+0x144>)
 8001134:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8001136:	4694      	mov	ip, r2
 8001138:	4463      	add	r3, ip
 800113a:	b21b      	sxth	r3, r3
 800113c:	8083      	strh	r3, [r0, #4]
        break;
 800113e:	e7d6      	b.n	80010ee <HALL_Clear+0xce>
        pHandle->SensorIsReliable = false;
 8001140:	234c      	movs	r3, #76	@ 0x4c
 8001142:	2200      	movs	r2, #0
 8001144:	54c2      	strb	r2, [r0, r3]
    pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8001146:	2204      	movs	r2, #4
 8001148:	5e83      	ldrsh	r3, [r0, r2]
        break;
 800114a:	e7d0      	b.n	80010ee <HALL_Clear+0xce>
 800114c:	08005e50 	.word	0x08005e50
 8001150:	ffffc001 	.word	0xffffc001
 8001154:	00003fff 	.word	0x00003fff
 8001158:	ffff9556 	.word	0xffff9556
 800115c:	00006aaa 	.word	0x00006aaa
 8001160:	ffffeaab 	.word	0xffffeaab
 8001164:	00001555 	.word	0x00001555

08001168 <HALL_CalcElAngle>:
{
 8001168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800116a:	46c6      	mov	lr, r8
 800116c:	b500      	push	{lr}
    if (pHandle->_Super.hElSpeedDpp != HALL_MAX_PSEUDO_SPEED)
 800116e:	220e      	movs	r2, #14
 8001170:	5e85      	ldrsh	r5, [r0, r2]
 8001172:	4a1c      	ldr	r2, [pc, #112]	@ (80011e4 <HALL_CalcElAngle+0x7c>)
{
 8001174:	0003      	movs	r3, r0
        pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed - (pHandle->IncrementElAngle - S16_60_PHASE_SHIFT) - 1;
 8001176:	8880      	ldrh	r0, [r0, #4]
    if (pHandle->_Super.hElSpeedDpp != HALL_MAX_PSEUDO_SPEED)
 8001178:	4295      	cmp	r5, r2
 800117a:	d024      	beq.n	80011c6 <HALL_CalcElAngle+0x5e>
      pHandle->IncrementElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 800117c:	22b2      	movs	r2, #178	@ 0xb2
 800117e:	24b0      	movs	r4, #176	@ 0xb0
 8001180:	5a9a      	ldrh	r2, [r3, r2]
 8001182:	b2ae      	uxth	r6, r5
 8001184:	5b1f      	ldrh	r7, [r3, r4]
 8001186:	18b2      	adds	r2, r6, r2
 8001188:	b292      	uxth	r2, r2
 800118a:	18b9      	adds	r1, r7, r2
 800118c:	4690      	mov	r8, r2
      pHandle->PrevRotorFreq = pHandle->_Super.hElSpeedDpp;
 800118e:	22a4      	movs	r2, #164	@ 0xa4
      pHandle->IncrementElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8001190:	b209      	sxth	r1, r1
 8001192:	5319      	strh	r1, [r3, r4]
      pHandle->PrevRotorFreq = pHandle->_Super.hElSpeedDpp;
 8001194:	529d      	strh	r5, [r3, r2]
      if (pHandle->IncrementElAngle >= S16_60_PHASE_SHIFT)
 8001196:	4d14      	ldr	r5, [pc, #80]	@ (80011e8 <HALL_CalcElAngle+0x80>)
 8001198:	42a9      	cmp	r1, r5
 800119a:	dd09      	ble.n	80011b0 <HALL_CalcElAngle+0x48>
        pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed - (pHandle->IncrementElAngle - S16_60_PHASE_SHIFT) - 1;
 800119c:	46ac      	mov	ip, r5
 800119e:	4460      	add	r0, ip
        pHandle->IncrementElAngle = S16_60_PHASE_SHIFT;
 80011a0:	4a12      	ldr	r2, [pc, #72]	@ (80011ec <HALL_CalcElAngle+0x84>)
        pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed - (pHandle->IncrementElAngle - S16_60_PHASE_SHIFT) - 1;
 80011a2:	1bc0      	subs	r0, r0, r7
 80011a4:	b200      	sxth	r0, r0
 80011a6:	8098      	strh	r0, [r3, #4]
        pHandle->IncrementElAngle = S16_60_PHASE_SHIFT;
 80011a8:	531a      	strh	r2, [r3, r4]
}
 80011aa:	bc80      	pop	{r7}
 80011ac:	46b8      	mov	r8, r7
 80011ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
      else if (pHandle->IncrementElAngle <= -S16_60_PHASE_SHIFT)
 80011b0:	4d0f      	ldr	r5, [pc, #60]	@ (80011f0 <HALL_CalcElAngle+0x88>)
 80011b2:	42a9      	cmp	r1, r5
 80011b4:	da0d      	bge.n	80011d2 <HALL_CalcElAngle+0x6a>
        pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed - (pHandle->IncrementElAngle + S16_60_PHASE_SHIFT) + 1;
 80011b6:	46ac      	mov	ip, r5
 80011b8:	4460      	add	r0, ip
        pHandle->IncrementElAngle = -S16_60_PHASE_SHIFT;
 80011ba:	4a0e      	ldr	r2, [pc, #56]	@ (80011f4 <HALL_CalcElAngle+0x8c>)
        pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed - (pHandle->IncrementElAngle + S16_60_PHASE_SHIFT) + 1;
 80011bc:	1bc0      	subs	r0, r0, r7
 80011be:	b200      	sxth	r0, r0
 80011c0:	8098      	strh	r0, [r3, #4]
        pHandle->IncrementElAngle = -S16_60_PHASE_SHIFT;
 80011c2:	531a      	strh	r2, [r3, r4]
 80011c4:	e7f1      	b.n	80011aa <HALL_CalcElAngle+0x42>
      pHandle->_Super.hElAngle += pHandle->PrevRotorFreq;
 80011c6:	22a4      	movs	r2, #164	@ 0xa4
 80011c8:	5a9a      	ldrh	r2, [r3, r2]
 80011ca:	1880      	adds	r0, r0, r2
 80011cc:	b200      	sxth	r0, r0
 80011ce:	8098      	strh	r0, [r3, #4]
 80011d0:	e7eb      	b.n	80011aa <HALL_CalcElAngle+0x42>
        pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 80011d2:	21ae      	movs	r1, #174	@ 0xae
 80011d4:	5a5c      	ldrh	r4, [r3, r1]
        pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 80011d6:	4440      	add	r0, r8
        pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 80011d8:	1936      	adds	r6, r6, r4
        pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 80011da:	b200      	sxth	r0, r0
        pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 80011dc:	525e      	strh	r6, [r3, r1]
        pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 80011de:	8098      	strh	r0, [r3, #4]
 80011e0:	e7e3      	b.n	80011aa <HALL_CalcElAngle+0x42>
 80011e2:	46c0      	nop			@ (mov r8, r8)
 80011e4:	00007fff 	.word	0x00007fff
 80011e8:	00002aa9 	.word	0x00002aa9
 80011ec:	00002aaa 	.word	0x00002aaa
 80011f0:	ffffd557 	.word	0xffffd557
 80011f4:	ffffd556 	.word	0xffffd556

080011f8 <HALL_CalcAvrgMecSpeedUnit>:
    if (pHandle->SensorIsReliable)
 80011f8:	234c      	movs	r3, #76	@ 0x4c
{
 80011fa:	b570      	push	{r4, r5, r6, lr}
    TIM_TypeDef *TIMx = pHandle->TIMx;
 80011fc:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
{
 80011fe:	0004      	movs	r4, r0
    if (pHandle->SensorIsReliable)
 8001200:	5cc0      	ldrb	r0, [r0, r3]
{
 8001202:	000d      	movs	r5, r1
    if (pHandle->SensorIsReliable)
 8001204:	2800      	cmp	r0, #0
 8001206:	d00f      	beq.n	8001228 <HALL_CalcAvrgMecSpeedUnit+0x30>
  return (uint32_t)(READ_REG(TIMx->PSC));
 8001208:	6a93      	ldr	r3, [r2, #40]	@ 0x28
      if (LL_TIM_GetPrescaler(TIMx) >= pHandle->HALLMaxRatio)
 800120a:	22b4      	movs	r2, #180	@ 0xb4
 800120c:	5aa2      	ldrh	r2, [r4, r2]
 800120e:	429a      	cmp	r2, r3
 8001210:	d811      	bhi.n	8001236 <HALL_CalcAvrgMecSpeedUnit+0x3e>
        pHandle->_Super.hElSpeedDpp = 0;
 8001212:	2300      	movs	r3, #0
 8001214:	81e3      	strh	r3, [r4, #14]
              pHandle->CompSpeed = 0;
 8001216:	2000      	movs	r0, #0
        *hMecSpeedUnit = 0;
 8001218:	8028      	strh	r0, [r5, #0]
      bReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, hMecSpeedUnit);
 800121a:	0029      	movs	r1, r5
 800121c:	0020      	movs	r0, r4
 800121e:	f004 fb83 	bl	8005928 <SPD_IsMecSpeedReliable>
    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8001222:	2200      	movs	r2, #0
 8001224:	5eab      	ldrsh	r3, [r5, r2]
 8001226:	e004      	b.n	8001232 <HALL_CalcAvrgMecSpeedUnit+0x3a>
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8001228:	78e3      	ldrb	r3, [r4, #3]
      pHandle->_Super.hElSpeedDpp = 0;
 800122a:	81e0      	strh	r0, [r4, #14]
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 800122c:	7023      	strb	r3, [r4, #0]
      *hMecSpeedUnit = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	8008      	strh	r0, [r1, #0]
    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8001232:	81a3      	strh	r3, [r4, #12]
}
 8001234:	bd70      	pop	{r4, r5, r6, pc}
        pHandle->_Super.hElSpeedDpp =  pHandle->AvrElSpeedDpp;
 8001236:	23a8      	movs	r3, #168	@ 0xa8
 8001238:	5ee6      	ldrsh	r6, [r4, r3]
 800123a:	81e6      	strh	r6, [r4, #14]
        if (0 ==  pHandle->AvrElSpeedDpp)
 800123c:	2e00      	cmp	r6, #0
 800123e:	d0ea      	beq.n	8001216 <HALL_CalcAvrgMecSpeedUnit+0x1e>
          if (pHandle->AvrElSpeedDpp != HALL_MAX_PSEUDO_SPEED)
 8001240:	4b12      	ldr	r3, [pc, #72]	@ (800128c <HALL_CalcAvrgMecSpeedUnit+0x94>)
 8001242:	429e      	cmp	r6, r3
 8001244:	d01f      	beq.n	8001286 <HALL_CalcAvrgMecSpeedUnit+0x8e>
            if (true == pHandle->HallMtpa)
 8001246:	23cb      	movs	r3, #203	@ 0xcb
 8001248:	5ce3      	ldrb	r3, [r4, r3]
              pHandle->CompSpeed = 0;
 800124a:	2000      	movs	r0, #0
            if (true == pHandle->HallMtpa)
 800124c:	2b00      	cmp	r3, #0
 800124e:	d00d      	beq.n	800126c <HALL_CalcAvrgMecSpeedUnit+0x74>
 8001250:	23b2      	movs	r3, #178	@ 0xb2
 8001252:	52e0      	strh	r0, [r4, r3]
            *hMecSpeedUnit = (int16_t)((pHandle->AvrElSpeedDpp * (int32_t)pHandle->_Super.hMeasurementFrequency
 8001254:	8b63      	ldrh	r3, [r4, #26]
                        / ((int32_t)(pHandle->_Super.DPPConvFactor) * (int32_t)(pHandle->_Super.bElToMecRatio)) );
 8001256:	69e1      	ldr	r1, [r4, #28]
            *hMecSpeedUnit = (int16_t)((pHandle->AvrElSpeedDpp * (int32_t)pHandle->_Super.hMeasurementFrequency
 8001258:	435e      	muls	r6, r3
                        / ((int32_t)(pHandle->_Super.DPPConvFactor) * (int32_t)(pHandle->_Super.bElToMecRatio)) );
 800125a:	7863      	ldrb	r3, [r4, #1]
                        * (int32_t)SPEED_UNIT )
 800125c:	00b0      	lsls	r0, r6, #2
 800125e:	1980      	adds	r0, r0, r6
                        / ((int32_t)(pHandle->_Super.DPPConvFactor) * (int32_t)(pHandle->_Super.bElToMecRatio)) );
 8001260:	4359      	muls	r1, r3
                        * (int32_t)SPEED_UNIT )
 8001262:	0040      	lsls	r0, r0, #1
                        / ((int32_t)(pHandle->_Super.DPPConvFactor) * (int32_t)(pHandle->_Super.bElToMecRatio)) );
 8001264:	f7fe ffda 	bl	800021c <__divsi3>
            *hMecSpeedUnit = (int16_t)((pHandle->AvrElSpeedDpp * (int32_t)pHandle->_Super.hMeasurementFrequency
 8001268:	b200      	sxth	r0, r0
 800126a:	e7d5      	b.n	8001218 <HALL_CalcAvrgMecSpeedUnit+0x20>
              pHandle->DeltaAngle = pHandle->MeasuredElAngle - pHandle->_Super.hElAngle;
 800126c:	33ae      	adds	r3, #174	@ 0xae
 800126e:	5ae0      	ldrh	r0, [r4, r3]
 8001270:	88a3      	ldrh	r3, [r4, #4]
 8001272:	1ac0      	subs	r0, r0, r3
 8001274:	23ac      	movs	r3, #172	@ 0xac
 8001276:	b200      	sxth	r0, r0
 8001278:	52e0      	strh	r0, [r4, r3]
              pHandle->CompSpeed = (int16_t)((int32_t)(pHandle->DeltaAngle) / (int32_t)(pHandle->PWMNbrPSamplingFreq));
 800127a:	331c      	adds	r3, #28
 800127c:	5ae1      	ldrh	r1, [r4, r3]
 800127e:	f7fe ffcd 	bl	800021c <__divsi3>
 8001282:	b200      	sxth	r0, r0
 8001284:	e7e4      	b.n	8001250 <HALL_CalcAvrgMecSpeedUnit+0x58>
            *hMecSpeedUnit = (int16_t)pHandle->SatSpeed;
 8001286:	23b6      	movs	r3, #182	@ 0xb6
 8001288:	5ee0      	ldrsh	r0, [r4, r3]
 800128a:	e7c5      	b.n	8001218 <HALL_CalcAvrgMecSpeedUnit+0x20>
 800128c:	00007fff 	.word	0x00007fff

08001290 <HALL_TIMx_CC_IRQHandler>:
{
 8001290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001292:	46ce      	mov	lr, r9
 8001294:	4647      	mov	r7, r8
  if (pHandle->SensorIsReliable)
 8001296:	234c      	movs	r3, #76	@ 0x4c
{
 8001298:	b580      	push	{r7, lr}
  if (pHandle->SensorIsReliable)
 800129a:	5cc3      	ldrb	r3, [r0, r3]
{
 800129c:	0004      	movs	r4, r0
  if (pHandle->SensorIsReliable)
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d04b      	beq.n	800133a <HALL_TIMx_CC_IRQHandler+0xaa>
    bPrevHallState = pHandle->HallState;
 80012a2:	23aa      	movs	r3, #170	@ 0xaa
    if (DEGREES_120 == pHandle->SensorPlacement)
 80012a4:	2120      	movs	r1, #32
    bPrevHallState = pHandle->HallState;
 80012a6:	5cc2      	ldrb	r2, [r0, r3]
    PrevDirection = pHandle->Direction;
 80012a8:	3b04      	subs	r3, #4
 80012aa:	56c3      	ldrsb	r3, [r0, r3]
    if (DEGREES_120 == pHandle->SensorPlacement)
 80012ac:	5c61      	ldrb	r1, [r4, r1]
    PrevDirection = pHandle->Direction;
 80012ae:	4699      	mov	r9, r3
                                      | (LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) << 1U)
 80012b0:	6b83      	ldr	r3, [r0, #56]	@ 0x38
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 80012b2:	6c27      	ldr	r7, [r4, #64]	@ 0x40
                                      | (LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) << 1U)
 80012b4:	4698      	mov	r8, r3
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 80012b6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
                                      | (LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) << 1U)
 80012b8:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 80012ba:	469c      	mov	ip, r3
                                      | LL_GPIO_IsInputPinSet(pHandle->H1Port, pHandle->H1Pin));
 80012bc:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 80012be:	6b23      	ldr	r3, [r4, #48]	@ 0x30
    if (DEGREES_120 == pHandle->SensorPlacement)
 80012c0:	2900      	cmp	r1, #0
 80012c2:	d03f      	beq.n	8001344 <HALL_TIMx_CC_IRQHandler+0xb4>
 80012c4:	4641      	mov	r1, r8
 80012c6:	4665      	mov	r5, ip
 80012c8:	6909      	ldr	r1, [r1, #16]
 80012ca:	693f      	ldr	r7, [r7, #16]
 80012cc:	691b      	ldr	r3, [r3, #16]
 80012ce:	402f      	ands	r7, r5
 80012d0:	1b7f      	subs	r7, r7, r5
 80012d2:	003d      	movs	r5, r7
 80012d4:	4001      	ands	r1, r0
 80012d6:	4033      	ands	r3, r6
 80012d8:	1a09      	subs	r1, r1, r0
 80012da:	4248      	negs	r0, r1
 80012dc:	4141      	adcs	r1, r0
 80012de:	426f      	negs	r7, r5
 80012e0:	416f      	adcs	r7, r5
 80012e2:	1b9b      	subs	r3, r3, r6
 80012e4:	425e      	negs	r6, r3
 80012e6:	4173      	adcs	r3, r6
      pHandle->HallState  = (uint8_t)(((LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) ^ 1U) << 2U)
 80012e8:	2004      	movs	r0, #4
                                      | (LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 1U)
 80012ea:	007f      	lsls	r7, r7, #1
      pHandle->HallState  = (uint8_t)(((LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) ^ 1U) << 2U)
 80012ec:	0089      	lsls	r1, r1, #2
 80012ee:	433b      	orrs	r3, r7
 80012f0:	4041      	eors	r1, r0
 80012f2:	430b      	orrs	r3, r1
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	21aa      	movs	r1, #170	@ 0xaa
  TIM_TypeDef *TIMx = pHandle->TIMx;
 80012f8:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80012fa:	5463      	strb	r3, [r4, r1]
    switch (pHandle->HallState)
 80012fc:	2b06      	cmp	r3, #6
 80012fe:	d803      	bhi.n	8001308 <HALL_TIMx_CC_IRQHandler+0x78>
 8001300:	49ae      	ldr	r1, [pc, #696]	@ (80015bc <HALL_TIMx_CC_IRQHandler+0x32c>)
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	58cb      	ldr	r3, [r1, r3]
 8001306:	469f      	mov	pc, r3
        pHandle->SensorIsReliable = false;
 8001308:	234c      	movs	r3, #76	@ 0x4c
 800130a:	2200      	movs	r2, #0
 800130c:	54e2      	strb	r2, [r4, r3]
      pHandle->_Super.hElAngle = pHandle->MeasuredElAngle;
 800130e:	23ae      	movs	r3, #174	@ 0xae
 8001310:	5ee3      	ldrsh	r3, [r4, r3]
    if (true == pHandle->HallMtpa)
 8001312:	22cb      	movs	r2, #203	@ 0xcb
 8001314:	5ca2      	ldrb	r2, [r4, r2]
 8001316:	2a00      	cmp	r2, #0
 8001318:	d000      	beq.n	800131c <HALL_TIMx_CC_IRQHandler+0x8c>
 800131a:	e07e      	b.n	800141a <HALL_TIMx_CC_IRQHandler+0x18a>
    pHandle->IncrementElAngle = pHandle->_Super.hElAngle - pHandle->MeasuredElAngle;
 800131c:	88a2      	ldrh	r2, [r4, #4]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	22b0      	movs	r2, #176	@ 0xb0
 8001322:	b21b      	sxth	r3, r3
 8001324:	52a3      	strh	r3, [r4, r2]
    if (0U == pHandle->FirstCapt)
 8001326:	234f      	movs	r3, #79	@ 0x4f
 8001328:	5ce2      	ldrb	r2, [r4, r3]
 800132a:	2a00      	cmp	r2, #0
 800132c:	d000      	beq.n	8001330 <HALL_TIMx_CC_IRQHandler+0xa0>
 800132e:	e07d      	b.n	800142c <HALL_TIMx_CC_IRQHandler+0x19c>
      pHandle->FirstCapt++;
 8001330:	5ce2      	ldrb	r2, [r4, r3]
 8001332:	3201      	adds	r2, #1
 8001334:	b2d2      	uxtb	r2, r2
 8001336:	54e2      	strb	r2, [r4, r3]
  return (uint32_t)(READ_REG(TIMx->CCR1));
 8001338:	6b43      	ldr	r3, [r0, #52]	@ 0x34
}
 800133a:	2000      	movs	r0, #0
 800133c:	bcc0      	pop	{r6, r7}
 800133e:	46b9      	mov	r9, r7
 8001340:	46b0      	mov	r8, r6
 8001342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001344:	4665      	mov	r5, ip
 8001346:	6939      	ldr	r1, [r7, #16]
 8001348:	4647      	mov	r7, r8
 800134a:	4029      	ands	r1, r5
 800134c:	1b49      	subs	r1, r1, r5
 800134e:	000d      	movs	r5, r1
 8001350:	693f      	ldr	r7, [r7, #16]
 8001352:	4269      	negs	r1, r5
 8001354:	4169      	adcs	r1, r5
 8001356:	4007      	ands	r7, r0
 8001358:	1a38      	subs	r0, r7, r0
 800135a:	4247      	negs	r7, r0
 800135c:	4178      	adcs	r0, r7
 800135e:	691b      	ldr	r3, [r3, #16]
                                      | (LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) << 1U)
 8001360:	0040      	lsls	r0, r0, #1
 8001362:	4033      	ands	r3, r6
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 8001364:	0089      	lsls	r1, r1, #2
 8001366:	1b9b      	subs	r3, r3, r6
                                      | (LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) << 1U)
 8001368:	4301      	orrs	r1, r0
 800136a:	4258      	negs	r0, r3
 800136c:	4143      	adcs	r3, r0
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 800136e:	430b      	orrs	r3, r1
 8001370:	e7c1      	b.n	80012f6 <HALL_TIMx_CC_IRQHandler+0x66>
        if (STATE_2 == bPrevHallState)
 8001372:	2a02      	cmp	r2, #2
 8001374:	d100      	bne.n	8001378 <HALL_TIMx_CC_IRQHandler+0xe8>
 8001376:	e0f0      	b.n	800155a <HALL_TIMx_CC_IRQHandler+0x2ca>
        else if (STATE_4 == bPrevHallState)
 8001378:	2a04      	cmp	r2, #4
 800137a:	d1c8      	bne.n	800130e <HALL_TIMx_CC_IRQHandler+0x7e>
          pHandle->Direction = NEGATIVE;
 800137c:	23a6      	movs	r3, #166	@ 0xa6
 800137e:	32fb      	adds	r2, #251	@ 0xfb
 8001380:	54e2      	strb	r2, [r4, r3]
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_60_PHASE_SHIFT);
 8001382:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 8001384:	4a8e      	ldr	r2, [pc, #568]	@ (80015c0 <HALL_TIMx_CC_IRQHandler+0x330>)
 8001386:	e038      	b.n	80013fa <HALL_TIMx_CC_IRQHandler+0x16a>
        if (STATE_4 == bPrevHallState)
 8001388:	2a04      	cmp	r2, #4
 800138a:	d100      	bne.n	800138e <HALL_TIMx_CC_IRQHandler+0xfe>
 800138c:	e0de      	b.n	800154c <HALL_TIMx_CC_IRQHandler+0x2bc>
        else if (STATE_1 == bPrevHallState)
 800138e:	2a01      	cmp	r2, #1
 8001390:	d1bd      	bne.n	800130e <HALL_TIMx_CC_IRQHandler+0x7e>
          pHandle->Direction = NEGATIVE;
 8001392:	23a6      	movs	r3, #166	@ 0xa6
 8001394:	32fe      	adds	r2, #254	@ 0xfe
 8001396:	54e2      	strb	r2, [r4, r3]
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_60_PHASE_SHIFT);
 8001398:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 800139a:	4a8a      	ldr	r2, [pc, #552]	@ (80015c4 <HALL_TIMx_CC_IRQHandler+0x334>)
 800139c:	e02d      	b.n	80013fa <HALL_TIMx_CC_IRQHandler+0x16a>
        if (STATE_6 == bPrevHallState)
 800139e:	2a06      	cmp	r2, #6
 80013a0:	d100      	bne.n	80013a4 <HALL_TIMx_CC_IRQHandler+0x114>
 80013a2:	e0ed      	b.n	8001580 <HALL_TIMx_CC_IRQHandler+0x2f0>
        else if (STATE_5 == bPrevHallState)
 80013a4:	2a05      	cmp	r2, #5
 80013a6:	d1b2      	bne.n	800130e <HALL_TIMx_CC_IRQHandler+0x7e>
          pHandle->Direction = NEGATIVE;
 80013a8:	23a6      	movs	r3, #166	@ 0xa6
 80013aa:	2601      	movs	r6, #1
 80013ac:	32fa      	adds	r2, #250	@ 0xfa
 80013ae:	54e2      	strb	r2, [r4, r3]
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift);
 80013b0:	2222      	movs	r2, #34	@ 0x22
 80013b2:	5ea3      	ldrsh	r3, [r4, r2]
 80013b4:	4276      	negs	r6, r6
 80013b6:	e025      	b.n	8001404 <HALL_TIMx_CC_IRQHandler+0x174>
        if (STATE_1 == bPrevHallState)
 80013b8:	2a01      	cmp	r2, #1
 80013ba:	d100      	bne.n	80013be <HALL_TIMx_CC_IRQHandler+0x12e>
 80013bc:	e0d7      	b.n	800156e <HALL_TIMx_CC_IRQHandler+0x2de>
        else if (STATE_2 == bPrevHallState)
 80013be:	2a02      	cmp	r2, #2
 80013c0:	d1a5      	bne.n	800130e <HALL_TIMx_CC_IRQHandler+0x7e>
          pHandle->Direction = NEGATIVE;
 80013c2:	23a6      	movs	r3, #166	@ 0xa6
 80013c4:	32fd      	adds	r2, #253	@ 0xfd
 80013c6:	54e2      	strb	r2, [r4, r3]
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT + S16_60_PHASE_SHIFT);
 80013c8:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 80013ca:	4a7f      	ldr	r2, [pc, #508]	@ (80015c8 <HALL_TIMx_CC_IRQHandler+0x338>)
 80013cc:	e015      	b.n	80013fa <HALL_TIMx_CC_IRQHandler+0x16a>
        if (STATE_3 == bPrevHallState)
 80013ce:	2a03      	cmp	r2, #3
 80013d0:	d100      	bne.n	80013d4 <HALL_TIMx_CC_IRQHandler+0x144>
 80013d2:	e0e9      	b.n	80015a8 <HALL_TIMx_CC_IRQHandler+0x318>
        else if (STATE_6 == bPrevHallState)
 80013d4:	2a06      	cmp	r2, #6
 80013d6:	d19a      	bne.n	800130e <HALL_TIMx_CC_IRQHandler+0x7e>
          pHandle->Direction = NEGATIVE;
 80013d8:	23a6      	movs	r3, #166	@ 0xa6
 80013da:	32f9      	adds	r2, #249	@ 0xf9
 80013dc:	54e2      	strb	r2, [r4, r3]
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_120_PHASE_SHIFT);
 80013de:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 80013e0:	4a7a      	ldr	r2, [pc, #488]	@ (80015cc <HALL_TIMx_CC_IRQHandler+0x33c>)
 80013e2:	e00a      	b.n	80013fa <HALL_TIMx_CC_IRQHandler+0x16a>
        if (STATE_5 == bPrevHallState)
 80013e4:	2a05      	cmp	r2, #5
 80013e6:	d100      	bne.n	80013ea <HALL_TIMx_CC_IRQHandler+0x15a>
 80013e8:	e0d4      	b.n	8001594 <HALL_TIMx_CC_IRQHandler+0x304>
        else if (STATE_3 == bPrevHallState)
 80013ea:	2a03      	cmp	r2, #3
 80013ec:	d000      	beq.n	80013f0 <HALL_TIMx_CC_IRQHandler+0x160>
 80013ee:	e78e      	b.n	800130e <HALL_TIMx_CC_IRQHandler+0x7e>
          pHandle->Direction = NEGATIVE;
 80013f0:	23a6      	movs	r3, #166	@ 0xa6
 80013f2:	32fc      	adds	r2, #252	@ 0xfc
 80013f4:	54e2      	strb	r2, [r4, r3]
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT);
 80013f6:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 80013f8:	4a75      	ldr	r2, [pc, #468]	@ (80015d0 <HALL_TIMx_CC_IRQHandler+0x340>)
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_120_PHASE_SHIFT);
 80013fa:	4694      	mov	ip, r2
 80013fc:	2601      	movs	r6, #1
 80013fe:	4463      	add	r3, ip
 8001400:	b21b      	sxth	r3, r3
 8001402:	4276      	negs	r6, r6
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT + S16_60_PHASE_SHIFT);
 8001404:	22ae      	movs	r2, #174	@ 0xae
 8001406:	52a3      	strh	r3, [r4, r2]
    if (pHandle->Direction != PrevDirection)
 8001408:	45b1      	cmp	r9, r6
 800140a:	d004      	beq.n	8001416 <HALL_TIMx_CC_IRQHandler+0x186>
      pHandle->BufferFilled = 0U ;
 800140c:	2200      	movs	r2, #0
 800140e:	2150      	movs	r1, #80	@ 0x50
 8001410:	5462      	strb	r2, [r4, r1]
      pHandle->SpeedFIFOIdx = 0U;
 8001412:	314c      	adds	r1, #76	@ 0x4c
 8001414:	5462      	strb	r2, [r4, r1]
 8001416:	46b1      	mov	r9, r6
 8001418:	e77b      	b.n	8001312 <HALL_TIMx_CC_IRQHandler+0x82>
      pHandle->_Super.hElAngle = pHandle->MeasuredElAngle;
 800141a:	80a3      	strh	r3, [r4, #4]
    pHandle->IncrementElAngle = pHandle->_Super.hElAngle - pHandle->MeasuredElAngle;
 800141c:	22b0      	movs	r2, #176	@ 0xb0
 800141e:	2300      	movs	r3, #0
 8001420:	52a3      	strh	r3, [r4, r2]
    if (0U == pHandle->FirstCapt)
 8001422:	234f      	movs	r3, #79	@ 0x4f
 8001424:	5ce2      	ldrb	r2, [r4, r3]
 8001426:	2a00      	cmp	r2, #0
 8001428:	d100      	bne.n	800142c <HALL_TIMx_CC_IRQHandler+0x19c>
 800142a:	e781      	b.n	8001330 <HALL_TIMx_CC_IRQHandler+0xa0>
      if (pHandle->BufferFilled < pHandle->SpeedBufferSize)
 800142c:	2350      	movs	r3, #80	@ 0x50
 800142e:	2126      	movs	r1, #38	@ 0x26
 8001430:	5ce2      	ldrb	r2, [r4, r3]
 8001432:	5c61      	ldrb	r1, [r4, r1]
 8001434:	428a      	cmp	r2, r1
 8001436:	d203      	bcs.n	8001440 <HALL_TIMx_CC_IRQHandler+0x1b0>
        pHandle->BufferFilled++;
 8001438:	5ce2      	ldrb	r2, [r4, r3]
 800143a:	3201      	adds	r2, #1
 800143c:	b2d2      	uxtb	r2, r2
 800143e:	54e2      	strb	r2, [r4, r3]
      wCaptBuf += ((uint32_t)pHandle->OVFCounter) * 0x10000UL;
 8001440:	2651      	movs	r6, #81	@ 0x51
 8001442:	6b47      	ldr	r7, [r0, #52]	@ 0x34
  return (uint32_t)(READ_REG(TIMx->PSC));
 8001444:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      hPrscBuf = (uint16_t)LL_TIM_GetPrescaler(TIMx);
 8001446:	b293      	uxth	r3, r2
      wCaptBuf += ((uint32_t)pHandle->OVFCounter) * 0x10000UL;
 8001448:	5da2      	ldrb	r2, [r4, r6]
      hPrscBuf = (uint16_t)LL_TIM_GetPrescaler(TIMx);
 800144a:	469c      	mov	ip, r3
      wCaptBuf += ((uint32_t)pHandle->OVFCounter) * 0x10000UL;
 800144c:	043b      	lsls	r3, r7, #16
 800144e:	0412      	lsls	r2, r2, #16
 8001450:	0c1b      	lsrs	r3, r3, #16
 8001452:	189b      	adds	r3, r3, r2
      if (pHandle->OVFCounter != 0U)
 8001454:	5da2      	ldrb	r2, [r4, r6]
 8001456:	b2d5      	uxtb	r5, r2
 8001458:	2a00      	cmp	r2, #0
 800145a:	d041      	beq.n	80014e0 <HALL_TIMx_CC_IRQHandler+0x250>
        hAux = hPrscBuf + 1U;
 800145c:	4662      	mov	r2, ip
 800145e:	3201      	adds	r2, #1
        wCaptBuf *= hAux;
 8001460:	b292      	uxth	r2, r2
 8001462:	4353      	muls	r3, r2
        if (pHandle->RatioInc)
 8001464:	224e      	movs	r2, #78	@ 0x4e
 8001466:	5ca6      	ldrb	r6, [r4, r2]
 8001468:	2e00      	cmp	r6, #0
 800146a:	d043      	beq.n	80014f4 <HALL_TIMx_CC_IRQHandler+0x264>
          pHandle->RatioInc = false;  /* Previous capture caused overflow */
 800146c:	2000      	movs	r0, #0
 800146e:	54a0      	strb	r0, [r4, r2]
      if (wCaptBuf < pHandle->MinPeriod)
 8001470:	22c0      	movs	r2, #192	@ 0xc0
 8001472:	58a2      	ldr	r2, [r4, r2]
 8001474:	429a      	cmp	r2, r3
 8001476:	d82f      	bhi.n	80014d8 <HALL_TIMx_CC_IRQHandler+0x248>
        pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8001478:	229c      	movs	r2, #156	@ 0x9c
 800147a:	20a0      	movs	r0, #160	@ 0xa0
 800147c:	5ca2      	ldrb	r2, [r4, r2]
 800147e:	5820      	ldr	r0, [r4, r0]
 8001480:	0097      	lsls	r7, r2, #2
 8001482:	19e7      	adds	r7, r4, r7
 8001484:	6d7e      	ldr	r6, [r7, #84]	@ 0x54
          pHandle->SensorPeriod[pHandle->SpeedFIFOIdx] = (int32_t)pHandle->MaxPeriod * pHandle->Direction;
 8001486:	464d      	mov	r5, r9
        pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8001488:	1b80      	subs	r0, r0, r6
        if (wCaptBuf >= pHandle->MaxPeriod)
 800148a:	26bc      	movs	r6, #188	@ 0xbc
 800148c:	59a6      	ldr	r6, [r4, r6]
 800148e:	429e      	cmp	r6, r3
 8001490:	d850      	bhi.n	8001534 <HALL_TIMx_CC_IRQHandler+0x2a4>
          pHandle->SensorPeriod[pHandle->SpeedFIFOIdx] = (int32_t)pHandle->MaxPeriod * pHandle->Direction;
 8001492:	436e      	muls	r6, r5
 8001494:	657e      	str	r6, [r7, #84]	@ 0x54
          pHandle->ElPeriodSum += pHandle->SensorPeriod[pHandle->SpeedFIFOIdx];
 8001496:	1980      	adds	r0, r0, r6
 8001498:	26a0      	movs	r6, #160	@ 0xa0
        pHandle->SpeedFIFOIdx++;
 800149a:	3201      	adds	r2, #1
 800149c:	b2d2      	uxtb	r2, r2
          pHandle->ElPeriodSum += pHandle->SensorPeriod[pHandle->SpeedFIFOIdx];
 800149e:	51a0      	str	r0, [r4, r6]
          pHandle->SpeedFIFOIdx = 0U;
 80014a0:	1a8e      	subs	r6, r1, r2
 80014a2:	1e77      	subs	r7, r6, #1
 80014a4:	41be      	sbcs	r6, r7
 80014a6:	4276      	negs	r6, r6
 80014a8:	4032      	ands	r2, r6
 80014aa:	269c      	movs	r6, #156	@ 0x9c
 80014ac:	55a2      	strb	r2, [r4, r6]
        if (pHandle->SensorIsReliable)
 80014ae:	224c      	movs	r2, #76	@ 0x4c
 80014b0:	5ca2      	ldrb	r2, [r4, r2]
 80014b2:	2a00      	cmp	r2, #0
 80014b4:	d03b      	beq.n	800152e <HALL_TIMx_CC_IRQHandler+0x29e>
          if ((pHandle->BufferFilled < pHandle->SpeedBufferSize) && (wCaptBuf != 0U))
 80014b6:	2250      	movs	r2, #80	@ 0x50
 80014b8:	5ca2      	ldrb	r2, [r4, r2]
            uint32_t tempReg = (pHandle->PseudoFreqConv / wCaptBuf) * (uint32_t)pHandle->Direction;
 80014ba:	361c      	adds	r6, #28
 80014bc:	59a6      	ldr	r6, [r4, r6]
          if ((pHandle->BufferFilled < pHandle->SpeedBufferSize) && (wCaptBuf != 0U))
 80014be:	4291      	cmp	r1, r2
 80014c0:	d93b      	bls.n	800153a <HALL_TIMx_CC_IRQHandler+0x2aa>
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d039      	beq.n	800153a <HALL_TIMx_CC_IRQHandler+0x2aa>
            uint32_t tempReg = (pHandle->PseudoFreqConv / wCaptBuf) * (uint32_t)pHandle->Direction;
 80014c6:	0019      	movs	r1, r3
 80014c8:	0030      	movs	r0, r6
 80014ca:	f7fe fe1d 	bl	8000108 <__udivsi3>
 80014ce:	464b      	mov	r3, r9
 80014d0:	4343      	muls	r3, r0
 80014d2:	0018      	movs	r0, r3
            pHandle->AvrElSpeedDpp = (int16_t)tempReg;
 80014d4:	23a8      	movs	r3, #168	@ 0xa8
 80014d6:	52e0      	strh	r0, [r4, r3]
      pHandle->OVFCounter = 0U;
 80014d8:	2351      	movs	r3, #81	@ 0x51
 80014da:	2200      	movs	r2, #0
 80014dc:	54e2      	strb	r2, [r4, r3]
  return (MC_NULL);
 80014de:	e72c      	b.n	800133a <HALL_TIMx_CC_IRQHandler+0xaa>
        if (pHandle->RatioDec) /* and don't decrease it again */
 80014e0:	264d      	movs	r6, #77	@ 0x4d
 80014e2:	5da2      	ldrb	r2, [r4, r6]
 80014e4:	2a00      	cmp	r2, #0
 80014e6:	d010      	beq.n	800150a <HALL_TIMx_CC_IRQHandler+0x27a>
          hAux = hPrscBuf + 2U;
 80014e8:	4662      	mov	r2, ip
 80014ea:	3202      	adds	r2, #2
          wCaptBuf *= hAux;
 80014ec:	b292      	uxth	r2, r2
 80014ee:	4353      	muls	r3, r2
          pHandle->RatioDec = false;
 80014f0:	55a5      	strb	r5, [r4, r6]
 80014f2:	e7bd      	b.n	8001470 <HALL_TIMx_CC_IRQHandler+0x1e0>
          if (LL_TIM_GetPrescaler(TIMx) < pHandle->HALLMaxRatio) /* Avoid OVF w/ very low freq */
 80014f4:	27b4      	movs	r7, #180	@ 0xb4
 80014f6:	6a86      	ldr	r6, [r0, #40]	@ 0x28
 80014f8:	5be7      	ldrh	r7, [r4, r7]
 80014fa:	42b7      	cmp	r7, r6
 80014fc:	d9b8      	bls.n	8001470 <HALL_TIMx_CC_IRQHandler+0x1e0>
 80014fe:	6a86      	ldr	r6, [r0, #40]	@ 0x28
            LL_TIM_SetPrescaler(TIMx, LL_TIM_GetPrescaler(TIMx) + 1U); /* To avoid OVF during speed decrease */
 8001500:	3601      	adds	r6, #1
  WRITE_REG(TIMx->PSC, Prescaler);
 8001502:	6286      	str	r6, [r0, #40]	@ 0x28
            pHandle->RatioInc = true;   /* new prsc value updated at next capture only */
 8001504:	2001      	movs	r0, #1
 8001506:	54a0      	strb	r0, [r4, r2]
 8001508:	e7b2      	b.n	8001470 <HALL_TIMx_CC_IRQHandler+0x1e0>
          uint16_t hAux = hPrscBuf + 1U;
 800150a:	4662      	mov	r2, ip
 800150c:	3201      	adds	r2, #1
          wCaptBuf *= hAux;
 800150e:	b292      	uxth	r2, r2
 8001510:	4353      	muls	r3, r2
          if (hHighSpeedCapture < LOW_RES_THRESHOLD) /* If capture range correct */
 8001512:	22aa      	movs	r2, #170	@ 0xaa
 8001514:	b2bf      	uxth	r7, r7
 8001516:	01d2      	lsls	r2, r2, #7
 8001518:	4297      	cmp	r7, r2
 800151a:	d2a9      	bcs.n	8001470 <HALL_TIMx_CC_IRQHandler+0x1e0>
  return (uint32_t)(READ_REG(TIMx->PSC));
 800151c:	6a82      	ldr	r2, [r0, #40]	@ 0x28
            if (LL_TIM_GetPrescaler(TIMx) > 0U) /* or prescaler cannot be further reduced */
 800151e:	2a00      	cmp	r2, #0
 8001520:	d0a6      	beq.n	8001470 <HALL_TIMx_CC_IRQHandler+0x1e0>
 8001522:	6a82      	ldr	r2, [r0, #40]	@ 0x28
              LL_TIM_SetPrescaler(TIMx, LL_TIM_GetPrescaler(TIMx) - 1U); /* Increase accuracy by decreasing prsc */
 8001524:	3a01      	subs	r2, #1
  WRITE_REG(TIMx->PSC, Prescaler);
 8001526:	6282      	str	r2, [r0, #40]	@ 0x28
              pHandle->RatioDec = true;
 8001528:	2201      	movs	r2, #1
 800152a:	55a2      	strb	r2, [r4, r6]
 800152c:	e7a0      	b.n	8001470 <HALL_TIMx_CC_IRQHandler+0x1e0>
          pHandle->AvrElSpeedDpp = 0;
 800152e:	23a8      	movs	r3, #168	@ 0xa8
 8001530:	52e2      	strh	r2, [r4, r3]
 8001532:	e7d1      	b.n	80014d8 <HALL_TIMx_CC_IRQHandler+0x248>
          pHandle->SensorPeriod[pHandle->SpeedFIFOIdx] *= pHandle->Direction;
 8001534:	435d      	muls	r5, r3
 8001536:	002e      	movs	r6, r5
 8001538:	e7ac      	b.n	8001494 <HALL_TIMx_CC_IRQHandler+0x204>
                                               (pHandle->ElPeriodSum / (int32_t)pHandle->SpeedBufferSize)); /* Average value */
 800153a:	f7fe fe6f 	bl	800021c <__divsi3>
 800153e:	0001      	movs	r1, r0
            pHandle->AvrElSpeedDpp = (int16_t)((int32_t)pHandle->PseudoFreqConv /
 8001540:	0030      	movs	r0, r6
 8001542:	f7fe fe6b 	bl	800021c <__divsi3>
 8001546:	23a8      	movs	r3, #168	@ 0xa8
 8001548:	52e0      	strh	r0, [r4, r3]
 800154a:	e7c5      	b.n	80014d8 <HALL_TIMx_CC_IRQHandler+0x248>
          pHandle->Direction = POSITIVE;
 800154c:	23a6      	movs	r3, #166	@ 0xa6
 800154e:	3a03      	subs	r2, #3
 8001550:	54e2      	strb	r2, [r4, r3]
          pHandle->MeasuredElAngle = pHandle->PhaseShift;
 8001552:	2601      	movs	r6, #1
 8001554:	2222      	movs	r2, #34	@ 0x22
 8001556:	5ea3      	ldrsh	r3, [r4, r2]
 8001558:	e754      	b.n	8001404 <HALL_TIMx_CC_IRQHandler+0x174>
          pHandle->Direction = POSITIVE;
 800155a:	23a6      	movs	r3, #166	@ 0xa6
 800155c:	3a01      	subs	r2, #1
 800155e:	54e2      	strb	r2, [r4, r3]
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_120_PHASE_SHIFT);
 8001560:	4a1a      	ldr	r2, [pc, #104]	@ (80015cc <HALL_TIMx_CC_IRQHandler+0x33c>)
 8001562:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 8001564:	4694      	mov	ip, r2
 8001566:	4463      	add	r3, ip
 8001568:	2601      	movs	r6, #1
 800156a:	b21b      	sxth	r3, r3
 800156c:	e74a      	b.n	8001404 <HALL_TIMx_CC_IRQHandler+0x174>
          pHandle->Direction = POSITIVE;
 800156e:	23a6      	movs	r3, #166	@ 0xa6
 8001570:	54e2      	strb	r2, [r4, r3]
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT);
 8001572:	4a17      	ldr	r2, [pc, #92]	@ (80015d0 <HALL_TIMx_CC_IRQHandler+0x340>)
 8001574:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 8001576:	4694      	mov	ip, r2
 8001578:	4463      	add	r3, ip
 800157a:	2601      	movs	r6, #1
 800157c:	b21b      	sxth	r3, r3
 800157e:	e741      	b.n	8001404 <HALL_TIMx_CC_IRQHandler+0x174>
          pHandle->Direction = POSITIVE;
 8001580:	23a6      	movs	r3, #166	@ 0xa6
 8001582:	3a05      	subs	r2, #5
 8001584:	54e2      	strb	r2, [r4, r3]
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_60_PHASE_SHIFT);
 8001586:	4a0e      	ldr	r2, [pc, #56]	@ (80015c0 <HALL_TIMx_CC_IRQHandler+0x330>)
 8001588:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 800158a:	4694      	mov	ip, r2
 800158c:	4463      	add	r3, ip
 800158e:	2601      	movs	r6, #1
 8001590:	b21b      	sxth	r3, r3
 8001592:	e737      	b.n	8001404 <HALL_TIMx_CC_IRQHandler+0x174>
          pHandle->Direction = POSITIVE;
 8001594:	23a6      	movs	r3, #166	@ 0xa6
 8001596:	3a04      	subs	r2, #4
 8001598:	54e2      	strb	r2, [r4, r3]
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 800159a:	4a0a      	ldr	r2, [pc, #40]	@ (80015c4 <HALL_TIMx_CC_IRQHandler+0x334>)
 800159c:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 800159e:	4694      	mov	ip, r2
 80015a0:	4463      	add	r3, ip
 80015a2:	2601      	movs	r6, #1
 80015a4:	b21b      	sxth	r3, r3
 80015a6:	e72d      	b.n	8001404 <HALL_TIMx_CC_IRQHandler+0x174>
          pHandle->Direction = POSITIVE;
 80015a8:	23a6      	movs	r3, #166	@ 0xa6
 80015aa:	3a02      	subs	r2, #2
 80015ac:	54e2      	strb	r2, [r4, r3]
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT + S16_60_PHASE_SHIFT);
 80015ae:	4a06      	ldr	r2, [pc, #24]	@ (80015c8 <HALL_TIMx_CC_IRQHandler+0x338>)
 80015b0:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 80015b2:	4694      	mov	ip, r2
 80015b4:	4463      	add	r3, ip
 80015b6:	2601      	movs	r6, #1
 80015b8:	b21b      	sxth	r3, r3
 80015ba:	e723      	b.n	8001404 <HALL_TIMx_CC_IRQHandler+0x174>
 80015bc:	08005e6c 	.word	0x08005e6c
 80015c0:	ffffd556 	.word	0xffffd556
 80015c4:	00002aaa 	.word	0x00002aaa
 80015c8:	00007fff 	.word	0x00007fff
 80015cc:	ffffaaab 	.word	0xffffaaab
 80015d0:	00005555 	.word	0x00005555

080015d4 <HALL_TIMx_UP_IRQHandler>:
{
 80015d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pHandle->SensorIsReliable)
 80015d6:	234c      	movs	r3, #76	@ 0x4c
 80015d8:	5cc3      	ldrb	r3, [r0, r3]
{
 80015da:	0004      	movs	r4, r0
  TIM_TypeDef *TIMx = pHandle->TIMx;
 80015dc:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
  if (pHandle->SensorIsReliable)
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d017      	beq.n	8001612 <HALL_TIMx_UP_IRQHandler+0x3e>
    pHandle->OVFCounter++;
 80015e2:	2251      	movs	r2, #81	@ 0x51
 80015e4:	5c83      	ldrb	r3, [r0, r2]
 80015e6:	3301      	adds	r3, #1
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	5483      	strb	r3, [r0, r2]
  return (uint32_t)(READ_REG(TIMx->PSC));
 80015ec:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
    hMaxTimerOverflow = (uint16_t)(((uint32_t)pHandle->HallTimeout * pHandle->OvfFreq)
 80015ee:	21c6      	movs	r1, #198	@ 0xc6
                                 / ((LL_TIM_GetPrescaler(TIMx) + 1U) * 1000U));
 80015f0:	3301      	adds	r3, #1
    if (pHandle->OVFCounter >= hMaxTimerOverflow)
 80015f2:	5c85      	ldrb	r5, [r0, r2]
    hMaxTimerOverflow = (uint16_t)(((uint32_t)pHandle->HallTimeout * pHandle->OvfFreq)
 80015f4:	3273      	adds	r2, #115	@ 0x73
 80015f6:	5a82      	ldrh	r2, [r0, r2]
 80015f8:	5a40      	ldrh	r0, [r0, r1]
                                 / ((LL_TIM_GetPrescaler(TIMx) + 1U) * 1000U));
 80015fa:	0159      	lsls	r1, r3, #5
 80015fc:	1ac9      	subs	r1, r1, r3
 80015fe:	0089      	lsls	r1, r1, #2
 8001600:	18c9      	adds	r1, r1, r3
    hMaxTimerOverflow = (uint16_t)(((uint32_t)pHandle->HallTimeout * pHandle->OvfFreq)
 8001602:	4350      	muls	r0, r2
                                 / ((LL_TIM_GetPrescaler(TIMx) + 1U) * 1000U));
 8001604:	00c9      	lsls	r1, r1, #3
 8001606:	f7fe fd7f 	bl	8000108 <__udivsi3>
    if (pHandle->OVFCounter >= hMaxTimerOverflow)
 800160a:	b2ed      	uxtb	r5, r5
 800160c:	b280      	uxth	r0, r0
 800160e:	4285      	cmp	r5, r0
 8001610:	d201      	bcs.n	8001616 <HALL_TIMx_UP_IRQHandler+0x42>
}
 8001612:	2000      	movs	r0, #0
 8001614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      pHandle->_Super.hElSpeedDpp = 0;
 8001616:	2300      	movs	r3, #0
    if (DEGREES_120 == pHandle->SensorPlacement)
 8001618:	2220      	movs	r2, #32
      pHandle->_Super.hElSpeedDpp = 0;
 800161a:	81e3      	strh	r3, [r4, #14]
    if (DEGREES_120 == pHandle->SensorPlacement)
 800161c:	5ca2      	ldrb	r2, [r4, r2]
                                      | (LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) << 1U)
 800161e:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
 8001620:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 8001622:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8001624:	6c66      	ldr	r6, [r4, #68]	@ 0x44
                                      | LL_GPIO_IsInputPinSet(pHandle->H1Port, pHandle->H1Pin));
 8001626:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001628:	6b60      	ldr	r0, [r4, #52]	@ 0x34
    if (DEGREES_120 == pHandle->SensorPlacement)
 800162a:	2a00      	cmp	r2, #0
 800162c:	d11a      	bne.n	8001664 <HALL_TIMx_UP_IRQHandler+0x90>
 800162e:	692a      	ldr	r2, [r5, #16]
 8001630:	693d      	ldr	r5, [r7, #16]
 8001632:	4032      	ands	r2, r6
 8001634:	400d      	ands	r5, r1
 8001636:	1b92      	subs	r2, r2, r6
 8001638:	1a69      	subs	r1, r5, r1
 800163a:	4256      	negs	r6, r2
 800163c:	4172      	adcs	r2, r6
 800163e:	424d      	negs	r5, r1
 8001640:	4169      	adcs	r1, r5
 8001642:	691b      	ldr	r3, [r3, #16]
                                      | (LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) << 1U)
 8001644:	0049      	lsls	r1, r1, #1
 8001646:	4003      	ands	r3, r0
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 8001648:	0092      	lsls	r2, r2, #2
 800164a:	1a1b      	subs	r3, r3, r0
                                      | (LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) << 1U)
 800164c:	430a      	orrs	r2, r1
 800164e:	4259      	negs	r1, r3
 8001650:	414b      	adcs	r3, r1
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 8001652:	4313      	orrs	r3, r2
 8001654:	22aa      	movs	r2, #170	@ 0xaa
 8001656:	54a3      	strb	r3, [r4, r2]
    switch (pHandle->HallState)
 8001658:	2b06      	cmp	r3, #6
 800165a:	d866      	bhi.n	800172a <HALL_TIMx_UP_IRQHandler+0x156>
 800165c:	4a37      	ldr	r2, [pc, #220]	@ (800173c <HALL_TIMx_UP_IRQHandler+0x168>)
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	58d3      	ldr	r3, [r2, r3]
 8001662:	469f      	mov	pc, r3
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	692d      	ldr	r5, [r5, #16]
 8001668:	691b      	ldr	r3, [r3, #16]
 800166a:	400a      	ands	r2, r1
 800166c:	4035      	ands	r5, r6
 800166e:	4003      	ands	r3, r0
 8001670:	1a52      	subs	r2, r2, r1
 8001672:	1bad      	subs	r5, r5, r6
 8001674:	4251      	negs	r1, r2
 8001676:	414a      	adcs	r2, r1
 8001678:	426e      	negs	r6, r5
 800167a:	4175      	adcs	r5, r6
 800167c:	1a1b      	subs	r3, r3, r0
 800167e:	4258      	negs	r0, r3
 8001680:	4143      	adcs	r3, r0
      pHandle->HallState  = (uint8_t)(((LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) ^ 1U) << 2U)
 8001682:	2104      	movs	r1, #4
                                      | (LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 1U)
 8001684:	006d      	lsls	r5, r5, #1
      pHandle->HallState  = (uint8_t)(((LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) ^ 1U) << 2U)
 8001686:	0092      	lsls	r2, r2, #2
 8001688:	432b      	orrs	r3, r5
 800168a:	404a      	eors	r2, r1
 800168c:	4313      	orrs	r3, r2
 800168e:	b2db      	uxtb	r3, r3
 8001690:	e7e0      	b.n	8001654 <HALL_TIMx_UP_IRQHandler+0x80>
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift - S16_60_PHASE_SHIFT - (S16_60_PHASE_SHIFT / 2));
 8001692:	4a2b      	ldr	r2, [pc, #172]	@ (8001740 <HALL_TIMx_UP_IRQHandler+0x16c>)
 8001694:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 8001696:	4694      	mov	ip, r2
 8001698:	4463      	add	r3, ip
 800169a:	b21b      	sxth	r3, r3
 800169c:	80a3      	strh	r3, [r4, #4]
    pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 800169e:	22ae      	movs	r2, #174	@ 0xae
 80016a0:	52a3      	strh	r3, [r4, r2]
    pHandle->IncrementElAngle = 0;
 80016a2:	2300      	movs	r3, #0
 80016a4:	3202      	adds	r2, #2
 80016a6:	50a3      	str	r3, [r4, r2]
      pHandle->OVFCounter = 0U;
 80016a8:	3a5f      	subs	r2, #95	@ 0x5f
 80016aa:	54a3      	strb	r3, [r4, r2]
      pHandle->FirstCapt = 0U;
 80016ac:	3a02      	subs	r2, #2
 80016ae:	54a3      	strb	r3, [r4, r2]
      for (bIndex = 0U; bIndex < pHandle->SpeedBufferSize; bIndex++)
 80016b0:	3326      	adds	r3, #38	@ 0x26
 80016b2:	5ce0      	ldrb	r0, [r4, r3]
      uint32_t tempReg = pHandle->MaxPeriod * pHandle->SpeedBufferSize;
 80016b4:	3396      	adds	r3, #150	@ 0x96
 80016b6:	58e1      	ldr	r1, [r4, r3]
      for (bIndex = 0U; bIndex < pHandle->SpeedBufferSize; bIndex++)
 80016b8:	2800      	cmp	r0, #0
 80016ba:	d03c      	beq.n	8001736 <HALL_TIMx_UP_IRQHandler+0x162>
 80016bc:	0022      	movs	r2, r4
 80016be:	2300      	movs	r3, #0
 80016c0:	3254      	adds	r2, #84	@ 0x54
 80016c2:	3301      	adds	r3, #1
 80016c4:	b2db      	uxtb	r3, r3
        pHandle->SensorPeriod[bIndex]  = (int32_t)pHandle->MaxPeriod;
 80016c6:	c202      	stmia	r2!, {r1}
      for (bIndex = 0U; bIndex < pHandle->SpeedBufferSize; bIndex++)
 80016c8:	4283      	cmp	r3, r0
 80016ca:	d1fa      	bne.n	80016c2 <HALL_TIMx_UP_IRQHandler+0xee>
      uint32_t tempReg = pHandle->MaxPeriod * pHandle->SpeedBufferSize;
 80016cc:	4359      	muls	r1, r3
      pHandle->BufferFilled = 0U ;
 80016ce:	2300      	movs	r3, #0
 80016d0:	2250      	movs	r2, #80	@ 0x50
 80016d2:	54a3      	strb	r3, [r4, r2]
      pHandle->AvrElSpeedDpp = 0;
 80016d4:	3258      	adds	r2, #88	@ 0x58
 80016d6:	52a3      	strh	r3, [r4, r2]
      pHandle->SpeedFIFOIdx = 0U;
 80016d8:	2200      	movs	r2, #0
 80016da:	339c      	adds	r3, #156	@ 0x9c
 80016dc:	54e2      	strb	r2, [r4, r3]
      pHandle->ElPeriodSum = (int32_t)tempReg;
 80016de:	3304      	adds	r3, #4
 80016e0:	50e1      	str	r1, [r4, r3]
 80016e2:	e796      	b.n	8001612 <HALL_TIMx_UP_IRQHandler+0x3e>
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift + (S16_60_PHASE_SHIFT / 2));
 80016e4:	4a17      	ldr	r2, [pc, #92]	@ (8001744 <HALL_TIMx_UP_IRQHandler+0x170>)
 80016e6:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 80016e8:	4694      	mov	ip, r2
 80016ea:	4463      	add	r3, ip
 80016ec:	b21b      	sxth	r3, r3
 80016ee:	80a3      	strh	r3, [r4, #4]
        break;
 80016f0:	e7d5      	b.n	800169e <HALL_TIMx_UP_IRQHandler+0xca>
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift - (S16_60_PHASE_SHIFT / 2));
 80016f2:	4a15      	ldr	r2, [pc, #84]	@ (8001748 <HALL_TIMx_UP_IRQHandler+0x174>)
 80016f4:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 80016f6:	4694      	mov	ip, r2
 80016f8:	4463      	add	r3, ip
 80016fa:	b21b      	sxth	r3, r3
 80016fc:	80a3      	strh	r3, [r4, #4]
        break;
 80016fe:	e7ce      	b.n	800169e <HALL_TIMx_UP_IRQHandler+0xca>
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT + (S16_60_PHASE_SHIFT / 2));
 8001700:	4a12      	ldr	r2, [pc, #72]	@ (800174c <HALL_TIMx_UP_IRQHandler+0x178>)
 8001702:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 8001704:	4694      	mov	ip, r2
 8001706:	4463      	add	r3, ip
 8001708:	b21b      	sxth	r3, r3
 800170a:	80a3      	strh	r3, [r4, #4]
        break;
 800170c:	e7c7      	b.n	800169e <HALL_TIMx_UP_IRQHandler+0xca>
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift - S16_120_PHASE_SHIFT - (S16_60_PHASE_SHIFT / 2));
 800170e:	4a10      	ldr	r2, [pc, #64]	@ (8001750 <HALL_TIMx_UP_IRQHandler+0x17c>)
 8001710:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 8001712:	4694      	mov	ip, r2
 8001714:	4463      	add	r3, ip
 8001716:	b21b      	sxth	r3, r3
 8001718:	80a3      	strh	r3, [r4, #4]
        break;
 800171a:	e7c0      	b.n	800169e <HALL_TIMx_UP_IRQHandler+0xca>
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift + S16_60_PHASE_SHIFT + (S16_60_PHASE_SHIFT / 2));
 800171c:	4a0d      	ldr	r2, [pc, #52]	@ (8001754 <HALL_TIMx_UP_IRQHandler+0x180>)
 800171e:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 8001720:	4694      	mov	ip, r2
 8001722:	4463      	add	r3, ip
 8001724:	b21b      	sxth	r3, r3
 8001726:	80a3      	strh	r3, [r4, #4]
        break;
 8001728:	e7b9      	b.n	800169e <HALL_TIMx_UP_IRQHandler+0xca>
        pHandle->SensorIsReliable = false;
 800172a:	234c      	movs	r3, #76	@ 0x4c
 800172c:	2200      	movs	r2, #0
 800172e:	54e2      	strb	r2, [r4, r3]
    pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8001730:	2204      	movs	r2, #4
 8001732:	5ea3      	ldrsh	r3, [r4, r2]
        break;
 8001734:	e7b3      	b.n	800169e <HALL_TIMx_UP_IRQHandler+0xca>
      for (bIndex = 0U; bIndex < pHandle->SpeedBufferSize; bIndex++)
 8001736:	2100      	movs	r1, #0
 8001738:	e7c9      	b.n	80016ce <HALL_TIMx_UP_IRQHandler+0xfa>
 800173a:	46c0      	nop			@ (mov r8, r8)
 800173c:	08005e88 	.word	0x08005e88
 8001740:	ffffc001 	.word	0xffffc001
 8001744:	00001555 	.word	0x00001555
 8001748:	ffffeaab 	.word	0xffffeaab
 800174c:	00006aaa 	.word	0x00006aaa
 8001750:	ffff9556 	.word	0xffff9556
 8001754:	00003fff 	.word	0x00003fff

08001758 <SystemClock_Config>:
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001758:	2101      	movs	r1, #1
 800175a:	4a32      	ldr	r2, [pc, #200]	@ (8001824 <SystemClock_Config+0xcc>)
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800175c:	b510      	push	{r4, lr}
 800175e:	6813      	ldr	r3, [r2, #0]
 8001760:	430b      	orrs	r3, r1
 8001762:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001764:	6813      	ldr	r3, [r2, #0]
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_1)
 8001766:	4219      	tst	r1, r3
 8001768:	d0fc      	beq.n	8001764 <SystemClock_Config+0xc>
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800176a:	2380      	movs	r3, #128	@ 0x80
 800176c:	4a2e      	ldr	r2, [pc, #184]	@ (8001828 <SystemClock_Config+0xd0>)
 800176e:	025b      	lsls	r3, r3, #9
 8001770:	6811      	ldr	r1, [r2, #0]
 8001772:	430b      	orrs	r3, r1
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8001774:	2180      	movs	r1, #128	@ 0x80
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001776:	6013      	str	r3, [r2, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8001778:	0289      	lsls	r1, r1, #10
 800177a:	6813      	ldr	r3, [r2, #0]
  {
  }
  LL_RCC_HSE_Enable();

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 800177c:	420b      	tst	r3, r1
 800177e:	d0fc      	beq.n	800177a <SystemClock_Config+0x22>
  * @rmtoll CR2          HSI14ON       LL_RCC_HSI14_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI14_Enable(void)
{
  SET_BIT(RCC->CR2, RCC_CR2_HSI14ON);
 8001780:	2101      	movs	r1, #1
 8001782:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8001784:	430b      	orrs	r3, r1
 8001786:	6353      	str	r3, [r2, #52]	@ 0x34
  * @rmtoll CR2          HSI14RDY      LL_RCC_HSI14_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI14_IsReady(void)
{
  return (READ_BIT(RCC->CR2, RCC_CR2_HSI14RDY) == (RCC_CR2_HSI14RDY));
 8001788:	4b27      	ldr	r3, [pc, #156]	@ (8001828 <SystemClock_Config+0xd0>)
 800178a:	3101      	adds	r1, #1
 800178c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34

  }
  LL_RCC_HSI14_Enable();

   /* Wait till HSI14 is ready */
  while(LL_RCC_HSI14_IsReady() != 1)
 800178e:	4211      	tst	r1, r2
 8001790:	d0fc      	beq.n	800178c <SystemClock_Config+0x34>
  * @param  Value between Min_Data = 0x00 and Max_Data = 0xFF
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI14_SetCalibTrimming(uint32_t Value)
{
  MODIFY_REG(RCC->CR2, RCC_CR2_HSI14TRIM, Value << RCC_POSITION_HSI14TRIM);
 8001792:	21f8      	movs	r1, #248	@ 0xf8
 8001794:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001796:	438a      	bics	r2, r1
 8001798:	3978      	subs	r1, #120	@ 0x78
 800179a:	430a      	orrs	r2, r1
 800179c:	635a      	str	r2, [r3, #52]	@ 0x34
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 800179e:	2280      	movs	r2, #128	@ 0x80
 80017a0:	6819      	ldr	r1, [r3, #0]
 80017a2:	0312      	lsls	r2, r2, #12
 80017a4:	430a      	orrs	r2, r1
 80017a6:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_RCC_PLL_MUL_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, (Source & RCC_CFGR_PLLSRC) | PLLMul);
 80017a8:	6859      	ldr	r1, [r3, #4]
 80017aa:	4a20      	ldr	r2, [pc, #128]	@ (800182c <SystemClock_Config+0xd4>)
 80017ac:	4011      	ands	r1, r2
 80017ae:	2288      	movs	r2, #136	@ 0x88
 80017b0:	0352      	lsls	r2, r2, #13
 80017b2:	430a      	orrs	r2, r1
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, (Source & RCC_CFGR2_PREDIV));
 80017b4:	210f      	movs	r1, #15
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, (Source & RCC_CFGR_PLLSRC) | PLLMul);
 80017b6:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, (Source & RCC_CFGR2_PREDIV));
 80017b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017ba:	438a      	bics	r2, r1
 80017bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80017be:	2280      	movs	r2, #128	@ 0x80
 80017c0:	6819      	ldr	r1, [r3, #0]
 80017c2:	0452      	lsls	r2, r2, #17
 80017c4:	430a      	orrs	r2, r1
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80017c6:	2180      	movs	r1, #128	@ 0x80
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80017c8:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80017ca:	4a17      	ldr	r2, [pc, #92]	@ (8001828 <SystemClock_Config+0xd0>)
 80017cc:	0489      	lsls	r1, r1, #18
 80017ce:	6813      	ldr	r3, [r2, #0]
  LL_RCC_HSE_EnableCSS();
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_6);
  LL_RCC_PLL_Enable();

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80017d0:	420b      	tst	r3, r1
 80017d2:	d0fc      	beq.n	80017ce <SystemClock_Config+0x76>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80017d4:	21f0      	movs	r1, #240	@ 0xf0
 80017d6:	6853      	ldr	r3, [r2, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80017d8:	4c13      	ldr	r4, [pc, #76]	@ (8001828 <SystemClock_Config+0xd0>)
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80017da:	438b      	bics	r3, r1
 80017dc:	6053      	str	r3, [r2, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 80017de:	6853      	ldr	r3, [r2, #4]
 80017e0:	4913      	ldr	r1, [pc, #76]	@ (8001830 <SystemClock_Config+0xd8>)
 80017e2:	400b      	ands	r3, r1
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80017e4:	2103      	movs	r1, #3
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 80017e6:	6053      	str	r3, [r2, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80017e8:	6853      	ldr	r3, [r2, #4]
 80017ea:	438b      	bics	r3, r1
 80017ec:	3901      	subs	r1, #1
 80017ee:	430b      	orrs	r3, r1
 80017f0:	6053      	str	r3, [r2, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80017f2:	220c      	movs	r2, #12
 80017f4:	6863      	ldr	r3, [r4, #4]
 80017f6:	4013      	ands	r3, r2
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80017f8:	2b08      	cmp	r3, #8
 80017fa:	d1fb      	bne.n	80017f4 <SystemClock_Config+0x9c>
  {

  }
  LL_SetSystemCoreClock(48000000);
 80017fc:	480d      	ldr	r0, [pc, #52]	@ (8001834 <SystemClock_Config+0xdc>)
 80017fe:	f003 ff77 	bl	80056f0 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8001802:	2002      	movs	r0, #2
 8001804:	f003 fbe6 	bl	8004fd4 <HAL_InitTick>
 8001808:	2800      	cmp	r0, #0
 800180a:	d001      	beq.n	8001810 <SystemClock_Config+0xb8>
  __ASM volatile ("cpsid i" : : : "memory");
 800180c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800180e:	e7fe      	b.n	800180e <SystemClock_Config+0xb6>
  CLEAR_BIT(RCC->CR2, RCC_CR2_HSI14DIS);
 8001810:	2204      	movs	r2, #4
 8001812:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001814:	4393      	bics	r3, r2
 8001816:	6363      	str	r3, [r4, #52]	@ 0x34
  MODIFY_REG(RCC->CFGR3, (RCC_CFGR3_USART1SW << ((USARTxSource  & 0xFF000000U) >> 24U)), (USARTxSource & 0x00FFFFFFU));
 8001818:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800181a:	3a01      	subs	r2, #1
 800181c:	4393      	bics	r3, r2
 800181e:	6323      	str	r3, [r4, #48]	@ 0x30
}
 8001820:	bd10      	pop	{r4, pc}
 8001822:	46c0      	nop			@ (mov r8, r8)
 8001824:	40022000 	.word	0x40022000
 8001828:	40021000 	.word	0x40021000
 800182c:	ffc2ffff 	.word	0xffc2ffff
 8001830:	fffff8ff 	.word	0xfffff8ff
 8001834:	02dc6c00 	.word	0x02dc6c00

08001838 <main>:
{
 8001838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800183a:	46de      	mov	lr, fp
 800183c:	4657      	mov	r7, sl
 800183e:	464e      	mov	r6, r9
 8001840:	4645      	mov	r5, r8
 8001842:	b5e0      	push	{r5, r6, r7, lr}
 8001844:	b0a7      	sub	sp, #156	@ 0x9c
  HAL_Init();
 8001846:	f003 fbeb 	bl	8005020 <HAL_Init>
  SystemClock_Config();
 800184a:	f7ff ff85 	bl	8001758 <SystemClock_Config>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184e:	2214      	movs	r2, #20
 8001850:	2100      	movs	r1, #0
 8001852:	a81f      	add	r0, sp, #124	@ 0x7c
 8001854:	f004 fa32 	bl	8005cbc <memset>
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8001858:	2280      	movs	r2, #128	@ 0x80
 800185a:	4cfe      	ldr	r4, [pc, #1016]	@ (8001c54 <main+0x41c>)
 800185c:	2680      	movs	r6, #128	@ 0x80
 800185e:	6963      	ldr	r3, [r4, #20]
 8001860:	03d2      	lsls	r2, r2, #15
 8001862:	4313      	orrs	r3, r2
 8001864:	6163      	str	r3, [r4, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001866:	6963      	ldr	r3, [r4, #20]
  SET_BIT(RCC->AHBENR, Periphs);
 8001868:	02b6      	lsls	r6, r6, #10
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800186a:	4013      	ands	r3, r2
  SET_BIT(RCC->AHBENR, Periphs);
 800186c:	2280      	movs	r2, #128	@ 0x80
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800186e:	930a      	str	r3, [sp, #40]	@ 0x28
  (void)tmpreg;
 8001870:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  SET_BIT(RCC->AHBENR, Periphs);
 8001872:	6963      	ldr	r3, [r4, #20]
 8001874:	02d2      	lsls	r2, r2, #11
 8001876:	4333      	orrs	r3, r6
 8001878:	6163      	str	r3, [r4, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800187a:	6963      	ldr	r3, [r4, #20]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 800187c:	2780      	movs	r7, #128	@ 0x80
 800187e:	4033      	ands	r3, r6
 8001880:	930b      	str	r3, [sp, #44]	@ 0x2c
  (void)tmpreg;
 8001882:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  SET_BIT(RCC->AHBENR, Periphs);
 8001884:	6963      	ldr	r3, [r4, #20]
 8001886:	013f      	lsls	r7, r7, #4
 8001888:	4313      	orrs	r3, r2
 800188a:	6163      	str	r3, [r4, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800188c:	6963      	ldr	r3, [r4, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188e:	a91e      	add	r1, sp, #120	@ 0x78
 8001890:	4013      	ands	r3, r2
 8001892:	930c      	str	r3, [sp, #48]	@ 0x30
  (void)tmpreg;
 8001894:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8001896:	2390      	movs	r3, #144	@ 0x90
 8001898:	05db      	lsls	r3, r3, #23
 800189a:	469a      	mov	sl, r3
 800189c:	619f      	str	r7, [r3, #24]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 800189e:	2380      	movs	r3, #128	@ 0x80
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a0:	4650      	mov	r0, sl
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80018a2:	2500      	movs	r5, #0
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 80018a4:	4698      	mov	r8, r3
 80018a6:	931e      	str	r3, [sp, #120]	@ 0x78
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a8:	f003 fc84 	bl	80051b4 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 80018ac:	2201      	movs	r2, #1
 80018ae:	2300      	movs	r3, #0
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b0:	a91e      	add	r1, sp, #120	@ 0x78
 80018b2:	48e9      	ldr	r0, [pc, #932]	@ (8001c58 <main+0x420>)
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 80018b4:	921e      	str	r2, [sp, #120]	@ 0x78
 80018b6:	931f      	str	r3, [sp, #124]	@ 0x7c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80018b8:	9522      	str	r5, [sp, #136]	@ 0x88
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ba:	f003 fc7b 	bl	80051b4 <LL_GPIO_Init>
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80018be:	2301      	movs	r3, #1
 80018c0:	469b      	mov	fp, r3
  LL_GPIO_Init(M1_EN_DRIVER_GPIO_Port, &GPIO_InitStruct);
 80018c2:	a91e      	add	r1, sp, #120	@ 0x78
 80018c4:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = M1_EN_DRIVER_Pin;
 80018c6:	971e      	str	r7, [sp, #120]	@ 0x78
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80018c8:	931f      	str	r3, [sp, #124]	@ 0x7c
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80018ca:	9520      	str	r5, [sp, #128]	@ 0x80
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80018cc:	9521      	str	r5, [sp, #132]	@ 0x84
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80018ce:	9322      	str	r3, [sp, #136]	@ 0x88
  LL_GPIO_Init(M1_EN_DRIVER_GPIO_Port, &GPIO_InitStruct);
 80018d0:	f003 fc70 	bl	80051b4 <LL_GPIO_Init>
  SET_BIT(RCC->AHBENR, Periphs);
 80018d4:	4659      	mov	r1, fp
 80018d6:	6963      	ldr	r3, [r4, #20]
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80018d8:	2210      	movs	r2, #16
 80018da:	430b      	orrs	r3, r1
 80018dc:	6163      	str	r3, [r4, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80018de:	6963      	ldr	r3, [r4, #20]
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 80018e0:	4647      	mov	r7, r8
 80018e2:	400b      	ands	r3, r1
 80018e4:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80018e6:	9b01      	ldr	r3, [sp, #4]
 80018e8:	ab12      	add	r3, sp, #72	@ 0x48
 80018ea:	2100      	movs	r1, #0
 80018ec:	0018      	movs	r0, r3
 80018ee:	f004 f9e5 	bl	8005cbc <memset>
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80018f2:	ab18      	add	r3, sp, #96	@ 0x60
 80018f4:	0018      	movs	r0, r3
 80018f6:	2214      	movs	r2, #20
 80018f8:	2100      	movs	r1, #0
 80018fa:	f004 f9df 	bl	8005cbc <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fe:	2210      	movs	r2, #16
 8001900:	2100      	movs	r1, #0
 8001902:	a820      	add	r0, sp, #128	@ 0x80
 8001904:	f004 f9da 	bl	8005cbc <memset>
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001908:	2180      	movs	r1, #128	@ 0x80
 800190a:	69a3      	ldr	r3, [r4, #24]
 800190c:	0089      	lsls	r1, r1, #2
 800190e:	430b      	orrs	r3, r1
 8001910:	61a3      	str	r3, [r4, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001912:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Pin = M1_CURR_AMPL_Pin;
 8001914:	2220      	movs	r2, #32
 8001916:	400b      	ands	r3, r1
 8001918:	9308      	str	r3, [sp, #32]
  (void)tmpreg;
 800191a:	9b08      	ldr	r3, [sp, #32]
  SET_BIT(RCC->AHBENR, Periphs);
 800191c:	6963      	ldr	r3, [r4, #20]
  LL_GPIO_Init(M1_CURR_AMPL_GPIO_Port, &GPIO_InitStruct);
 800191e:	a91e      	add	r1, sp, #120	@ 0x78
 8001920:	4333      	orrs	r3, r6
 8001922:	6163      	str	r3, [r4, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001924:	6963      	ldr	r3, [r4, #20]
 8001926:	4650      	mov	r0, sl
 8001928:	4033      	ands	r3, r6
 800192a:	9309      	str	r3, [sp, #36]	@ 0x24
  (void)tmpreg;
 800192c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin = M1_CURR_AMPL_Pin;
 800192e:	2303      	movs	r3, #3
 8001930:	921e      	str	r2, [sp, #120]	@ 0x78
 8001932:	931f      	str	r3, [sp, #124]	@ 0x7c
  LL_GPIO_Init(M1_CURR_AMPL_GPIO_Port, &GPIO_InitStruct);
 8001934:	f003 fc3e 	bl	80051b4 <LL_GPIO_Init>
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001938:	4bc8      	ldr	r3, [pc, #800]	@ (8001c5c <main+0x424>)
 800193a:	49c9      	ldr	r1, [pc, #804]	@ (8001c60 <main+0x428>)
 800193c:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 800193e:	2640      	movs	r6, #64	@ 0x40
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001940:	400a      	ands	r2, r1
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8001942:	2120      	movs	r1, #32
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001944:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	48c6      	ldr	r0, [pc, #792]	@ (8001c64 <main+0x42c>)
 800194a:	4002      	ands	r2, r0
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 800194c:	2080      	movs	r0, #128	@ 0x80
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 800194e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8001950:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8001952:	0040      	lsls	r0, r0, #1
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8001954:	438a      	bics	r2, r1
 8001956:	430a      	orrs	r2, r1
 8001958:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	43b2      	bics	r2, r6
 800195e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001960:	681a      	ldr	r2, [r3, #0]
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001962:	4ec1      	ldr	r6, [pc, #772]	@ (8001c68 <main+0x430>)
 8001964:	43ba      	bics	r2, r7
 8001966:	433a      	orrs	r2, r7
 8001968:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	4fbf      	ldr	r7, [pc, #764]	@ (8001c6c <main+0x434>)
 800196e:	403a      	ands	r2, r7
 8001970:	4302      	orrs	r2, r0
 8001972:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	4fbe      	ldr	r7, [pc, #760]	@ (8001c70 <main+0x438>)
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8001978:	0030      	movs	r0, r6
 800197a:	403a      	ands	r2, r7
 800197c:	2780      	movs	r7, #128	@ 0x80
 800197e:	00ff      	lsls	r7, r7, #3
 8001980:	433a      	orrs	r2, r7
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8001986:	430b      	orrs	r3, r1
 8001988:	62b3      	str	r3, [r6, #40]	@ 0x28
 800198a:	ab12      	add	r3, sp, #72	@ 0x48
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_LEFT;
 800198c:	9114      	str	r1, [sp, #80]	@ 0x50
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 800198e:	0019      	movs	r1, r3
  ADC_InitStruct.Clock = LL_ADC_CLOCK_ASYNC;
 8001990:	9512      	str	r5, [sp, #72]	@ 0x48
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8001992:	9513      	str	r5, [sp, #76]	@ 0x4c
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8001994:	9515      	str	r5, [sp, #84]	@ 0x54
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8001996:	f003 fbdb 	bl	8005150 <LL_ADC_Init>
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 800199a:	2303      	movs	r3, #3
 800199c:	931b      	str	r3, [sp, #108]	@ 0x6c
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 800199e:	ab18      	add	r3, sp, #96	@ 0x60
 80019a0:	0019      	movs	r1, r3
 80019a2:	0030      	movs	r0, r6
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_EXT_TIM1_TRGO;
 80019a4:	9718      	str	r7, [sp, #96]	@ 0x60
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 80019a6:	9519      	str	r5, [sp, #100]	@ 0x64
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 80019a8:	951a      	str	r5, [sp, #104]	@ 0x68
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 80019aa:	951c      	str	r5, [sp, #112]	@ 0x70
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80019ac:	f003 fbea 	bl	8005184 <LL_ADC_REG_Init>
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 80019b0:	2204      	movs	r2, #4
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 80019b2:	4658      	mov	r0, fp
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 80019b4:	68f3      	ldr	r3, [r6, #12]
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80019b6:	2100      	movs	r1, #0
 80019b8:	4393      	bics	r3, r2
 80019ba:	60f3      	str	r3, [r6, #12]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 80019bc:	6973      	ldr	r3, [r6, #20]
 80019be:	3203      	adds	r2, #3
 80019c0:	4393      	bics	r3, r2
 80019c2:	4303      	orrs	r3, r0
 80019c4:	6173      	str	r3, [r6, #20]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN, ExternalTriggerEdge);
 80019c6:	68f3      	ldr	r3, [r6, #12]
 80019c8:	4aa9      	ldr	r2, [pc, #676]	@ (8001c70 <main+0x438>)
 80019ca:	4013      	ands	r3, r2
 80019cc:	433b      	orrs	r3, r7
 80019ce:	af0d      	add	r7, sp, #52	@ 0x34
 80019d0:	60f3      	str	r3, [r6, #12]
 80019d2:	2214      	movs	r2, #20
 80019d4:	0038      	movs	r0, r7
 80019d6:	f004 f971 	bl	8005cbc <memset>
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80019da:	ab1e      	add	r3, sp, #120	@ 0x78
 80019dc:	2220      	movs	r2, #32
 80019de:	2100      	movs	r1, #0
 80019e0:	0018      	movs	r0, r3
 80019e2:	f004 f96b 	bl	8005cbc <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 80019e6:	ab12      	add	r3, sp, #72	@ 0x48
 80019e8:	2218      	movs	r2, #24
 80019ea:	2100      	movs	r1, #0
 80019ec:	0018      	movs	r0, r3
 80019ee:	f004 f965 	bl	8005cbc <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f2:	ab1a      	add	r3, sp, #104	@ 0x68
 80019f4:	2208      	movs	r2, #8
 80019f6:	2100      	movs	r1, #0
 80019f8:	0018      	movs	r0, r3
 80019fa:	f004 f95f 	bl	8005cbc <memset>
  SET_BIT(RCC->APB2ENR, Periphs);
 80019fe:	2080      	movs	r0, #128	@ 0x80
  SET_BIT(RCC->AHBENR, Periphs);
 8001a00:	2280      	movs	r2, #128	@ 0x80
  SET_BIT(RCC->APB2ENR, Periphs);
 8001a02:	69a3      	ldr	r3, [r4, #24]
 8001a04:	0100      	lsls	r0, r0, #4
 8001a06:	4303      	orrs	r3, r0
 8001a08:	61a3      	str	r3, [r4, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001a0a:	69a3      	ldr	r3, [r4, #24]
  SET_BIT(RCC->AHBENR, Periphs);
 8001a0c:	02d2      	lsls	r2, r2, #11
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001a0e:	4003      	ands	r3, r0
 8001a10:	9304      	str	r3, [sp, #16]
  (void)tmpreg;
 8001a12:	9b04      	ldr	r3, [sp, #16]
  SET_BIT(RCC->AHBENR, Periphs);
 8001a14:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001a16:	2610      	movs	r6, #16
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	6163      	str	r3, [r4, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001a1c:	6963      	ldr	r3, [r4, #20]
  LL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8001a1e:	488e      	ldr	r0, [pc, #568]	@ (8001c58 <main+0x420>)
 8001a20:	4013      	ands	r3, r2
 8001a22:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pin = M1_OCP_Pin;
 8001a24:	2280      	movs	r2, #128	@ 0x80
  (void)tmpreg;
 8001a26:	9b05      	ldr	r3, [sp, #20]
 8001a28:	2302      	movs	r3, #2
 8001a2a:	0152      	lsls	r2, r2, #5
 8001a2c:	9218      	str	r2, [sp, #96]	@ 0x60
 8001a2e:	9319      	str	r3, [sp, #100]	@ 0x64
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001a30:	2201      	movs	r2, #1
 8001a32:	2302      	movs	r3, #2
 8001a34:	921c      	str	r2, [sp, #112]	@ 0x70
 8001a36:	931d      	str	r3, [sp, #116]	@ 0x74
  LL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8001a38:	ab18      	add	r3, sp, #96	@ 0x60
 8001a3a:	0019      	movs	r1, r3
 8001a3c:	f003 fbba 	bl	80051b4 <LL_GPIO_Init>
 8001a40:	4b8c      	ldr	r3, [pc, #560]	@ (8001c74 <main+0x43c>)
 8001a42:	4987      	ldr	r1, [pc, #540]	@ (8001c60 <main+0x428>)
 8001a44:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001a46:	4887      	ldr	r0, [pc, #540]	@ (8001c64 <main+0x42c>)
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001a48:	400a      	ands	r2, r1
 8001a4a:	4332      	orrs	r2, r6
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001a4c:	2680      	movs	r6, #128	@ 0x80
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8001a4e:	2120      	movs	r1, #32
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001a50:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	01b6      	lsls	r6, r6, #6
 8001a56:	4002      	ands	r2, r0
 8001a58:	4332      	orrs	r2, r6
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8001a5a:	2640      	movs	r6, #64	@ 0x40
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001a5c:	4640      	mov	r0, r8
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001a5e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	438a      	bics	r2, r1
 8001a64:	430a      	orrs	r2, r1
 8001a66:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8001a68:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8001a6a:	4980      	ldr	r1, [pc, #512]	@ (8001c6c <main+0x434>)
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8001a6c:	43b2      	bics	r2, r6
 8001a6e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	4382      	bics	r2, r0
 8001a74:	4302      	orrs	r2, r0
 8001a76:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	3080      	adds	r0, #128	@ 0x80
 8001a7c:	400a      	ands	r2, r1
 8001a7e:	4302      	orrs	r2, r0
 8001a80:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	497a      	ldr	r1, [pc, #488]	@ (8001c70 <main+0x438>)
 8001a86:	400a      	ands	r2, r1
 8001a88:	2180      	movs	r1, #128	@ 0x80
 8001a8a:	00c9      	lsls	r1, r1, #3
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001a90:	4b79      	ldr	r3, [pc, #484]	@ (8001c78 <main+0x440>)
 8001a92:	4973      	ldr	r1, [pc, #460]	@ (8001c60 <main+0x428>)
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	400a      	ands	r2, r1
 8001a98:	2110      	movs	r1, #16
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	4970      	ldr	r1, [pc, #448]	@ (8001c64 <main+0x42c>)
 8001aa2:	400a      	ands	r2, r1
 8001aa4:	2180      	movs	r1, #128	@ 0x80
 8001aa6:	0189      	lsls	r1, r1, #6
 8001aa8:	430a      	orrs	r2, r1
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8001aaa:	2120      	movs	r1, #32
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001aac:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	438a      	bics	r2, r1
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	0031      	movs	r1, r6
 8001aba:	43b2      	bics	r2, r6
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001abc:	4646      	mov	r6, r8
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8001abe:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	43b2      	bics	r2, r6
 8001ac4:	4332      	orrs	r2, r6
 8001ac6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	4e68      	ldr	r6, [pc, #416]	@ (8001c6c <main+0x434>)
 8001acc:	4032      	ands	r2, r6
 8001ace:	4302      	orrs	r2, r0
 8001ad0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8001ad2:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8001ad4:	0006      	movs	r6, r0
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8001ad6:	4866      	ldr	r0, [pc, #408]	@ (8001c70 <main+0x438>)
 8001ad8:	4002      	ands	r2, r0
 8001ada:	2080      	movs	r0, #128	@ 0x80
 8001adc:	00c0      	lsls	r0, r0, #3
 8001ade:	4302      	orrs	r2, r0
 8001ae0:	601a      	str	r2, [r3, #0]
  TIM_InitStruct.Autoreload = ((PWM_PERIOD_CYCLES) / 2);
 8001ae2:	4b66      	ldr	r3, [pc, #408]	@ (8001c7c <main+0x444>)
  TIM_InitStruct.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 8001ae4:	803d      	strh	r5, [r7, #0]
  TIM_InitStruct.Autoreload = ((PWM_PERIOD_CYCLES) / 2);
 8001ae6:	930f      	str	r3, [sp, #60]	@ 0x3c
  TIM_InitStruct.RepetitionCounter = (REP_COUNTER);
 8001ae8:	465b      	mov	r3, fp
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_CENTER_UP;
 8001aea:	910e      	str	r1, [sp, #56]	@ 0x38
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8001aec:	0039      	movs	r1, r7
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001aee:	4647      	mov	r7, r8
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV2;
 8001af0:	9610      	str	r6, [sp, #64]	@ 0x40
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8001af2:	4e63      	ldr	r6, [pc, #396]	@ (8001c80 <main+0x448>)
  TIM_InitStruct.RepetitionCounter = (REP_COUNTER);
 8001af4:	9311      	str	r3, [sp, #68]	@ 0x44
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8001af6:	0030      	movs	r0, r6
 8001af8:	f003 fc46 	bl	8005388 <LL_TIM_Init>
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001afc:	2008      	movs	r0, #8
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001afe:	6833      	ldr	r3, [r6, #0]
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001b00:	2101      	movs	r1, #1
 8001b02:	43bb      	bics	r3, r7
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001b04:	4f5f      	ldr	r7, [pc, #380]	@ (8001c84 <main+0x44c>)
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001b06:	6033      	str	r3, [r6, #0]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	4303      	orrs	r3, r0
 8001b0c:	603b      	str	r3, [r7, #0]
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001b0e:	2360      	movs	r3, #96	@ 0x60
 8001b10:	931e      	str	r3, [sp, #120]	@ 0x78
  TIM_OC_InitStruct.CompareValue = ((PWM_PERIOD_CYCLES) / 4);
 8001b12:	4b5d      	ldr	r3, [pc, #372]	@ (8001c88 <main+0x450>)
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001b14:	0030      	movs	r0, r6
  TIM_OC_InitStruct.CompareValue = ((PWM_PERIOD_CYCLES) / 4);
 8001b16:	9321      	str	r3, [sp, #132]	@ 0x84
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_LOW;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	4699      	mov	r9, r3
 8001b1c:	9322      	str	r3, [sp, #136]	@ 0x88
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_LOW;
 8001b1e:	9323      	str	r3, [sp, #140]	@ 0x8c
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_HIGH;
 8001b20:	33fe      	adds	r3, #254	@ 0xfe
 8001b22:	9324      	str	r3, [sp, #144]	@ 0x90
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_HIGH;
 8001b24:	9325      	str	r3, [sp, #148]	@ 0x94
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001b26:	ab1e      	add	r3, sp, #120	@ 0x78
 8001b28:	001a      	movs	r2, r3
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001b2a:	951f      	str	r5, [sp, #124]	@ 0x7c
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001b2c:	9520      	str	r5, [sp, #128]	@ 0x80
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001b2e:	f003 fc6f 	bl	8005410 <LL_TIM_OC_Init>
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001b32:	2204      	movs	r2, #4
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001b34:	2080      	movs	r0, #128	@ 0x80
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001b36:	683b      	ldr	r3, [r7, #0]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001b38:	0100      	lsls	r0, r0, #4
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001b3a:	4393      	bics	r3, r2
 8001b3c:	603b      	str	r3, [r7, #0]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001b3e:	683b      	ldr	r3, [r7, #0]
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8001b40:	2110      	movs	r1, #16
 8001b42:	4303      	orrs	r3, r0
 8001b44:	603b      	str	r3, [r7, #0]
 8001b46:	ab1e      	add	r3, sp, #120	@ 0x78
 8001b48:	001a      	movs	r2, r3
 8001b4a:	0030      	movs	r0, r6
 8001b4c:	f003 fc60 	bl	8005410 <LL_TIM_OC_Init>
 8001b50:	2008      	movs	r0, #8
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8001b52:	2180      	movs	r1, #128	@ 0x80
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	4a4d      	ldr	r2, [pc, #308]	@ (8001c8c <main+0x454>)
 8001b58:	0049      	lsls	r1, r1, #1
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	603b      	str	r3, [r7, #0]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001b5e:	4f4c      	ldr	r7, [pc, #304]	@ (8001c90 <main+0x458>)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	4303      	orrs	r3, r0
 8001b64:	603b      	str	r3, [r7, #0]
 8001b66:	ab1e      	add	r3, sp, #120	@ 0x78
 8001b68:	001a      	movs	r2, r3
 8001b6a:	0030      	movs	r0, r6
 8001b6c:	f003 fc50 	bl	8005410 <LL_TIM_OC_Init>
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001b70:	2204      	movs	r2, #4
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001b72:	2080      	movs	r0, #128	@ 0x80
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001b74:	683b      	ldr	r3, [r7, #0]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001b76:	0100      	lsls	r0, r0, #4
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001b78:	4393      	bics	r3, r2
 8001b7a:	603b      	str	r3, [r7, #0]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001b7c:	683b      	ldr	r3, [r7, #0]
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM2;
 8001b7e:	326c      	adds	r2, #108	@ 0x6c
 8001b80:	4303      	orrs	r3, r0
 8001b82:	603b      	str	r3, [r7, #0]
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8001b84:	2100      	movs	r1, #0
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM2;
 8001b86:	921e      	str	r2, [sp, #120]	@ 0x78
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8001b88:	2200      	movs	r2, #0
  TIM_OC_InitStruct.CompareValue = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 8001b8a:	23df      	movs	r3, #223	@ 0xdf
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8001b8c:	9124      	str	r1, [sp, #144]	@ 0x90
 8001b8e:	9225      	str	r2, [sp, #148]	@ 0x94
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8001b90:	2180      	movs	r1, #128	@ 0x80
 8001b92:	a81e      	add	r0, sp, #120	@ 0x78
 8001b94:	0002      	movs	r2, r0
  TIM_OC_InitStruct.CompareValue = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 8001b96:	00db      	lsls	r3, r3, #3
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8001b98:	0030      	movs	r0, r6
 8001b9a:	0149      	lsls	r1, r1, #5
  TIM_OC_InitStruct.CompareValue = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 8001b9c:	9321      	str	r3, [sp, #132]	@ 0x84
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001b9e:	9522      	str	r5, [sp, #136]	@ 0x88
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8001ba0:	f003 fc36 	bl	8005410 <LL_TIM_OC_Init>
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	4839      	ldr	r0, [pc, #228]	@ (8001c8c <main+0x454>)
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_ENABLE;
 8001ba8:	2280      	movs	r2, #128	@ 0x80
 8001baa:	4003      	ands	r3, r0
 8001bac:	603b      	str	r3, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001bae:	2770      	movs	r7, #112	@ 0x70
 8001bb0:	2020      	movs	r0, #32
 8001bb2:	6873      	ldr	r3, [r6, #4]
 8001bb4:	0112      	lsls	r2, r2, #4
 8001bb6:	43bb      	bics	r3, r7
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001bb8:	4647      	mov	r7, r8
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001bba:	4303      	orrs	r3, r0
 8001bbc:	6073      	str	r3, [r6, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001bbe:	68b3      	ldr	r3, [r6, #8]
  TIM_BDTRInitStruct.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 8001bc0:	3034      	adds	r0, #52	@ 0x34
 8001bc2:	43bb      	bics	r3, r7
 8001bc4:	60b3      	str	r3, [r6, #8]
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_ENABLE;
 8001bc6:	2380      	movs	r3, #128	@ 0x80
  TIM_BDTRInitStruct.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 8001bc8:	466f      	mov	r7, sp
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_ENABLE;
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	9212      	str	r2, [sp, #72]	@ 0x48
 8001bce:	9313      	str	r3, [sp, #76]	@ 0x4c
  TIM_BDTRInitStruct.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 8001bd0:	230e      	movs	r3, #14
 8001bd2:	183f      	adds	r7, r7, r0
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8001bd4:	9514      	str	r5, [sp, #80]	@ 0x50
  TIM_BDTRInitStruct.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 8001bd6:	703b      	strb	r3, [r7, #0]
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_ENABLE;
 8001bd8:	466f      	mov	r7, sp
 8001bda:	3002      	adds	r0, #2
 8001bdc:	183f      	adds	r7, r7, r0
 8001bde:	2080      	movs	r0, #128	@ 0x80
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_LOW;
 8001be0:	2200      	movs	r2, #0
 8001be2:	2100      	movs	r1, #0
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_ENABLE;
 8001be4:	0140      	lsls	r0, r0, #5
 8001be6:	8038      	strh	r0, [r7, #0]
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8001be8:	af12      	add	r7, sp, #72	@ 0x48
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_LOW;
 8001bea:	9116      	str	r1, [sp, #88]	@ 0x58
 8001bec:	9217      	str	r2, [sp, #92]	@ 0x5c
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8001bee:	0030      	movs	r0, r6
 8001bf0:	0039      	movs	r1, r7
 8001bf2:	f003 fd09 	bl	8005608 <LL_TIM_BDTR_Init>
  SET_BIT(RCC->AHBENR, Periphs);
 8001bf6:	2280      	movs	r2, #128	@ 0x80
 8001bf8:	2780      	movs	r7, #128	@ 0x80
 8001bfa:	6963      	ldr	r3, [r4, #20]
 8001bfc:	02d2      	lsls	r2, r2, #11
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	6163      	str	r3, [r4, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001c02:	6963      	ldr	r3, [r4, #20]
  SET_BIT(RCC->AHBENR, Periphs);
 8001c04:	02bf      	lsls	r7, r7, #10
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001c06:	4013      	ands	r3, r2
 8001c08:	9306      	str	r3, [sp, #24]
  (void)tmpreg;
 8001c0a:	9b06      	ldr	r3, [sp, #24]
  SET_BIT(RCC->AHBENR, Periphs);
 8001c0c:	6963      	ldr	r3, [r4, #20]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001c0e:	464e      	mov	r6, r9
 8001c10:	433b      	orrs	r3, r7
 8001c12:	6163      	str	r3, [r4, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001c14:	6963      	ldr	r3, [r4, #20]
 8001c16:	9619      	str	r6, [sp, #100]	@ 0x64
 8001c18:	403b      	ands	r3, r7
  GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 8001c1a:	2780      	movs	r7, #128	@ 0x80
 8001c1c:	9307      	str	r3, [sp, #28]
 8001c1e:	01bf      	lsls	r7, r7, #6
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001c20:	2601      	movs	r6, #1
  (void)tmpreg;
 8001c22:	9b07      	ldr	r3, [sp, #28]
  GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 8001c24:	9718      	str	r7, [sp, #96]	@ 0x60
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001c26:	2303      	movs	r3, #3
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001c28:	2702      	movs	r7, #2
  LL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 8001c2a:	a818      	add	r0, sp, #96	@ 0x60
 8001c2c:	0001      	movs	r1, r0
 8001c2e:	480a      	ldr	r0, [pc, #40]	@ (8001c58 <main+0x420>)
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001c30:	961c      	str	r6, [sp, #112]	@ 0x70
 8001c32:	971d      	str	r7, [sp, #116]	@ 0x74
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001c34:	931a      	str	r3, [sp, #104]	@ 0x68
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c36:	951b      	str	r5, [sp, #108]	@ 0x6c
  LL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 8001c38:	f003 fabc 	bl	80051b4 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = M1_PWM_VL_Pin;
 8001c3c:	2080      	movs	r0, #128	@ 0x80
 8001c3e:	01c0      	lsls	r0, r0, #7
 8001c40:	9018      	str	r0, [sp, #96]	@ 0x60
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001c42:	4648      	mov	r0, r9
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001c44:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001c46:	9019      	str	r0, [sp, #100]	@ 0x64
  LL_GPIO_Init(M1_PWM_VL_GPIO_Port, &GPIO_InitStruct);
 8001c48:	a818      	add	r0, sp, #96	@ 0x60
 8001c4a:	0001      	movs	r1, r0
 8001c4c:	4802      	ldr	r0, [pc, #8]	@ (8001c58 <main+0x420>)
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001c4e:	961c      	str	r6, [sp, #112]	@ 0x70
 8001c50:	971d      	str	r7, [sp, #116]	@ 0x74
 8001c52:	e01f      	b.n	8001c94 <main+0x45c>
 8001c54:	40021000 	.word	0x40021000
 8001c58:	48000400 	.word	0x48000400
 8001c5c:	40020008 	.word	0x40020008
 8001c60:	ffffbfef 	.word	0xffffbfef
 8001c64:	ffffcfff 	.word	0xffffcfff
 8001c68:	40012400 	.word	0x40012400
 8001c6c:	fffffcff 	.word	0xfffffcff
 8001c70:	fffff3ff 	.word	0xfffff3ff
 8001c74:	40020044 	.word	0x40020044
 8001c78:	40020058 	.word	0x40020058
 8001c7c:	00000736 	.word	0x00000736
 8001c80:	40012c00 	.word	0x40012c00
 8001c84:	40012c18 	.word	0x40012c18
 8001c88:	0000039b 	.word	0x0000039b
 8001c8c:	fffffbff 	.word	0xfffffbff
 8001c90:	40012c1c 	.word	0x40012c1c
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001c94:	931a      	str	r3, [sp, #104]	@ 0x68
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c96:	951b      	str	r5, [sp, #108]	@ 0x6c
  LL_GPIO_Init(M1_PWM_VL_GPIO_Port, &GPIO_InitStruct);
 8001c98:	f003 fa8c 	bl	80051b4 <LL_GPIO_Init>
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001c9c:	464b      	mov	r3, r9
  GPIO_InitStruct.Pin = M1_PWM_WL_Pin;
 8001c9e:	2080      	movs	r0, #128	@ 0x80
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001ca0:	9319      	str	r3, [sp, #100]	@ 0x64
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	931a      	str	r3, [sp, #104]	@ 0x68
  GPIO_InitStruct.Pin = M1_PWM_WL_Pin;
 8001ca6:	0200      	lsls	r0, r0, #8
  LL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 8001ca8:	ab18      	add	r3, sp, #96	@ 0x60
 8001caa:	0019      	movs	r1, r3
  GPIO_InitStruct.Pin = M1_PWM_WL_Pin;
 8001cac:	9018      	str	r0, [sp, #96]	@ 0x60
  LL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 8001cae:	48f3      	ldr	r0, [pc, #972]	@ (800207c <main+0x844>)
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001cb0:	961c      	str	r6, [sp, #112]	@ 0x70
 8001cb2:	971d      	str	r7, [sp, #116]	@ 0x74
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001cb4:	951b      	str	r5, [sp, #108]	@ 0x6c
  LL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 8001cb6:	f003 fa7d 	bl	80051b4 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = M1_PWM_UH_Pin;
 8001cba:	2380      	movs	r3, #128	@ 0x80
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	9318      	str	r3, [sp, #96]	@ 0x60
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001cc0:	464b      	mov	r3, r9
 8001cc2:	9319      	str	r3, [sp, #100]	@ 0x64
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	931a      	str	r3, [sp, #104]	@ 0x68
  LL_GPIO_Init(M1_PWM_UH_GPIO_Port, &GPIO_InitStruct);
 8001cc8:	ab18      	add	r3, sp, #96	@ 0x60
 8001cca:	0019      	movs	r1, r3
 8001ccc:	4650      	mov	r0, sl
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001cce:	961c      	str	r6, [sp, #112]	@ 0x70
 8001cd0:	971d      	str	r7, [sp, #116]	@ 0x74
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001cd2:	951b      	str	r5, [sp, #108]	@ 0x6c
  LL_GPIO_Init(M1_PWM_UH_GPIO_Port, &GPIO_InitStruct);
 8001cd4:	f003 fa6e 	bl	80051b4 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = M1_PWM_VH_Pin;
 8001cd8:	2380      	movs	r3, #128	@ 0x80
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	9318      	str	r3, [sp, #96]	@ 0x60
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001cde:	464b      	mov	r3, r9
 8001ce0:	9319      	str	r3, [sp, #100]	@ 0x64
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	931a      	str	r3, [sp, #104]	@ 0x68
  LL_GPIO_Init(M1_PWM_VH_GPIO_Port, &GPIO_InitStruct);
 8001ce6:	ab18      	add	r3, sp, #96	@ 0x60
 8001ce8:	0019      	movs	r1, r3
 8001cea:	4650      	mov	r0, sl
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001cec:	961c      	str	r6, [sp, #112]	@ 0x70
 8001cee:	971d      	str	r7, [sp, #116]	@ 0x74
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001cf0:	951b      	str	r5, [sp, #108]	@ 0x6c
  LL_GPIO_Init(M1_PWM_VH_GPIO_Port, &GPIO_InitStruct);
 8001cf2:	f003 fa5f 	bl	80051b4 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = M1_PWM_WH_Pin;
 8001cf6:	2380      	movs	r3, #128	@ 0x80
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	9318      	str	r3, [sp, #96]	@ 0x60
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001cfc:	464b      	mov	r3, r9
 8001cfe:	9319      	str	r3, [sp, #100]	@ 0x64
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001d00:	3301      	adds	r3, #1
 8001d02:	931a      	str	r3, [sp, #104]	@ 0x68
  LL_GPIO_Init(M1_PWM_WH_GPIO_Port, &GPIO_InitStruct);
 8001d04:	ab18      	add	r3, sp, #96	@ 0x60
 8001d06:	0019      	movs	r1, r3
 8001d08:	4650      	mov	r0, sl
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001d0a:	961c      	str	r6, [sp, #112]	@ 0x70
 8001d0c:	971d      	str	r7, [sp, #116]	@ 0x74
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001d0e:	951b      	str	r5, [sp, #108]	@ 0x6c
  LL_GPIO_Init(M1_PWM_WH_GPIO_Port, &GPIO_InitStruct);
 8001d10:	f003 fa50 	bl	80051b4 <LL_GPIO_Init>
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001d14:	ab12      	add	r3, sp, #72	@ 0x48
 8001d16:	2214      	movs	r2, #20
 8001d18:	2100      	movs	r1, #0
 8001d1a:	0018      	movs	r0, r3
 8001d1c:	f003 ffce 	bl	8005cbc <memset>
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001d20:	ab1e      	add	r3, sp, #120	@ 0x78
 8001d22:	0018      	movs	r0, r3
 8001d24:	2220      	movs	r2, #32
 8001d26:	2100      	movs	r1, #0
 8001d28:	f003 ffc8 	bl	8005cbc <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d2c:	2208      	movs	r2, #8
 8001d2e:	2100      	movs	r1, #0
 8001d30:	a81b      	add	r0, sp, #108	@ 0x6c
 8001d32:	f003 ffc3 	bl	8005cbc <memset>
  SET_BIT(RCC->APB1ENR, Periphs);
 8001d36:	4658      	mov	r0, fp
  SET_BIT(RCC->AHBENR, Periphs);
 8001d38:	2280      	movs	r2, #128	@ 0x80
  SET_BIT(RCC->APB1ENR, Periphs);
 8001d3a:	69e3      	ldr	r3, [r4, #28]
  SET_BIT(RCC->AHBENR, Periphs);
 8001d3c:	0292      	lsls	r2, r2, #10
  SET_BIT(RCC->APB1ENR, Periphs);
 8001d3e:	4303      	orrs	r3, r0
 8001d40:	61e3      	str	r3, [r4, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001d42:	69e3      	ldr	r3, [r4, #28]
 8001d44:	4003      	ands	r3, r0
 8001d46:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 8001d48:	9b03      	ldr	r3, [sp, #12]
  SET_BIT(RCC->AHBENR, Periphs);
 8001d4a:	6963      	ldr	r3, [r4, #20]
  LL_GPIO_Init(M1_HALL_H1_GPIO_Port, &GPIO_InitStruct);
 8001d4c:	4650      	mov	r0, sl
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	6163      	str	r3, [r4, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001d52:	6963      	ldr	r3, [r4, #20]
  GPIO_InitStruct.Pin = M1_HALL_H1_Pin;
 8001d54:	9618      	str	r6, [sp, #96]	@ 0x60
 8001d56:	9719      	str	r7, [sp, #100]	@ 0x64
 8001d58:	4013      	ands	r3, r2
 8001d5a:	930d      	str	r3, [sp, #52]	@ 0x34
  (void)tmpreg;
 8001d5c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8001d5e:	464b      	mov	r3, r9
 8001d60:	931d      	str	r3, [sp, #116]	@ 0x74
  LL_GPIO_Init(M1_HALL_H1_GPIO_Port, &GPIO_InitStruct);
 8001d62:	ab18      	add	r3, sp, #96	@ 0x60
 8001d64:	0019      	movs	r1, r3
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001d66:	3602      	adds	r6, #2
 8001d68:	961a      	str	r6, [sp, #104]	@ 0x68
  LL_GPIO_Init(M1_HALL_H1_GPIO_Port, &GPIO_InitStruct);
 8001d6a:	f003 fa23 	bl	80051b4 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = M1_HALL_H2_Pin;
 8001d6e:	464b      	mov	r3, r9
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d70:	2702      	movs	r7, #2
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001d72:	961a      	str	r6, [sp, #104]	@ 0x68
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d74:	2600      	movs	r6, #0
  GPIO_InitStruct.Pin = M1_HALL_H2_Pin;
 8001d76:	9318      	str	r3, [sp, #96]	@ 0x60
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001d78:	9319      	str	r3, [sp, #100]	@ 0x64
  LL_GPIO_Init(M1_HALL_H2_GPIO_Port, &GPIO_InitStruct);
 8001d7a:	ab18      	add	r3, sp, #96	@ 0x60
 8001d7c:	0019      	movs	r1, r3
 8001d7e:	4650      	mov	r0, sl
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d80:	961c      	str	r6, [sp, #112]	@ 0x70
 8001d82:	971d      	str	r7, [sp, #116]	@ 0x74
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001d84:	951b      	str	r5, [sp, #108]	@ 0x6c
  LL_GPIO_Init(M1_HALL_H2_GPIO_Port, &GPIO_InitStruct);
 8001d86:	f003 fa15 	bl	80051b4 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = M1_HALL_H3_Pin;
 8001d8a:	2304      	movs	r3, #4
 8001d8c:	9318      	str	r3, [sp, #96]	@ 0x60
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001d8e:	464b      	mov	r3, r9
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001d90:	2203      	movs	r2, #3
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001d92:	9319      	str	r3, [sp, #100]	@ 0x64
  LL_GPIO_Init(M1_HALL_H3_GPIO_Port, &GPIO_InitStruct);
 8001d94:	ab18      	add	r3, sp, #96	@ 0x60
 8001d96:	0019      	movs	r1, r3
 8001d98:	4650      	mov	r0, sl
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d9a:	961c      	str	r6, [sp, #112]	@ 0x70
 8001d9c:	971d      	str	r7, [sp, #116]	@ 0x74
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001d9e:	921a      	str	r2, [sp, #104]	@ 0x68
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001da0:	951b      	str	r5, [sp, #108]	@ 0x6c
  LL_GPIO_Init(M1_HALL_H3_GPIO_Port, &GPIO_InitStruct);
 8001da2:	f003 fa07 	bl	80051b4 <LL_GPIO_Init>
  TIM_InitStruct.Prescaler = 0;
 8001da6:	466b      	mov	r3, sp
 8001da8:	3648      	adds	r6, #72	@ 0x48
 8001daa:	199b      	adds	r3, r3, r6
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8001dac:	2680      	movs	r6, #128	@ 0x80
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001dae:	4647      	mov	r7, r8
  TIM_InitStruct.Prescaler = 0;
 8001db0:	801d      	strh	r5, [r3, #0]
  TIM_InitStruct.Autoreload = M1_HALL_TIM_PERIOD;
 8001db2:	4bb3      	ldr	r3, [pc, #716]	@ (8002080 <main+0x848>)
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8001db4:	05f6      	lsls	r6, r6, #23
  TIM_InitStruct.Autoreload = M1_HALL_TIM_PERIOD;
 8001db6:	9314      	str	r3, [sp, #80]	@ 0x50
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8001db8:	ab12      	add	r3, sp, #72	@ 0x48
 8001dba:	0019      	movs	r1, r3
 8001dbc:	0030      	movs	r0, r6
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001dbe:	9513      	str	r5, [sp, #76]	@ 0x4c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001dc0:	9515      	str	r5, [sp, #84]	@ 0x54
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8001dc2:	f003 fae1 	bl	8005388 <LL_TIM_Init>
 8001dc6:	6833      	ldr	r3, [r6, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001dc8:	4aae      	ldr	r2, [pc, #696]	@ (8002084 <main+0x84c>)
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001dca:	43bb      	bics	r3, r7
 8001dcc:	6033      	str	r3, [r6, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001dce:	68b3      	ldr	r3, [r6, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001dd0:	4fad      	ldr	r7, [pc, #692]	@ (8002088 <main+0x850>)
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001dd2:	4013      	ands	r3, r2
  CLEAR_BIT(TIMx->CCER, Channels);
 8001dd4:	2211      	movs	r2, #17
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001dd6:	60b3      	str	r3, [r6, #8]
  CLEAR_BIT(TIMx->CCER, Channels);
 8001dd8:	6a33      	ldr	r3, [r6, #32]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_TS, TriggerInput);
 8001dda:	2040      	movs	r0, #64	@ 0x40
  CLEAR_BIT(TIMx->CCER, Channels);
 8001ddc:	4393      	bics	r3, r2
 8001dde:	6233      	str	r3, [r6, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	3a0e      	subs	r2, #14
 8001de4:	4393      	bics	r3, r2
 8001de6:	4313      	orrs	r3, r2
 8001de8:	603b      	str	r3, [r7, #0]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	3209      	adds	r2, #9
 8001dee:	4393      	bics	r3, r2
 8001df0:	603b      	str	r3, [r7, #0]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	32e4      	adds	r2, #228	@ 0xe4
 8001df6:	4393      	bics	r3, r2
 8001df8:	4642      	mov	r2, r8
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	603b      	str	r3, [r7, #0]
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 8001dfe:	6a33      	ldr	r3, [r6, #32]
 8001e00:	3a76      	subs	r2, #118	@ 0x76
 8001e02:	4393      	bics	r3, r2
  SET_BIT(TIMx->CR2, TIM_CR2_TI1S);
 8001e04:	4642      	mov	r2, r8
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 8001e06:	6233      	str	r3, [r6, #32]
  SET_BIT(TIMx->CR2, TIM_CR2_TI1S);
 8001e08:	6873      	ldr	r3, [r6, #4]
 8001e0a:	4313      	orrs	r3, r2
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_TS, TriggerInput);
 8001e0c:	3a10      	subs	r2, #16
 8001e0e:	0011      	movs	r1, r2
  SET_BIT(TIMx->CR2, TIM_CR2_TI1S);
 8001e10:	6073      	str	r3, [r6, #4]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_TS, TriggerInput);
 8001e12:	68b3      	ldr	r3, [r6, #8]
 8001e14:	4393      	bics	r3, r2
 8001e16:	4303      	orrs	r3, r0
 8001e18:	60b3      	str	r3, [r6, #8]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, SlaveMode);
 8001e1a:	68b3      	ldr	r3, [r6, #8]
 8001e1c:	3a69      	subs	r2, #105	@ 0x69
 8001e1e:	4393      	bics	r3, r2
 8001e20:	3a03      	subs	r2, #3
 8001e22:	4313      	orrs	r3, r2
 8001e24:	60b3      	str	r3, [r6, #8]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8001e26:	ab1e      	add	r3, sp, #120	@ 0x78
 8001e28:	001a      	movs	r2, r3
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM2;
 8001e2a:	911e      	str	r1, [sp, #120]	@ 0x78
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8001e2c:	0030      	movs	r0, r6
 8001e2e:	3960      	subs	r1, #96	@ 0x60
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001e30:	951f      	str	r5, [sp, #124]	@ 0x7c
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001e32:	9520      	str	r5, [sp, #128]	@ 0x80
  TIM_OC_InitStruct.CompareValue = 0;
 8001e34:	9521      	str	r5, [sp, #132]	@ 0x84
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001e36:	9522      	str	r5, [sp, #136]	@ 0x88
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001e38:	9523      	str	r5, [sp, #140]	@ 0x8c
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8001e3a:	9524      	str	r5, [sp, #144]	@ 0x90
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8001e3c:	9525      	str	r5, [sp, #148]	@ 0x94
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8001e3e:	f003 fae7 	bl	8005410 <LL_TIM_OC_Init>
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	4a91      	ldr	r2, [pc, #580]	@ (800208c <main+0x854>)
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001e46:	2100      	movs	r1, #0
 8001e48:	4013      	ands	r3, r2
 8001e4a:	603b      	str	r3, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001e4c:	2770      	movs	r7, #112	@ 0x70
 8001e4e:	2250      	movs	r2, #80	@ 0x50
 8001e50:	6873      	ldr	r3, [r6, #4]
 8001e52:	43bb      	bics	r3, r7
 8001e54:	4313      	orrs	r3, r2
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001e56:	4642      	mov	r2, r8
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001e58:	6073      	str	r3, [r6, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001e5a:	2780      	movs	r7, #128	@ 0x80
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001e5c:	68b3      	ldr	r3, [r6, #8]
 8001e5e:	01ff      	lsls	r7, r7, #7
 8001e60:	4393      	bics	r3, r2
 8001e62:	60b3      	str	r3, [r6, #8]
 8001e64:	ab1e      	add	r3, sp, #120	@ 0x78
 8001e66:	0018      	movs	r0, r3
 8001e68:	3a64      	subs	r2, #100	@ 0x64
 8001e6a:	f003 ff27 	bl	8005cbc <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e6e:	ab1a      	add	r3, sp, #104	@ 0x68
 8001e70:	220c      	movs	r2, #12
 8001e72:	2100      	movs	r1, #0
 8001e74:	0018      	movs	r0, r3
 8001e76:	f003 ff21 	bl	8005cbc <memset>
  SET_BIT(RCC->AHBENR, Periphs);
 8001e7a:	2280      	movs	r2, #128	@ 0x80
  SET_BIT(RCC->APB2ENR, Periphs);
 8001e7c:	69a3      	ldr	r3, [r4, #24]
  SET_BIT(RCC->AHBENR, Periphs);
 8001e7e:	02d2      	lsls	r2, r2, #11
  SET_BIT(RCC->APB2ENR, Periphs);
 8001e80:	433b      	orrs	r3, r7
 8001e82:	61a3      	str	r3, [r4, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001e84:	69a3      	ldr	r3, [r4, #24]
  LL_GPIO_Init(UART_TX_GPIO_Port, &GPIO_InitStruct);
 8001e86:	487d      	ldr	r0, [pc, #500]	@ (800207c <main+0x844>)
 8001e88:	403b      	ands	r3, r7
 8001e8a:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8001e8c:	9b02      	ldr	r3, [sp, #8]
  SET_BIT(RCC->AHBENR, Periphs);
 8001e8e:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001e90:	4f7f      	ldr	r7, [pc, #508]	@ (8002090 <main+0x858>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	6163      	str	r3, [r4, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001e96:	6963      	ldr	r3, [r4, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 8001e98:	951d      	str	r5, [sp, #116]	@ 0x74
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	9312      	str	r3, [sp, #72]	@ 0x48
  (void)tmpreg;
 8001e9e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
  GPIO_InitStruct.Pin = UART_TX_Pin;
 8001ea0:	2240      	movs	r2, #64	@ 0x40
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	9218      	str	r2, [sp, #96]	@ 0x60
 8001ea6:	9319      	str	r3, [sp, #100]	@ 0x64
  LL_GPIO_Init(UART_TX_GPIO_Port, &GPIO_InitStruct);
 8001ea8:	aa18      	add	r2, sp, #96	@ 0x60
 8001eaa:	0011      	movs	r1, r2
 8001eac:	f003 f982 	bl	80051b4 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = UART_RX_Pin;
 8001eb0:	4642      	mov	r2, r8
 8001eb2:	9218      	str	r2, [sp, #96]	@ 0x60
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001eb4:	464a      	mov	r2, r9
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001eb6:	2100      	movs	r1, #0
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001eb8:	9219      	str	r2, [sp, #100]	@ 0x64
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001eba:	2200      	movs	r2, #0
 8001ebc:	911c      	str	r1, [sp, #112]	@ 0x70
 8001ebe:	921d      	str	r2, [sp, #116]	@ 0x74
  LL_GPIO_Init(UART_RX_GPIO_Port, &GPIO_InitStruct);
 8001ec0:	aa18      	add	r2, sp, #96	@ 0x60
 8001ec2:	0011      	movs	r1, r2
 8001ec4:	486d      	ldr	r0, [pc, #436]	@ (800207c <main+0x844>)
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001ec6:	951a      	str	r5, [sp, #104]	@ 0x68
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ec8:	951b      	str	r5, [sp, #108]	@ 0x6c
  LL_GPIO_Init(UART_RX_GPIO_Port, &GPIO_InitStruct);
 8001eca:	f003 f973 	bl	80051b4 <LL_GPIO_Init>
 8001ece:	4b71      	ldr	r3, [pc, #452]	@ (8002094 <main+0x85c>)
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8001ed0:	2120      	movs	r1, #32
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001ed2:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001ed4:	4c70      	ldr	r4, [pc, #448]	@ (8002098 <main+0x860>)
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001ed6:	403a      	ands	r2, r7
 8001ed8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	0020      	movs	r0, r4
 8001ede:	4022      	ands	r2, r4
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8001ee0:	2440      	movs	r4, #64	@ 0x40
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001ee2:	4646      	mov	r6, r8
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001ee4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	438a      	bics	r2, r1
 8001eea:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	43a2      	bics	r2, r4
 8001ef0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	43b2      	bics	r2, r6
 8001ef6:	4332      	orrs	r2, r6
 8001ef8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	4e67      	ldr	r6, [pc, #412]	@ (800209c <main+0x864>)
 8001efe:	4032      	ands	r2, r6
 8001f00:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	4e66      	ldr	r6, [pc, #408]	@ (80020a0 <main+0x868>)
 8001f06:	4032      	ands	r2, r6
 8001f08:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001f0a:	4b66      	ldr	r3, [pc, #408]	@ (80020a4 <main+0x86c>)
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	403a      	ands	r2, r7
 8001f10:	2710      	movs	r7, #16
 8001f12:	433a      	orrs	r2, r7
 8001f14:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	4002      	ands	r2, r0
 8001f1a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	438a      	bics	r2, r1
 8001f20:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	43a2      	bics	r2, r4
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001f26:	4644      	mov	r4, r8
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8001f28:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	43a2      	bics	r2, r4
 8001f2e:	4322      	orrs	r2, r4
 8001f30:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	4c59      	ldr	r4, [pc, #356]	@ (800209c <main+0x864>)
 8001f36:	4022      	ands	r2, r4
 8001f38:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8001f3a:	681a      	ldr	r2, [r3, #0]
  LL_USART_Init(USART1, &USART_InitStruct);
 8001f3c:	4c5a      	ldr	r4, [pc, #360]	@ (80020a8 <main+0x870>)
 8001f3e:	4032      	ands	r2, r6
 8001f40:	601a      	str	r2, [r3, #0]
  USART_InitStruct.BaudRate = 1843200;
 8001f42:	23e1      	movs	r3, #225	@ 0xe1
 8001f44:	035b      	lsls	r3, r3, #13
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001f46:	220c      	movs	r2, #12
  USART_InitStruct.BaudRate = 1843200;
 8001f48:	931e      	str	r3, [sp, #120]	@ 0x78
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001f4a:	2300      	movs	r3, #0
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001f4c:	951f      	str	r5, [sp, #124]	@ 0x7c
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001f4e:	9520      	str	r5, [sp, #128]	@ 0x80
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001f50:	9521      	str	r5, [sp, #132]	@ 0x84
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001f52:	9222      	str	r2, [sp, #136]	@ 0x88
 8001f54:	9323      	str	r3, [sp, #140]	@ 0x8c
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001f56:	9524      	str	r5, [sp, #144]	@ 0x90
  LL_USART_Init(USART1, &USART_InitStruct);
 8001f58:	ad1e      	add	r5, sp, #120	@ 0x78
 8001f5a:	0029      	movs	r1, r5
 8001f5c:	0020      	movs	r0, r4
 8001f5e:	f003 fb77 	bl	8005650 <LL_USART_Init>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f62:	f3ef 8210 	mrs	r2, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f66:	f38b 8810 	msr	PRIMASK, fp
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8001f6a:	4e48      	ldr	r6, [pc, #288]	@ (800208c <main+0x854>)
 8001f6c:	68a3      	ldr	r3, [r4, #8]
 8001f6e:	4033      	ands	r3, r6
 8001f70:	60a3      	str	r3, [r4, #8]
 8001f72:	f382 8810 	msr	PRIMASK, r2
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f76:	4a4d      	ldr	r2, [pc, #308]	@ (80020ac <main+0x874>)
 8001f78:	6863      	ldr	r3, [r4, #4]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f7a:	2680      	movs	r6, #128	@ 0x80
 8001f7c:	4013      	ands	r3, r2
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001f7e:	222a      	movs	r2, #42	@ 0x2a
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f80:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001f82:	68a3      	ldr	r3, [r4, #8]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f84:	2580      	movs	r5, #128	@ 0x80
 8001f86:	4393      	bics	r3, r2
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001f88:	465a      	mov	r2, fp
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001f8a:	60a3      	str	r3, [r4, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001f8c:	6823      	ldr	r3, [r4, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f8e:	01f6      	lsls	r6, r6, #7
 8001f90:	4313      	orrs	r3, r2
 8001f92:	6023      	str	r3, [r4, #0]
  MX_MotorControl_Init();
 8001f94:	f001 f876 	bl	8003084 <MX_MotorControl_Init>
 8001f98:	21c6      	movs	r1, #198	@ 0xc6
 8001f9a:	20c0      	movs	r0, #192	@ 0xc0
 8001f9c:	4b44      	ldr	r3, [pc, #272]	@ (80020b0 <main+0x878>)
 8001f9e:	0089      	lsls	r1, r1, #2
 8001fa0:	585a      	ldr	r2, [r3, r1]
 8001fa2:	0600      	lsls	r0, r0, #24
 8001fa4:	0212      	lsls	r2, r2, #8
 8001fa6:	0a12      	lsrs	r2, r2, #8
 8001fa8:	4302      	orrs	r2, r0
 8001faa:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fac:	2280      	movs	r2, #128	@ 0x80
 8001fae:	0512      	lsls	r2, r2, #20
 8001fb0:	601a      	str	r2, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fb2:	22c2      	movs	r2, #194	@ 0xc2
 8001fb4:	0092      	lsls	r2, r2, #2
 8001fb6:	5899      	ldr	r1, [r3, r2]
 8001fb8:	4c3e      	ldr	r4, [pc, #248]	@ (80020b4 <main+0x87c>)
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fba:	00ad      	lsls	r5, r5, #2
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fbc:	4021      	ands	r1, r4
 8001fbe:	4331      	orrs	r1, r6
 8001fc0:	5099      	str	r1, [r3, r2]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fc2:	601d      	str	r5, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fc4:	5899      	ldr	r1, [r3, r2]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fc6:	2780      	movs	r7, #128	@ 0x80
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fc8:	0209      	lsls	r1, r1, #8
 8001fca:	0a09      	lsrs	r1, r1, #8
 8001fcc:	5099      	str	r1, [r3, r2]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fce:	2180      	movs	r1, #128	@ 0x80
 8001fd0:	0109      	lsls	r1, r1, #4
 8001fd2:	6019      	str	r1, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fd4:	589d      	ldr	r5, [r3, r2]
 8001fd6:	4938      	ldr	r1, [pc, #224]	@ (80020b8 <main+0x880>)
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fd8:	01bf      	lsls	r7, r7, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fda:	400d      	ands	r5, r1
 8001fdc:	21c0      	movs	r1, #192	@ 0xc0
 8001fde:	0409      	lsls	r1, r1, #16
 8001fe0:	4329      	orrs	r1, r5
 8001fe2:	5099      	str	r1, [r3, r2]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fe4:	2180      	movs	r1, #128	@ 0x80
 8001fe6:	00c9      	lsls	r1, r1, #3
 8001fe8:	6019      	str	r1, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fea:	39f4      	subs	r1, #244	@ 0xf4
 8001fec:	585a      	ldr	r2, [r3, r1]
 8001fee:	4022      	ands	r2, r4
 8001ff0:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ff2:	601f      	str	r7, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ff4:	585a      	ldr	r2, [r3, r1]
 8001ff6:	0212      	lsls	r2, r2, #8
 8001ff8:	0a12      	lsrs	r2, r2, #8
 8001ffa:	4310      	orrs	r0, r2
 8001ffc:	5058      	str	r0, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ffe:	2080      	movs	r0, #128	@ 0x80
 8002000:	0200      	lsls	r0, r0, #8
 8002002:	6018      	str	r0, [r3, #0]
  MC_GetSTMStateMotor1(); // set a breakpoint on the line if reading the state via Debugger
 8002004:	f000 f8b4 	bl	8002170 <MC_GetSTMStateMotor1>
  MC_GetOccurredFaultsMotor1();
 8002008:	f000 f8aa 	bl	8002160 <MC_GetOccurredFaultsMotor1>
  MC_ProgramSpeedRampMotor1(120, 1000);
 800200c:	21fa      	movs	r1, #250	@ 0xfa
 800200e:	2078      	movs	r0, #120	@ 0x78
 8002010:	0089      	lsls	r1, r1, #2
 8002012:	f000 f899 	bl	8002148 <MC_ProgramSpeedRampMotor1>
 8002016:	4d29      	ldr	r5, [pc, #164]	@ (80020bc <main+0x884>)
 8002018:	4c29      	ldr	r4, [pc, #164]	@ (80020c0 <main+0x888>)
  if (!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) && DRIVE == false)
 800201a:	2101      	movs	r1, #1
 800201c:	4817      	ldr	r0, [pc, #92]	@ (800207c <main+0x844>)
 800201e:	f003 f88b 	bl	8005138 <HAL_GPIO_ReadPin>
 8002022:	2800      	cmp	r0, #0
 8002024:	d102      	bne.n	800202c <main+0x7f4>
 8002026:	782b      	ldrb	r3, [r5, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d057      	beq.n	80020dc <main+0x8a4>
  else if (!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) && DRIVE == true)
 800202c:	2101      	movs	r1, #1
 800202e:	4813      	ldr	r0, [pc, #76]	@ (800207c <main+0x844>)
 8002030:	f003 f882 	bl	8005138 <HAL_GPIO_ReadPin>
 8002034:	2800      	cmp	r0, #0
 8002036:	d102      	bne.n	800203e <main+0x806>
 8002038:	782b      	ldrb	r3, [r5, #0]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d166      	bne.n	800210c <main+0x8d4>
  if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) && DIRECTION == false)
 800203e:	2090      	movs	r0, #144	@ 0x90
 8002040:	2180      	movs	r1, #128	@ 0x80
 8002042:	05c0      	lsls	r0, r0, #23
 8002044:	f003 f878 	bl	8005138 <HAL_GPIO_ReadPin>
 8002048:	2800      	cmp	r0, #0
 800204a:	d102      	bne.n	8002052 <main+0x81a>
 800204c:	7823      	ldrb	r3, [r4, #0]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d055      	beq.n	80020fe <main+0x8c6>
  else if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) && DIRECTION == true)
 8002052:	2090      	movs	r0, #144	@ 0x90
 8002054:	2180      	movs	r1, #128	@ 0x80
 8002056:	05c0      	lsls	r0, r0, #23
 8002058:	f003 f86e 	bl	8005138 <HAL_GPIO_ReadPin>
 800205c:	2800      	cmp	r0, #0
 800205e:	d102      	bne.n	8002066 <main+0x82e>
 8002060:	7823      	ldrb	r3, [r4, #0]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d158      	bne.n	8002118 <main+0x8e0>
  if (DRIVE)
 8002066:	782b      	ldrb	r3, [r5, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d03e      	beq.n	80020ea <main+0x8b2>
	  MC_StartMotor1();
 800206c:	f000 f85c 	bl	8002128 <MC_StartMotor1>
  if (DIRECTION)
 8002070:	7823      	ldrb	r3, [r4, #0]
	  MC_ProgramSpeedRampMotor1(-120, 100);
 8002072:	2164      	movs	r1, #100	@ 0x64
 8002074:	2078      	movs	r0, #120	@ 0x78
  if (DIRECTION)
 8002076:	2b00      	cmp	r3, #0
 8002078:	d03e      	beq.n	80020f8 <main+0x8c0>
 800207a:	e023      	b.n	80020c4 <main+0x88c>
 800207c:	48000400 	.word	0x48000400
 8002080:	0000ffff 	.word	0x0000ffff
 8002084:	ffffbff8 	.word	0xffffbff8
 8002088:	40000018 	.word	0x40000018
 800208c:	fffffbff 	.word	0xfffffbff
 8002090:	ffffbfef 	.word	0xffffbfef
 8002094:	40020030 	.word	0x40020030
 8002098:	ffffcfff 	.word	0xffffcfff
 800209c:	fffffcff 	.word	0xfffffcff
 80020a0:	fffff3ff 	.word	0xfffff3ff
 80020a4:	4002001c 	.word	0x4002001c
 80020a8:	40013800 	.word	0x40013800
 80020ac:	ffffb7ff 	.word	0xffffb7ff
 80020b0:	e000e100 	.word	0xe000e100
 80020b4:	ffff00ff 	.word	0xffff00ff
 80020b8:	ff00ffff 	.word	0xff00ffff
 80020bc:	200003f1 	.word	0x200003f1
 80020c0:	200003f0 	.word	0x200003f0
	  MC_ProgramSpeedRampMotor1(-120, 100);
 80020c4:	4240      	negs	r0, r0
 80020c6:	f000 f83f 	bl	8002148 <MC_ProgramSpeedRampMotor1>
  if (!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) && DRIVE == false)
 80020ca:	2101      	movs	r1, #1
 80020cc:	4815      	ldr	r0, [pc, #84]	@ (8002124 <main+0x8ec>)
 80020ce:	f003 f833 	bl	8005138 <HAL_GPIO_ReadPin>
 80020d2:	2800      	cmp	r0, #0
 80020d4:	d1aa      	bne.n	800202c <main+0x7f4>
 80020d6:	782b      	ldrb	r3, [r5, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d1a7      	bne.n	800202c <main+0x7f4>
	  HAL_Delay(300); // delay to avoid re-reading unintentionally
 80020dc:	302d      	adds	r0, #45	@ 0x2d
	  DRIVE = !DRIVE;
 80020de:	3301      	adds	r3, #1
	  HAL_Delay(300); // delay to avoid re-reading unintentionally
 80020e0:	30ff      	adds	r0, #255	@ 0xff
	  DRIVE = !DRIVE;
 80020e2:	702b      	strb	r3, [r5, #0]
	  HAL_Delay(300); // delay to avoid re-reading unintentionally
 80020e4:	f002 ffbe 	bl	8005064 <HAL_Delay>
 80020e8:	e7a9      	b.n	800203e <main+0x806>
	  MC_StopMotor1();
 80020ea:	f000 f825 	bl	8002138 <MC_StopMotor1>
  if (DIRECTION)
 80020ee:	7823      	ldrb	r3, [r4, #0]
	  MC_ProgramSpeedRampMotor1(-120, 100);
 80020f0:	2164      	movs	r1, #100	@ 0x64
 80020f2:	2078      	movs	r0, #120	@ 0x78
  if (DIRECTION)
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d1e5      	bne.n	80020c4 <main+0x88c>
	  MC_ProgramSpeedRampMotor1(120, 100);
 80020f8:	f000 f826 	bl	8002148 <MC_ProgramSpeedRampMotor1>
 80020fc:	e78d      	b.n	800201a <main+0x7e2>
	  HAL_Delay(300); // delay to avoid re-reading unintentionally
 80020fe:	302d      	adds	r0, #45	@ 0x2d
	  DIRECTION = !DIRECTION;
 8002100:	3301      	adds	r3, #1
	  HAL_Delay(300); // delay to avoid re-reading unintentionally
 8002102:	30ff      	adds	r0, #255	@ 0xff
	  DIRECTION = !DIRECTION;
 8002104:	7023      	strb	r3, [r4, #0]
	  HAL_Delay(300); // delay to avoid re-reading unintentionally
 8002106:	f002 ffad 	bl	8005064 <HAL_Delay>
 800210a:	e7ac      	b.n	8002066 <main+0x82e>
	  DRIVE = !DRIVE;
 800210c:	7028      	strb	r0, [r5, #0]
	  HAL_Delay(300);
 800210e:	302d      	adds	r0, #45	@ 0x2d
 8002110:	30ff      	adds	r0, #255	@ 0xff
 8002112:	f002 ffa7 	bl	8005064 <HAL_Delay>
 8002116:	e792      	b.n	800203e <main+0x806>
	  DIRECTION = !DIRECTION;
 8002118:	7020      	strb	r0, [r4, #0]
	  HAL_Delay(300);
 800211a:	302d      	adds	r0, #45	@ 0x2d
 800211c:	30ff      	adds	r0, #255	@ 0xff
 800211e:	f002 ffa1 	bl	8005064 <HAL_Delay>
 8002122:	e7a0      	b.n	8002066 <main+0x82e>
 8002124:	48000400 	.word	0x48000400

08002128 <MC_StartMotor1>:
  * Note also that if the startup sequence fails the #RUN state may never be reached.
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
 8002128:	b510      	push	{r4, lr}
  return (MCI_StartMotor(pMCI[M1]));
 800212a:	4b02      	ldr	r3, [pc, #8]	@ (8002134 <MC_StartMotor1+0xc>)
 800212c:	6818      	ldr	r0, [r3, #0]
 800212e:	f000 f8cb 	bl	80022c8 <MCI_StartMotor>
}
 8002132:	bd10      	pop	{r4, pc}
 8002134:	20000544 	.word	0x20000544

08002138 <MC_StopMotor1>:
  * machine and check if the #IDLE state has been reached.
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
 8002138:	b510      	push	{r4, lr}
  return (MCI_StopMotor(pMCI[M1]));
 800213a:	4b02      	ldr	r3, [pc, #8]	@ (8002144 <MC_StopMotor1+0xc>)
 800213c:	6818      	ldr	r0, [r3, #0]
 800213e:	f000 f8dd 	bl	80022fc <MCI_StopMotor>
}
 8002142:	bd10      	pop	{r4, pc}
 8002144:	20000544 	.word	0x20000544

08002148 <MC_ProgramSpeedRampMotor1>:
  * @param  hDurationms Duration of the ramp expressed in milliseconds. It
  *         is possible to set 0 to perform an instantaneous change in the speed
  *         value.
  */
__weak void MC_ProgramSpeedRampMotor1(int16_t hFinalSpeed, uint16_t hDurationms)
{
 8002148:	0003      	movs	r3, r0
 800214a:	b510      	push	{r4, lr}
 800214c:	000a      	movs	r2, r1
  MCI_ExecSpeedRamp(pMCI[M1], hFinalSpeed, hDurationms);
 800214e:	4903      	ldr	r1, [pc, #12]	@ (800215c <MC_ProgramSpeedRampMotor1+0x14>)
 8002150:	6808      	ldr	r0, [r1, #0]
 8002152:	0019      	movs	r1, r3
 8002154:	f000 f81a 	bl	800218c <MCI_ExecSpeedRamp>
}
 8002158:	bd10      	pop	{r4, pc}
 800215a:	46c0      	nop			@ (mov r8, r8)
 800215c:	20000544 	.word	0x20000544

08002160 <MC_GetOccurredFaultsMotor1>:
 *
 * See @ref fault_codes "Motor Control Faults" for a list of
 * of all possible faults codes.
 */
__weak uint16_t MC_GetOccurredFaultsMotor1(void)
{
 8002160:	b510      	push	{r4, lr}
  return (MCI_GetOccurredFaults(pMCI[M1]));
 8002162:	4b02      	ldr	r3, [pc, #8]	@ (800216c <MC_GetOccurredFaultsMotor1+0xc>)
 8002164:	6818      	ldr	r0, [r3, #0]
 8002166:	f000 f8ab 	bl	80022c0 <MCI_GetOccurredFaults>
}
 800216a:	bd10      	pop	{r4, pc}
 800216c:	20000544 	.word	0x20000544

08002170 <MC_GetSTMStateMotor1>:

/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak MCI_State_t MC_GetSTMStateMotor1(void)
{
 8002170:	b510      	push	{r4, lr}
  return (MCI_GetSTMState(pMCI[M1]));
 8002172:	4b02      	ldr	r3, [pc, #8]	@ (800217c <MC_GetSTMStateMotor1+0xc>)
 8002174:	6818      	ldr	r0, [r3, #0]
 8002176:	f000 f89f 	bl	80022b8 <MCI_GetSTMState>
}
 800217a:	bd10      	pop	{r4, pc}
 800217c:	20000544 	.word	0x20000544

08002180 <MC_ProfilerCommand>:
 * @brief Not implemented MC_Profiler function.
 *  */ //cstat !MISRAC2012-Rule-2.7 !RED-unused-param  !MISRAC2012-Rule-2.7  !MISRAC2012-Rule-8.13
__weak uint8_t MC_ProfilerCommand(uint16_t rxLength, uint8_t *rxBuffer, int16_t txSyncFreeSpace, uint16_t *txLength, uint8_t *txBuffer)
{
  return (MCP_CMD_UNKNOWN);
}
 8002180:	2002      	movs	r0, #2
 8002182:	4770      	bx	lr

08002184 <MC_APP_BootHook>:
   */

/* USER CODE BEGIN BootHook */

/* USER CODE END BootHook */
}
 8002184:	4770      	bx	lr
 8002186:	46c0      	nop			@ (mov r8, r8)

08002188 <MC_APP_PostMediumFrequencyHook_M1>:
 * @brief Hook function called right after the Medium Frequency Task for Motor 1.
 *
 *
 *
 */
__weak void MC_APP_PostMediumFrequencyHook_M1(void)
 8002188:	4770      	bx	lr
 800218a:	46c0      	nop			@ (mov r8, r8)

0800218c <MCI_ExecSpeedRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 800218c:	2301      	movs	r3, #1
    pHandle->hFinalSpeed = hFinalSpeed;
    pHandle->hDurationms = hDurationms;
 800218e:	8402      	strh	r2, [r0, #32]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8002190:	2228      	movs	r2, #40	@ 0x28
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 8002192:	7403      	strb	r3, [r0, #16]
    pHandle->hFinalSpeed = hFinalSpeed;
 8002194:	8241      	strh	r1, [r0, #18]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8002196:	5483      	strb	r3, [r0, r2]

#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8002198:	4770      	bx	lr
 800219a:	46c0      	nop			@ (mov r8, r8)

0800219c <MCI_ExecTorqueRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 800219c:	2302      	movs	r3, #2
 800219e:	7403      	strb	r3, [r0, #16]
    pHandle->hFinalTorque = hFinalTorque;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80021a0:	4b02      	ldr	r3, [pc, #8]	@ (80021ac <MCI_ExecTorqueRamp+0x10>)
    pHandle->hFinalTorque = hFinalTorque;
 80021a2:	8281      	strh	r1, [r0, #20]
    pHandle->hDurationms = hDurationms;
 80021a4:	8402      	strh	r2, [r0, #32]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80021a6:	8503      	strh	r3, [r0, #40]	@ 0x28
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 80021a8:	4770      	bx	lr
 80021aa:	46c0      	nop			@ (mov r8, r8)
 80021ac:	00000401 	.word	0x00000401

080021b0 <MCI_SetSpeedMode>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFOCVars->bDriveInput = INTERNAL;
 80021b0:	2324      	movs	r3, #36	@ 0x24
 80021b2:	2100      	movs	r1, #0
 80021b4:	6842      	ldr	r2, [r0, #4]
{
 80021b6:	b510      	push	{r4, lr}
    pHandle->pFOCVars->bDriveInput = INTERNAL;
 80021b8:	54d1      	strb	r1, [r2, r3]
{
 80021ba:	0004      	movs	r4, r0
    STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 80021bc:	6800      	ldr	r0, [r0, #0]
 80021be:	3103      	adds	r1, #3
 80021c0:	f003 fc00 	bl	80059c4 <STC_SetControlMode>
    pHandle->LastModalitySetByUser = MCM_SPEED_MODE;
 80021c4:	2329      	movs	r3, #41	@ 0x29
 80021c6:	2203      	movs	r2, #3
 80021c8:	54e2      	strb	r2, [r4, r3]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 80021ca:	bd10      	pop	{r4, pc}

080021cc <MCI_SetOpenLoopCurrentMode>:
  * @note This function is only available when the Open loop Debug feature is
  * enabled at firmware generation time.
  */
__weak void MCI_SetOpenLoopCurrentMode(MCI_Handle_t *pHandle)
{
  pHandle->pFOCVars->bDriveInput = EXTERNAL;
 80021cc:	2324      	movs	r3, #36	@ 0x24
 80021ce:	2101      	movs	r1, #1
 80021d0:	6842      	ldr	r2, [r0, #4]
{
 80021d2:	b510      	push	{r4, lr}
  pHandle->pFOCVars->bDriveInput = EXTERNAL;
 80021d4:	54d1      	strb	r1, [r2, r3]
{
 80021d6:	0004      	movs	r4, r0
  STC_SetControlMode(pHandle->pSTC, MCM_OPEN_LOOP_CURRENT_MODE);
 80021d8:	6800      	ldr	r0, [r0, #0]
 80021da:	3101      	adds	r1, #1
 80021dc:	f003 fbf2 	bl	80059c4 <STC_SetControlMode>
  pHandle->LastModalitySetByUser = MCM_OPEN_LOOP_CURRENT_MODE;
 80021e0:	2329      	movs	r3, #41	@ 0x29
 80021e2:	2202      	movs	r2, #2
 80021e4:	54e2      	strb	r2, [r4, r3]
}
 80021e6:	bd10      	pop	{r4, pc}

080021e8 <MCI_SetOpenLoopVoltageMode>:
  *
  * @note This function is only available when the Open loop Debug feature is
  * enabled at firmware generation time.
  */
__weak void MCI_SetOpenLoopVoltageMode(MCI_Handle_t *pHandle)
{
 80021e8:	b570      	push	{r4, r5, r6, lr}
  pHandle->pFOCVars->bDriveInput = EXTERNAL;
 80021ea:	2324      	movs	r3, #36	@ 0x24
 80021ec:	2501      	movs	r5, #1
 80021ee:	6842      	ldr	r2, [r0, #4]
{
 80021f0:	0004      	movs	r4, r0
  pHandle->pFOCVars->bDriveInput = EXTERNAL;
 80021f2:	54d5      	strb	r5, [r2, r3]
  STC_SetControlMode(pHandle->pSTC, MCM_OPEN_LOOP_VOLTAGE_MODE);
 80021f4:	2101      	movs	r1, #1
 80021f6:	6800      	ldr	r0, [r0, #0]
 80021f8:	f003 fbe4 	bl	80059c4 <STC_SetControlMode>
  pHandle->LastModalitySetByUser = MCM_OPEN_LOOP_VOLTAGE_MODE;
 80021fc:	2329      	movs	r3, #41	@ 0x29
 80021fe:	54e5      	strb	r5, [r4, r3]
}
 8002200:	bd70      	pop	{r4, r5, r6, pc}
 8002202:	46c0      	nop			@ (mov r8, r8)

08002204 <MCI_FaultProcessing>:
  }
  else
  {
#endif
    /* Set current errors */
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8002204:	8c83      	ldrh	r3, [r0, #36]	@ 0x24
 8002206:	430b      	orrs	r3, r1
 8002208:	4393      	bics	r3, r2
 800220a:	8483      	strh	r3, [r0, #36]	@ 0x24
    pHandle->PastFaults |= hSetErrors;
 800220c:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 800220e:	4319      	orrs	r1, r3
 8002210:	84c1      	strh	r1, [r0, #38]	@ 0x26
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8002212:	4770      	bx	lr

08002214 <MCI_ExecBufferedCommands>:
    /* Nothing to do */
  }
  else
  {
#endif
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8002214:	2328      	movs	r3, #40	@ 0x28
{
 8002216:	b510      	push	{r4, lr}
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8002218:	5cc3      	ldrb	r3, [r0, r3]
{
 800221a:	0004      	movs	r4, r0
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 800221c:	2b01      	cmp	r3, #1
 800221e:	d000      	beq.n	8002222 <MCI_ExecBufferedCommands+0xe>
      }
    }
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8002220:	bd10      	pop	{r4, pc}
      switch (pHandle->lastCommand)
 8002222:	7c03      	ldrb	r3, [r0, #16]
 8002224:	2b05      	cmp	r3, #5
 8002226:	d82c      	bhi.n	8002282 <MCI_ExecBufferedCommands+0x6e>
 8002228:	4a22      	ldr	r2, [pc, #136]	@ (80022b4 <MCI_ExecBufferedCommands+0xa0>)
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	58d3      	ldr	r3, [r2, r3]
 800222e:	469f      	mov	pc, r3
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8002230:	2324      	movs	r3, #36	@ 0x24
 8002232:	2101      	movs	r1, #1
 8002234:	6842      	ldr	r2, [r0, #4]
 8002236:	54d1      	strb	r1, [r2, r3]
          VSS_SetMecAcceleration( pHandle->pVSS, pHandle->hFinalSpeed, pHandle->hDurationms);
 8002238:	8c02      	ldrh	r2, [r0, #32]
 800223a:	2312      	movs	r3, #18
 800223c:	5ec1      	ldrsh	r1, [r0, r3]
 800223e:	68c0      	ldr	r0, [r0, #12]
 8002240:	f003 fcf4 	bl	8005c2c <VSS_SetMecAcceleration>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESSFULLY;
 8002244:	2328      	movs	r3, #40	@ 0x28
 8002246:	2202      	movs	r2, #2
 8002248:	54e2      	strb	r2, [r4, r3]
 800224a:	e7e9      	b.n	8002220 <MCI_ExecBufferedCommands+0xc>
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 800224c:	2324      	movs	r3, #36	@ 0x24
 800224e:	2201      	movs	r2, #1
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8002250:	0021      	movs	r1, r4
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8002252:	6840      	ldr	r0, [r0, #4]
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8002254:	3116      	adds	r1, #22
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8002256:	54c2      	strb	r2, [r0, r3]
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8002258:	3203      	adds	r2, #3
 800225a:	3010      	adds	r0, #16
 800225c:	f003 fd5a 	bl	8005d14 <memcpy>
      if (commandHasBeenExecuted)
 8002260:	e7f0      	b.n	8002244 <MCI_ExecBufferedCommands+0x30>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8002262:	2324      	movs	r3, #36	@ 0x24
 8002264:	2100      	movs	r1, #0
 8002266:	6842      	ldr	r2, [r0, #4]
 8002268:	54d1      	strb	r1, [r2, r3]
          STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 800226a:	6800      	ldr	r0, [r0, #0]
 800226c:	3104      	adds	r1, #4
 800226e:	f003 fba9 	bl	80059c4 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms);
 8002272:	8c22      	ldrh	r2, [r4, #32]
 8002274:	2314      	movs	r3, #20
 8002276:	5ee1      	ldrsh	r1, [r4, r3]
 8002278:	6820      	ldr	r0, [r4, #0]
 800227a:	f003 fba7 	bl	80059cc <STC_ExecRamp>
      if (commandHasBeenExecuted)
 800227e:	2800      	cmp	r0, #0
 8002280:	d1e0      	bne.n	8002244 <MCI_ExecBufferedCommands+0x30>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESSFULLY;
 8002282:	2328      	movs	r3, #40	@ 0x28
 8002284:	2203      	movs	r2, #3
 8002286:	54e2      	strb	r2, [r4, r3]
}
 8002288:	e7ca      	b.n	8002220 <MCI_ExecBufferedCommands+0xc>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 800228a:	2324      	movs	r3, #36	@ 0x24
 800228c:	2100      	movs	r1, #0
 800228e:	6842      	ldr	r2, [r0, #4]
 8002290:	54d1      	strb	r1, [r2, r3]
          STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 8002292:	6800      	ldr	r0, [r0, #0]
 8002294:	3103      	adds	r1, #3
 8002296:	f003 fb95 	bl	80059c4 <STC_SetControlMode>
          VSS_SetMecAcceleration( pHandle->pVSS, pHandle->hFinalSpeed, pHandle->hDurationms);
 800229a:	8c22      	ldrh	r2, [r4, #32]
 800229c:	2312      	movs	r3, #18
 800229e:	5ee1      	ldrsh	r1, [r4, r3]
 80022a0:	68e0      	ldr	r0, [r4, #12]
 80022a2:	f003 fcc3 	bl	8005c2c <VSS_SetMecAcceleration>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms);
 80022a6:	8c22      	ldrh	r2, [r4, #32]
 80022a8:	2312      	movs	r3, #18
 80022aa:	5ee1      	ldrsh	r1, [r4, r3]
 80022ac:	6820      	ldr	r0, [r4, #0]
 80022ae:	f003 fb8d 	bl	80059cc <STC_ExecRamp>
          break;
 80022b2:	e7e4      	b.n	800227e <MCI_ExecBufferedCommands+0x6a>
 80022b4:	08005ed0 	.word	0x08005ed0

080022b8 <MCI_GetSTMState>:
__weak MCI_State_t MCI_GetSTMState(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? FAULT_NOW : pHandle->State);
#else
  return (pHandle->State);
 80022b8:	2323      	movs	r3, #35	@ 0x23
 80022ba:	5cc0      	ldrb	r0, [r0, r3]
#endif
}
 80022bc:	4770      	bx	lr
 80022be:	46c0      	nop			@ (mov r8, r8)

080022c0 <MCI_GetOccurredFaults>:
__weak uint16_t MCI_GetOccurredFaults(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->PastFaults);
#else
  return ((uint16_t)pHandle->PastFaults);
 80022c0:	8cc0      	ldrh	r0, [r0, #38]	@ 0x26
#endif
}
 80022c2:	4770      	bx	lr

080022c4 <MCI_GetCurrentFaults>:
__weak uint16_t MCI_GetCurrentFaults(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->CurrentFaults);
#else
  return ((uint16_t)pHandle->CurrentFaults);
 80022c4:	8c80      	ldrh	r0, [r0, #36]	@ 0x24
#endif
}
 80022c6:	4770      	bx	lr

080022c8 <MCI_StartMotor>:
{
 80022c8:	b510      	push	{r4, lr}
 80022ca:	0004      	movs	r4, r0
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 80022cc:	f7ff fff4 	bl	80022b8 <MCI_GetSTMState>
 80022d0:	2800      	cmp	r0, #0
 80022d2:	d001      	beq.n	80022d8 <MCI_StartMotor+0x10>
  bool retVal = false;
 80022d4:	2000      	movs	r0, #0
}
 80022d6:	bd10      	pop	{r4, pc}
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80022d8:	0020      	movs	r0, r4
 80022da:	f7ff fff1 	bl	80022c0 <MCI_GetOccurredFaults>
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 80022de:	2800      	cmp	r0, #0
 80022e0:	d1f8      	bne.n	80022d4 <MCI_StartMotor+0xc>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 80022e2:	0020      	movs	r0, r4
 80022e4:	f7ff ffee 	bl	80022c4 <MCI_GetCurrentFaults>
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80022e8:	2800      	cmp	r0, #0
 80022ea:	d1f3      	bne.n	80022d4 <MCI_StartMotor+0xc>
      pHandle->DirectCommand = MCI_START;
 80022ec:	2301      	movs	r3, #1
 80022ee:	2222      	movs	r2, #34	@ 0x22
 80022f0:	54a3      	strb	r3, [r4, r2]
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80022f2:	3206      	adds	r2, #6
 80022f4:	54a3      	strb	r3, [r4, r2]
      retVal = true;
 80022f6:	3001      	adds	r0, #1
 80022f8:	e7ed      	b.n	80022d6 <MCI_StartMotor+0xe>
 80022fa:	46c0      	nop			@ (mov r8, r8)

080022fc <MCI_StopMotor>:
{
 80022fc:	b570      	push	{r4, r5, r6, lr}
 80022fe:	0004      	movs	r4, r0
    State = MCI_GetSTMState(pHandle);
 8002300:	f7ff ffda 	bl	80022b8 <MCI_GetSTMState>
      status = false;
 8002304:	2500      	movs	r5, #0
    if ((IDLE == State) || (ICLWAIT == State))
 8002306:	2800      	cmp	r0, #0
 8002308:	d004      	beq.n	8002314 <MCI_StopMotor+0x18>
 800230a:	0003      	movs	r3, r0
 800230c:	3b0c      	subs	r3, #12
 800230e:	1e5a      	subs	r2, r3, #1
 8002310:	4193      	sbcs	r3, r2
 8002312:	b2dd      	uxtb	r5, r3
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8002314:	0020      	movs	r0, r4
 8002316:	f7ff ffd3 	bl	80022c0 <MCI_GetOccurredFaults>
 800231a:	2800      	cmp	r0, #0
 800231c:	d002      	beq.n	8002324 <MCI_StopMotor+0x28>
  bool retVal = false;
 800231e:	2500      	movs	r5, #0
}
 8002320:	0028      	movs	r0, r5
 8002322:	bd70      	pop	{r4, r5, r6, pc}
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 8002324:	0020      	movs	r0, r4
 8002326:	f7ff ffcd 	bl	80022c4 <MCI_GetCurrentFaults>
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 800232a:	2800      	cmp	r0, #0
 800232c:	d1f7      	bne.n	800231e <MCI_StopMotor+0x22>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 800232e:	2d00      	cmp	r5, #0
 8002330:	d0f5      	beq.n	800231e <MCI_StopMotor+0x22>
      pHandle->DirectCommand = MCI_STOP;
 8002332:	2322      	movs	r3, #34	@ 0x22
 8002334:	2205      	movs	r2, #5
 8002336:	54e2      	strb	r2, [r4, r3]
      retVal = true;
 8002338:	e7f2      	b.n	8002320 <MCI_StopMotor+0x24>
 800233a:	46c0      	nop			@ (mov r8, r8)

0800233c <MCI_FaultAcknowledged>:
{
 800233c:	b510      	push	{r4, lr}
 800233e:	0004      	movs	r4, r0
    if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8002340:	f7ff ffba 	bl	80022b8 <MCI_GetSTMState>
 8002344:	280b      	cmp	r0, #11
 8002346:	d001      	beq.n	800234c <MCI_FaultAcknowledged+0x10>
  bool reVal = false;
 8002348:	2000      	movs	r0, #0
}
 800234a:	bd10      	pop	{r4, pc}
    if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 800234c:	0020      	movs	r0, r4
 800234e:	f7ff ffb9 	bl	80022c4 <MCI_GetCurrentFaults>
 8002352:	2800      	cmp	r0, #0
 8002354:	d1f8      	bne.n	8002348 <MCI_FaultAcknowledged+0xc>
      pHandle->DirectCommand = MCI_ACK_FAULTS;
 8002356:	2322      	movs	r3, #34	@ 0x22
 8002358:	2202      	movs	r2, #2
      pHandle->PastFaults = MC_NO_FAULTS;
 800235a:	84e0      	strh	r0, [r4, #38]	@ 0x26
      pHandle->DirectCommand = MCI_ACK_FAULTS;
 800235c:	54e2      	strb	r2, [r4, r3]
      reVal = true;
 800235e:	3001      	adds	r0, #1
 8002360:	e7f3      	b.n	800234a <MCI_FaultAcknowledged+0xe>
 8002362:	46c0      	nop			@ (mov r8, r8)

08002364 <MCI_GetFaultState>:
    LocalFaultState = MC_SW_ERROR | (MC_SW_ERROR << 16);
  }
  else
  {
#endif
    LocalFaultState = (uint32_t)(pHandle->PastFaults);
 8002364:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
    LocalFaultState |= (uint32_t)(pHandle->CurrentFaults) << 16;
 8002366:	8c80      	ldrh	r0, [r0, #36]	@ 0x24
 8002368:	0400      	lsls	r0, r0, #16
 800236a:	4318      	orrs	r0, r3
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (LocalFaultState);
}
 800236c:	4770      	bx	lr
 800236e:	46c0      	nop			@ (mov r8, r8)

08002370 <MCI_GetControlMode>:
__weak MC_ControlMode_t MCI_GetControlMode(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MCM_TORQUE_MODE : pHandle->LastModalitySetByUser);
#else
  return (pHandle->LastModalitySetByUser);
 8002370:	2329      	movs	r3, #41	@ 0x29
 8002372:	5cc0      	ldrb	r0, [r0, r3]
#endif
}
 8002374:	4770      	bx	lr
 8002376:	46c0      	nop			@ (mov r8, r8)

08002378 <MCI_GetLastRampFinalSpeed>:
  {
    retVal = pHandle->hFinalSpeed;
  }
  return (retVal);
#else
  return (pHandle->hFinalSpeed);
 8002378:	2312      	movs	r3, #18
 800237a:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 800237c:	4770      	bx	lr
 800237e:	46c0      	nop			@ (mov r8, r8)

08002380 <MCI_GetLastRampFinalDuration>:
  {
    retVal = pHandle->hDurationms;
  }
  return (retVal);
#else
  return (pHandle->hDurationms);
 8002380:	8c00      	ldrh	r0, [r0, #32]
#endif
}
 8002382:	4770      	bx	lr

08002384 <MCI_StopRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->RampRemainingStep = 0U;
 8002384:	2200      	movs	r2, #0
    /* Nothing to do */
  }
  else
  {
#endif
    STC_StopRamp(pHandle->pSTC);
 8002386:	6803      	ldr	r3, [r0, #0]
 8002388:	60da      	str	r2, [r3, #12]
    pHandle->IncDecAmount = 0;
 800238a:	619a      	str	r2, [r3, #24]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 800238c:	4770      	bx	lr
 800238e:	46c0      	nop			@ (mov r8, r8)

08002390 <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit(MCI_Handle_t *pHandle)
{
 8002390:	b510      	push	{r4, lr}
static inline SpeednPosFdbk_Handle_t *STC_GetSpeedSensor(SpeednTorqCtrl_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  return ((MC_NULL ==  pHandle) ? MC_NULL : pHandle->SPD);
#else
  return (pHandle->SPD);
 8002392:	6803      	ldr	r3, [r0, #0]
  }
  else
  {
#endif
    SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor(pHandle->pSTC);
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
 8002394:	6958      	ldr	r0, [r3, #20]
 8002396:	f003 fac3 	bl	8005920 <SPD_GetAvrgMecSpeedUnit>
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (temp_speed);
}
 800239a:	bd10      	pop	{r4, pc}

0800239c <MCI_GetMecSpeedRefUnit>:
  *
  * @param  pHandle Pointer on the component instance to work on.
  *
  */
__weak int16_t MCI_GetMecSpeedRefUnit(MCI_Handle_t *pHandle)
{
 800239c:	b510      	push	{r4, lr}
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? 0 : STC_GetMecSpeedRefUnit(pHandle->pSTC));
#else
  return (STC_GetMecSpeedRefUnit(pHandle->pSTC));
 800239e:	6800      	ldr	r0, [r0, #0]
 80023a0:	f003 fb0c 	bl	80059bc <STC_GetMecSpeedRefUnit>
#endif
}
 80023a4:	bd10      	pop	{r4, pc}
 80023a6:	46c0      	nop			@ (mov r8, r8)

080023a8 <MCI_GetVqd>:
  * @brief  It returns stator current Vqd in qd_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Vqd
  */
__weak qd_t MCI_GetVqd(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
 80023a8:	b500      	push	{lr}
  {
    tempVal = pHandle->pFOCVars->Vqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Vqd);
 80023aa:	6841      	ldr	r1, [r0, #4]
{
 80023ac:	b083      	sub	sp, #12
  return (pHandle->pFOCVars->Vqd);
 80023ae:	2204      	movs	r2, #4
 80023b0:	3116      	adds	r1, #22
 80023b2:	a801      	add	r0, sp, #4
 80023b4:	f003 fcae 	bl	8005d14 <memcpy>
 80023b8:	466b      	mov	r3, sp
 80023ba:	466a      	mov	r2, sp
 80023bc:	88db      	ldrh	r3, [r3, #6]
 80023be:	8890      	ldrh	r0, [r2, #4]
 80023c0:	041b      	lsls	r3, r3, #16
 80023c2:	4318      	orrs	r0, r3
#endif
}
 80023c4:	b003      	add	sp, #12
 80023c6:	bd00      	pop	{pc}

080023c8 <MCI_GetValphabeta>:
  * @brief  It returns stator current Valphabeta in alphabeta_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Valphabeta
  */
__weak alphabeta_t MCI_GetValphabeta(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
 80023c8:	b500      	push	{lr}
  {
    tempVal = pHandle->pFOCVars->Valphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Valphabeta);
 80023ca:	6841      	ldr	r1, [r0, #4]
{
 80023cc:	b083      	sub	sp, #12
  return (pHandle->pFOCVars->Valphabeta);
 80023ce:	2204      	movs	r2, #4
 80023d0:	311a      	adds	r1, #26
 80023d2:	a801      	add	r0, sp, #4
 80023d4:	f003 fc9e 	bl	8005d14 <memcpy>
 80023d8:	466b      	mov	r3, sp
 80023da:	466a      	mov	r2, sp
 80023dc:	88db      	ldrh	r3, [r3, #6]
 80023de:	8890      	ldrh	r0, [r2, #4]
 80023e0:	041b      	lsls	r3, r3, #16
 80023e2:	4318      	orrs	r0, r3
#endif
}
 80023e4:	b003      	add	sp, #12
 80023e6:	bd00      	pop	{pc}

080023e8 <MCI_GetTeref>:
__weak int16_t MCI_GetTeref(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? 0 : pHandle->pFOCVars->hTeref);
#else
  return (pHandle->pFOCVars->hTeref);
 80023e8:	6843      	ldr	r3, [r0, #4]
 80023ea:	201e      	movs	r0, #30
 80023ec:	5e18      	ldrsh	r0, [r3, r0]
#endif
}
 80023ee:	4770      	bx	lr

080023f0 <MCI_Clear_Iqdref>:
/**
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_Clear_Iqdref(MCI_Handle_t *pHandle)
{
 80023f0:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref(pHandle->pSTC);
 80023f2:	c811      	ldmia	r0, {r0, r4}
 80023f4:	f003 fb68 	bl	8005ac8 <STC_GetDefaultIqdref>
 80023f8:	8220      	strh	r0, [r4, #16]
 80023fa:	0c00      	lsrs	r0, r0, #16
 80023fc:	8260      	strh	r0, [r4, #18]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 80023fe:	bd10      	pop	{r4, pc}

08002400 <MCM_Clarke>:
  *                       beta = -(2*b+a)/sqrt(3)
  * @param  Input: stator values a and b in ab_t format.
  * @retval Stator values alpha and beta in alphabeta_t format.
  */
__weak alphabeta_t MCM_Clarke(ab_t Input)
{
 8002400:	b201      	sxth	r1, r0
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 8002402:	014a      	lsls	r2, r1, #5
 8002404:	1852      	adds	r2, r2, r1
 8002406:	00d2      	lsls	r2, r2, #3
 8002408:	1a52      	subs	r2, r2, r1
  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 800240a:	1403      	asrs	r3, r0, #16
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 800240c:	0092      	lsls	r2, r2, #2
  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 800240e:	4812      	ldr	r0, [pc, #72]	@ (8002458 <MCM_Clarke+0x58>)
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 8002410:	1a52      	subs	r2, r2, r1
  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 8002412:	4358      	muls	r0, r3
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 8002414:	00d3      	lsls	r3, r2, #3
 8002416:	18d3      	adds	r3, r2, r3
#else
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) / 32768;
#endif

  /* Check saturation of Ibeta */
  if (wbeta_tmp > INT16_MAX)
 8002418:	2280      	movs	r2, #128	@ 0x80
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	425b      	negs	r3, r3
 800241e:	1a1b      	subs	r3, r3, r0
 8002420:	1a1b      	subs	r3, r3, r0
{
 8002422:	b084      	sub	sp, #16
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 8002424:	13db      	asrs	r3, r3, #15
  if (wbeta_tmp > INT16_MAX)
 8002426:	0212      	lsls	r2, r2, #8
 8002428:	4293      	cmp	r3, r2
 800242a:	da04      	bge.n	8002436 <MCM_Clarke+0x36>
  {
    hbeta_tmp = INT16_MAX;
  }
  else if (wbeta_tmp < (-32768))
 800242c:	4a0b      	ldr	r2, [pc, #44]	@ (800245c <MCM_Clarke+0x5c>)
 800242e:	4293      	cmp	r3, r2
 8002430:	da08      	bge.n	8002444 <MCM_Clarke+0x44>
 8002432:	4b0b      	ldr	r3, [pc, #44]	@ (8002460 <MCM_Clarke+0x60>)
 8002434:	e000      	b.n	8002438 <MCM_Clarke+0x38>
 8002436:	4b0b      	ldr	r3, [pc, #44]	@ (8002464 <MCM_Clarke+0x64>)
  else
  {
    /* Nothing to do */
  }

  return (Output);
 8002438:	0408      	lsls	r0, r1, #16
 800243a:	041b      	lsls	r3, r3, #16
 800243c:	0c00      	lsrs	r0, r0, #16
 800243e:	4318      	orrs	r0, r3
}
 8002440:	b004      	add	sp, #16
 8002442:	4770      	bx	lr
    hbeta_tmp = ((int16_t)wbeta_tmp);
 8002444:	4806      	ldr	r0, [pc, #24]	@ (8002460 <MCM_Clarke+0x60>)
 8002446:	1c1a      	adds	r2, r3, #0
 8002448:	b21b      	sxth	r3, r3
 800244a:	4283      	cmp	r3, r0
 800244c:	db01      	blt.n	8002452 <MCM_Clarke+0x52>
 800244e:	b213      	sxth	r3, r2
 8002450:	e7f2      	b.n	8002438 <MCM_Clarke+0x38>
 8002452:	1c02      	adds	r2, r0, #0
 8002454:	b213      	sxth	r3, r2
 8002456:	e7ef      	b.n	8002438 <MCM_Clarke+0x38>
 8002458:	000049e6 	.word	0x000049e6
 800245c:	ffff8000 	.word	0xffff8000
 8002460:	ffff8001 	.word	0xffff8001
 8002464:	00007fff 	.word	0x00007fff

08002468 <MCM_Trig_Functions>:
  uint16_t uhindex;

  Trig_Components Local_Components;

  /* 10 bit index computation  */
  shindex = (((int32_t)32768) + ((int32_t)hAngle));
 8002468:	2380      	movs	r3, #128	@ 0x80
 800246a:	021b      	lsls	r3, r3, #8
 800246c:	18c3      	adds	r3, r0, r3
  uhindex = (uint16_t)shindex;
 800246e:	b29b      	uxth	r3, r3
{
 8002470:	b530      	push	{r4, r5, lr}
  uhindex /= ((uint16_t)64);
 8002472:	099b      	lsrs	r3, r3, #6

  switch (((uint16_t)uhindex) & SIN_MASK)
 8002474:	25c0      	movs	r5, #192	@ 0xc0
 8002476:	0018      	movs	r0, r3
 8002478:	2480      	movs	r4, #128	@ 0x80
 800247a:	00ad      	lsls	r5, r5, #2
{
 800247c:	2200      	movs	r2, #0
 800247e:	2100      	movs	r1, #0
 8002480:	b083      	sub	sp, #12
 8002482:	4028      	ands	r0, r5
  switch (((uint16_t)uhindex) & SIN_MASK)
 8002484:	00a4      	lsls	r4, r4, #2
 8002486:	42a0      	cmp	r0, r4
 8002488:	d01f      	beq.n	80024ca <MCM_Trig_Functions+0x62>
 800248a:	d811      	bhi.n	80024b0 <MCM_Trig_Functions+0x48>
 800248c:	2800      	cmp	r0, #0
 800248e:	d025      	beq.n	80024dc <MCM_Trig_Functions+0x74>
      break;
    }

    case U270_360:
    {
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8002490:	b2db      	uxtb	r3, r3
 8002492:	43da      	mvns	r2, r3
 8002494:	4918      	ldr	r1, [pc, #96]	@ (80024f8 <MCM_Trig_Functions+0x90>)
 8002496:	b2d2      	uxtb	r2, r2
 8002498:	0052      	lsls	r2, r2, #1
 800249a:	5a52      	ldrh	r2, [r2, r1]
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 800249c:	005b      	lsls	r3, r3, #1
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800249e:	4252      	negs	r2, r2
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 80024a0:	5e59      	ldrsh	r1, [r3, r1]
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80024a2:	b212      	sxth	r2, r2
    }

    default:
      break;
  }
  return (Local_Components);
 80024a4:	0408      	lsls	r0, r1, #16
 80024a6:	0412      	lsls	r2, r2, #16
 80024a8:	0c00      	lsrs	r0, r0, #16
 80024aa:	4310      	orrs	r0, r2
}
 80024ac:	b003      	add	sp, #12
 80024ae:	bd30      	pop	{r4, r5, pc}
  switch (((uint16_t)uhindex) & SIN_MASK)
 80024b0:	42a8      	cmp	r0, r5
 80024b2:	d1f7      	bne.n	80024a4 <MCM_Trig_Functions+0x3c>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	43da      	mvns	r2, r3
 80024b8:	490f      	ldr	r1, [pc, #60]	@ (80024f8 <MCM_Trig_Functions+0x90>)
 80024ba:	b2d2      	uxtb	r2, r2
 80024bc:	0052      	lsls	r2, r2, #1
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80024be:	005b      	lsls	r3, r3, #1
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80024c0:	5e52      	ldrsh	r2, [r2, r1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80024c2:	5a59      	ldrh	r1, [r3, r1]
 80024c4:	4249      	negs	r1, r1
 80024c6:	b209      	sxth	r1, r1
      break;
 80024c8:	e7ec      	b.n	80024a4 <MCM_Trig_Functions+0x3c>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	005a      	lsls	r2, r3, #1
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80024ce:	43db      	mvns	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 80024d0:	4909      	ldr	r1, [pc, #36]	@ (80024f8 <MCM_Trig_Functions+0x90>)
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	005b      	lsls	r3, r3, #1
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 80024d6:	5e52      	ldrsh	r2, [r2, r1]
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80024d8:	5e59      	ldrsh	r1, [r3, r1]
      break;
 80024da:	e7e3      	b.n	80024a4 <MCM_Trig_Functions+0x3c>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	005a      	lsls	r2, r3, #1
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80024e0:	43db      	mvns	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80024e2:	4905      	ldr	r1, [pc, #20]	@ (80024f8 <MCM_Trig_Functions+0x90>)
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	005b      	lsls	r3, r3, #1
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80024e8:	5a52      	ldrh	r2, [r2, r1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80024ea:	5a59      	ldrh	r1, [r3, r1]
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80024ec:	4252      	negs	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80024ee:	4249      	negs	r1, r1
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80024f0:	b212      	sxth	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80024f2:	b209      	sxth	r1, r1
      break;
 80024f4:	e7d6      	b.n	80024a4 <MCM_Trig_Functions+0x3c>
 80024f6:	46c0      	nop			@ (mov r8, r8)
 80024f8:	08005ee8 	.word	0x08005ee8

080024fc <MCM_Park>:
{
 80024fc:	b570      	push	{r4, r5, r6, lr}
 80024fe:	b205      	sxth	r5, r0
 8002500:	1404      	asrs	r4, r0, #16
 8002502:	b084      	sub	sp, #16
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8002504:	0008      	movs	r0, r1
 8002506:	f7ff ffaf 	bl	8002468 <MCM_Trig_Functions>
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 800250a:	b201      	sxth	r1, r0
  q_tmp_2 = Input.beta * ((int32_t)Local_Vector_Components.hSin);
 800250c:	1403      	asrs	r3, r0, #16
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 800250e:	000a      	movs	r2, r1
  q_tmp_2 = Input.beta * ((int32_t)Local_Vector_Components.hSin);
 8002510:	0018      	movs	r0, r3
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 8002512:	436a      	muls	r2, r5
  q_tmp_2 = Input.beta * ((int32_t)Local_Vector_Components.hSin);
 8002514:	4360      	muls	r0, r4
  wqd_tmp = (q_tmp_1 - q_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8002516:	1a12      	subs	r2, r2, r0
  if (wqd_tmp > INT16_MAX)
 8002518:	2080      	movs	r0, #128	@ 0x80
  wqd_tmp = (q_tmp_1 - q_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800251a:	13d2      	asrs	r2, r2, #15
  if (wqd_tmp > INT16_MAX)
 800251c:	0200      	lsls	r0, r0, #8
 800251e:	4282      	cmp	r2, r0
 8002520:	da12      	bge.n	8002548 <MCM_Park+0x4c>
  else if (wqd_tmp < (-32768))
 8002522:	481a      	ldr	r0, [pc, #104]	@ (800258c <MCM_Park+0x90>)
 8002524:	4282      	cmp	r2, r0
 8002526:	da24      	bge.n	8002572 <MCM_Park+0x76>
  if (wqd_tmp > INT16_MAX)
 8002528:	2280      	movs	r2, #128	@ 0x80
  d_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hSin);
 800252a:	436b      	muls	r3, r5
  d_tmp_2 = Input.beta * ((int32_t )Local_Vector_Components.hCos);
 800252c:	4361      	muls	r1, r4
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800252e:	185b      	adds	r3, r3, r1
 8002530:	4817      	ldr	r0, [pc, #92]	@ (8002590 <MCM_Park+0x94>)
 8002532:	13db      	asrs	r3, r3, #15
  if (wqd_tmp > INT16_MAX)
 8002534:	0212      	lsls	r2, r2, #8
 8002536:	4293      	cmp	r3, r2
 8002538:	db0f      	blt.n	800255a <MCM_Park+0x5e>
 800253a:	4b16      	ldr	r3, [pc, #88]	@ (8002594 <MCM_Park+0x98>)
  return (Output);
 800253c:	0400      	lsls	r0, r0, #16
 800253e:	041b      	lsls	r3, r3, #16
 8002540:	0c00      	lsrs	r0, r0, #16
 8002542:	4318      	orrs	r0, r3
}
 8002544:	b004      	add	sp, #16
 8002546:	bd70      	pop	{r4, r5, r6, pc}
 8002548:	4812      	ldr	r0, [pc, #72]	@ (8002594 <MCM_Park+0x98>)
  if (wqd_tmp > INT16_MAX)
 800254a:	2280      	movs	r2, #128	@ 0x80
  d_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hSin);
 800254c:	436b      	muls	r3, r5
  d_tmp_2 = Input.beta * ((int32_t )Local_Vector_Components.hCos);
 800254e:	4361      	muls	r1, r4
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8002550:	185b      	adds	r3, r3, r1
 8002552:	13db      	asrs	r3, r3, #15
  if (wqd_tmp > INT16_MAX)
 8002554:	0212      	lsls	r2, r2, #8
 8002556:	4293      	cmp	r3, r2
 8002558:	daef      	bge.n	800253a <MCM_Park+0x3e>
  else if (wqd_tmp < (-32768))
 800255a:	4a0c      	ldr	r2, [pc, #48]	@ (800258c <MCM_Park+0x90>)
 800255c:	4293      	cmp	r3, r2
 800255e:	da01      	bge.n	8002564 <MCM_Park+0x68>
 8002560:	4b0b      	ldr	r3, [pc, #44]	@ (8002590 <MCM_Park+0x94>)
 8002562:	e7eb      	b.n	800253c <MCM_Park+0x40>
    hqd_tmp = ((int16_t)wqd_tmp);
 8002564:	490a      	ldr	r1, [pc, #40]	@ (8002590 <MCM_Park+0x94>)
 8002566:	1c1a      	adds	r2, r3, #0
 8002568:	b21b      	sxth	r3, r3
 800256a:	428b      	cmp	r3, r1
 800256c:	db0b      	blt.n	8002586 <MCM_Park+0x8a>
 800256e:	b213      	sxth	r3, r2
 8002570:	e7e4      	b.n	800253c <MCM_Park+0x40>
    hqd_tmp = ((int16_t)wqd_tmp);
 8002572:	4e07      	ldr	r6, [pc, #28]	@ (8002590 <MCM_Park+0x94>)
 8002574:	1c10      	adds	r0, r2, #0
 8002576:	b212      	sxth	r2, r2
 8002578:	42b2      	cmp	r2, r6
 800257a:	db01      	blt.n	8002580 <MCM_Park+0x84>
 800257c:	b200      	sxth	r0, r0
 800257e:	e7e4      	b.n	800254a <MCM_Park+0x4e>
 8002580:	1c30      	adds	r0, r6, #0
 8002582:	b200      	sxth	r0, r0
 8002584:	e7e1      	b.n	800254a <MCM_Park+0x4e>
 8002586:	1c0a      	adds	r2, r1, #0
 8002588:	b213      	sxth	r3, r2
 800258a:	e7d7      	b.n	800253c <MCM_Park+0x40>
 800258c:	ffff8000 	.word	0xffff8000
 8002590:	ffff8001 	.word	0xffff8001
 8002594:	00007fff 	.word	0x00007fff

08002598 <MCM_Rev_Park>:
{
 8002598:	b530      	push	{r4, r5, lr}
 800259a:	b205      	sxth	r5, r0
 800259c:	b085      	sub	sp, #20
 800259e:	1404      	asrs	r4, r0, #16
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 80025a0:	0008      	movs	r0, r1
 80025a2:	f7ff ff61 	bl	8002468 <MCM_Trig_Functions>
  alpha_tmp1 = Input.q * ((int32_t)Local_Vector_Components.hCos);
 80025a6:	b202      	sxth	r2, r0
  alpha_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hSin);
 80025a8:	1403      	asrs	r3, r0, #16
 80025aa:	0019      	movs	r1, r3
  alpha_tmp1 = Input.q * ((int32_t)Local_Vector_Components.hCos);
 80025ac:	0010      	movs	r0, r2
  alpha_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hSin);
 80025ae:	4361      	muls	r1, r4
  alpha_tmp1 = Input.q * ((int32_t)Local_Vector_Components.hCos);
 80025b0:	4368      	muls	r0, r5
  beta_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hCos);
 80025b2:	4354      	muls	r4, r2
  beta_tmp1 = Input.q * ((int32_t)Local_Vector_Components.hSin);
 80025b4:	436b      	muls	r3, r5
  Output.alpha = (int16_t)(((alpha_tmp1) + (alpha_tmp2)) >> 15);
 80025b6:	1840      	adds	r0, r0, r1
  Output.beta = (int16_t)((beta_tmp2 - beta_tmp1) >> 15);
 80025b8:	1ae4      	subs	r4, r4, r3
 80025ba:	13e4      	asrs	r4, r4, #15
  return (Output);
 80025bc:	0040      	lsls	r0, r0, #1
 80025be:	0424      	lsls	r4, r4, #16
 80025c0:	0c00      	lsrs	r0, r0, #16
 80025c2:	4320      	orrs	r0, r4
}
 80025c4:	b005      	add	sp, #20
 80025c6:	bd30      	pop	{r4, r5, pc}

080025c8 <MCboot>:
  * @param  pMCIList pointer to the vector of MCInterface objects that will be
  *         created and initialized. The vector must have length equal to the
  *         number of motor drives.
  */
__weak void MCboot( MCI_Handle_t* pMCIList[NBR_OF_MOTORS] )
{
 80025c8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN MCboot 0 */

  /* USER CODE END MCboot 0 */

  if (MC_NULL == pMCIList)
 80025ca:	2800      	cmp	r0, #0
 80025cc:	d016      	beq.n	80025fc <MCboot+0x34>
    /* Nothing to do */
  }
  else
  {

    bMCBootCompleted = (uint8_t )0;
 80025ce:	2300      	movs	r3, #0
 80025d0:	4c0b      	ldr	r4, [pc, #44]	@ (8002600 <MCboot+0x38>)
 80025d2:	7023      	strb	r3, [r4, #0]

    /*************************************************/
    /*    FOC initialization         */
    /*************************************************/
    pMCIList[M1] = &Mci[M1];
 80025d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002604 <MCboot+0x3c>)
 80025d6:	6003      	str	r3, [r0, #0]
    FOC_Init();
 80025d8:	f000 f98c 	bl	80028f4 <FOC_Init>

    ASPEP_start(&aspepOverUartA);
 80025dc:	480a      	ldr	r0, [pc, #40]	@ (8002608 <MCboot+0x40>)
 80025de:	f7fe f941 	bl	8000864 <ASPEP_start>
    /* USER CODE END MCboot 1 */

    /******************************************************/
    /*   PID component initialization: speed regulation   */
    /******************************************************/
    PID_HandleInit(&PIDSpeedHandle_M1);
 80025e2:	480a      	ldr	r0, [pc, #40]	@ (800260c <MCboot+0x44>)
 80025e4:	f003 f904 	bl	80057f0 <PID_HandleInit>

    /**********************************************************/
    /*   Virtual bus voltage sensor component initialization  */
    /**********************************************************/
    VVBS_Init(&BusVoltageSensor_M1);
 80025e8:	4809      	ldr	r0, [pc, #36]	@ (8002610 <MCboot+0x48>)
 80025ea:	f003 fa7d 	bl	8005ae8 <VVBS_Init>

    /*******************************************************/
    /*   Temperature measurement component initialization  */
    /*******************************************************/
    NTC_Init(&TempSensor_M1);
 80025ee:	4809      	ldr	r0, [pc, #36]	@ (8002614 <MCboot+0x4c>)
 80025f0:	f003 f8c4 	bl	800577c <NTC_Init>

    /* Applicative hook in MCBoot() */
    MC_APP_BootHook();
 80025f4:	f7ff fdc6 	bl	8002184 <MC_APP_BootHook>

    /* USER CODE BEGIN MCboot 2 */

    /* USER CODE END MCboot 2 */

    bMCBootCompleted = 1U;
 80025f8:	2301      	movs	r3, #1
 80025fa:	7023      	strb	r3, [r4, #0]
  }
}
 80025fc:	bd10      	pop	{r4, pc}
 80025fe:	46c0      	nop			@ (mov r8, r8)
 8002600:	20000424 	.word	0x20000424
 8002604:	20000000 	.word	0x20000000
 8002608:	20000354 	.word	0x20000354
 800260c:	20000290 	.word	0x20000290
 8002610:	200002cc 	.word	0x200002cc
 8002614:	200002d8 	.word	0x200002d8

08002618 <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 8002618:	4b01      	ldr	r3, [pc, #4]	@ (8002620 <TSK_SetChargeBootCapDelayM1+0x8>)
 800261a:	8018      	strh	r0, [r3, #0]
}
 800261c:	4770      	bx	lr
 800261e:	46c0      	nop			@ (mov r8, r8)
 8002620:	20000428 	.word	0x20000428

08002624 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise.
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hBootCapDelayCounterM1)
 8002624:	4b02      	ldr	r3, [pc, #8]	@ (8002630 <TSK_ChargeBootCapDelayHasElapsedM1+0xc>)
 8002626:	8818      	ldrh	r0, [r3, #0]
 8002628:	4243      	negs	r3, r0
 800262a:	4158      	adcs	r0, r3
  {
    retVal = true;
  }
  return (retVal);
 800262c:	b2c0      	uxtb	r0, r0
}
 800262e:	4770      	bx	lr
 8002630:	20000428 	.word	0x20000428

08002634 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8002634:	4b01      	ldr	r3, [pc, #4]	@ (800263c <TSK_SetStopPermanencyTimeM1+0x8>)
 8002636:	8018      	strh	r0, [r3, #0]
}
 8002638:	4770      	bx	lr
 800263a:	46c0      	nop			@ (mov r8, r8)
 800263c:	20000426 	.word	0x20000426

08002640 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise.
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hStopPermanencyCounterM1)
 8002640:	4b02      	ldr	r3, [pc, #8]	@ (800264c <TSK_StopPermanencyTimeHasElapsedM1+0xc>)
 8002642:	8818      	ldrh	r0, [r3, #0]
 8002644:	4243      	negs	r3, r0
 8002646:	4158      	adcs	r0, r3
  {
    retVal = true;
  }
  return (retVal);
 8002648:	b2c0      	uxtb	r0, r0
}
 800264a:	4770      	bx	lr
 800264c:	20000426 	.word	0x20000426

08002650 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8002650:	b510      	push	{r4, lr}
  bMotorNbr = 0;

  /* USER CODE BEGIN HighFrequencyTask 0 */

  /* USER CODE END HighFrequencyTask 0 */
  FOC_HighFrequencyTask(bMotorNbr);
 8002652:	2000      	movs	r0, #0
 8002654:	f000 fae2 	bl	8002c1c <FOC_HighFrequencyTask>

  /* USER CODE END HighFrequencyTask 1 */

  return (bMotorNbr);

}
 8002658:	2000      	movs	r0, #0
 800265a:	bd10      	pop	{r4, pc}

0800265c <TSK_SafetyTask_PWMOFF>:
  * @brief  Safety task implementation if  MC.M1_ON_OVER_VOLTAGE == TURN_OFF_PWM.
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink.
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 800265c:	b570      	push	{r4, r5, r6, lr}
  uint16_t CodeReturn = MC_NO_ERROR;
  uint8_t lbmotor = M1;
  /* Check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */

/* Due to warning array subscript 1 is above array bounds of PWMC_Handle_t *[1] [-Warray-bounds] */
   CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[lbmotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 800265e:	4e0e      	ldr	r6, [pc, #56]	@ (8002698 <TSK_SafetyTask_PWMOFF+0x3c>)
{
 8002660:	0005      	movs	r5, r0
   CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[lbmotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 8002662:	6830      	ldr	r0, [r6, #0]
 8002664:	f000 feb2 	bl	80033cc <PWMC_IsFaultOccurred>
                                                     (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */

  MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* Process faults */
 8002668:	242c      	movs	r4, #44	@ 0x2c
 800266a:	43c2      	mvns	r2, r0
 800266c:	436c      	muls	r4, r5
 800266e:	4b0b      	ldr	r3, [pc, #44]	@ (800269c <TSK_SafetyTask_PWMOFF+0x40>)
   CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[lbmotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 8002670:	0001      	movs	r1, r0
  MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* Process faults */
 8002672:	18e4      	adds	r4, r4, r3
 8002674:	0020      	movs	r0, r4
 8002676:	b292      	uxth	r2, r2
 8002678:	f7ff fdc4 	bl	8002204 <MCI_FaultProcessing>

  if (MCI_GetFaultState(&Mci[bMotor]) != (uint32_t)MC_NO_FAULTS)
 800267c:	0020      	movs	r0, r4
 800267e:	f7ff fe71 	bl	8002364 <MCI_GetFaultState>
 8002682:	2800      	cmp	r0, #0
 8002684:	d100      	bne.n	8002688 <TSK_SafetyTask_PWMOFF+0x2c>
    /* No errors */
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 8002686:	bd70      	pop	{r4, r5, r6, pc}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8002688:	00ab      	lsls	r3, r5, #2
 800268a:	5998      	ldr	r0, [r3, r6]
 800268c:	f000 fe2e 	bl	80032ec <PWMC_SwitchOffPWM>
    FOC_Clear(bMotor);
 8002690:	0028      	movs	r0, r5
 8002692:	f000 f8eb 	bl	800286c <FOC_Clear>
}
 8002696:	e7f6      	b.n	8002686 <TSK_SafetyTask_PWMOFF+0x2a>
 8002698:	20000420 	.word	0x20000420
 800269c:	20000000 	.word	0x20000000

080026a0 <TSK_SafetyTask>:
{
 80026a0:	b510      	push	{r4, lr}
  if (1U == bMCBootCompleted)
 80026a2:	4b05      	ldr	r3, [pc, #20]	@ (80026b8 <TSK_SafetyTask+0x18>)
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d000      	beq.n	80026ac <TSK_SafetyTask+0xc>
}
 80026aa:	bd10      	pop	{r4, pc}
    TSK_SafetyTask_PWMOFF(M1);
 80026ac:	2000      	movs	r0, #0
 80026ae:	f7ff ffd5 	bl	800265c <TSK_SafetyTask_PWMOFF>
    RCM_ExecUserConv();
 80026b2:	f002 fa75 	bl	8004ba0 <RCM_ExecUserConv>
}
 80026b6:	e7f8      	b.n	80026aa <TSK_SafetyTask+0xa>
 80026b8:	20000424 	.word	0x20000424

080026bc <MC_RunMotorControlTasks>:
{
 80026bc:	b570      	push	{r4, r5, r6, lr}
  if (0U == bMCBootCompleted)
 80026be:	4b20      	ldr	r3, [pc, #128]	@ (8002740 <MC_RunMotorControlTasks+0x84>)
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d018      	beq.n	80026f8 <MC_RunMotorControlTasks+0x3c>
    if(hMFTaskCounterM1 > 0u)
 80026c6:	4c1f      	ldr	r4, [pc, #124]	@ (8002744 <MC_RunMotorControlTasks+0x88>)
 80026c8:	8823      	ldrh	r3, [r4, #0]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d015      	beq.n	80026fa <MC_RunMotorControlTasks+0x3e>
      hMFTaskCounterM1--;
 80026ce:	3b01      	subs	r3, #1
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	8023      	strh	r3, [r4, #0]
    if(hBootCapDelayCounterM1 > 0U)
 80026d4:	4b1c      	ldr	r3, [pc, #112]	@ (8002748 <MC_RunMotorControlTasks+0x8c>)
 80026d6:	881a      	ldrh	r2, [r3, #0]
 80026d8:	2a00      	cmp	r2, #0
 80026da:	d003      	beq.n	80026e4 <MC_RunMotorControlTasks+0x28>
      hBootCapDelayCounterM1--;
 80026dc:	881a      	ldrh	r2, [r3, #0]
 80026de:	3a01      	subs	r2, #1
 80026e0:	b292      	uxth	r2, r2
 80026e2:	801a      	strh	r2, [r3, #0]
    if(hStopPermanencyCounterM1 > 0U)
 80026e4:	4b19      	ldr	r3, [pc, #100]	@ (800274c <MC_RunMotorControlTasks+0x90>)
 80026e6:	881a      	ldrh	r2, [r3, #0]
 80026e8:	2a00      	cmp	r2, #0
 80026ea:	d003      	beq.n	80026f4 <MC_RunMotorControlTasks+0x38>
      hStopPermanencyCounterM1--;
 80026ec:	881a      	ldrh	r2, [r3, #0]
 80026ee:	3a01      	subs	r2, #1
 80026f0:	b292      	uxth	r2, r2
 80026f2:	801a      	strh	r2, [r3, #0]
    TSK_SafetyTask();
 80026f4:	f7ff ffd4 	bl	80026a0 <TSK_SafetyTask>
}
 80026f8:	bd70      	pop	{r4, r5, r6, pc}
      TSK_MediumFrequencyTaskM1();
 80026fa:	f000 f9a1 	bl	8002a40 <TSK_MediumFrequencyTaskM1>
      MC_APP_PostMediumFrequencyHook_M1();
 80026fe:	f7ff fd43 	bl	8002188 <MC_APP_PostMediumFrequencyHook_M1>
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 8002702:	4d13      	ldr	r5, [pc, #76]	@ (8002750 <MC_RunMotorControlTasks+0x94>)
 8002704:	0029      	movs	r1, r5
 8002706:	6828      	ldr	r0, [r5, #0]
 8002708:	310c      	adds	r1, #12
 800270a:	6883      	ldr	r3, [r0, #8]
 800270c:	4798      	blx	r3
 800270e:	6068      	str	r0, [r5, #4]
      if ( 0U == MCP_Over_UartA.rxBuffer)
 8002710:	2800      	cmp	r0, #0
 8002712:	d007      	beq.n	8002724 <MC_RunMotorControlTasks+0x68>
        if (0U == MCP_Over_UartA.pTransportLayer->fGetBuffer(MCP_Over_UartA.pTransportLayer,
 8002714:	0029      	movs	r1, r5
 8002716:	6828      	ldr	r0, [r5, #0]
 8002718:	220a      	movs	r2, #10
 800271a:	6803      	ldr	r3, [r0, #0]
 800271c:	3108      	adds	r1, #8
 800271e:	4798      	blx	r3
 8002720:	2800      	cmp	r0, #0
 8002722:	d101      	bne.n	8002728 <MC_RunMotorControlTasks+0x6c>
{
 8002724:	2301      	movs	r3, #1
 8002726:	e7d4      	b.n	80026d2 <MC_RunMotorControlTasks+0x16>
          MCP_ReceivedPacket(&MCP_Over_UartA);
 8002728:	0028      	movs	r0, r5
 800272a:	f000 fbf7 	bl	8002f1c <MCP_ReceivedPacket>
          MCP_Over_UartA.pTransportLayer->fSendPacket(MCP_Over_UartA.pTransportLayer, MCP_Over_UartA.txBuffer,
 800272e:	6828      	ldr	r0, [r5, #0]
 8002730:	230a      	movs	r3, #10
 8002732:	89ea      	ldrh	r2, [r5, #14]
 8002734:	68a9      	ldr	r1, [r5, #8]
 8002736:	6845      	ldr	r5, [r0, #4]
 8002738:	47a8      	blx	r5
{
 800273a:	2301      	movs	r3, #1
 800273c:	e7c9      	b.n	80026d2 <MC_RunMotorControlTasks+0x16>
 800273e:	46c0      	nop			@ (mov r8, r8)
 8002740:	20000424 	.word	0x20000424
 8002744:	2000042a 	.word	0x2000042a
 8002748:	20000428 	.word	0x20000428
 800274c:	20000426 	.word	0x20000426
 8002750:	20000344 	.word	0x20000344

08002754 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8002754:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */
   FOC_Clear(M1);
 8002756:	2000      	movs	r0, #0
 8002758:	f000 f888 	bl	800286c <FOC_Clear>
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);
 800275c:	2200      	movs	r2, #0
 800275e:	2180      	movs	r1, #128	@ 0x80
 8002760:	4801      	ldr	r0, [pc, #4]	@ (8002768 <TSK_HardwareFaultTask+0x14>)
 8002762:	f7ff fd4f 	bl	8002204 <MCI_FaultProcessing>

  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 8002766:	bd10      	pop	{r4, pc}
 8002768:	20000000 	.word	0x20000000

0800276c <mc_lock_pins>:
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800276c:	2390      	movs	r3, #144	@ 0x90
  WRITE_REG(GPIOx->LCKR, PinMask);
 800276e:	2120      	movs	r1, #32
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002770:	4a38      	ldr	r2, [pc, #224]	@ (8002854 <mc_lock_pins+0xe8>)
 8002772:	05db      	lsls	r3, r3, #23

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration.
  */
__weak void mc_lock_pins (void)
{
 8002774:	b08c      	sub	sp, #48	@ 0x30
 8002776:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002778:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800277a:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800277c:	69da      	ldr	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800277e:	391e      	subs	r1, #30
  temp = READ_REG(GPIOx->LCKR);
 8002780:	920b      	str	r2, [sp, #44]	@ 0x2c
  (void) temp;
 8002782:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002784:	4a34      	ldr	r2, [pc, #208]	@ (8002858 <mc_lock_pins+0xec>)
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002786:	2080      	movs	r0, #128	@ 0x80
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002788:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800278a:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800278c:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800278e:	69da      	ldr	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002790:	3102      	adds	r1, #2
  temp = READ_REG(GPIOx->LCKR);
 8002792:	920a      	str	r2, [sp, #40]	@ 0x28
  (void) temp;
 8002794:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002796:	4a31      	ldr	r2, [pc, #196]	@ (800285c <mc_lock_pins+0xf0>)
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002798:	0140      	lsls	r0, r0, #5
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800279a:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800279c:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800279e:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80027a0:	69da      	ldr	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80027a2:	3903      	subs	r1, #3
  temp = READ_REG(GPIOx->LCKR);
 80027a4:	9209      	str	r2, [sp, #36]	@ 0x24
  (void) temp;
 80027a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80027a8:	4a2d      	ldr	r2, [pc, #180]	@ (8002860 <mc_lock_pins+0xf4>)
 80027aa:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80027ac:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80027ae:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80027b0:	69da      	ldr	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80027b2:	31ff      	adds	r1, #255	@ 0xff
  temp = READ_REG(GPIOx->LCKR);
 80027b4:	9208      	str	r2, [sp, #32]
  (void) temp;
 80027b6:	9a08      	ldr	r2, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80027b8:	4a2a      	ldr	r2, [pc, #168]	@ (8002864 <mc_lock_pins+0xf8>)
 80027ba:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80027bc:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80027be:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80027c0:	69da      	ldr	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80027c2:	3101      	adds	r1, #1
  temp = READ_REG(GPIOx->LCKR);
 80027c4:	9207      	str	r2, [sp, #28]
  (void) temp;
 80027c6:	9a07      	ldr	r2, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80027c8:	2281      	movs	r2, #129	@ 0x81
  WRITE_REG(GPIOx->LCKR, PinMask);
 80027ca:	31ff      	adds	r1, #255	@ 0xff
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80027cc:	0252      	lsls	r2, r2, #9
 80027ce:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80027d0:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80027d2:	2188      	movs	r1, #136	@ 0x88
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80027d4:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80027d6:	69da      	ldr	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80027d8:	0249      	lsls	r1, r1, #9
  temp = READ_REG(GPIOx->LCKR);
 80027da:	9206      	str	r2, [sp, #24]
  (void) temp;
 80027dc:	9a06      	ldr	r2, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80027de:	4a22      	ldr	r2, [pc, #136]	@ (8002868 <mc_lock_pins+0xfc>)
 80027e0:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80027e2:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80027e4:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80027e6:	69d1      	ldr	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80027e8:	2080      	movs	r0, #128	@ 0x80
  temp = READ_REG(GPIOx->LCKR);
 80027ea:	9105      	str	r1, [sp, #20]
  (void) temp;
 80027ec:	9905      	ldr	r1, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80027ee:	21a0      	movs	r1, #160	@ 0xa0
  WRITE_REG(GPIOx->LCKR, PinMask);
 80027f0:	01c0      	lsls	r0, r0, #7
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80027f2:	0249      	lsls	r1, r1, #9
 80027f4:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80027f6:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80027f8:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80027fa:	69d1      	ldr	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80027fc:	2080      	movs	r0, #128	@ 0x80
  temp = READ_REG(GPIOx->LCKR);
 80027fe:	9104      	str	r1, [sp, #16]
  (void) temp;
 8002800:	9904      	ldr	r1, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002802:	2182      	movs	r1, #130	@ 0x82
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002804:	00c0      	lsls	r0, r0, #3
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002806:	0249      	lsls	r1, r1, #9
 8002808:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800280a:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800280c:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800280e:	69d9      	ldr	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002810:	2080      	movs	r0, #128	@ 0x80
  temp = READ_REG(GPIOx->LCKR);
 8002812:	9103      	str	r1, [sp, #12]
  (void) temp;
 8002814:	9903      	ldr	r1, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002816:	21c0      	movs	r1, #192	@ 0xc0
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002818:	0200      	lsls	r0, r0, #8
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800281a:	0249      	lsls	r1, r1, #9
 800281c:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800281e:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002820:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002822:	69d1      	ldr	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002824:	2080      	movs	r0, #128	@ 0x80
  temp = READ_REG(GPIOx->LCKR);
 8002826:	9102      	str	r1, [sp, #8]
  (void) temp;
 8002828:	9902      	ldr	r1, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800282a:	2190      	movs	r1, #144	@ 0x90
  WRITE_REG(GPIOx->LCKR, PinMask);
 800282c:	0180      	lsls	r0, r0, #6
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800282e:	0249      	lsls	r1, r1, #9
 8002830:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002832:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002834:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002836:	69d2      	ldr	r2, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002838:	2180      	movs	r1, #128	@ 0x80
  temp = READ_REG(GPIOx->LCKR);
 800283a:	9201      	str	r2, [sp, #4]
  (void) temp;
 800283c:	9a01      	ldr	r2, [sp, #4]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800283e:	2284      	movs	r2, #132	@ 0x84
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002840:	0109      	lsls	r1, r1, #4
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002842:	0252      	lsls	r2, r2, #9
 8002844:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002846:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002848:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800284a:	69db      	ldr	r3, [r3, #28]
 800284c:	9300      	str	r3, [sp, #0]
  (void) temp;
 800284e:	9b00      	ldr	r3, [sp, #0]
LL_GPIO_LockPin(M1_PWM_VL_GPIO_Port, M1_PWM_VL_Pin);
LL_GPIO_LockPin(M1_PWM_WH_GPIO_Port, M1_PWM_WH_Pin);
LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
LL_GPIO_LockPin(M1_EN_DRIVER_GPIO_Port, M1_EN_DRIVER_Pin);
}
 8002850:	b00c      	add	sp, #48	@ 0x30
 8002852:	4770      	bx	lr
 8002854:	00010020 	.word	0x00010020
 8002858:	00010002 	.word	0x00010002
 800285c:	00010004 	.word	0x00010004
 8002860:	00010001 	.word	0x00010001
 8002864:	00010100 	.word	0x00010100
 8002868:	48000400 	.word	0x48000400

0800286c <FOC_Clear>:
  *         controller. It must be called before each motor restart.
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2.
  */
__weak void FOC_Clear(uint8_t bMotor)
{
 800286c:	b510      	push	{r4, lr}
 800286e:	0004      	movs	r4, r0
  /* USER CODE BEGIN FOC_Clear 0 */

  /* USER CODE END FOC_Clear 0 */
  MC_ControlMode_t mode;

  mode = MCI_GetControlMode( &Mci[bMotor] );
 8002870:	202c      	movs	r0, #44	@ 0x2c
 8002872:	4360      	muls	r0, r4
 8002874:	4b19      	ldr	r3, [pc, #100]	@ (80028dc <FOC_Clear+0x70>)
 8002876:	18c0      	adds	r0, r0, r3
 8002878:	f7ff fd7a 	bl	8002370 <MCI_GetControlMode>

  ab_t NULL_ab = {((int16_t)0), ((int16_t)0)};
  qd_t NULL_qd = {((int16_t)0), ((int16_t)0)};
  alphabeta_t NULL_alphabeta = {((int16_t)0), ((int16_t)0)};

  FOCVars[bMotor].Iab = NULL_ab;
 800287c:	2326      	movs	r3, #38	@ 0x26
 800287e:	2100      	movs	r1, #0
 8002880:	4363      	muls	r3, r4
 8002882:	4a17      	ldr	r2, [pc, #92]	@ (80028e0 <FOC_Clear+0x74>)
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
  FOCVars[bMotor].Iqd = NULL_qd;
  if ( mode != MCM_OPEN_LOOP_VOLTAGE_MODE && mode != MCM_OPEN_LOOP_CURRENT_MODE)
 8002884:	3801      	subs	r0, #1
  FOCVars[bMotor].Iab = NULL_ab;
 8002886:	52d1      	strh	r1, [r2, r3]
  if ( mode != MCM_OPEN_LOOP_VOLTAGE_MODE && mode != MCM_OPEN_LOOP_CURRENT_MODE)
 8002888:	b2c0      	uxtb	r0, r0
  FOCVars[bMotor].Iab = NULL_ab;
 800288a:	18d3      	adds	r3, r2, r3
 800288c:	8059      	strh	r1, [r3, #2]
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 800288e:	8099      	strh	r1, [r3, #4]
 8002890:	80d9      	strh	r1, [r3, #6]
  FOCVars[bMotor].Iqd = NULL_qd;
 8002892:	8199      	strh	r1, [r3, #12]
 8002894:	81d9      	strh	r1, [r3, #14]
  if ( mode != MCM_OPEN_LOOP_VOLTAGE_MODE && mode != MCM_OPEN_LOOP_CURRENT_MODE)
 8002896:	2801      	cmp	r0, #1
 8002898:	d901      	bls.n	800289e <FOC_Clear+0x32>
  {
    FOCVars[bMotor].Iqdref = NULL_qd;
 800289a:	8219      	strh	r1, [r3, #16]
 800289c:	8259      	strh	r1, [r3, #18]
  }
  else
  {
    /* Nothing to do */
  }
  FOCVars[bMotor].hTeref = (int16_t)0;
 800289e:	2326      	movs	r3, #38	@ 0x26
 80028a0:	4363      	muls	r3, r4
 80028a2:	18d3      	adds	r3, r2, r3
 80028a4:	2200      	movs	r2, #0
 80028a6:	83da      	strh	r2, [r3, #30]
  FOCVars[bMotor].Vqd = NULL_qd;
 80028a8:	82da      	strh	r2, [r3, #22]
 80028aa:	831a      	strh	r2, [r3, #24]
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
 80028ac:	835a      	strh	r2, [r3, #26]
 80028ae:	839a      	strh	r2, [r3, #28]
  FOCVars[bMotor].hElAngle = (int16_t)0;
 80028b0:	841a      	strh	r2, [r3, #32]

  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 80028b2:	4b0c      	ldr	r3, [pc, #48]	@ (80028e4 <FOC_Clear+0x78>)
 80028b4:	00a4      	lsls	r4, r4, #2
 80028b6:	58e0      	ldr	r0, [r4, r3]
 80028b8:	2100      	movs	r1, #0
 80028ba:	f002 ffad 	bl	8005818 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], ((int32_t)0));
 80028be:	4b0a      	ldr	r3, [pc, #40]	@ (80028e8 <FOC_Clear+0x7c>)
 80028c0:	2100      	movs	r1, #0
 80028c2:	58e0      	ldr	r0, [r4, r3]
 80028c4:	f002 ffa8 	bl	8005818 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 80028c8:	4b08      	ldr	r3, [pc, #32]	@ (80028ec <FOC_Clear+0x80>)
 80028ca:	58e0      	ldr	r0, [r4, r3]
 80028cc:	f003 f86c 	bl	80059a8 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80028d0:	4b07      	ldr	r3, [pc, #28]	@ (80028f0 <FOC_Clear+0x84>)
 80028d2:	58e0      	ldr	r0, [r4, r3]
 80028d4:	f000 fd0a 	bl	80032ec <PWMC_SwitchOffPWM>

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 80028d8:	bd10      	pop	{r4, pc}
 80028da:	46c0      	nop			@ (mov r8, r8)
 80028dc:	20000000 	.word	0x20000000
 80028e0:	200003f8 	.word	0x200003f8
 80028e4:	20000034 	.word	0x20000034
 80028e8:	20000030 	.word	0x20000030
 80028ec:	20000038 	.word	0x20000038
 80028f0:	20000420 	.word	0x20000420

080028f4 <FOC_Init>:
{
 80028f4:	b570      	push	{r4, r5, r6, lr}
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 80028f6:	4b25      	ldr	r3, [pc, #148]	@ (800298c <FOC_Init+0x98>)
 80028f8:	4825      	ldr	r0, [pc, #148]	@ (8002990 <FOC_Init+0x9c>)
{
 80028fa:	b082      	sub	sp, #8
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 80028fc:	6018      	str	r0, [r3, #0]
    R1_Init(&PWM_Handle_M1);
 80028fe:	f001 f903 	bl	8003b08 <R1_Init>
    PID_HandleInit(&PIDSpeedHandle_M1);
 8002902:	4c24      	ldr	r4, [pc, #144]	@ (8002994 <FOC_Init+0xa0>)
 8002904:	0020      	movs	r0, r4
 8002906:	f002 ff73 	bl	80057f0 <PID_HandleInit>
    HALL_Init (&HALL_M1);
 800290a:	4e23      	ldr	r6, [pc, #140]	@ (8002998 <FOC_Init+0xa4>)
 800290c:	0030      	movs	r0, r6
 800290e:	f7fe fafd 	bl	8000f0c <HALL_Init>
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &HALL_M1._Super);
 8002912:	4d22      	ldr	r5, [pc, #136]	@ (800299c <FOC_Init+0xa8>)
 8002914:	0032      	movs	r2, r6
 8002916:	0021      	movs	r1, r4
 8002918:	6828      	ldr	r0, [r5, #0]
 800291a:	f003 f831 	bl	8005980 <STC_Init>
    PID_HandleInit(&PIDIqHandle_M1);
 800291e:	4820      	ldr	r0, [pc, #128]	@ (80029a0 <FOC_Init+0xac>)
 8002920:	f002 ff66 	bl	80057f0 <PID_HandleInit>
    PID_HandleInit(&PIDIdHandle_M1);
 8002924:	481f      	ldr	r0, [pc, #124]	@ (80029a4 <FOC_Init+0xb0>)
 8002926:	f002 ff63 	bl	80057f0 <PID_HandleInit>
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 800292a:	4b1f      	ldr	r3, [pc, #124]	@ (80029a8 <FOC_Init+0xb4>)
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 800292c:	4c1f      	ldr	r4, [pc, #124]	@ (80029ac <FOC_Init+0xb8>)
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 800292e:	4a20      	ldr	r2, [pc, #128]	@ (80029b0 <FOC_Init+0xbc>)
 8002930:	681b      	ldr	r3, [r3, #0]
    OL_Init(&OpenLoop_ParamsM1, &VirtualSpeedSensorM1);     /* Only if M1 has open loop */
 8002932:	4e20      	ldr	r6, [pc, #128]	@ (80029b4 <FOC_Init+0xc0>)
 8002934:	4920      	ldr	r1, [pc, #128]	@ (80029b8 <FOC_Init+0xc4>)
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 8002936:	60da      	str	r2, [r3, #12]
    OL_Init(&OpenLoop_ParamsM1, &VirtualSpeedSensorM1);     /* Only if M1 has open loop */
 8002938:	0030      	movs	r0, r6
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 800293a:	609c      	str	r4, [r3, #8]
    OL_Init(&OpenLoop_ParamsM1, &VirtualSpeedSensorM1);     /* Only if M1 has open loop */
 800293c:	f002 ff3e 	bl	80057bc <OL_Init>
    pOpenLoop[M1] = &OpenLoop_ParamsM1;
 8002940:	4b1e      	ldr	r3, [pc, #120]	@ (80029bc <FOC_Init+0xc8>)
    pREMNG[M1] = &RampExtMngrHFParamsM1;
 8002942:	481f      	ldr	r0, [pc, #124]	@ (80029c0 <FOC_Init+0xcc>)
    pOpenLoop[M1] = &OpenLoop_ParamsM1;
 8002944:	601e      	str	r6, [r3, #0]
    pREMNG[M1] = &RampExtMngrHFParamsM1;
 8002946:	4b1f      	ldr	r3, [pc, #124]	@ (80029c4 <FOC_Init+0xd0>)
 8002948:	6018      	str	r0, [r3, #0]
    REMNG_Init(pREMNG[M1]);
 800294a:	f002 ffe1 	bl	8005910 <REMNG_Init>
    FOC_Clear(M1);
 800294e:	2000      	movs	r0, #0
 8002950:	f7ff ff8c 	bl	800286c <FOC_Clear>
    FOCVars[M1].bDriveInput = EXTERNAL;
 8002954:	2324      	movs	r3, #36	@ 0x24
 8002956:	2201      	movs	r2, #1
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8002958:	6828      	ldr	r0, [r5, #0]
    FOCVars[M1].bDriveInput = EXTERNAL;
 800295a:	54e2      	strb	r2, [r4, r3]
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 800295c:	f003 f8b4 	bl	8005ac8 <STC_GetDefaultIqdref>
 8002960:	8220      	strh	r0, [r4, #16]
 8002962:	0c00      	lsrs	r0, r0, #16
 8002964:	8260      	strh	r0, [r4, #18]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8002966:	6828      	ldr	r0, [r5, #0]
 8002968:	f003 f8ae 	bl	8005ac8 <STC_GetDefaultIqdref>
 800296c:	0c00      	lsrs	r0, r0, #16
 800296e:	82a0      	strh	r0, [r4, #20]
    MCI_SetSpeedMode(&Mci[M1]);
 8002970:	4c15      	ldr	r4, [pc, #84]	@ (80029c8 <FOC_Init+0xd4>)
 8002972:	0020      	movs	r0, r4
 8002974:	f7ff fc1c 	bl	80021b0 <MCI_SetSpeedMode>
    MCI_ExecSpeedRamp(&Mci[M1],
 8002978:	6828      	ldr	r0, [r5, #0]
 800297a:	f003 f8a1 	bl	8005ac0 <STC_GetMecSpeedRefUnitDefault>
 800297e:	2200      	movs	r2, #0
 8002980:	0001      	movs	r1, r0
 8002982:	0020      	movs	r0, r4
 8002984:	f7ff fc02 	bl	800218c <MCI_ExecSpeedRamp>
}
 8002988:	b002      	add	sp, #8
 800298a:	bd70      	pop	{r4, r5, r6, pc}
 800298c:	20000420 	.word	0x20000420
 8002990:	20000134 	.word	0x20000134
 8002994:	20000290 	.word	0x20000290
 8002998:	20000058 	.word	0x20000058
 800299c:	20000038 	.word	0x20000038
 80029a0:	20000264 	.word	0x20000264
 80029a4:	20000238 	.word	0x20000238
 80029a8:	2000002c 	.word	0x2000002c
 80029ac:	200003f8 	.word	0x200003f8
 80029b0:	200002cc 	.word	0x200002cc
 80029b4:	20000124 	.word	0x20000124
 80029b8:	200002f4 	.word	0x200002f4
 80029bc:	2000042c 	.word	0x2000042c
 80029c0:	20000040 	.word	0x20000040
 80029c4:	200003f4 	.word	0x200003f4
 80029c8:	20000000 	.word	0x20000000

080029cc <FOC_InitAdditionalMethods>:
    {
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
    }
}
 80029cc:	4770      	bx	lr
 80029ce:	46c0      	nop			@ (mov r8, r8)

080029d0 <FOC_CalcCurrRef>:
  *         MTPA algorithm(s). It must be called with the periodicity specified
  *         in oTSC parameters.
  * @param  bMotor related motor it can be M1 or M2.
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 80029d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029d2:	46c6      	mov	lr, r8
 80029d4:	0005      	movs	r5, r0
 80029d6:	b500      	push	{lr}
  __ASM volatile ("cpsid i" : : : "memory");
 80029d8:	b672      	cpsid	i

  /* Enter critical section */
  /* Disable interrupts to avoid any interruption during Iqd reference latching */
  /* to avoid MF task writing them while HF task reading them */
  __disable_irq();
  IqdTmp = FOCVars[bMotor].Iqdref;
 80029da:	2426      	movs	r4, #38	@ 0x26
 80029dc:	4344      	muls	r4, r0
 80029de:	4e15      	ldr	r6, [pc, #84]	@ (8002a34 <FOC_CalcCurrRef+0x64>)
 80029e0:	1934      	adds	r4, r6, r4
 80029e2:	2310      	movs	r3, #16
 80029e4:	5ee7      	ldrsh	r7, [r4, r3]
 80029e6:	2212      	movs	r2, #18
 80029e8:	5ea3      	ldrsh	r3, [r4, r2]
 80029ea:	4698      	mov	r8, r3
  __ASM volatile ("cpsie i" : : : "memory");
 80029ec:	b662      	cpsie	i
  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  MC_ControlMode_t mode;

  mode = MCI_GetControlMode( &Mci[bMotor] );
 80029ee:	202c      	movs	r0, #44	@ 0x2c
 80029f0:	4368      	muls	r0, r5
 80029f2:	4b11      	ldr	r3, [pc, #68]	@ (8002a38 <FOC_CalcCurrRef+0x68>)
 80029f4:	18c0      	adds	r0, r0, r3
 80029f6:	f7ff fcbb 	bl	8002370 <MCI_GetControlMode>
  if (INTERNAL == FOCVars[bMotor].bDriveInput
 80029fa:	0023      	movs	r3, r4
 80029fc:	3324      	adds	r3, #36	@ 0x24
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d103      	bne.n	8002a0c <FOC_CalcCurrRef+0x3c>
               && (mode != MCM_OPEN_LOOP_VOLTAGE_MODE && mode != MCM_OPEN_LOOP_CURRENT_MODE))
 8002a04:	3801      	subs	r0, #1
 8002a06:	b2c0      	uxtb	r0, r0
 8002a08:	2801      	cmp	r0, #1
 8002a0a:	d80a      	bhi.n	8002a22 <FOC_CalcCurrRef+0x52>
  __ASM volatile ("cpsid i" : : : "memory");
 8002a0c:	b672      	cpsid	i
  }

  /* Enter critical section */
  /* Disable interrupts to avoid any interruption during Iqd reference restoring */
  __disable_irq();
  FOCVars[bMotor].Iqdref = IqdTmp;
 8002a0e:	2326      	movs	r3, #38	@ 0x26
 8002a10:	436b      	muls	r3, r5
 8002a12:	18f6      	adds	r6, r6, r3
 8002a14:	4643      	mov	r3, r8
 8002a16:	8237      	strh	r7, [r6, #16]
 8002a18:	8273      	strh	r3, [r6, #18]
  __ASM volatile ("cpsie i" : : : "memory");
 8002a1a:	b662      	cpsie	i
  /* Exit critical section */
  __enable_irq();
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8002a1c:	bc80      	pop	{r7}
 8002a1e:	46b8      	mov	r8, r7
 8002a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8002a22:	4b06      	ldr	r3, [pc, #24]	@ (8002a3c <FOC_CalcCurrRef+0x6c>)
 8002a24:	00aa      	lsls	r2, r5, #2
 8002a26:	58d0      	ldr	r0, [r2, r3]
 8002a28:	f003 f814 	bl	8005a54 <STC_CalcTorqueReference>
 8002a2c:	0007      	movs	r7, r0
 8002a2e:	83e0      	strh	r0, [r4, #30]
    IqdTmp.q = FOCVars[bMotor].hTeref;
 8002a30:	e7ec      	b.n	8002a0c <FOC_CalcCurrRef+0x3c>
 8002a32:	46c0      	nop			@ (mov r8, r8)
 8002a34:	200003f8 	.word	0x200003f8
 8002a38:	20000000 	.word	0x20000000
 8002a3c:	20000038 	.word	0x20000038

08002a40 <TSK_MediumFrequencyTaskM1>:
  int16_t wAux = 0;
 8002a40:	2300      	movs	r3, #0
{
 8002a42:	b5f0      	push	{r4, r5, r6, r7, lr}
  mode = MCI_GetControlMode(&Mci[M1]);
 8002a44:	4c6d      	ldr	r4, [pc, #436]	@ (8002bfc <TSK_MediumFrequencyTaskM1+0x1bc>)
{
 8002a46:	b083      	sub	sp, #12
  int16_t wAux = 0;
 8002a48:	ae01      	add	r6, sp, #4
  mode = MCI_GetControlMode(&Mci[M1]);
 8002a4a:	0020      	movs	r0, r4
  int16_t wAux = 0;
 8002a4c:	8033      	strh	r3, [r6, #0]
  mode = MCI_GetControlMode(&Mci[M1]);
 8002a4e:	f7ff fc8f 	bl	8002370 <MCI_GetControlMode>
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit(&HALL_M1, &wAux);
 8002a52:	4f6b      	ldr	r7, [pc, #428]	@ (8002c00 <TSK_MediumFrequencyTaskM1+0x1c0>)
 8002a54:	0031      	movs	r1, r6
  mode = MCI_GetControlMode(&Mci[M1]);
 8002a56:	0005      	movs	r5, r0
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit(&HALL_M1, &wAux);
 8002a58:	0038      	movs	r0, r7
 8002a5a:	f7fe fbcd 	bl	80011f8 <HALL_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower(pMPM[M1]);
 8002a5e:	4b69      	ldr	r3, [pc, #420]	@ (8002c04 <TSK_MediumFrequencyTaskM1+0x1c4>)
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit(&HALL_M1, &wAux);
 8002a60:	0006      	movs	r6, r0
  PQD_CalcElMotorPower(pMPM[M1]);
 8002a62:	6818      	ldr	r0, [r3, #0]
 8002a64:	f002 ff1e 	bl	80058a4 <PQD_CalcElMotorPower>
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 8002a68:	0020      	movs	r0, r4
 8002a6a:	f7ff fc2b 	bl	80022c4 <MCI_GetCurrentFaults>
 8002a6e:	2800      	cmp	r0, #0
 8002a70:	d004      	beq.n	8002a7c <TSK_MediumFrequencyTaskM1+0x3c>
    Mci[M1].State = FAULT_NOW;
 8002a72:	2323      	movs	r3, #35	@ 0x23
 8002a74:	220a      	movs	r2, #10
 8002a76:	54e2      	strb	r2, [r4, r3]
}
 8002a78:	b003      	add	sp, #12
 8002a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (MCI_GetOccurredFaults(&Mci[M1]) == MC_NO_FAULTS)
 8002a7c:	0020      	movs	r0, r4
 8002a7e:	f7ff fc1f 	bl	80022c0 <MCI_GetOccurredFaults>
      switch (Mci[M1].State)
 8002a82:	2323      	movs	r3, #35	@ 0x23
    if (MCI_GetOccurredFaults(&Mci[M1]) == MC_NO_FAULTS)
 8002a84:	2800      	cmp	r0, #0
 8002a86:	d106      	bne.n	8002a96 <TSK_MediumFrequencyTaskM1+0x56>
      switch (Mci[M1].State)
 8002a88:	5ce3      	ldrb	r3, [r4, r3]
 8002a8a:	2b11      	cmp	r3, #17
 8002a8c:	d8f4      	bhi.n	8002a78 <TSK_MediumFrequencyTaskM1+0x38>
 8002a8e:	4a5e      	ldr	r2, [pc, #376]	@ (8002c08 <TSK_MediumFrequencyTaskM1+0x1c8>)
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	58d3      	ldr	r3, [r2, r3]
 8002a94:	469f      	mov	pc, r3
      Mci[M1].State = FAULT_OVER;
 8002a96:	220b      	movs	r2, #11
 8002a98:	54e2      	strb	r2, [r4, r3]
 8002a9a:	e7ed      	b.n	8002a78 <TSK_MediumFrequencyTaskM1+0x38>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8002a9c:	2522      	movs	r5, #34	@ 0x22
            if (pwmcHandle[M1]->offsetCalibStatus == false)
 8002a9e:	4e5b      	ldr	r6, [pc, #364]	@ (8002c0c <TSK_MediumFrequencyTaskM1+0x1cc>)
          if (MCI_STOP == Mci[M1].DirectCommand)
 8002aa0:	5d63      	ldrb	r3, [r4, r5]
            if (pwmcHandle[M1]->offsetCalibStatus == false)
 8002aa2:	6830      	ldr	r0, [r6, #0]
          if (MCI_STOP == Mci[M1].DirectCommand)
 8002aa4:	2b05      	cmp	r3, #5
 8002aa6:	d07e      	beq.n	8002ba6 <TSK_MediumFrequencyTaskM1+0x166>
            if (PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC))
 8002aa8:	2101      	movs	r1, #1
 8002aaa:	f000 fc27 	bl	80032fc <PWMC_CurrentReadingCalibr>
 8002aae:	2800      	cmp	r0, #0
 8002ab0:	d0e2      	beq.n	8002a78 <TSK_MediumFrequencyTaskM1+0x38>
              if (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand)
 8002ab2:	5d63      	ldrb	r3, [r4, r5]
 8002ab4:	2b03      	cmp	r3, #3
 8002ab6:	d100      	bne.n	8002aba <TSK_MediumFrequencyTaskM1+0x7a>
 8002ab8:	e093      	b.n	8002be2 <TSK_MediumFrequencyTaskM1+0x1a2>
                R1_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 8002aba:	6830      	ldr	r0, [r6, #0]
 8002abc:	2100      	movs	r1, #0
 8002abe:	f001 f98d 	bl	8003ddc <R1_TurnOnLowSides>
                TSK_SetChargeBootCapDelayM1(M1_CHARGE_BOOT_CAP_TICKS);
 8002ac2:	2014      	movs	r0, #20
 8002ac4:	f7ff fda8 	bl	8002618 <TSK_SetChargeBootCapDelayM1>
                Mci[M1].State = CHARGE_BOOT_CAP;
 8002ac8:	2323      	movs	r3, #35	@ 0x23
 8002aca:	2210      	movs	r2, #16
 8002acc:	54e2      	strb	r2, [r4, r3]
 8002ace:	e7d3      	b.n	8002a78 <TSK_MediumFrequencyTaskM1+0x38>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8002ad0:	2322      	movs	r3, #34	@ 0x22
 8002ad2:	5ce3      	ldrb	r3, [r4, r3]
 8002ad4:	2b05      	cmp	r3, #5
 8002ad6:	d064      	beq.n	8002ba2 <TSK_MediumFrequencyTaskM1+0x162>
            if (TSK_ChargeBootCapDelayHasElapsedM1())
 8002ad8:	f7ff fda4 	bl	8002624 <TSK_ChargeBootCapDelayHasElapsedM1>
 8002adc:	2800      	cmp	r0, #0
 8002ade:	d0cb      	beq.n	8002a78 <TSK_MediumFrequencyTaskM1+0x38>
              R1_SwitchOffPWM(pwmcHandle[M1]);
 8002ae0:	4e4a      	ldr	r6, [pc, #296]	@ (8002c0c <TSK_MediumFrequencyTaskM1+0x1cc>)
              if (mode == MCM_OPEN_LOOP_VOLTAGE_MODE || mode == MCM_OPEN_LOOP_CURRENT_MODE)
 8002ae2:	3d01      	subs	r5, #1
              R1_SwitchOffPWM(pwmcHandle[M1]);
 8002ae4:	6830      	ldr	r0, [r6, #0]
 8002ae6:	f001 fad1 	bl	800408c <R1_SwitchOffPWM>
              HALL_Clear(&HALL_M1);
 8002aea:	0038      	movs	r0, r7
 8002aec:	f7fe fa98 	bl	8001020 <HALL_Clear>
              if (mode == MCM_OPEN_LOOP_VOLTAGE_MODE || mode == MCM_OPEN_LOOP_CURRENT_MODE)
 8002af0:	b2ed      	uxtb	r5, r5
              FOC_Clear( M1 );
 8002af2:	2000      	movs	r0, #0
 8002af4:	f7ff feba 	bl	800286c <FOC_Clear>
              if (mode == MCM_OPEN_LOOP_VOLTAGE_MODE || mode == MCM_OPEN_LOOP_CURRENT_MODE)
 8002af8:	2d01      	cmp	r5, #1
 8002afa:	d978      	bls.n	8002bee <TSK_MediumFrequencyTaskM1+0x1ae>
                STC_SetSpeedSensor( pSTC[M1], &HALL_M1._Super );
 8002afc:	4d44      	ldr	r5, [pc, #272]	@ (8002c10 <TSK_MediumFrequencyTaskM1+0x1d0>)
 8002afe:	0039      	movs	r1, r7
 8002b00:	6828      	ldr	r0, [r5, #0]
 8002b02:	f002 ff4f 	bl	80059a4 <STC_SetSpeedSensor>
                FOC_InitAdditionalMethods(M1);
 8002b06:	2000      	movs	r0, #0
 8002b08:	f7ff ff60 	bl	80029cc <FOC_InitAdditionalMethods>
                FOC_CalcCurrRef(M1);
 8002b0c:	2000      	movs	r0, #0
 8002b0e:	f7ff ff5f 	bl	80029d0 <FOC_CalcCurrRef>
                STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1]); /* Init the reference speed to current speed */
 8002b12:	6828      	ldr	r0, [r5, #0]
 8002b14:	f002 ffe0 	bl	8005ad8 <STC_ForceSpeedReferenceToCurrentSpeed>
              MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the speed sensor */
 8002b18:	0020      	movs	r0, r4
 8002b1a:	f7ff fb7b 	bl	8002214 <MCI_ExecBufferedCommands>
              Mci[M1].State = RUN;
 8002b1e:	2323      	movs	r3, #35	@ 0x23
 8002b20:	2206      	movs	r2, #6
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 8002b22:	6830      	ldr	r0, [r6, #0]
              Mci[M1].State = RUN;
 8002b24:	54e2      	strb	r2, [r4, r3]
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 8002b26:	f000 fbe5 	bl	80032f4 <PWMC_SwitchOnPWM>
 8002b2a:	e7a5      	b.n	8002a78 <TSK_MediumFrequencyTaskM1+0x38>
          if (MCI_ACK_FAULTS == Mci[M1].DirectCommand)
 8002b2c:	2322      	movs	r3, #34	@ 0x22
 8002b2e:	5ce3      	ldrb	r3, [r4, r3]
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d1a1      	bne.n	8002a78 <TSK_MediumFrequencyTaskM1+0x38>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8002b34:	2300      	movs	r3, #0
 8002b36:	8463      	strh	r3, [r4, #34]	@ 0x22
 8002b38:	e79e      	b.n	8002a78 <TSK_MediumFrequencyTaskM1+0x38>
          Mci[M1].State = FAULT_OVER;
 8002b3a:	2323      	movs	r3, #35	@ 0x23
 8002b3c:	220b      	movs	r2, #11
 8002b3e:	54e2      	strb	r2, [r4, r3]
          break;
 8002b40:	e79a      	b.n	8002a78 <TSK_MediumFrequencyTaskM1+0x38>
          if (TSK_StopPermanencyTimeHasElapsedM1())
 8002b42:	f7ff fd7d 	bl	8002640 <TSK_StopPermanencyTimeHasElapsedM1>
 8002b46:	2800      	cmp	r0, #0
 8002b48:	d096      	beq.n	8002a78 <TSK_MediumFrequencyTaskM1+0x38>
 8002b4a:	e7f3      	b.n	8002b34 <TSK_MediumFrequencyTaskM1+0xf4>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8002b4c:	2322      	movs	r3, #34	@ 0x22
 8002b4e:	5ce3      	ldrb	r3, [r4, r3]
 8002b50:	2b05      	cmp	r3, #5
 8002b52:	d026      	beq.n	8002ba2 <TSK_MediumFrequencyTaskM1+0x162>
            if (mode != MCM_OPEN_LOOP_VOLTAGE_MODE && mode != MCM_OPEN_LOOP_CURRENT_MODE)
 8002b54:	3d01      	subs	r5, #1
            MCI_ExecBufferedCommands(&Mci[M1]);
 8002b56:	0020      	movs	r0, r4
            if (mode != MCM_OPEN_LOOP_VOLTAGE_MODE && mode != MCM_OPEN_LOOP_CURRENT_MODE)
 8002b58:	b2ed      	uxtb	r5, r5
            MCI_ExecBufferedCommands(&Mci[M1]);
 8002b5a:	f7ff fb5b 	bl	8002214 <MCI_ExecBufferedCommands>
            if (mode != MCM_OPEN_LOOP_VOLTAGE_MODE && mode != MCM_OPEN_LOOP_CURRENT_MODE)
 8002b5e:	2d01      	cmp	r5, #1
 8002b60:	d935      	bls.n	8002bce <TSK_MediumFrequencyTaskM1+0x18e>
              FOC_CalcCurrRef(M1);
 8002b62:	2000      	movs	r0, #0
 8002b64:	f7ff ff34 	bl	80029d0 <FOC_CalcCurrRef>
              if(!IsSpeedReliable)
 8002b68:	2e00      	cmp	r6, #0
 8002b6a:	d000      	beq.n	8002b6e <TSK_MediumFrequencyTaskM1+0x12e>
 8002b6c:	e784      	b.n	8002a78 <TSK_MediumFrequencyTaskM1+0x38>
                MCI_FaultProcessing(&Mci[M1], MC_SPEED_FDBK, 0);
 8002b6e:	2200      	movs	r2, #0
 8002b70:	2120      	movs	r1, #32
 8002b72:	0020      	movs	r0, r4
 8002b74:	f7ff fb46 	bl	8002204 <MCI_FaultProcessing>
 8002b78:	e77e      	b.n	8002a78 <TSK_MediumFrequencyTaskM1+0x38>
          if ((MCI_START == Mci[M1].DirectCommand) || (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand))
 8002b7a:	2322      	movs	r3, #34	@ 0x22
 8002b7c:	2202      	movs	r2, #2
 8002b7e:	5ce3      	ldrb	r3, [r4, r3]
 8002b80:	4393      	bics	r3, r2
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d000      	beq.n	8002b88 <TSK_MediumFrequencyTaskM1+0x148>
 8002b86:	e777      	b.n	8002a78 <TSK_MediumFrequencyTaskM1+0x38>
            if (pwmcHandle[M1]->offsetCalibStatus == false)
 8002b88:	4d20      	ldr	r5, [pc, #128]	@ (8002c0c <TSK_MediumFrequencyTaskM1+0x1cc>)
 8002b8a:	327d      	adds	r2, #125	@ 0x7d
 8002b8c:	6828      	ldr	r0, [r5, #0]
 8002b8e:	5c82      	ldrb	r2, [r0, r2]
 8002b90:	2a00      	cmp	r2, #0
 8002b92:	d115      	bne.n	8002bc0 <TSK_MediumFrequencyTaskM1+0x180>
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_START);
 8002b94:	2100      	movs	r1, #0
 8002b96:	f000 fbb1 	bl	80032fc <PWMC_CurrentReadingCalibr>
              Mci[M1].State = OFFSET_CALIB;
 8002b9a:	2323      	movs	r3, #35	@ 0x23
 8002b9c:	2211      	movs	r2, #17
 8002b9e:	54e2      	strb	r2, [r4, r3]
 8002ba0:	e76a      	b.n	8002a78 <TSK_MediumFrequencyTaskM1+0x38>
    R1_SwitchOffPWM(pwmcHandle[motor]);
 8002ba2:	4b1a      	ldr	r3, [pc, #104]	@ (8002c0c <TSK_MediumFrequencyTaskM1+0x1cc>)
 8002ba4:	6818      	ldr	r0, [r3, #0]
 8002ba6:	f001 fa71 	bl	800408c <R1_SwitchOffPWM>
  FOC_Clear(motor);
 8002baa:	2000      	movs	r0, #0
 8002bac:	f7ff fe5e 	bl	800286c <FOC_Clear>
  TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 8002bb0:	20c8      	movs	r0, #200	@ 0xc8
 8002bb2:	0080      	lsls	r0, r0, #2
 8002bb4:	f7ff fd3e 	bl	8002634 <TSK_SetStopPermanencyTimeM1>
  Mci[motor].State = STOP;
 8002bb8:	2323      	movs	r3, #35	@ 0x23
 8002bba:	2208      	movs	r2, #8
 8002bbc:	54e2      	strb	r2, [r4, r3]
}
 8002bbe:	e75b      	b.n	8002a78 <TSK_MediumFrequencyTaskM1+0x38>
              pwmcHandle[M1]->OffCalibrWaitTimeCounter = 1u;
 8002bc0:	2260      	movs	r2, #96	@ 0x60
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 8002bc2:	2101      	movs	r1, #1
              pwmcHandle[M1]->OffCalibrWaitTimeCounter = 1u;
 8002bc4:	5283      	strh	r3, [r0, r2]
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 8002bc6:	f000 fb99 	bl	80032fc <PWMC_CurrentReadingCalibr>
              R1_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 8002bca:	6828      	ldr	r0, [r5, #0]
 8002bcc:	e776      	b.n	8002abc <TSK_MediumFrequencyTaskM1+0x7c>
              VSS_CalcAvrgMecSpeedUnit( &VirtualSpeedSensorM1, &hForcedMecSpeedUnit);
 8002bce:	466b      	mov	r3, sp
 8002bd0:	4810      	ldr	r0, [pc, #64]	@ (8002c14 <TSK_MediumFrequencyTaskM1+0x1d4>)
 8002bd2:	1d99      	adds	r1, r3, #6
 8002bd4:	f002 ffe6 	bl	8005ba4 <VSS_CalcAvrgMecSpeedUnit>
              OL_Calc(pOpenLoop[M1]);
 8002bd8:	4b0f      	ldr	r3, [pc, #60]	@ (8002c18 <TSK_MediumFrequencyTaskM1+0x1d8>)
 8002bda:	6818      	ldr	r0, [r3, #0]
 8002bdc:	f002 fdf6 	bl	80057cc <OL_Calc>
 8002be0:	e74a      	b.n	8002a78 <TSK_MediumFrequencyTaskM1+0x38>
                FOC_Clear(M1);
 8002be2:	2000      	movs	r0, #0
 8002be4:	f7ff fe42 	bl	800286c <FOC_Clear>
                Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8002be8:	2300      	movs	r3, #0
 8002bea:	8463      	strh	r3, [r4, #34]	@ 0x22
 8002bec:	e744      	b.n	8002a78 <TSK_MediumFrequencyTaskM1+0x38>
                STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8002bee:	4b08      	ldr	r3, [pc, #32]	@ (8002c10 <TSK_MediumFrequencyTaskM1+0x1d0>)
 8002bf0:	4908      	ldr	r1, [pc, #32]	@ (8002c14 <TSK_MediumFrequencyTaskM1+0x1d4>)
 8002bf2:	6818      	ldr	r0, [r3, #0]
 8002bf4:	f002 fed6 	bl	80059a4 <STC_SetSpeedSensor>
 8002bf8:	e78e      	b.n	8002b18 <TSK_MediumFrequencyTaskM1+0xd8>
 8002bfa:	46c0      	nop			@ (mov r8, r8)
 8002bfc:	20000000 	.word	0x20000000
 8002c00:	20000058 	.word	0x20000058
 8002c04:	2000002c 	.word	0x2000002c
 8002c08:	08006110 	.word	0x08006110
 8002c0c:	20000420 	.word	0x20000420
 8002c10:	20000038 	.word	0x20000038
 8002c14:	200002f4 	.word	0x200002f4
 8002c18:	2000042c 	.word	0x2000042c

08002c1c <FOC_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t FOC_HighFrequencyTask(uint8_t bMotorNbr)
{
 8002c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c1e:	46de      	mov	lr, fp
 8002c20:	4657      	mov	r7, sl
 8002c22:	464e      	mov	r6, r9
 8002c24:	4645      	mov	r5, r8
 8002c26:	b5e0      	push	{r5, r6, r7, lr}
  uint16_t hFOCreturn;
  /* USER CODE BEGIN HighFrequencyTask 0 */

  /* USER CODE END HighFrequencyTask 0 */

  (void)HALL_CalcElAngle(&HALL_M1);
 8002c28:	4b49      	ldr	r3, [pc, #292]	@ (8002d50 <FOC_HighFrequencyTask+0x134>)
{
 8002c2a:	b089      	sub	sp, #36	@ 0x24
 8002c2c:	9000      	str	r0, [sp, #0]
  (void)HALL_CalcElAngle(&HALL_M1);
 8002c2e:	0018      	movs	r0, r3
 8002c30:	9301      	str	r3, [sp, #4]
 8002c32:	f7fe fa99 	bl	8001168 <HALL_CalcElAngle>
  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;
  MC_ControlMode_t mode;

  mode = MCI_GetControlMode( &Mci[M1] );
 8002c36:	4b47      	ldr	r3, [pc, #284]	@ (8002d54 <FOC_HighFrequencyTask+0x138>)
 8002c38:	0018      	movs	r0, r3
 8002c3a:	4699      	mov	r9, r3
 8002c3c:	f7ff fb98 	bl	8002370 <MCI_GetControlMode>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8002c40:	4b45      	ldr	r3, [pc, #276]	@ (8002d58 <FOC_HighFrequencyTask+0x13c>)
  hElAngle = SPD_GetElAngle(speedHandle);
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8002c42:	4f46      	ldr	r7, [pc, #280]	@ (8002d5c <FOC_HighFrequencyTask+0x140>)
 8002c44:	681b      	ldr	r3, [r3, #0]
  mode = MCI_GetControlMode( &Mci[M1] );
 8002c46:	0006      	movs	r6, r0
static inline int16_t SPD_GetElAngle(const SpeednPosFdbk_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hElAngle);
#else
  return (pHandle->hElAngle);
 8002c48:	695b      	ldr	r3, [r3, #20]
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8002c4a:	6838      	ldr	r0, [r7, #0]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctGetPhaseCurrents(pHandle, Iab);
 8002c4c:	a905      	add	r1, sp, #20
 8002c4e:	2504      	movs	r5, #4
 8002c50:	5f5d      	ldrsh	r5, [r3, r5]
 8002c52:	6803      	ldr	r3, [r0, #0]
 8002c54:	4798      	blx	r3
  RCM_ExecNextConv();
 8002c56:	f001 ffd5 	bl	8004c04 <RCM_ExecNextConv>
  Ialphabeta = MCM_Clarke(Iab);
 8002c5a:	9805      	ldr	r0, [sp, #20]
 8002c5c:	f7ff fbd0 	bl	8002400 <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8002c60:	0029      	movs	r1, r5
  Ialphabeta = MCM_Clarke(Iab);
 8002c62:	9006      	str	r0, [sp, #24]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8002c64:	f7ff fc4a 	bl	80024fc <MCM_Park>
 8002c68:	ab03      	add	r3, sp, #12
 8002c6a:	4698      	mov	r8, r3
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8002c6c:	4c3c      	ldr	r4, [pc, #240]	@ (8002d60 <FOC_HighFrequencyTask+0x144>)
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8002c6e:	9003      	str	r0, [sp, #12]
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8002c70:	2310      	movs	r3, #16
 8002c72:	5ee1      	ldrsh	r1, [r4, r3]
 8002c74:	4b3b      	ldr	r3, [pc, #236]	@ (8002d64 <FOC_HighFrequencyTask+0x148>)
 8002c76:	b200      	sxth	r0, r0
 8002c78:	1a09      	subs	r1, r1, r0
 8002c7a:	6818      	ldr	r0, [r3, #0]
 8002c7c:	f002 fdd4 	bl	8005828 <PI_Controller>
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8002c80:	2312      	movs	r3, #18
 8002c82:	5ee1      	ldrsh	r1, [r4, r3]
 8002c84:	4643      	mov	r3, r8
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8002c86:	4682      	mov	sl, r0
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8002c88:	2202      	movs	r2, #2
 8002c8a:	5e9b      	ldrsh	r3, [r3, r2]
 8002c8c:	1ac9      	subs	r1, r1, r3
 8002c8e:	4b36      	ldr	r3, [pc, #216]	@ (8002d68 <FOC_HighFrequencyTask+0x14c>)
 8002c90:	6818      	ldr	r0, [r3, #0]
 8002c92:	f002 fdc9 	bl	8005828 <PI_Controller>
 8002c96:	4653      	mov	r3, sl
 8002c98:	0419      	lsls	r1, r3, #16
 8002c9a:	0400      	lsls	r0, r0, #16
 8002c9c:	0c09      	lsrs	r1, r1, #16
 8002c9e:	4301      	orrs	r1, r0
  if (mode == MCM_OPEN_LOOP_VOLTAGE_MODE)
 8002ca0:	2e01      	cmp	r6, #1
 8002ca2:	d040      	beq.n	8002d26 <FOC_HighFrequencyTask+0x10a>
  }
  else
  {
    /* Nothing to do */
  }
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 8002ca4:	4831      	ldr	r0, [pc, #196]	@ (8002d6c <FOC_HighFrequencyTask+0x150>)
 8002ca6:	f002 fd2f 	bl	8005708 <Circle_Limitation>
 8002caa:	b203      	sxth	r3, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8002cac:	0029      	movs	r1, r5
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 8002cae:	469b      	mov	fp, r3
 8002cb0:	1403      	asrs	r3, r0, #16
 8002cb2:	469a      	mov	sl, r3
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8002cb4:	f7ff fc70 	bl	8002598 <MCM_Rev_Park>
 8002cb8:	9007      	str	r0, [sp, #28]
  RCM_ReadOngoingConv();
 8002cba:	f001 ffdb 	bl	8004c74 <RCM_ReadOngoingConv>
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8002cbe:	9907      	ldr	r1, [sp, #28]
 8002cc0:	6838      	ldr	r0, [r7, #0]
 8002cc2:	f000 fa13 	bl	80030ec <PWMC_SetPhaseVoltage>
  PWMC_CalcPhaseCurrentsEst(pwmcHandle[M1],Iqd, hElAngle);
 8002cc6:	002a      	movs	r2, r5
 8002cc8:	9903      	ldr	r1, [sp, #12]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8002cca:	0006      	movs	r6, r0
  PWMC_CalcPhaseCurrentsEst(pwmcHandle[M1],Iqd, hElAngle);
 8002ccc:	6838      	ldr	r0, [r7, #0]
 8002cce:	f000 fb31 	bl	8003334 <PWMC_CalcPhaseCurrentsEst>

  FOCVars[M1].Vqd = Vqd;
 8002cd2:	465b      	mov	r3, fp
 8002cd4:	82e3      	strh	r3, [r4, #22]
 8002cd6:	4653      	mov	r3, sl
  FOCVars[M1].Iab = Iab;
 8002cd8:	2204      	movs	r2, #4
 8002cda:	a905      	add	r1, sp, #20
 8002cdc:	0020      	movs	r0, r4
  FOCVars[M1].Vqd = Vqd;
 8002cde:	8323      	strh	r3, [r4, #24]
  FOCVars[M1].Iab = Iab;
 8002ce0:	f003 f818 	bl	8005d14 <memcpy>
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8002ce4:	2204      	movs	r2, #4
 8002ce6:	a906      	add	r1, sp, #24
 8002ce8:	1d20      	adds	r0, r4, #4
 8002cea:	f003 f813 	bl	8005d14 <memcpy>
  FOCVars[M1].Iqd = Iqd;
 8002cee:	0020      	movs	r0, r4
 8002cf0:	2204      	movs	r2, #4
 8002cf2:	4641      	mov	r1, r8
 8002cf4:	300c      	adds	r0, #12
 8002cf6:	f003 f80d 	bl	8005d14 <memcpy>
  FOCVars[M1].Valphabeta = Valphabeta;
 8002cfa:	0020      	movs	r0, r4
 8002cfc:	2204      	movs	r2, #4
 8002cfe:	301a      	adds	r0, #26
 8002d00:	a907      	add	r1, sp, #28
 8002d02:	f003 f807 	bl	8005d14 <memcpy>
  FOCVars[M1].hElAngle = hElAngle;
 8002d06:	8425      	strh	r5, [r4, #32]
  if(hFOCreturn == MC_DURATION)
 8002d08:	2e01      	cmp	r6, #1
 8002d0a:	d012      	beq.n	8002d32 <FOC_HighFrequencyTask+0x116>
    if(RUN == Mci[M1].State)
 8002d0c:	2323      	movs	r3, #35	@ 0x23
 8002d0e:	464a      	mov	r2, r9
 8002d10:	5cd3      	ldrb	r3, [r2, r3]
 8002d12:	2b06      	cmp	r3, #6
 8002d14:	d013      	beq.n	8002d3e <FOC_HighFrequencyTask+0x122>
}
 8002d16:	9800      	ldr	r0, [sp, #0]
 8002d18:	b009      	add	sp, #36	@ 0x24
 8002d1a:	bcf0      	pop	{r4, r5, r6, r7}
 8002d1c:	46bb      	mov	fp, r7
 8002d1e:	46b2      	mov	sl, r6
 8002d20:	46a9      	mov	r9, r5
 8002d22:	46a0      	mov	r8, r4
 8002d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Vqd = OL_VqdConditioning(pOpenLoop[M1]);
 8002d26:	4b12      	ldr	r3, [pc, #72]	@ (8002d70 <FOC_HighFrequencyTask+0x154>)
 8002d28:	6818      	ldr	r0, [r3, #0]
 8002d2a:	f002 fd4b 	bl	80057c4 <OL_VqdConditioning>
 8002d2e:	0001      	movs	r1, r0
 8002d30:	e7b8      	b.n	8002ca4 <FOC_HighFrequencyTask+0x88>
    MCI_FaultProcessing(&Mci[M1], MC_DURATION, 0);
 8002d32:	2200      	movs	r2, #0
 8002d34:	2101      	movs	r1, #1
 8002d36:	4648      	mov	r0, r9
 8002d38:	f7ff fa64 	bl	8002204 <MCI_FaultProcessing>
 8002d3c:	e7eb      	b.n	8002d16 <FOC_HighFrequencyTask+0xfa>
      int16_t hObsAngle = SPD_GetElAngle(&HALL_M1._Super);
 8002d3e:	9b01      	ldr	r3, [sp, #4]
 8002d40:	aa02      	add	r2, sp, #8
 8002d42:	889b      	ldrh	r3, [r3, #4]
      (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 8002d44:	a907      	add	r1, sp, #28
      int16_t hObsAngle = SPD_GetElAngle(&HALL_M1._Super);
 8002d46:	8293      	strh	r3, [r2, #20]
      (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 8002d48:	480a      	ldr	r0, [pc, #40]	@ (8002d74 <FOC_HighFrequencyTask+0x158>)
 8002d4a:	f002 fed3 	bl	8005af4 <VSS_CalcElAngle>
 8002d4e:	e7e2      	b.n	8002d16 <FOC_HighFrequencyTask+0xfa>
 8002d50:	20000058 	.word	0x20000058
 8002d54:	20000000 	.word	0x20000000
 8002d58:	20000038 	.word	0x20000038
 8002d5c:	20000420 	.word	0x20000420
 8002d60:	200003f8 	.word	0x200003f8
 8002d64:	20000034 	.word	0x20000034
 8002d68:	20000030 	.word	0x20000030
 8002d6c:	2000003c 	.word	0x2000003c
 8002d70:	2000042c 	.word	0x2000042c
 8002d74:	200002f4 	.word	0x200002f4

08002d78 <RI_SetRegCommandParser>:
  * @param  txSyncFreeSpace Space available for synchronous transmission
  *
  * @retval Returns #MCP_CMD_OK if the command is acknowledged and #MCP_CMD_NOK if not.
  */
uint8_t RI_SetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 8002d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d7a:	4657      	mov	r7, sl
 8002d7c:	464e      	mov	r6, r9
 8002d7e:	4645      	mov	r5, r8
 8002d80:	46de      	mov	lr, fp
 8002d82:	4681      	mov	r9, r0
 8002d84:	b5e0      	push	{r5, r6, r7, lr}
  else
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
    uint8_t * txData = pHandle->txBuffer;
 8002d86:	6884      	ldr	r4, [r0, #8]
{
 8002d88:	b08b      	sub	sp, #44	@ 0x2c
 8002d8a:	9104      	str	r1, [sp, #16]
    uint8_t * txData = pHandle->txBuffer;
 8002d8c:	9403      	str	r4, [sp, #12]
    int16_t rxLength = pHandle->rxLength;
 8002d8e:	210c      	movs	r1, #12
 8002d90:	5e43      	ldrsh	r3, [r0, r1]
    uint8_t * rxData = pHandle->rxBuffer;
 8002d92:	6842      	ldr	r2, [r0, #4]
    uint8_t accessResult;

    uint16_t regID;
    uint8_t typeID;
    uint8_t motorID;
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8002d94:	4834      	ldr	r0, [pc, #208]	@ (8002e68 <RI_SetRegCommandParser+0xf0>)
    uint16_t size = 0U;
 8002d96:	a904      	add	r1, sp, #16
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8002d98:	9008      	str	r0, [sp, #32]
 8002d9a:	4834      	ldr	r0, [pc, #208]	@ (8002e6c <RI_SetRegCommandParser+0xf4>)
    uint16_t size = 0U;
 8002d9c:	468c      	mov	ip, r1
 8002d9e:	250e      	movs	r5, #14
 8002da0:	2100      	movs	r1, #0
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8002da2:	9009      	str	r0, [sp, #36]	@ 0x24
    uint8_t number_of_item =0;
    pHandle->txLength = 0;
 8002da4:	4648      	mov	r0, r9
    uint16_t size = 0U;
 8002da6:	4465      	add	r5, ip
 8002da8:	8029      	strh	r1, [r5, #0]
    pHandle->txLength = 0;
 8002daa:	81c1      	strh	r1, [r0, #14]
  uint8_t retVal = MCP_CMD_OK;
 8002dac:	9105      	str	r1, [sp, #20]
      number_of_item ++;
      dataElementID = (uint16_t *) rxData;
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
      rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data

      regID = *dataElementID & REG_MASK;
 8002dae:	3107      	adds	r1, #7
 8002db0:	468a      	mov	sl, r1
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
        /* Prepare next data*/
        rxLength = (int16_t) (rxLength - size);
        rxData = rxData+size;
        /* If there is only one CMD in the buffer, we do not store the result */
        if ((1U == number_of_item) && (0 == rxLength))
 8002db2:	2101      	movs	r1, #1
 8002db4:	1b09      	subs	r1, r1, r4
 8002db6:	9102      	str	r1, [sp, #8]
    while (rxLength > 0)
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	dd3e      	ble.n	8002e3a <RI_SetRegCommandParser+0xc2>
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8002dbc:	3b02      	subs	r3, #2
      rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
 8002dbe:	1c97      	adds	r7, r2, #2
      regID = *dataElementID & REG_MASK;
 8002dc0:	8812      	ldrh	r2, [r2, #0]
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8002dc2:	b299      	uxth	r1, r3
      motorID = (uint8_t)((*dataElementID & MOTOR_MASK));
 8002dc4:	4656      	mov	r6, sl
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8002dc6:	4688      	mov	r8, r1
      regID = *dataElementID & REG_MASK;
 8002dc8:	0010      	movs	r0, r2
 8002dca:	4651      	mov	r1, sl
      motorID = (uint8_t)((*dataElementID & MOTOR_MASK));
 8002dcc:	4016      	ands	r6, r2
 8002dce:	46b4      	mov	ip, r6
      regID = *dataElementID & REG_MASK;
 8002dd0:	4388      	bics	r0, r1
      if (motorID > NBR_OF_MOTORS)
 8002dd2:	2606      	movs	r6, #6
      typeID = (uint8_t)*dataElementID & TYPE_MASK;
 8002dd4:	2138      	movs	r1, #56	@ 0x38
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8002dd6:	b21b      	sxth	r3, r3
      typeID = (uint8_t)*dataElementID & TYPE_MASK;
 8002dd8:	4011      	ands	r1, r2
      if (motorID > NBR_OF_MOTORS)
 8002dda:	4232      	tst	r2, r6
 8002ddc:	d13e      	bne.n	8002e5c <RI_SetRegCommandParser+0xe4>
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 8002dde:	4662      	mov	r2, ip
 8002de0:	2610      	movs	r6, #16
 8002de2:	9300      	str	r3, [sp, #0]
 8002de4:	ab04      	add	r3, sp, #16
 8002de6:	0092      	lsls	r2, r2, #2
 8002de8:	199b      	adds	r3, r3, r6
 8002dea:	589b      	ldr	r3, [r3, r2]
 8002dec:	003a      	movs	r2, r7
 8002dee:	469b      	mov	fp, r3
 8002df0:	002b      	movs	r3, r5
 8002df2:	47d8      	blx	fp
        rxLength = (int16_t) (rxLength - size);
 8002df4:	4643      	mov	r3, r8
        if ((1U == number_of_item) && (0 == rxLength))
 8002df6:	9902      	ldr	r1, [sp, #8]
        rxLength = (int16_t) (rxLength - size);
 8002df8:	882a      	ldrh	r2, [r5, #0]
        if ((1U == number_of_item) && (0 == rxLength))
 8002dfa:	1861      	adds	r1, r4, r1
        rxLength = (int16_t) (rxLength - size);
 8002dfc:	1a9b      	subs	r3, r3, r2
        if ((1U == number_of_item) && (0 == rxLength))
 8002dfe:	b2c9      	uxtb	r1, r1
        rxLength = (int16_t) (rxLength - size);
 8002e00:	b21b      	sxth	r3, r3
        rxData = rxData+size;
 8002e02:	18ba      	adds	r2, r7, r2
        if ((1U == number_of_item) && (0 == rxLength))
 8002e04:	2901      	cmp	r1, #1
 8002e06:	d025      	beq.n	8002e54 <RI_SetRegCommandParser+0xdc>
        {
          retVal = accessResult;
        }
        else
        {/* Store the result for each access to be able to report failing access */
          if (txSyncFreeSpace !=0 )
 8002e08:	9e04      	ldr	r6, [sp, #16]
 8002e0a:	9903      	ldr	r1, [sp, #12]
 8002e0c:	46b4      	mov	ip, r6
 8002e0e:	4461      	add	r1, ip
 8002e10:	b289      	uxth	r1, r1
 8002e12:	b2a7      	uxth	r7, r4
 8002e14:	42b9      	cmp	r1, r7
 8002e16:	d024      	beq.n	8002e62 <RI_SetRegCommandParser+0xea>
          {
            *txData = accessResult;
            txData = txData+1;
            pHandle->txLength++;
 8002e18:	4649      	mov	r1, r9
 8002e1a:	464e      	mov	r6, r9
            *txData = accessResult;
 8002e1c:	7020      	strb	r0, [r4, #0]
            pHandle->txLength++;
 8002e1e:	89c9      	ldrh	r1, [r1, #14]
            txData = txData+1;
 8002e20:	3401      	adds	r4, #1
            pHandle->txLength++;
 8002e22:	3101      	adds	r1, #1
 8002e24:	81f1      	strh	r1, [r6, #14]
            txSyncFreeSpace--; /* decrement one by one no wraparound possible */
            retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8002e26:	2800      	cmp	r0, #0
 8002e28:	d0c6      	beq.n	8002db8 <RI_SetRegCommandParser+0x40>
            if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 8002e2a:	2807      	cmp	r0, #7
 8002e2c:	d016      	beq.n	8002e5c <RI_SetRegCommandParser+0xe4>
 8002e2e:	280a      	cmp	r0, #10
 8002e30:	d014      	beq.n	8002e5c <RI_SetRegCommandParser+0xe4>
 8002e32:	2101      	movs	r1, #1
 8002e34:	9105      	str	r1, [sp, #20]
    while (rxLength > 0)
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	dcc0      	bgt.n	8002dbc <RI_SetRegCommandParser+0x44>
          }
        }
      }
    }
    /* If all accesses are fine, just one global MCP_CMD_OK is required*/
    if (MCP_CMD_OK == retVal)
 8002e3a:	9b05      	ldr	r3, [sp, #20]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d101      	bne.n	8002e44 <RI_SetRegCommandParser+0xcc>
    {
      pHandle->txLength = 0;
 8002e40:	464a      	mov	r2, r9
 8002e42:	81d3      	strh	r3, [r2, #14]
    }
  #ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 8002e44:	9805      	ldr	r0, [sp, #20]
 8002e46:	b00b      	add	sp, #44	@ 0x2c
 8002e48:	bcf0      	pop	{r4, r5, r6, r7}
 8002e4a:	46bb      	mov	fp, r7
 8002e4c:	46b2      	mov	sl, r6
 8002e4e:	46a9      	mov	r9, r5
 8002e50:	46a0      	mov	r8, r4
 8002e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((1U == number_of_item) && (0 == rxLength))
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1d7      	bne.n	8002e08 <RI_SetRegCommandParser+0x90>
 8002e58:	9005      	str	r0, [sp, #20]
 8002e5a:	e7ee      	b.n	8002e3a <RI_SetRegCommandParser+0xc2>
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	9305      	str	r3, [sp, #20]
  return (retVal);
 8002e60:	e7f0      	b.n	8002e44 <RI_SetRegCommandParser+0xcc>
            retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002e62:	2308      	movs	r3, #8
 8002e64:	9305      	str	r3, [sp, #20]
 8002e66:	e7ed      	b.n	8002e44 <RI_SetRegCommandParser+0xcc>
 8002e68:	08004459 	.word	0x08004459
 8002e6c:	08004509 	.word	0x08004509

08002e70 <RI_GetRegCommandParser>:
  * @param  txSyncFreeSpace Space available for synchronous transmission
  *
  * @retval Returns #MCP_CMD_OK if the command is acknowledged and #MCP_CMD_NOK if not.
  */
uint8_t RI_GetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 8002e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e72:	4645      	mov	r5, r8
 8002e74:	4657      	mov	r7, sl
 8002e76:	464e      	mov	r6, r9
 8002e78:	46de      	mov	lr, fp
 8002e7a:	b5e0      	push	{r5, r6, r7, lr}
  else
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
    uint8_t * txData = pHandle->txBuffer;
 8002e7c:	6883      	ldr	r3, [r0, #8]
{
 8002e7e:	b089      	sub	sp, #36	@ 0x24
    uint8_t * txData = pHandle->txBuffer;
 8002e80:	4698      	mov	r8, r3
    uint16_t size = 0U;
 8002e82:	ab02      	add	r3, sp, #8
 8002e84:	469c      	mov	ip, r3
 8002e86:	250e      	movs	r5, #14
 8002e88:	2300      	movs	r3, #0
{
 8002e8a:	0006      	movs	r6, r0
    uint16_t size = 0U;
 8002e8c:	4465      	add	r5, ip
    uint16_t rxLength = pHandle->rxLength;
    int16_t freeSpaceS16 = (int16_t) txSyncFreeSpace;
 8002e8e:	b20c      	sxth	r4, r1

    uint16_t regID;
    uint8_t typeID;
    uint8_t motorID;
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
 8002e90:	4920      	ldr	r1, [pc, #128]	@ (8002f14 <RI_GetRegCommandParser+0xa4>)
    uint16_t size = 0U;
 8002e92:	802b      	strh	r3, [r5, #0]
    uint8_t * rxData = pHandle->rxBuffer;
 8002e94:	6847      	ldr	r7, [r0, #4]
    uint16_t rxLength = pHandle->rxLength;
 8002e96:	8980      	ldrh	r0, [r0, #12]
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
 8002e98:	9106      	str	r1, [sp, #24]
 8002e9a:	491f      	ldr	r1, [pc, #124]	@ (8002f18 <RI_GetRegCommandParser+0xa8>)
    pHandle->txLength = 0;
 8002e9c:	81f3      	strh	r3, [r6, #14]
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
 8002e9e:	9107      	str	r1, [sp, #28]
    while (rxLength > 0U)
 8002ea0:	2800      	cmp	r0, #0
 8002ea2:	d02e      	beq.n	8002f02 <RI_GetRegCommandParser+0x92>
    {
      dataElementID = (uint16_t *) rxData;
      rxLength = rxLength - MCP_ID_SIZE;
      rxData = rxData + MCP_ID_SIZE; // Shift buffer to the next MCP_ID

      regID = *dataElementID & REG_MASK;
 8002ea4:	3307      	adds	r3, #7
    while (rxLength > 0U)
 8002ea6:	1838      	adds	r0, r7, r0
      regID = *dataElementID & REG_MASK;
 8002ea8:	4699      	mov	r9, r3
    while (rxLength > 0U)
 8002eaa:	b283      	uxth	r3, r0
 8002eac:	469a      	mov	sl, r3
 8002eae:	0023      	movs	r3, r4
 8002eb0:	9603      	str	r6, [sp, #12]
 8002eb2:	4644      	mov	r4, r8
 8002eb4:	4698      	mov	r8, r3
 8002eb6:	e01a      	b.n	8002eee <RI_GetRegCommandParser+0x7e>
        retVal = MCP_CMD_NOK;
        rxLength = 0;
      }
      else
      {
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8002eb8:	4643      	mov	r3, r8
 8002eba:	360a      	adds	r6, #10
 8002ebc:	9300      	str	r3, [sp, #0]
 8002ebe:	ab02      	add	r3, sp, #8
 8002ec0:	0092      	lsls	r2, r2, #2
 8002ec2:	199b      	adds	r3, r3, r6
 8002ec4:	589b      	ldr	r3, [r3, r2]
 8002ec6:	0022      	movs	r2, r4
 8002ec8:	469b      	mov	fp, r3
 8002eca:	002b      	movs	r3, r5
 8002ecc:	47d8      	blx	fp
        if (retVal == MCP_CMD_OK )
 8002ece:	2800      	cmp	r0, #0
 8002ed0:	d118      	bne.n	8002f04 <RI_GetRegCommandParser+0x94>
        {
          /* Prepare next data */
          txData = txData+size;
          pHandle->txLength += size;
 8002ed2:	9903      	ldr	r1, [sp, #12]
          txData = txData+size;
 8002ed4:	882b      	ldrh	r3, [r5, #0]
          pHandle->txLength += size;
 8002ed6:	89ca      	ldrh	r2, [r1, #14]
          txData = txData+size;
 8002ed8:	18e4      	adds	r4, r4, r3
          pHandle->txLength += size;
 8002eda:	189a      	adds	r2, r3, r2
 8002edc:	81ca      	strh	r2, [r1, #14]
          freeSpaceS16 = freeSpaceS16-size;
 8002ede:	4642      	mov	r2, r8
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	b21b      	sxth	r3, r3
    while (rxLength > 0U)
 8002ee4:	3702      	adds	r7, #2
          freeSpaceS16 = freeSpaceS16-size;
 8002ee6:	4698      	mov	r8, r3
    while (rxLength > 0U)
 8002ee8:	b2bb      	uxth	r3, r7
 8002eea:	459a      	cmp	sl, r3
 8002eec:	d00a      	beq.n	8002f04 <RI_GetRegCommandParser+0x94>
      regID = *dataElementID & REG_MASK;
 8002eee:	883b      	ldrh	r3, [r7, #0]
 8002ef0:	464a      	mov	r2, r9
 8002ef2:	0018      	movs	r0, r3
      typeID = (uint8_t)*dataElementID & TYPE_MASK;
 8002ef4:	2138      	movs	r1, #56	@ 0x38
      if (motorID > NBR_OF_MOTORS)
 8002ef6:	2606      	movs	r6, #6
      regID = *dataElementID & REG_MASK;
 8002ef8:	4390      	bics	r0, r2
      typeID = (uint8_t)*dataElementID & TYPE_MASK;
 8002efa:	4019      	ands	r1, r3
      motorID = (uint8_t)((*dataElementID & MOTOR_MASK));
 8002efc:	401a      	ands	r2, r3
      if (motorID > NBR_OF_MOTORS)
 8002efe:	4233      	tst	r3, r6
 8002f00:	d0da      	beq.n	8002eb8 <RI_GetRegCommandParser+0x48>
  uint8_t retVal = MCP_CMD_NOK;
 8002f02:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 8002f04:	b009      	add	sp, #36	@ 0x24
 8002f06:	bcf0      	pop	{r4, r5, r6, r7}
 8002f08:	46bb      	mov	fp, r7
 8002f0a:	46b2      	mov	sl, r6
 8002f0c:	46a9      	mov	r9, r5
 8002f0e:	46a0      	mov	r8, r4
 8002f10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f12:	46c0      	nop			@ (mov r8, r8)
 8002f14:	080046d9 	.word	0x080046d9
 8002f18:	08004785 	.word	0x08004785

08002f1c <MCP_ReceivedPacket>:
  * @brief  Parses the header from the received packet and call the required function depending on the command sent by the controller device.
  *
  * @param  pHandle Handler of the current instance of the MCP component
  */
void MCP_ReceivedPacket(MCP_Handle_t *pHandle)
{
 8002f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f1e:	464f      	mov	r7, r9
 8002f20:	4646      	mov	r6, r8
 8002f22:	46d6      	mov	lr, sl
 8002f24:	0004      	movs	r4, r0
 8002f26:	b5c0      	push	{r6, r7, lr}
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;

    /* Commands requiering payload response must be aware of space available for the payload */
    /* Last byte is reserved for MCP response*/
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8002f28:	6822      	ldr	r2, [r4, #0]
    packetHeader = (uint16_t *)pHandle->rxBuffer; //cstat !MISRAC2012-Rule-11.3
 8002f2a:	6845      	ldr	r5, [r0, #4]
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8002f2c:	8992      	ldrh	r2, [r2, #12]
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8002f2e:	882b      	ldrh	r3, [r5, #0]
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8002f30:	3a01      	subs	r2, #1
 8002f32:	b291      	uxth	r1, r2
 8002f34:	b212      	sxth	r2, r2
 8002f36:	4692      	mov	sl, r2
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8002f38:	2280      	movs	r2, #128	@ 0x80
 8002f3a:	0052      	lsls	r2, r2, #1
 8002f3c:	4694      	mov	ip, r2
 8002f3e:	3a01      	subs	r2, #1
 8002f40:	4690      	mov	r8, r2
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8002f42:	2707      	movs	r7, #7
 8002f44:	001e      	movs	r6, r3
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8002f46:	4689      	mov	r9, r1
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8002f48:	001a      	movs	r2, r3
 8002f4a:	4641      	mov	r1, r8
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8002f4c:	8980      	ldrh	r0, [r0, #12]
{
 8002f4e:	b082      	sub	sp, #8
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8002f50:	3802      	subs	r0, #2
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8002f52:	43be      	bics	r6, r7
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8002f54:	b280      	uxth	r0, r0
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 8002f56:	3502      	adds	r5, #2
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8002f58:	438a      	bics	r2, r1
 8002f5a:	4562      	cmp	r2, ip
 8002f5c:	d01c      	beq.n	8002f98 <MCP_ReceivedPacket+0x7c>
    motorID = (uint8_t)((*packetHeader - 1U) & MOTOR_MASK);
 8002f5e:	3b01      	subs	r3, #1
    MCI_Handle_t *pMCI = &Mci[motorID];
 8002f60:	403b      	ands	r3, r7
 8002f62:	272c      	movs	r7, #44	@ 0x2c
 8002f64:	437b      	muls	r3, r7
 8002f66:	4f44      	ldr	r7, [pc, #272]	@ (8003078 <MCP_ReceivedPacket+0x15c>)
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8002f68:	81a0      	strh	r0, [r4, #12]
    MCI_Handle_t *pMCI = &Mci[motorID];
 8002f6a:	19df      	adds	r7, r3, r7

    /* Initialization of the tx length, command which send back data has to increment the txLength
     * (case of Read register) */
    pHandle->txLength = 0U;
 8002f6c:	2300      	movs	r3, #0
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 8002f6e:	6065      	str	r5, [r4, #4]
    pHandle->txLength = 0U;
 8002f70:	81e3      	strh	r3, [r4, #14]

    switch (command)
 8002f72:	2e38      	cmp	r6, #56	@ 0x38
 8002f74:	d81a      	bhi.n	8002fac <MCP_ReceivedPacket+0x90>
 8002f76:	4b41      	ldr	r3, [pc, #260]	@ (800307c <MCP_ReceivedPacket+0x160>)
 8002f78:	00b6      	lsls	r6, r6, #2
 8002f7a:	599b      	ldr	r3, [r3, r6]
 8002f7c:	469f      	mov	pc, r3
 8002f7e:	2300      	movs	r3, #0
 8002f80:	2002      	movs	r0, #2
      {
        MCPResponse = MCP_CMD_UNKNOWN;
        break;
      }
    }
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002f82:	68a2      	ldr	r2, [r4, #8]
 8002f84:	54d0      	strb	r0, [r2, r3]
    pHandle->txLength++;
 8002f86:	89e3      	ldrh	r3, [r4, #14]
 8002f88:	3301      	adds	r3, #1
 8002f8a:	81e3      	strh	r3, [r4, #14]
#ifdef NULL_PTR_CHECK_MCP
  }
#endif
}
 8002f8c:	b002      	add	sp, #8
 8002f8e:	bce0      	pop	{r5, r6, r7}
 8002f90:	46ba      	mov	sl, r7
 8002f92:	46b1      	mov	r9, r6
 8002f94:	46a8      	mov	r8, r5
 8002f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    pHandle->txLength = 0U;
 8002f98:	2300      	movs	r3, #0
      userCommand = ((uint8_t)(command & 0xF8U) >> 3U);
 8002f9a:	b2f6      	uxtb	r6, r6
 8002f9c:	08f1      	lsrs	r1, r6, #3
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8002f9e:	81a0      	strh	r0, [r4, #12]
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 8002fa0:	6065      	str	r5, [r4, #4]
    pHandle->txLength = 0U;
 8002fa2:	81e3      	strh	r3, [r4, #14]
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 8002fa4:	2e0f      	cmp	r6, #15
 8002fa6:	d952      	bls.n	800304e <MCP_ReceivedPacket+0x132>
          MCPResponse = MCP_ERROR_CALLBACK_NOT_REGISTRED;
 8002fa8:	200d      	movs	r0, #13
 8002faa:	e7ea      	b.n	8002f82 <MCP_ReceivedPacket+0x66>
    switch (command)
 8002fac:	2e68      	cmp	r6, #104	@ 0x68
 8002fae:	d008      	beq.n	8002fc2 <MCP_ReceivedPacket+0xa6>
 8002fb0:	d846      	bhi.n	8003040 <MCP_ReceivedPacket+0x124>
 8002fb2:	2e48      	cmp	r6, #72	@ 0x48
 8002fb4:	d1e3      	bne.n	8002f7e <MCP_ReceivedPacket+0x62>
        MCI_Clear_Iqdref(pMCI);
 8002fb6:	0038      	movs	r0, r7
 8002fb8:	f7ff fa1a 	bl	80023f0 <MCI_Clear_Iqdref>
        MCPResponse = MCP_CMD_OK;
 8002fbc:	2000      	movs	r0, #0
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002fbe:	89e3      	ldrh	r3, [r4, #14]
        break;
 8002fc0:	e7df      	b.n	8002f82 <MCP_ReceivedPacket+0x66>
        MCPResponse = MC_ProfilerCommand(pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength,
 8002fc2:	68a3      	ldr	r3, [r4, #8]
 8002fc4:	4652      	mov	r2, sl
 8002fc6:	9300      	str	r3, [sp, #0]
 8002fc8:	0023      	movs	r3, r4
 8002fca:	0029      	movs	r1, r5
 8002fcc:	330e      	adds	r3, #14
 8002fce:	f7ff f8d7 	bl	8002180 <MC_ProfilerCommand>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002fd2:	89e3      	ldrh	r3, [r4, #14]
        break;
 8002fd4:	e7d5      	b.n	8002f82 <MCP_ReceivedPacket+0x66>
        if (IDLE == MCI_GetSTMState(pMCI))
 8002fd6:	0038      	movs	r0, r7
 8002fd8:	f7ff f96e 	bl	80022b8 <MCI_GetSTMState>
 8002fdc:	2800      	cmp	r0, #0
 8002fde:	d005      	beq.n	8002fec <MCP_ReceivedPacket+0xd0>
          (void)MCI_StopMotor(pMCI);
 8002fe0:	0038      	movs	r0, r7
 8002fe2:	f7ff f98b 	bl	80022fc <MCI_StopMotor>
        MCPResponse = MCP_CMD_OK;
 8002fe6:	2000      	movs	r0, #0
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002fe8:	89e3      	ldrh	r3, [r4, #14]
 8002fea:	e7ca      	b.n	8002f82 <MCP_ReceivedPacket+0x66>
          MCPResponse = (MCI_StartMotor(pMCI) == true) ? MCP_CMD_OK : MCP_CMD_NOK;
 8002fec:	0038      	movs	r0, r7
 8002fee:	f7ff f96b 	bl	80022c8 <MCI_StartMotor>
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	4058      	eors	r0, r3
 8002ff6:	b2c0      	uxtb	r0, r0
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002ff8:	89e3      	ldrh	r3, [r4, #14]
 8002ffa:	e7c2      	b.n	8002f82 <MCP_ReceivedPacket+0x66>
        MCPResponse = RI_GetRegCommandParser(pHandle, (uint16_t)txSyncFreeSpace);
 8002ffc:	4649      	mov	r1, r9
 8002ffe:	0020      	movs	r0, r4
 8003000:	f7ff ff36 	bl	8002e70 <RI_GetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8003004:	89e3      	ldrh	r3, [r4, #14]
        break;
 8003006:	e7bc      	b.n	8002f82 <MCP_ReceivedPacket+0x66>
        if (RUN == MCI_GetSTMState(pMCI))
 8003008:	0038      	movs	r0, r7
 800300a:	f7ff f955 	bl	80022b8 <MCI_GetSTMState>
 800300e:	2806      	cmp	r0, #6
 8003010:	d02b      	beq.n	800306a <MCP_ReceivedPacket+0x14e>
        MCPResponse = MCP_CMD_OK;
 8003012:	2000      	movs	r0, #0
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8003014:	89e3      	ldrh	r3, [r4, #14]
 8003016:	e7b4      	b.n	8002f82 <MCP_ReceivedPacket+0x66>
        (void)MCI_FaultAcknowledged(pMCI);
 8003018:	0038      	movs	r0, r7
 800301a:	f7ff f98f 	bl	800233c <MCI_FaultAcknowledged>
        MCPResponse = MCP_CMD_OK;
 800301e:	2000      	movs	r0, #0
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8003020:	89e3      	ldrh	r3, [r4, #14]
        break;
 8003022:	e7ae      	b.n	8002f82 <MCP_ReceivedPacket+0x66>
        pHandle->txLength = 4U;
 8003024:	2304      	movs	r3, #4
        *pHandle->txBuffer = MCP_VERSION;
 8003026:	2201      	movs	r2, #1
        pHandle->txLength = 4U;
 8003028:	81e3      	strh	r3, [r4, #14]
        *pHandle->txBuffer = MCP_VERSION;
 800302a:	68a3      	ldr	r3, [r4, #8]
        MCPResponse = MCP_CMD_OK;
 800302c:	2000      	movs	r0, #0
        *pHandle->txBuffer = MCP_VERSION;
 800302e:	701a      	strb	r2, [r3, #0]
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8003030:	89e3      	ldrh	r3, [r4, #14]
        break;
 8003032:	e7a6      	b.n	8002f82 <MCP_ReceivedPacket+0x66>
        MCPResponse = RI_SetRegCommandParser(pHandle, (uint16_t)txSyncFreeSpace);
 8003034:	4649      	mov	r1, r9
 8003036:	0020      	movs	r0, r4
 8003038:	f7ff fe9e 	bl	8002d78 <RI_SetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800303c:	89e3      	ldrh	r3, [r4, #14]
        break;
 800303e:	e7a0      	b.n	8002f82 <MCP_ReceivedPacket+0x66>
    switch (command)
 8003040:	2e78      	cmp	r6, #120	@ 0x78
 8003042:	d19c      	bne.n	8002f7e <MCP_ReceivedPacket+0x62>
        HAL_NVIC_SystemReset();
 8003044:	f002 f84a 	bl	80050dc <HAL_NVIC_SystemReset>
        MCPResponse = MCP_CMD_OK;
 8003048:	2000      	movs	r0, #0
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800304a:	89e3      	ldrh	r3, [r4, #14]
        break;
 800304c:	e799      	b.n	8002f82 <MCP_ReceivedPacket+0x66>
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 800304e:	4b0c      	ldr	r3, [pc, #48]	@ (8003080 <MCP_ReceivedPacket+0x164>)
 8003050:	0089      	lsls	r1, r1, #2
 8003052:	58ce      	ldr	r6, [r1, r3]
 8003054:	2e00      	cmp	r6, #0
 8003056:	d00c      	beq.n	8003072 <MCP_ReceivedPacket+0x156>
          MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace,
 8003058:	68a3      	ldr	r3, [r4, #8]
 800305a:	4652      	mov	r2, sl
 800305c:	9300      	str	r3, [sp, #0]
 800305e:	0023      	movs	r3, r4
 8003060:	0029      	movs	r1, r5
 8003062:	330e      	adds	r3, #14
 8003064:	47b0      	blx	r6
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8003066:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace,
 8003068:	e78b      	b.n	8002f82 <MCP_ReceivedPacket+0x66>
          MCI_StopRamp(pMCI);
 800306a:	0038      	movs	r0, r7
 800306c:	f7ff f98a 	bl	8002384 <MCI_StopRamp>
 8003070:	e7cf      	b.n	8003012 <MCP_ReceivedPacket+0xf6>
 8003072:	2300      	movs	r3, #0
          MCPResponse = MCP_ERROR_CALLBACK_NOT_REGISTRED;
 8003074:	200d      	movs	r0, #13
 8003076:	e784      	b.n	8002f82 <MCP_ReceivedPacket+0x66>
 8003078:	20000000 	.word	0x20000000
 800307c:	08006158 	.word	0x08006158
 8003080:	20000430 	.word	0x20000430

08003084 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 8003084:	b510      	push	{r4, lr}
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  (void)HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / SYS_TICK_FREQUENCY);
 8003086:	f002 f85d 	bl	8005144 <HAL_RCC_GetHCLKFreq>
 800308a:	21fa      	movs	r1, #250	@ 0xfa
 800308c:	00c9      	lsls	r1, r1, #3
 800308e:	f7fd f83b 	bl	8000108 <__udivsi3>
 8003092:	f002 f831 	bl	80050f8 <HAL_SYSTICK_Config>
  HAL_NVIC_SetPriority(SysTick_IRQn, uwTickPrio, 0U);
 8003096:	2001      	movs	r0, #1
 8003098:	4b05      	ldr	r3, [pc, #20]	@ (80030b0 <MX_MotorControl_Init+0x2c>)
 800309a:	2200      	movs	r2, #0
 800309c:	6819      	ldr	r1, [r3, #0]
 800309e:	4240      	negs	r0, r0
 80030a0:	f001 fff2 	bl	8005088 <HAL_NVIC_SetPriority>

  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI);
 80030a4:	4803      	ldr	r0, [pc, #12]	@ (80030b4 <MX_MotorControl_Init+0x30>)
 80030a6:	f7ff fa8f 	bl	80025c8 <MCboot>
  mc_lock_pins();
 80030aa:	f7ff fb5f 	bl	800276c <mc_lock_pins>
}
 80030ae:	bd10      	pop	{r4, pc}
 80030b0:	200003d0 	.word	0x200003d0
 80030b4:	20000544 	.word	0x20000544

080030b8 <waitForPolarizationEnd>:
  * @param  repCnt Repetition counter value.
  * @param  cnt Polarization counter value.
  */
//cstat !MISRAC2012-Rule-8.13
__weak void waitForPolarizationEnd(TIM_TypeDef *TIMx, uint16_t  *SWerror, uint8_t repCnt, volatile uint8_t *cnt)
{
 80030b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80030ba:	2703      	movs	r7, #3
  {
#endif
    uint16_t hCalibrationPeriodCounter;
    uint16_t hMaxPeriodsNumber;

    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 80030bc:	3201      	adds	r2, #1
 80030be:	0856      	lsrs	r6, r2, #1
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 80030c0:	2502      	movs	r5, #2

    /* Wait for NB_CONVERSIONS to be executed */
    LL_TIM_ClearFlag_CC1(TIMx);
    hCalibrationPeriodCounter = 0u;
 80030c2:	2200      	movs	r2, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80030c4:	427f      	negs	r7, r7
    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 80030c6:	0176      	lsls	r6, r6, #5
 80030c8:	6107      	str	r7, [r0, #16]
    while (*cnt < NB_CONVERSIONS)
 80030ca:	781c      	ldrb	r4, [r3, #0]
 80030cc:	2c0f      	cmp	r4, #15
 80030ce:	d80c      	bhi.n	80030ea <waitForPolarizationEnd+0x32>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 80030d0:	6904      	ldr	r4, [r0, #16]
 80030d2:	4225      	tst	r5, r4
 80030d4:	d0f9      	beq.n	80030ca <waitForPolarizationEnd+0x12>
    {
      if ((uint32_t)ERROR == LL_TIM_IsActiveFlag_CC1(TIMx))
      {
        LL_TIM_ClearFlag_CC1(TIMx);
        hCalibrationPeriodCounter++;
 80030d6:	3201      	adds	r2, #1
 80030d8:	b292      	uxth	r2, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80030da:	6107      	str	r7, [r0, #16]
        if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 80030dc:	4296      	cmp	r6, r2
 80030de:	d8f4      	bhi.n	80030ca <waitForPolarizationEnd+0x12>
        {
          if (*cnt < NB_CONVERSIONS)
 80030e0:	781c      	ldrb	r4, [r3, #0]
 80030e2:	2c0f      	cmp	r4, #15
 80030e4:	d8f1      	bhi.n	80030ca <waitForPolarizationEnd+0x12>
          {
            *SWerror = 1u;
 80030e6:	2301      	movs	r3, #1
 80030e8:	800b      	strh	r3, [r1, #0]
      }
    }
#ifdef NULL_PTR_CHECK_POW_COM
  }
#endif
  }
 80030ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080030ec <PWMC_SetPhaseVoltage>:
  * @param  Valfa_beta: Voltage Components expressed in the @f$(\alpha, \beta)@f$ reference frame.
  * @retval #MC_NO_ERROR if no error occurred or #MC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage(PWMC_Handle_t *pHandle, alphabeta_t Valfa_beta)
{
 80030ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030ee:	46c6      	mov	lr, r8
    int32_t wUBeta;
    int32_t wTimePhA;
    int32_t wTimePhB;
    int32_t wTimePhC;

    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 80030f0:	224e      	movs	r2, #78	@ 0x4e
{
 80030f2:	b500      	push	{lr}
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 80030f4:	5a84      	ldrh	r4, [r0, r2]
 80030f6:	b20b      	sxth	r3, r1
 80030f8:	435c      	muls	r4, r3
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 80030fa:	2370      	movs	r3, #112	@ 0x70
 80030fc:	5ac2      	ldrh	r2, [r0, r3]
 80030fe:	1409      	asrs	r1, r1, #16
 8003100:	4351      	muls	r1, r2
 8003102:	004b      	lsls	r3, r1, #1
 8003104:	425e      	negs	r6, r3

    wX = wUBeta;
    wY = (wUBeta + wUAlpha) / 2;
 8003106:	1ae3      	subs	r3, r4, r3
 8003108:	0fd9      	lsrs	r1, r3, #31
 800310a:	18c9      	adds	r1, r1, r3
    wZ = (wUBeta - wUAlpha) / 2;
 800310c:	1b34      	subs	r4, r6, r4
    wY = (wUBeta + wUAlpha) / 2;
 800310e:	104d      	asrs	r5, r1, #1
    wZ = (wUBeta - wUAlpha) / 2;
 8003110:	0fe1      	lsrs	r1, r4, #31
 8003112:	1909      	adds	r1, r1, r4
{
 8003114:	b082      	sub	sp, #8
    wZ = (wUBeta - wUAlpha) / 2;
 8003116:	1049      	asrs	r1, r1, #1
    if (wY < 0)
    {
      if (wZ < 0)
      {
        pHandle->Sector = SECTOR_5;
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8003118:	0892      	lsrs	r2, r2, #2
    if (wY < 0)
 800311a:	1c5f      	adds	r7, r3, #1
 800311c:	db5a      	blt.n	80031d4 <PWMC_SetPhaseVoltage+0xe8>
        }
        }
    }
    else /* wY > 0 */
    {
      if (wZ >= 0)
 800311e:	1c67      	adds	r7, r4, #1
 8003120:	db37      	blt.n	8003192 <PWMC_SetPhaseVoltage+0xa6>
      {
        pHandle->Sector = SECTOR_2;
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8003122:	1a69      	subs	r1, r5, r1
 8003124:	17cd      	asrs	r5, r1, #31
 8003126:	03ad      	lsls	r5, r5, #14
 8003128:	0bad      	lsrs	r5, r5, #14
 800312a:	1869      	adds	r1, r5, r1
 800312c:	1489      	asrs	r1, r1, #18
        pHandle->Sector = SECTOR_2;
 800312e:	267a      	movs	r6, #122	@ 0x7a
 8003130:	2701      	movs	r7, #1
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8003132:	188a      	adds	r2, r1, r2
        wTimePhB = wTimePhA + (wZ / 131072);
        wTimePhC = wTimePhA - (wY / 131072);

        if(true == pHandle->SingleShuntTopology)
 8003134:	2185      	movs	r1, #133	@ 0x85
        wTimePhB = wTimePhA + (wZ / 131072);
 8003136:	17e5      	asrs	r5, r4, #31
 8003138:	03ad      	lsls	r5, r5, #14
 800313a:	0bad      	lsrs	r5, r5, #14
 800313c:	192d      	adds	r5, r5, r4
        wTimePhC = wTimePhA - (wY / 131072);
 800313e:	17dc      	asrs	r4, r3, #31
 8003140:	03a4      	lsls	r4, r4, #14
        pHandle->Sector = SECTOR_2;
 8003142:	5587      	strb	r7, [r0, r6]
        wTimePhC = wTimePhA - (wY / 131072);
 8003144:	0ba4      	lsrs	r4, r4, #14
 8003146:	18e3      	adds	r3, r4, r3
        if(true == pHandle->SingleShuntTopology)
 8003148:	5c41      	ldrb	r1, [r0, r1]
        wTimePhB = wTimePhA + (wZ / 131072);
 800314a:	14ad      	asrs	r5, r5, #18
        wTimePhC = wTimePhA - (wY / 131072);
 800314c:	149b      	asrs	r3, r3, #18
        wTimePhB = wTimePhA + (wZ / 131072);
 800314e:	18ad      	adds	r5, r5, r2
        wTimePhC = wTimePhA - (wY / 131072);
 8003150:	1ad3      	subs	r3, r2, r3
        if(true == pHandle->SingleShuntTopology)
 8003152:	2900      	cmp	r1, #0
 8003154:	d15e      	bne.n	8003214 <PWMC_SetPhaseVoltage+0x128>
          pHandle->midDuty = 0U;
          pHandle->highDuty = 1U;
        }
        else
        {
        pHandle->lowDuty = (uint16_t)wTimePhB;
 8003156:	b2af      	uxth	r7, r5
        pHandle->midDuty = (uint16_t)wTimePhA;
 8003158:	b296      	uxth	r6, r2
        pHandle->highDuty = (uint16_t)wTimePhC;
 800315a:	b29c      	uxth	r4, r3
            pHandle->lowDuty = 0U;
 800315c:	2158      	movs	r1, #88	@ 0x58
 800315e:	5247      	strh	r7, [r0, r1]
            pHandle->midDuty = 1U;
 8003160:	3102      	adds	r1, #2
 8003162:	5246      	strh	r6, [r0, r1]
            pHandle->highDuty = 2U;
 8003164:	3102      	adds	r1, #2
 8003166:	5244      	strh	r4, [r0, r1]
            pHandle->highDuty = (uint16_t)wTimePhC;
        }
        }
    }

    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 8003168:	43d1      	mvns	r1, r2
 800316a:	17c9      	asrs	r1, r1, #31
 800316c:	400a      	ands	r2, r1
 800316e:	2150      	movs	r1, #80	@ 0x50
 8003170:	5242      	strh	r2, [r0, r1]
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 8003172:	43e9      	mvns	r1, r5
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 8003174:	43da      	mvns	r2, r3
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 8003176:	17c9      	asrs	r1, r1, #31
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 8003178:	17d2      	asrs	r2, r2, #31
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 800317a:	400d      	ands	r5, r1
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 800317c:	4013      	ands	r3, r2
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 800317e:	2152      	movs	r1, #82	@ 0x52
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 8003180:	2254      	movs	r2, #84	@ 0x54
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 8003182:	5245      	strh	r5, [r0, r1]
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 8003184:	5283      	strh	r3, [r0, r2]

    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 8003186:	6943      	ldr	r3, [r0, #20]
 8003188:	4798      	blx	r3
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (returnValue);
}
 800318a:	b002      	add	sp, #8
 800318c:	bc80      	pop	{r7}
 800318e:	46b8      	mov	r8, r7
 8003190:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ( wX <= 0 )
 8003192:	2e00      	cmp	r6, #0
 8003194:	dd5f      	ble.n	8003256 <PWMC_SetPhaseVoltage+0x16a>
          pHandle->Sector = SECTOR_1;
 8003196:	237a      	movs	r3, #122	@ 0x7a
 8003198:	2500      	movs	r5, #0
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 800319a:	1a71      	subs	r1, r6, r1
 800319c:	1489      	asrs	r1, r1, #18
 800319e:	188a      	adds	r2, r1, r2
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 80031a0:	217d      	movs	r1, #125	@ 0x7d
          pHandle->Sector = SECTOR_1;
 80031a2:	54c5      	strb	r5, [r0, r3]
          wTimePhB = wTimePhA + (wZ / 131072);
 80031a4:	17e5      	asrs	r5, r4, #31
 80031a6:	03ad      	lsls	r5, r5, #14
          wTimePhC = wTimePhB - (wX / 131072);
 80031a8:	17f3      	asrs	r3, r6, #31
          wTimePhB = wTimePhA + (wZ / 131072);
 80031aa:	0bad      	lsrs	r5, r5, #14
          wTimePhC = wTimePhB - (wX / 131072);
 80031ac:	03db      	lsls	r3, r3, #15
          wTimePhB = wTimePhA + (wZ / 131072);
 80031ae:	192d      	adds	r5, r5, r4
          wTimePhC = wTimePhB - (wX / 131072);
 80031b0:	0bdb      	lsrs	r3, r3, #15
          wTimePhB = wTimePhA + (wZ / 131072);
 80031b2:	14ad      	asrs	r5, r5, #18
          wTimePhC = wTimePhB - (wX / 131072);
 80031b4:	199b      	adds	r3, r3, r6
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 80031b6:	5c41      	ldrb	r1, [r0, r1]
          wTimePhB = wTimePhA + (wZ / 131072);
 80031b8:	18ad      	adds	r5, r5, r2
          wTimePhC = wTimePhB - (wX / 131072);
 80031ba:	145b      	asrs	r3, r3, #17
 80031bc:	1aeb      	subs	r3, r5, r3
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 80031be:	2900      	cmp	r1, #0
 80031c0:	d104      	bne.n	80031cc <PWMC_SetPhaseVoltage+0xe0>
 80031c2:	3185      	adds	r1, #133	@ 0x85
 80031c4:	5c41      	ldrb	r1, [r0, r1]
 80031c6:	2900      	cmp	r1, #0
 80031c8:	d100      	bne.n	80031cc <PWMC_SetPhaseVoltage+0xe0>
 80031ca:	e08b      	b.n	80032e4 <PWMC_SetPhaseVoltage+0x1f8>
 80031cc:	2702      	movs	r7, #2
 80031ce:	2601      	movs	r6, #1
 80031d0:	2400      	movs	r4, #0
 80031d2:	e7c3      	b.n	800315c <PWMC_SetPhaseVoltage+0x70>
        if(true == pHandle->SingleShuntTopology)
 80031d4:	2785      	movs	r7, #133	@ 0x85
 80031d6:	5dc7      	ldrb	r7, [r0, r7]
 80031d8:	46b8      	mov	r8, r7
      if (wZ < 0)
 80031da:	1c67      	adds	r7, r4, #1
 80031dc:	db55      	blt.n	800328a <PWMC_SetPhaseVoltage+0x19e>
        if (wX <= 0)
 80031de:	2e00      	cmp	r6, #0
 80031e0:	dd1c      	ble.n	800321c <PWMC_SetPhaseVoltage+0x130>
          pHandle->Sector = SECTOR_3;
 80031e2:	217a      	movs	r1, #122	@ 0x7a
 80031e4:	2402      	movs	r4, #2
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 80031e6:	1bad      	subs	r5, r5, r6
          pHandle->Sector = SECTOR_3;
 80031e8:	5444      	strb	r4, [r0, r1]
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 80031ea:	17e9      	asrs	r1, r5, #31
 80031ec:	0389      	lsls	r1, r1, #14
 80031ee:	0b89      	lsrs	r1, r1, #14
 80031f0:	1949      	adds	r1, r1, r5
 80031f2:	1489      	asrs	r1, r1, #18
 80031f4:	188a      	adds	r2, r1, r2
          wTimePhC = wTimePhA - (wY / 131072);
 80031f6:	17d9      	asrs	r1, r3, #31
 80031f8:	0389      	lsls	r1, r1, #14
 80031fa:	0b89      	lsrs	r1, r1, #14
 80031fc:	18cb      	adds	r3, r1, r3
          if(true == pHandle->SingleShuntTopology)
 80031fe:	4641      	mov	r1, r8
          wTimePhC = wTimePhA - (wY / 131072);
 8003200:	149b      	asrs	r3, r3, #18
 8003202:	1ad3      	subs	r3, r2, r3
          wTimePhB = wTimePhC + (wX / 131072);
 8003204:	1476      	asrs	r6, r6, #17
 8003206:	18f5      	adds	r5, r6, r3
          if(true == pHandle->SingleShuntTopology)
 8003208:	2900      	cmp	r1, #0
 800320a:	d15f      	bne.n	80032cc <PWMC_SetPhaseVoltage+0x1e0>
          pHandle->lowDuty = (uint16_t)wTimePhB;
 800320c:	b2af      	uxth	r7, r5
          pHandle->midDuty = (uint16_t)wTimePhC;
 800320e:	b29e      	uxth	r6, r3
          pHandle->highDuty = (uint16_t)wTimePhA;
 8003210:	b294      	uxth	r4, r2
 8003212:	e7a3      	b.n	800315c <PWMC_SetPhaseVoltage+0x70>
 8003214:	2702      	movs	r7, #2
 8003216:	2600      	movs	r6, #0
 8003218:	2401      	movs	r4, #1
 800321a:	e79f      	b.n	800315c <PWMC_SetPhaseVoltage+0x70>
          pHandle->Sector = SECTOR_4;
 800321c:	237a      	movs	r3, #122	@ 0x7a
 800321e:	2503      	movs	r5, #3
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8003220:	1a71      	subs	r1, r6, r1
          pHandle->Sector = SECTOR_4;
 8003222:	54c5      	strb	r5, [r0, r3]
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8003224:	17cb      	asrs	r3, r1, #31
 8003226:	039b      	lsls	r3, r3, #14
 8003228:	0b9b      	lsrs	r3, r3, #14
 800322a:	185b      	adds	r3, r3, r1
          if(true == pHandle->SingleShuntTopology)
 800322c:	4641      	mov	r1, r8
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 800322e:	149b      	asrs	r3, r3, #18
          wTimePhB = wTimePhA + (wZ / 131072);
 8003230:	17e5      	asrs	r5, r4, #31
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8003232:	189a      	adds	r2, r3, r2
          wTimePhB = wTimePhA + (wZ / 131072);
 8003234:	03ad      	lsls	r5, r5, #14
          wTimePhC = wTimePhB - (wX / 131072);
 8003236:	17f3      	asrs	r3, r6, #31
          wTimePhB = wTimePhA + (wZ / 131072);
 8003238:	0bad      	lsrs	r5, r5, #14
          wTimePhC = wTimePhB - (wX / 131072);
 800323a:	03db      	lsls	r3, r3, #15
          wTimePhB = wTimePhA + (wZ / 131072);
 800323c:	192d      	adds	r5, r5, r4
          wTimePhC = wTimePhB - (wX / 131072);
 800323e:	0bdb      	lsrs	r3, r3, #15
          wTimePhB = wTimePhA + (wZ / 131072);
 8003240:	14ad      	asrs	r5, r5, #18
          wTimePhC = wTimePhB - (wX / 131072);
 8003242:	199b      	adds	r3, r3, r6
          wTimePhB = wTimePhA + (wZ / 131072);
 8003244:	18ad      	adds	r5, r5, r2
          wTimePhC = wTimePhB - (wX / 131072);
 8003246:	145b      	asrs	r3, r3, #17
 8003248:	1aeb      	subs	r3, r5, r3
          if(true == pHandle->SingleShuntTopology)
 800324a:	2900      	cmp	r1, #0
 800324c:	d046      	beq.n	80032dc <PWMC_SetPhaseVoltage+0x1f0>
 800324e:	2700      	movs	r7, #0
 8003250:	2601      	movs	r6, #1
 8003252:	2402      	movs	r4, #2
 8003254:	e782      	b.n	800315c <PWMC_SetPhaseVoltage+0x70>
          pHandle->Sector = SECTOR_6;
 8003256:	217a      	movs	r1, #122	@ 0x7a
 8003258:	2405      	movs	r4, #5
 800325a:	5444      	strb	r4, [r0, r1]
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 800325c:	1ba9      	subs	r1, r5, r6
 800325e:	1489      	asrs	r1, r1, #18
 8003260:	188a      	adds	r2, r1, r2
          wTimePhC = wTimePhA - (wY / 131072);
 8003262:	17d9      	asrs	r1, r3, #31
 8003264:	0389      	lsls	r1, r1, #14
 8003266:	0b89      	lsrs	r1, r1, #14
 8003268:	18cb      	adds	r3, r1, r3
          if(true == pHandle->SingleShuntTopology)
 800326a:	2185      	movs	r1, #133	@ 0x85
          wTimePhB = wTimePhC + (wX / 131072);
 800326c:	17f5      	asrs	r5, r6, #31
 800326e:	03ed      	lsls	r5, r5, #15
 8003270:	0bed      	lsrs	r5, r5, #15
          wTimePhC = wTimePhA - (wY / 131072);
 8003272:	149b      	asrs	r3, r3, #18
          wTimePhB = wTimePhC + (wX / 131072);
 8003274:	19ad      	adds	r5, r5, r6
          if(true == pHandle->SingleShuntTopology)
 8003276:	5c41      	ldrb	r1, [r0, r1]
          wTimePhC = wTimePhA - (wY / 131072);
 8003278:	1ad3      	subs	r3, r2, r3
          wTimePhB = wTimePhC + (wX / 131072);
 800327a:	146d      	asrs	r5, r5, #17
 800327c:	18ed      	adds	r5, r5, r3
          if(true == pHandle->SingleShuntTopology)
 800327e:	2900      	cmp	r1, #0
 8003280:	d028      	beq.n	80032d4 <PWMC_SetPhaseVoltage+0x1e8>
 8003282:	2701      	movs	r7, #1
 8003284:	2602      	movs	r6, #2
 8003286:	2400      	movs	r4, #0
 8003288:	e768      	b.n	800315c <PWMC_SetPhaseVoltage+0x70>
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 800328a:	1a69      	subs	r1, r5, r1
 800328c:	17cd      	asrs	r5, r1, #31
 800328e:	03ad      	lsls	r5, r5, #14
 8003290:	0bad      	lsrs	r5, r5, #14
 8003292:	1869      	adds	r1, r5, r1
 8003294:	1489      	asrs	r1, r1, #18
 8003296:	188a      	adds	r2, r1, r2
        wTimePhC = wTimePhA - (wY / 131072) ;
 8003298:	17d9      	asrs	r1, r3, #31
 800329a:	0389      	lsls	r1, r1, #14
 800329c:	0b89      	lsrs	r1, r1, #14
 800329e:	18cb      	adds	r3, r1, r3
        pHandle->Sector = SECTOR_5;
 80032a0:	267a      	movs	r6, #122	@ 0x7a
 80032a2:	2704      	movs	r7, #4
        if(true == pHandle->SingleShuntTopology)
 80032a4:	4641      	mov	r1, r8
        wTimePhB = wTimePhA + (wZ / 131072);
 80032a6:	17e5      	asrs	r5, r4, #31
 80032a8:	03ad      	lsls	r5, r5, #14
 80032aa:	0bad      	lsrs	r5, r5, #14
 80032ac:	192d      	adds	r5, r5, r4
 80032ae:	14ad      	asrs	r5, r5, #18
        wTimePhC = wTimePhA - (wY / 131072) ;
 80032b0:	149b      	asrs	r3, r3, #18
        pHandle->Sector = SECTOR_5;
 80032b2:	5587      	strb	r7, [r0, r6]
        wTimePhB = wTimePhA + (wZ / 131072);
 80032b4:	18ad      	adds	r5, r5, r2
        wTimePhC = wTimePhA - (wY / 131072) ;
 80032b6:	1ad3      	subs	r3, r2, r3
        if(true == pHandle->SingleShuntTopology)
 80032b8:	2900      	cmp	r1, #0
 80032ba:	d103      	bne.n	80032c4 <PWMC_SetPhaseVoltage+0x1d8>
          pHandle->lowDuty = (uint16_t)wTimePhC;
 80032bc:	b29f      	uxth	r7, r3
          pHandle->midDuty = (uint16_t)wTimePhA;
 80032be:	b296      	uxth	r6, r2
          pHandle->highDuty = (uint16_t)wTimePhB;
 80032c0:	b2ac      	uxth	r4, r5
 80032c2:	e74b      	b.n	800315c <PWMC_SetPhaseVoltage+0x70>
 80032c4:	2701      	movs	r7, #1
 80032c6:	2600      	movs	r6, #0
 80032c8:	2402      	movs	r4, #2
 80032ca:	e747      	b.n	800315c <PWMC_SetPhaseVoltage+0x70>
 80032cc:	2700      	movs	r7, #0
 80032ce:	2602      	movs	r6, #2
 80032d0:	2401      	movs	r4, #1
 80032d2:	e743      	b.n	800315c <PWMC_SetPhaseVoltage+0x70>
            pHandle->lowDuty = (uint16_t)wTimePhA;
 80032d4:	b297      	uxth	r7, r2
            pHandle->midDuty = (uint16_t)wTimePhC;
 80032d6:	b29e      	uxth	r6, r3
            pHandle->highDuty = (uint16_t)wTimePhB;
 80032d8:	b2ac      	uxth	r4, r5
 80032da:	e73f      	b.n	800315c <PWMC_SetPhaseVoltage+0x70>
          pHandle->lowDuty = (uint16_t)wTimePhC;
 80032dc:	b29f      	uxth	r7, r3
          pHandle->midDuty = (uint16_t)wTimePhB;
 80032de:	b2ae      	uxth	r6, r5
          pHandle->highDuty = (uint16_t)wTimePhA;
 80032e0:	b294      	uxth	r4, r2
 80032e2:	e73b      	b.n	800315c <PWMC_SetPhaseVoltage+0x70>
            pHandle->lowDuty = (uint16_t)wTimePhA;
 80032e4:	b297      	uxth	r7, r2
            pHandle->midDuty = (uint16_t)wTimePhB;
 80032e6:	b2ae      	uxth	r6, r5
            pHandle->highDuty = (uint16_t)wTimePhC;
 80032e8:	b29c      	uxth	r4, r3
 80032ea:	e737      	b.n	800315c <PWMC_SetPhaseVoltage+0x70>

080032ec <PWMC_SwitchOffPWM>:
  *
  * @param  pHandle: Handler of the current instance of the PWM component.
  */
//cstat !MISRAC2012-Rule-8.13 !RED-func-no-effect
__weak void PWMC_SwitchOffPWM(PWMC_Handle_t *pHandle)
{
 80032ec:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOffPwm(pHandle);
 80032ee:	6843      	ldr	r3, [r0, #4]
 80032f0:	4798      	blx	r3
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
}
 80032f2:	bd10      	pop	{r4, pc}

080032f4 <PWMC_SwitchOnPWM>:
  *
  * @param  pHandle: Handler of the current instance of the PWM component.
  */
//cstat !MISRAC2012-Rule-8.13 !RED-func-no-effect
__weak void PWMC_SwitchOnPWM(PWMC_Handle_t *pHandle)
{
 80032f4:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOnPwm(pHandle);
 80032f6:	6883      	ldr	r3, [r0, #8]
 80032f8:	4798      	blx	r3
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
}
 80032fa:	bd10      	pop	{r4, pc}

080032fc <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, **false** if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr(PWMC_Handle_t *pHandle, CRCAction_t action)
{
 80032fc:	b510      	push	{r4, lr}
 80032fe:	0004      	movs	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    if (CRC_START == action)
 8003300:	2900      	cmp	r1, #0
 8003302:	d010      	beq.n	8003326 <PWMC_CurrentReadingCalibr+0x2a>
    {
      PWMC_SwitchOffPWM(pHandle);
      pHandle->pFctCurrReadingCalib(pHandle);
      retVal = true;
    }
    else if (CRC_EXEC == action)
 8003304:	2901      	cmp	r1, #1
 8003306:	d001      	beq.n	800330c <PWMC_CurrentReadingCalibr+0x10>
  bool retVal = false;
 8003308:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (retVal);
}
 800330a:	bd10      	pop	{r4, pc}
      if (pHandle->OffCalibrWaitTimeCounter > 0u)
 800330c:	2260      	movs	r2, #96	@ 0x60
 800330e:	5a83      	ldrh	r3, [r0, r2]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d006      	beq.n	8003322 <PWMC_CurrentReadingCalibr+0x26>
        pHandle->OffCalibrWaitTimeCounter--;
 8003314:	3b01      	subs	r3, #1
 8003316:	b29b      	uxth	r3, r3
 8003318:	5283      	strh	r3, [r0, r2]
        if (0U == pHandle->OffCalibrWaitTimeCounter)
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1f4      	bne.n	8003308 <PWMC_CurrentReadingCalibr+0xc>
          pHandle->pFctCurrReadingCalib(pHandle);
 800331e:	68c3      	ldr	r3, [r0, #12]
 8003320:	4798      	blx	r3
      retVal = true;
 8003322:	2001      	movs	r0, #1
 8003324:	e7f1      	b.n	800330a <PWMC_CurrentReadingCalibr+0xe>
      PWMC_SwitchOffPWM(pHandle);
 8003326:	f7ff ffe1 	bl	80032ec <PWMC_SwitchOffPWM>
      pHandle->pFctCurrReadingCalib(pHandle);
 800332a:	0020      	movs	r0, r4
 800332c:	68e3      	ldr	r3, [r4, #12]
 800332e:	4798      	blx	r3
      retVal = true;
 8003330:	2001      	movs	r0, #1
 8003332:	e7ea      	b.n	800330a <PWMC_CurrentReadingCalibr+0xe>

08003334 <PWMC_CalcPhaseCurrentsEst>:
  * @param  pHandle: Handler of the current instance of the PWM component.
  * @param  Iqd: Structure that will receive Iq and Id currents.
  * @param  hElAngledpp: Electrical angle.
  */
void PWMC_CalcPhaseCurrentsEst(PWMC_Handle_t *pHandle, qd_t Iqd, int16_t hElAngledpp)
{
 8003334:	b570      	push	{r4, r5, r6, lr}
 8003336:	0004      	movs	r4, r0
#endif
    qd_t idq_ave;
    alphabeta_t ialpha_beta;
    int32_t temp1, temp2;

    idq_ave.q = (int16_t)PWMC_LowPassFilter(Iqd.q, &(pHandle->LPFIqBuf), pHandle->LPFIqd_const);
 8003338:	206e      	movs	r0, #110	@ 0x6e
 800333a:	5e20      	ldrsh	r0, [r4, r0]
    *out_buf = (*out_buf) + ((in - ((*out_buf) >> 15)) * t);
 800333c:	6b65      	ldr	r5, [r4, #52]	@ 0x34
    idq_ave.q = (int16_t)PWMC_LowPassFilter(Iqd.q, &(pHandle->LPFIqBuf), pHandle->LPFIqd_const);
 800333e:	b20b      	sxth	r3, r1
    *out_buf = (*out_buf) + ((in - ((*out_buf) >> 15)) * t);
 8003340:	13ee      	asrs	r6, r5, #15
 8003342:	1b9b      	subs	r3, r3, r6
 8003344:	4343      	muls	r3, r0
{
 8003346:	b084      	sub	sp, #16
    *out_buf = (*out_buf) + ((in - ((*out_buf) >> 15)) * t);
 8003348:	195b      	adds	r3, r3, r5
 800334a:	6363      	str	r3, [r4, #52]	@ 0x34
    idq_ave.q = (int16_t)PWMC_LowPassFilter(Iqd.q, &(pHandle->LPFIqBuf), pHandle->LPFIqd_const);
 800334c:	ad02      	add	r5, sp, #8
    x = (*out_buf) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800334e:	13db      	asrs	r3, r3, #15
    idq_ave.q = (int16_t)PWMC_LowPassFilter(Iqd.q, &(pHandle->LPFIqBuf), pHandle->LPFIqd_const);
 8003350:	802b      	strh	r3, [r5, #0]
    *out_buf = (*out_buf) + ((in - ((*out_buf) >> 15)) * t);
 8003352:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
    idq_ave.d = (int16_t)PWMC_LowPassFilter(Iqd.d, &(pHandle->LPFIdBuf), pHandle->LPFIqd_const);
 8003354:	1409      	asrs	r1, r1, #16
    *out_buf = (*out_buf) + ((in - ((*out_buf) >> 15)) * t);
 8003356:	13de      	asrs	r6, r3, #15
 8003358:	1b89      	subs	r1, r1, r6
 800335a:	4348      	muls	r0, r1
 800335c:	18c0      	adds	r0, r0, r3
 800335e:	63a0      	str	r0, [r4, #56]	@ 0x38
    x = (*out_buf) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8003360:	13c0      	asrs	r0, r0, #15
    idq_ave.d = (int16_t)PWMC_LowPassFilter(Iqd.d, &(pHandle->LPFIdBuf), pHandle->LPFIqd_const);
 8003362:	8068      	strh	r0, [r5, #2]

    ialpha_beta = MCM_Rev_Park(idq_ave, hElAngledpp);
 8003364:	0011      	movs	r1, r2
 8003366:	9802      	ldr	r0, [sp, #8]
 8003368:	f7ff f916 	bl	8002598 <MCM_Rev_Park>

    /* Reverse Clarke */

    /*Ia*/
    pHandle->IaEst = ialpha_beta.alpha;
 800336c:	2268      	movs	r2, #104	@ 0x68
    ialpha_beta = MCM_Rev_Park(idq_ave, hElAngledpp);
 800336e:	b203      	sxth	r3, r0
    pHandle->IaEst = ialpha_beta.alpha;
 8003370:	52a3      	strh	r3, [r4, r2]

    temp1 = - ialpha_beta.alpha;
 8003372:	425b      	negs	r3, r3
#else
    temp2 = (int32_t)(ialpha_beta.beta) * (int32_t)SQRT3FACTOR / 32768;
#endif

    /* Ib */
    pHandle->IbEst = (int16_t)(temp1 - temp2)/2;
 8003374:	0c00      	lsrs	r0, r0, #16
 8003376:	b29b      	uxth	r3, r3
 8003378:	1a19      	subs	r1, r3, r0
 800337a:	b209      	sxth	r1, r1
 800337c:	0fca      	lsrs	r2, r1, #31
 800337e:	1852      	adds	r2, r2, r1
 8003380:	216a      	movs	r1, #106	@ 0x6a

    /* Ic */
    pHandle->IcEst = (int16_t)(temp1 + temp2)/2;
 8003382:	181b      	adds	r3, r3, r0
    pHandle->IbEst = (int16_t)(temp1 - temp2)/2;
 8003384:	1052      	asrs	r2, r2, #1
    pHandle->IcEst = (int16_t)(temp1 + temp2)/2;
 8003386:	b21b      	sxth	r3, r3
    pHandle->IbEst = (int16_t)(temp1 - temp2)/2;
 8003388:	5262      	strh	r2, [r4, r1]
    pHandle->IcEst = (int16_t)(temp1 + temp2)/2;
 800338a:	0fda      	lsrs	r2, r3, #31
 800338c:	18d3      	adds	r3, r2, r3
 800338e:	226c      	movs	r2, #108	@ 0x6c
 8003390:	105b      	asrs	r3, r3, #1
 8003392:	52a3      	strh	r3, [r4, r2]
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
}
 8003394:	b004      	add	sp, #16
 8003396:	bd70      	pop	{r4, r5, r6, pc}

08003398 <PWMC_OCP_Handler>:
    tempPointer = MC_NULL;
  }
  else
  {
#endif
    if (false == pHandle->BrakeActionLock)
 8003398:	2383      	movs	r3, #131	@ 0x83
 800339a:	5cc3      	ldrb	r3, [r0, r3]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d103      	bne.n	80033a8 <PWMC_OCP_Handler+0x10>
    {
      if (ES_GPIO == pHandle->LowSideOutputs)
 80033a0:	337b      	adds	r3, #123	@ 0x7b
 80033a2:	5cc3      	ldrb	r3, [r0, r3]
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d004      	beq.n	80033b2 <PWMC_OCP_Handler+0x1a>
    }
    else
    {
      /* Nothing to do */
    }
    pHandle->OverCurrentFlag = true;
 80033a8:	2380      	movs	r3, #128	@ 0x80
 80033aa:	2201      	movs	r2, #1
 80033ac:	54c2      	strb	r2, [r0, r3]
    tempPointer = &(pHandle->Motor);
 80033ae:	3078      	adds	r0, #120	@ 0x78
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (tempPointer);
}
 80033b0:	4770      	bx	lr
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_u_port, pHandle->pwm_en_u_pin);
 80033b2:	2248      	movs	r2, #72	@ 0x48
 80033b4:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80033b6:	5a82      	ldrh	r2, [r0, r2]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 80033b8:	629a      	str	r2, [r3, #40]	@ 0x28
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_v_port, pHandle->pwm_en_v_pin);
 80033ba:	224a      	movs	r2, #74	@ 0x4a
 80033bc:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80033be:	5a82      	ldrh	r2, [r0, r2]
 80033c0:	629a      	str	r2, [r3, #40]	@ 0x28
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_w_port, pHandle->pwm_en_w_pin);
 80033c2:	224c      	movs	r2, #76	@ 0x4c
 80033c4:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80033c6:	5a82      	ldrh	r2, [r0, r2]
 80033c8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80033ca:	e7ed      	b.n	80033a8 <PWMC_OCP_Handler+0x10>

080033cc <PWMC_IsFaultOccurred>:
  */
__weak uint16_t PWMC_IsFaultOccurred(PWMC_Handle_t *pHandle)
{
  uint16_t retVal = MC_NO_FAULTS;

  if (true == pHandle->OverVoltageFlag)
 80033cc:	2281      	movs	r2, #129	@ 0x81
{
 80033ce:	b510      	push	{r4, lr}
  if (true == pHandle->OverVoltageFlag)
 80033d0:	5c81      	ldrb	r1, [r0, r2]
{
 80033d2:	0003      	movs	r3, r0
  if (true == pHandle->OverVoltageFlag)
 80033d4:	2900      	cmp	r1, #0
 80033d6:	d015      	beq.n	8003404 <PWMC_IsFaultOccurred+0x38>
  {
    retVal = MC_OVER_VOLT;
    pHandle->OverVoltageFlag = false;
 80033d8:	2100      	movs	r1, #0
 80033da:	2442      	movs	r4, #66	@ 0x42
 80033dc:	5481      	strb	r1, [r0, r2]
    retVal = MC_OVER_VOLT;
 80033de:	2002      	movs	r0, #2
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->OverCurrentFlag)
 80033e0:	2280      	movs	r2, #128	@ 0x80
 80033e2:	5c99      	ldrb	r1, [r3, r2]
 80033e4:	2900      	cmp	r1, #0
 80033e6:	d002      	beq.n	80033ee <PWMC_IsFaultOccurred+0x22>
  {
    retVal |= MC_OVER_CURR;
    pHandle->OverCurrentFlag = false;
 80033e8:	2100      	movs	r1, #0
    retVal |= MC_OVER_CURR;
 80033ea:	0020      	movs	r0, r4
    pHandle->OverCurrentFlag = false;
 80033ec:	5499      	strb	r1, [r3, r2]
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->driverProtectionFlag)
 80033ee:	2282      	movs	r2, #130	@ 0x82
 80033f0:	5c99      	ldrb	r1, [r3, r2]
 80033f2:	2900      	cmp	r1, #0
 80033f4:	d005      	beq.n	8003402 <PWMC_IsFaultOccurred+0x36>
  {
    retVal |= MC_DP_FAULT;
 80033f6:	2180      	movs	r1, #128	@ 0x80
 80033f8:	00c9      	lsls	r1, r1, #3
 80033fa:	4308      	orrs	r0, r1
    pHandle->driverProtectionFlag = false;
 80033fc:	2100      	movs	r1, #0
    retVal |= MC_DP_FAULT;
 80033fe:	b280      	uxth	r0, r0
    pHandle->driverProtectionFlag = false;
 8003400:	5499      	strb	r1, [r3, r2]
  {
    /* Nothing to do */
  }

  return (retVal);
}
 8003402:	bd10      	pop	{r4, pc}
 8003404:	2440      	movs	r4, #64	@ 0x40
  uint16_t retVal = MC_NO_FAULTS;
 8003406:	2000      	movs	r0, #0
 8003408:	e7ea      	b.n	80033e0 <PWMC_IsFaultOccurred+0x14>
 800340a:	46c0      	nop			@ (mov r8, r8)

0800340c <R1_GetPhaseCurrents>:
  * @retval Ia and Ib current in Curr_Components format
  */
__weak void R1_GetPhaseCurrents(PWMC_Handle_t * pHdl, ab_t * pStator_Currents)
{
  PWMC_R1_Handle_t * pHandle = (PWMC_R1_Handle_t *)pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800340c:	23cc      	movs	r3, #204	@ 0xcc
 800340e:	58c3      	ldr	r3, [r0, r3]
{
 8003410:	b570      	push	{r4, r5, r6, lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8003412:	685a      	ldr	r2, [r3, #4]
  int16_t hCurrA = 0;
  int16_t hCurrB = 0;
  int16_t hCurrC = 0;

  /* Clear flag used for FOC duration check */
  pHandle->FOCDurationFlag = false;
 8003414:	2400      	movs	r4, #0
 8003416:	23c8      	movs	r3, #200	@ 0xc8
 8003418:	54c4      	strb	r4, [r0, r3]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800341a:	6853      	ldr	r3, [r2, #4]
 800341c:	3470      	adds	r4, #112	@ 0x70
 800341e:	43a3      	bics	r3, r4
 8003420:	6053      	str	r3, [r2, #4]

  /* Disabling the External triggering for ADCx */
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);
  /* First sampling point */
  wAux1 = (int32_t) pHandle->CurConv[0] ;
  wAux1 -= (int32_t)(pHandle->PhaseOffset);
 8003422:	22a0      	movs	r2, #160	@ 0xa0
  wAux1 = (int32_t) pHandle->CurConv[0] ;
 8003424:	23b4      	movs	r3, #180	@ 0xb4
  wAux1 -= (int32_t)(pHandle->PhaseOffset);
 8003426:	5884      	ldr	r4, [r0, r2]

  /* Check saturation */
  if (wAux1 > -INT16_MAX)
  {
    if (wAux1 < INT16_MAX)
 8003428:	2280      	movs	r2, #128	@ 0x80
  wAux1 = (int32_t) pHandle->CurConv[0] ;
 800342a:	5ac3      	ldrh	r3, [r0, r3]
    if (wAux1 < INT16_MAX)
 800342c:	0212      	lsls	r2, r2, #8
  wAux1 -= (int32_t)(pHandle->PhaseOffset);
 800342e:	1b1b      	subs	r3, r3, r4
    if (wAux1 < INT16_MAX)
 8003430:	4293      	cmp	r3, r2
 8003432:	db00      	blt.n	8003436 <R1_GetPhaseCurrents+0x2a>
 8003434:	4b91      	ldr	r3, [pc, #580]	@ (800367c <R1_GetPhaseCurrents+0x270>)
 8003436:	4a92      	ldr	r2, [pc, #584]	@ (8003680 <R1_GetPhaseCurrents+0x274>)
 8003438:	4293      	cmp	r3, r2
 800343a:	da00      	bge.n	800343e <R1_GetPhaseCurrents+0x32>
 800343c:	0013      	movs	r3, r2
  else
  {
    wAux1 = -INT16_MAX;
  }
   /* Second sampling point */
  wAux2 = (int32_t) pHandle->CurConv[1] ;
 800343e:	22b6      	movs	r2, #182	@ 0xb6
 8003440:	5a82      	ldrh	r2, [r0, r2]
  wAux2 -= (int32_t)(pHandle->PhaseOffset);
 8003442:	1b12      	subs	r2, r2, r4

  /* Check saturation */
  if (wAux2 > -INT16_MAX)
  {
    if (wAux2 < INT16_MAX)
 8003444:	2480      	movs	r4, #128	@ 0x80
 8003446:	0224      	lsls	r4, r4, #8
 8003448:	42a2      	cmp	r2, r4
 800344a:	db00      	blt.n	800344e <R1_GetPhaseCurrents+0x42>
 800344c:	4a8b      	ldr	r2, [pc, #556]	@ (800367c <R1_GetPhaseCurrents+0x270>)
 800344e:	4c8c      	ldr	r4, [pc, #560]	@ (8003680 <R1_GetPhaseCurrents+0x274>)
 8003450:	42a2      	cmp	r2, r4
 8003452:	da00      	bge.n	8003456 <R1_GetPhaseCurrents+0x4a>
 8003454:	0022      	movs	r2, r4
  else
  {
    wAux2 = -INT16_MAX;
  }

  switch (pHandle->_Super.Sector)
 8003456:	247a      	movs	r4, #122	@ 0x7a
 8003458:	5d04      	ldrb	r4, [r0, r4]
 800345a:	2c05      	cmp	r4, #5
 800345c:	d900      	bls.n	8003460 <R1_GetPhaseCurrents+0x54>
 800345e:	e109      	b.n	8003674 <R1_GetPhaseCurrents+0x268>
 8003460:	4d88      	ldr	r5, [pc, #544]	@ (8003684 <R1_GetPhaseCurrents+0x278>)
 8003462:	00a4      	lsls	r4, r4, #2
 8003464:	592c      	ldr	r4, [r5, r4]
 8003466:	46a7      	mov	pc, r4
      break;
    }

    case SECTOR_5:
    {
      if((pHandle->iflag & (IB_OK | IC_OK)) == (IB_OK | IC_OK)) /* iC,-iB are available to be sampled */
 8003468:	24c5      	movs	r4, #197	@ 0xc5
 800346a:	2506      	movs	r5, #6
 800346c:	5d04      	ldrb	r4, [r0, r4]
 800346e:	4025      	ands	r5, r4
 8003470:	2d06      	cmp	r5, #6
 8003472:	d100      	bne.n	8003476 <R1_GetPhaseCurrents+0x6a>
 8003474:	e0ad      	b.n	80035d2 <R1_GetPhaseCurrents+0x1c6>
        hCurrB = (int16_t) wAux1;
        hCurrA = -hCurrB-hCurrC;
      }
      else
      {
        if((pHandle->iflag & (IB_OK | IC_OK)) != 0x00) /* iC, or -iB is available to be sampled */
 8003476:	2d00      	cmp	r5, #0
 8003478:	d100      	bne.n	800347c <R1_GetPhaseCurrents+0x70>
 800347a:	e085      	b.n	8003588 <R1_GetPhaseCurrents+0x17c>
        {
          if(pHandle->_Super.AlignFlag == 0x01) /* START Position Aligning_angle=270 degree */
 800347c:	2479      	movs	r4, #121	@ 0x79
 800347e:	5d04      	ldrb	r4, [r0, r4]
 8003480:	2c01      	cmp	r4, #1
 8003482:	d100      	bne.n	8003486 <R1_GetPhaseCurrents+0x7a>
 8003484:	e0c6      	b.n	8003614 <R1_GetPhaseCurrents+0x208>
          hCurrA = pHandle->_Super.IaEst;
 8003486:	2468      	movs	r4, #104	@ 0x68
 8003488:	5f04      	ldrsh	r4, [r0, r4]
              hCurrA = 0;
            }
          }
          else  /* Not START Position */
          {
            if((pHandle->iflag & (IB_OK | IC_OK)) == IC_OK) /* iC, is available to be sampled */
 800348a:	2d04      	cmp	r5, #4
 800348c:	d100      	bne.n	8003490 <R1_GetPhaseCurrents+0x84>
 800348e:	e0d7      	b.n	8003640 <R1_GetPhaseCurrents+0x234>
    case SECTOR_6:
    {
      if((pHandle->iflag & (IA_OK | IB_OK)) == (IA_OK | IB_OK)) /* iA,-iB are available to be sampled */
      {
        hCurrA = (int16_t) wAux2;
        wAux1 = -wAux1;
 8003490:	425d      	negs	r5, r3
        hCurrB = (int16_t) wAux1;
 8003492:	b22d      	sxth	r5, r5
 8003494:	e071      	b.n	800357a <R1_GetPhaseCurrents+0x16e>
      if((pHandle->iflag & (IA_OK | IB_OK)) == (IA_OK | IB_OK)) /* iA,-iB are available to be sampled */
 8003496:	24c5      	movs	r4, #197	@ 0xc5
 8003498:	5d05      	ldrb	r5, [r0, r4]
 800349a:	3cc2      	subs	r4, #194	@ 0xc2
 800349c:	402c      	ands	r4, r5
 800349e:	2c03      	cmp	r4, #3
 80034a0:	d100      	bne.n	80034a4 <R1_GetPhaseCurrents+0x98>
 80034a2:	e083      	b.n	80035ac <R1_GetPhaseCurrents+0x1a0>
      }
      else
      {
        if((pHandle->iflag & (IA_OK | IB_OK)) != 0x00) /* iA, or -iB is available to be sampled */
 80034a4:	2c00      	cmp	r4, #0
 80034a6:	d100      	bne.n	80034aa <R1_GetPhaseCurrents+0x9e>
 80034a8:	e07b      	b.n	80035a2 <R1_GetPhaseCurrents+0x196>
        {
          if(pHandle->_Super.AlignFlag == 0x01) /* START Position Aligning_angle=330 degree */
 80034aa:	2579      	movs	r5, #121	@ 0x79
 80034ac:	5d45      	ldrb	r5, [r0, r5]
 80034ae:	2d01      	cmp	r5, #1
 80034b0:	d100      	bne.n	80034b4 <R1_GetPhaseCurrents+0xa8>
 80034b2:	e093      	b.n	80035dc <R1_GetPhaseCurrents+0x1d0>
              hCurrA = -hCurrB;
            }
          }
          else  /* Not START Position */
          {
            if((pHandle->iflag & (IA_OK | IB_OK)) == IA_OK) /* iA, is available to be sampled */
 80034b4:	2c01      	cmp	r4, #1
 80034b6:	d100      	bne.n	80034ba <R1_GetPhaseCurrents+0xae>
 80034b8:	e0b2      	b.n	8003620 <R1_GetPhaseCurrents+0x214>
              hCurrA = (int16_t) wAux2;
              hCurrB = pHandle->_Super.IbEst;
            }
            else  /* 0x02 -ib */
            {
              wAux1 = -wAux1;
 80034ba:	425b      	negs	r3, r3
              hCurrB = (int16_t) wAux1;
 80034bc:	b21d      	sxth	r5, r3
              hCurrA = pHandle->_Super.IaEst;
 80034be:	2368      	movs	r3, #104	@ 0x68
 80034c0:	5ec4      	ldrsh	r4, [r0, r3]
 80034c2:	e05a      	b.n	800357a <R1_GetPhaseCurrents+0x16e>
      if((pHandle->iflag & (IA_OK | IC_OK)) == (IA_OK | IC_OK)) /* iA and -iC are available to be sampled */
 80034c4:	24c5      	movs	r4, #197	@ 0xc5
 80034c6:	5d05      	ldrb	r5, [r0, r4]
 80034c8:	3cc0      	subs	r4, #192	@ 0xc0
 80034ca:	402c      	ands	r4, r5
 80034cc:	2c05      	cmp	r4, #5
 80034ce:	d100      	bne.n	80034d2 <R1_GetPhaseCurrents+0xc6>
 80034d0:	e07b      	b.n	80035ca <R1_GetPhaseCurrents+0x1be>
        if((pHandle->iflag & (IA_OK | IC_OK)) != 0x00) /* iA or -iC is available to be sampled */
 80034d2:	2c00      	cmp	r4, #0
 80034d4:	d04a      	beq.n	800356c <R1_GetPhaseCurrents+0x160>
          if(pHandle->_Super.AlignFlag == 0x01) /* START Position Aligning_angle=30 degree */
 80034d6:	2579      	movs	r5, #121	@ 0x79
 80034d8:	5d45      	ldrb	r5, [r0, r5]
 80034da:	2d01      	cmp	r5, #1
 80034dc:	d100      	bne.n	80034e0 <R1_GetPhaseCurrents+0xd4>
 80034de:	e094      	b.n	800360a <R1_GetPhaseCurrents+0x1fe>
              hCurrB = pHandle->_Super.IbEst;
 80034e0:	256a      	movs	r5, #106	@ 0x6a
 80034e2:	5f45      	ldrsh	r5, [r0, r5]
            if((pHandle->iflag & (IA_OK | IC_OK)) == IA_OK) /* iA, is available to be sampled */
 80034e4:	2c01      	cmp	r4, #1
 80034e6:	d100      	bne.n	80034ea <R1_GetPhaseCurrents+0xde>
 80034e8:	e0a6      	b.n	8003638 <R1_GetPhaseCurrents+0x22c>
              hCurrA = -hCurrB-hCurrC;
 80034ea:	1b5c      	subs	r4, r3, r5
 80034ec:	b224      	sxth	r4, r4
 80034ee:	e044      	b.n	800357a <R1_GetPhaseCurrents+0x16e>
      if((pHandle->iflag & (IB_OK | IC_OK)) == (IB_OK | IC_OK)) /* iB,-iC are available to be sampled */
 80034f0:	24c5      	movs	r4, #197	@ 0xc5
 80034f2:	2506      	movs	r5, #6
 80034f4:	5d04      	ldrb	r4, [r0, r4]
 80034f6:	4025      	ands	r5, r4
 80034f8:	2d06      	cmp	r5, #6
 80034fa:	d100      	bne.n	80034fe <R1_GetPhaseCurrents+0xf2>
 80034fc:	e061      	b.n	80035c2 <R1_GetPhaseCurrents+0x1b6>
        if((pHandle->iflag & (IB_OK | IC_OK)) != 0x00) /* iB, or -iC is available to be sampled */
 80034fe:	2d00      	cmp	r5, #0
 8003500:	d042      	beq.n	8003588 <R1_GetPhaseCurrents+0x17c>
          if(pHandle->_Super.AlignFlag == 0x01) /* START Position Aligning_angle=90 degree */
 8003502:	2479      	movs	r4, #121	@ 0x79
 8003504:	5d04      	ldrb	r4, [r0, r4]
 8003506:	2c01      	cmp	r4, #1
 8003508:	d100      	bne.n	800350c <R1_GetPhaseCurrents+0x100>
 800350a:	e079      	b.n	8003600 <R1_GetPhaseCurrents+0x1f4>
          hCurrA = pHandle->_Super.IaEst;
 800350c:	2468      	movs	r4, #104	@ 0x68
 800350e:	5f04      	ldrsh	r4, [r0, r4]
            if((pHandle->iflag & (IB_OK | IC_OK)) == IB_OK) /* iB, is available to be sampled */
 8003510:	2d02      	cmp	r5, #2
 8003512:	d100      	bne.n	8003516 <R1_GetPhaseCurrents+0x10a>
 8003514:	e092      	b.n	800363c <R1_GetPhaseCurrents+0x230>
              hCurrB = -hCurrA-hCurrC;
 8003516:	1b1d      	subs	r5, r3, r4
 8003518:	b22d      	sxth	r5, r5
 800351a:	e02e      	b.n	800357a <R1_GetPhaseCurrents+0x16e>
      if((pHandle->iflag & (IA_OK | IB_OK)) == (IA_OK | IB_OK)) /* iB,-iA are available to be sampled */
 800351c:	24c5      	movs	r4, #197	@ 0xc5
 800351e:	5d05      	ldrb	r5, [r0, r4]
 8003520:	3cc2      	subs	r4, #194	@ 0xc2
 8003522:	402c      	ands	r4, r5
 8003524:	2c03      	cmp	r4, #3
 8003526:	d048      	beq.n	80035ba <R1_GetPhaseCurrents+0x1ae>
        if((pHandle->iflag & (IA_OK | IB_OK)) != 0x00) /* iB, or -iA is available to be sampled */
 8003528:	2c00      	cmp	r4, #0
 800352a:	d035      	beq.n	8003598 <R1_GetPhaseCurrents+0x18c>
          if(pHandle->_Super.AlignFlag == 0x01) /* START Position Aligning_angle=150 degree */
 800352c:	2579      	movs	r5, #121	@ 0x79
 800352e:	5d45      	ldrb	r5, [r0, r5]
 8003530:	2d01      	cmp	r5, #1
 8003532:	d059      	beq.n	80035e8 <R1_GetPhaseCurrents+0x1dc>
            if((pHandle->iflag & (IA_OK | IB_OK)) == IB_OK) /* iB, is available to be sampled */
 8003534:	2c02      	cmp	r4, #2
 8003536:	d100      	bne.n	800353a <R1_GetPhaseCurrents+0x12e>
 8003538:	e076      	b.n	8003628 <R1_GetPhaseCurrents+0x21c>
              wAux1 = -wAux1;
 800353a:	425c      	negs	r4, r3
              hCurrB = pHandle->_Super.IbEst;
 800353c:	236a      	movs	r3, #106	@ 0x6a
              hCurrA = (int16_t) wAux1;
 800353e:	b224      	sxth	r4, r4
              hCurrB = pHandle->_Super.IbEst;
 8003540:	5ec5      	ldrsh	r5, [r0, r3]
 8003542:	e01a      	b.n	800357a <R1_GetPhaseCurrents+0x16e>
      if((pHandle->iflag & (IA_OK | IC_OK)) == (IA_OK | IC_OK)) /* iC,-iA are available to be sampled */
 8003544:	24c5      	movs	r4, #197	@ 0xc5
 8003546:	5d05      	ldrb	r5, [r0, r4]
 8003548:	3cc0      	subs	r4, #192	@ 0xc0
 800354a:	402c      	ands	r4, r5
 800354c:	2c05      	cmp	r4, #5
 800354e:	d02f      	beq.n	80035b0 <R1_GetPhaseCurrents+0x1a4>
        if((pHandle->iflag & (IA_OK | IC_OK)) != 0x00) /* iC, or -iA is available to be sampled */
 8003550:	2c00      	cmp	r4, #0
 8003552:	d00b      	beq.n	800356c <R1_GetPhaseCurrents+0x160>
          if(pHandle->_Super.AlignFlag == 0x01) /* START Position Aligning_angle=210 degree */
 8003554:	2579      	movs	r5, #121	@ 0x79
 8003556:	5d45      	ldrb	r5, [r0, r5]
 8003558:	2d01      	cmp	r5, #1
 800355a:	d04b      	beq.n	80035f4 <R1_GetPhaseCurrents+0x1e8>
              hCurrB = pHandle->_Super.IbEst;
 800355c:	256a      	movs	r5, #106	@ 0x6a
 800355e:	5f45      	ldrsh	r5, [r0, r5]
            if((pHandle->iflag & (IA_OK | IC_OK)) == IC_OK) /* iC, is available to be sampled */
 8003560:	2c04      	cmp	r4, #4
 8003562:	d100      	bne.n	8003566 <R1_GetPhaseCurrents+0x15a>
 8003564:	e064      	b.n	8003630 <R1_GetPhaseCurrents+0x224>
              wAux1 = -wAux1;
 8003566:	425c      	negs	r4, r3
              hCurrA = (int16_t) wAux1;
 8003568:	b224      	sxth	r4, r4
              hCurrB = pHandle->_Super.IbEst;
 800356a:	e006      	b.n	800357a <R1_GetPhaseCurrents+0x16e>
          hCurrA = pHandle->_Super.IaEst;
 800356c:	2368      	movs	r3, #104	@ 0x68
 800356e:	5ec4      	ldrsh	r4, [r0, r3]
          hCurrC = pHandle->_Super.IcEst;
 8003570:	236c      	movs	r3, #108	@ 0x6c
          hCurrB = -hCurrA-hCurrC;
 8003572:	5ac5      	ldrh	r5, [r0, r3]
 8003574:	192d      	adds	r5, r5, r4
 8003576:	426d      	negs	r5, r5
 8003578:	b22d      	sxth	r5, r5

    default:
      break;
    }

  pHandle->CurrAOld = hCurrA;
 800357a:	23c0      	movs	r3, #192	@ 0xc0
 800357c:	52c4      	strh	r4, [r0, r3]
  pHandle->CurrBOld = hCurrB;
 800357e:	3302      	adds	r3, #2
 8003580:	52c5      	strh	r5, [r0, r3]

  pStator_Currents->a = hCurrA;
  pStator_Currents->b = hCurrB;
 8003582:	804d      	strh	r5, [r1, #2]
  pStator_Currents->a = hCurrA;
 8003584:	800c      	strh	r4, [r1, #0]
}
 8003586:	bd70      	pop	{r4, r5, r6, pc}
          hCurrB = pHandle->_Super.IbEst;
 8003588:	236a      	movs	r3, #106	@ 0x6a
 800358a:	5ec5      	ldrsh	r5, [r0, r3]
          hCurrC = pHandle->_Super.IcEst;
 800358c:	236c      	movs	r3, #108	@ 0x6c
          hCurrA = -hCurrB-hCurrC;
 800358e:	5ac4      	ldrh	r4, [r0, r3]
 8003590:	1964      	adds	r4, r4, r5
 8003592:	4264      	negs	r4, r4
 8003594:	b224      	sxth	r4, r4
 8003596:	e7f0      	b.n	800357a <R1_GetPhaseCurrents+0x16e>
          hCurrB = pHandle->_Super.IbEst;
 8003598:	236a      	movs	r3, #106	@ 0x6a
 800359a:	5ec5      	ldrsh	r5, [r0, r3]
          hCurrA = pHandle->_Super.IaEst;
 800359c:	2368      	movs	r3, #104	@ 0x68
 800359e:	5ec4      	ldrsh	r4, [r0, r3]
 80035a0:	e7eb      	b.n	800357a <R1_GetPhaseCurrents+0x16e>
          hCurrA = pHandle->_Super.IaEst;
 80035a2:	2368      	movs	r3, #104	@ 0x68
 80035a4:	5ec4      	ldrsh	r4, [r0, r3]
          hCurrB = pHandle->_Super.IbEst;
 80035a6:	236a      	movs	r3, #106	@ 0x6a
 80035a8:	5ec5      	ldrsh	r5, [r0, r3]
 80035aa:	e7e6      	b.n	800357a <R1_GetPhaseCurrents+0x16e>
        hCurrA = (int16_t) wAux2;
 80035ac:	b214      	sxth	r4, r2
 80035ae:	e76f      	b.n	8003490 <R1_GetPhaseCurrents+0x84>
        wAux1 = -wAux1;
 80035b0:	425c      	negs	r4, r3
        hCurrB = -hCurrA-hCurrC;
 80035b2:	1a9d      	subs	r5, r3, r2
        hCurrA = (int16_t) wAux1;
 80035b4:	b224      	sxth	r4, r4
        hCurrB = -hCurrA-hCurrC;
 80035b6:	b22d      	sxth	r5, r5
 80035b8:	e7df      	b.n	800357a <R1_GetPhaseCurrents+0x16e>
        wAux1 = -wAux1;
 80035ba:	425c      	negs	r4, r3
        hCurrB = (int16_t) wAux2;
 80035bc:	b215      	sxth	r5, r2
        hCurrA = (int16_t) wAux1;
 80035be:	b224      	sxth	r4, r4
 80035c0:	e7db      	b.n	800357a <R1_GetPhaseCurrents+0x16e>
        hCurrA = -hCurrB-hCurrC;
 80035c2:	1a9c      	subs	r4, r3, r2
        hCurrB = (int16_t) wAux2;
 80035c4:	b215      	sxth	r5, r2
        hCurrA = -hCurrB-hCurrC;
 80035c6:	b224      	sxth	r4, r4
 80035c8:	e7d7      	b.n	800357a <R1_GetPhaseCurrents+0x16e>
        hCurrB = -hCurrA-hCurrC;
 80035ca:	1a9d      	subs	r5, r3, r2
        hCurrA = (int16_t) wAux2;
 80035cc:	b214      	sxth	r4, r2
        hCurrB = -hCurrA-hCurrC;
 80035ce:	b22d      	sxth	r5, r5
 80035d0:	e7d3      	b.n	800357a <R1_GetPhaseCurrents+0x16e>
        wAux1 = -wAux1;
 80035d2:	425d      	negs	r5, r3
        hCurrA = -hCurrB-hCurrC;
 80035d4:	1a9c      	subs	r4, r3, r2
        hCurrB = (int16_t) wAux1;
 80035d6:	b22d      	sxth	r5, r5
        hCurrA = -hCurrB-hCurrC;
 80035d8:	b224      	sxth	r4, r4
 80035da:	e7ce      	b.n	800357a <R1_GetPhaseCurrents+0x16e>
            if((pHandle->iflag & (IA_OK | IB_OK)) == IA_OK) /* iA, is available to be sampled */
 80035dc:	2c01      	cmp	r4, #1
 80035de:	d041      	beq.n	8003664 <R1_GetPhaseCurrents+0x258>
              wAux1 = -wAux1;
 80035e0:	425d      	negs	r5, r3
              hCurrB = (int16_t) wAux1;
 80035e2:	b22d      	sxth	r5, r5
              hCurrA = -hCurrB;
 80035e4:	b21c      	sxth	r4, r3
 80035e6:	e7c8      	b.n	800357a <R1_GetPhaseCurrents+0x16e>
            if((pHandle->iflag & (IA_OK | IB_OK)) == IB_OK) /* iB, is available to be sampled */
 80035e8:	2c02      	cmp	r4, #2
 80035ea:	d03f      	beq.n	800366c <R1_GetPhaseCurrents+0x260>
              wAux1 = -wAux1;
 80035ec:	425c      	negs	r4, r3
              hCurrA = (int16_t) wAux1;
 80035ee:	b224      	sxth	r4, r4
              hCurrB = -hCurrA;
 80035f0:	b21d      	sxth	r5, r3
 80035f2:	e7c2      	b.n	800357a <R1_GetPhaseCurrents+0x16e>
            if((pHandle->iflag & (IA_OK | IC_OK)) == IC_OK) /* iC, is available to be sampled */
 80035f4:	2c04      	cmp	r4, #4
 80035f6:	d02d      	beq.n	8003654 <R1_GetPhaseCurrents+0x248>
              wAux1 = -wAux1;
 80035f8:	425c      	negs	r4, r3
              hCurrB = 0;
 80035fa:	2500      	movs	r5, #0
              hCurrA = (int16_t) wAux1;
 80035fc:	b224      	sxth	r4, r4
              hCurrB = 0;
 80035fe:	e7bc      	b.n	800357a <R1_GetPhaseCurrents+0x16e>
            if((pHandle->iflag & (IB_OK | IC_OK)) == IB_OK) /* iB, is available to be sampled */
 8003600:	2d02      	cmp	r5, #2
 8003602:	d024      	beq.n	800364e <R1_GetPhaseCurrents+0x242>
              hCurrA = 0;
 8003604:	2400      	movs	r4, #0
              hCurrB = -hCurrC;
 8003606:	b21d      	sxth	r5, r3
 8003608:	e7b7      	b.n	800357a <R1_GetPhaseCurrents+0x16e>
            if((pHandle->iflag & (IA_OK | IC_OK)) == IA_OK) /* iA is available to be sampled and not iC */
 800360a:	2c01      	cmp	r4, #1
 800360c:	d01c      	beq.n	8003648 <R1_GetPhaseCurrents+0x23c>
              hCurrB = 0;
 800360e:	2500      	movs	r5, #0
              hCurrA = -hCurrC;
 8003610:	b21c      	sxth	r4, r3
              hCurrB = 0;
 8003612:	e7b2      	b.n	800357a <R1_GetPhaseCurrents+0x16e>
            if((pHandle->iflag & (IB_OK | IC_OK)) == IC_OK) /* iC, is available to be sampled */
 8003614:	2d04      	cmp	r5, #4
 8003616:	d021      	beq.n	800365c <R1_GetPhaseCurrents+0x250>
              wAux1 = -wAux1;
 8003618:	425d      	negs	r5, r3
              hCurrA = 0;
 800361a:	2400      	movs	r4, #0
              hCurrB = (int16_t) wAux1;
 800361c:	b22d      	sxth	r5, r5
              hCurrA = 0;
 800361e:	e7ac      	b.n	800357a <R1_GetPhaseCurrents+0x16e>
              hCurrB = pHandle->_Super.IbEst;
 8003620:	236a      	movs	r3, #106	@ 0x6a
              hCurrA = (int16_t) wAux2;
 8003622:	b214      	sxth	r4, r2
              hCurrB = pHandle->_Super.IbEst;
 8003624:	5ec5      	ldrsh	r5, [r0, r3]
 8003626:	e7a8      	b.n	800357a <R1_GetPhaseCurrents+0x16e>
              hCurrA = pHandle->_Super.IaEst;
 8003628:	2368      	movs	r3, #104	@ 0x68
              hCurrB = (int16_t) wAux2;
 800362a:	b215      	sxth	r5, r2
              hCurrA = pHandle->_Super.IaEst;
 800362c:	5ec4      	ldrsh	r4, [r0, r3]
 800362e:	e7a4      	b.n	800357a <R1_GetPhaseCurrents+0x16e>
              hCurrA = -hCurrB-hCurrC;
 8003630:	18ac      	adds	r4, r5, r2
 8003632:	4264      	negs	r4, r4
 8003634:	b224      	sxth	r4, r4
 8003636:	e7a0      	b.n	800357a <R1_GetPhaseCurrents+0x16e>
              hCurrA = (int16_t) wAux2;
 8003638:	b214      	sxth	r4, r2
              hCurrB = pHandle->_Super.IbEst;
 800363a:	e79e      	b.n	800357a <R1_GetPhaseCurrents+0x16e>
              hCurrB = (int16_t) wAux2;
 800363c:	b215      	sxth	r5, r2
              hCurrA = pHandle->_Super.IaEst;
 800363e:	e79c      	b.n	800357a <R1_GetPhaseCurrents+0x16e>
              hCurrB = -hCurrA-hCurrC;
 8003640:	18a5      	adds	r5, r4, r2
 8003642:	426d      	negs	r5, r5
 8003644:	b22d      	sxth	r5, r5
 8003646:	e798      	b.n	800357a <R1_GetPhaseCurrents+0x16e>
              hCurrB = 0;
 8003648:	2500      	movs	r5, #0
              hCurrA = (int16_t) wAux2;
 800364a:	b214      	sxth	r4, r2
              hCurrC = -hCurrA;
 800364c:	e795      	b.n	800357a <R1_GetPhaseCurrents+0x16e>
              hCurrA = 0;
 800364e:	2400      	movs	r4, #0
              hCurrB = (int16_t) wAux2;
 8003650:	b215      	sxth	r5, r2
              hCurrA = 0;
 8003652:	e792      	b.n	800357a <R1_GetPhaseCurrents+0x16e>
              hCurrA = -hCurrC;
 8003654:	4254      	negs	r4, r2
              hCurrB = 0;
 8003656:	2500      	movs	r5, #0
              hCurrA = -hCurrC;
 8003658:	b224      	sxth	r4, r4
              hCurrB = 0;
 800365a:	e78e      	b.n	800357a <R1_GetPhaseCurrents+0x16e>
              hCurrB = -hCurrC;
 800365c:	4255      	negs	r5, r2
              hCurrA = 0;
 800365e:	2400      	movs	r4, #0
              hCurrB = -hCurrC;
 8003660:	b22d      	sxth	r5, r5
 8003662:	e78a      	b.n	800357a <R1_GetPhaseCurrents+0x16e>
              hCurrB = -hCurrA;
 8003664:	4255      	negs	r5, r2
              hCurrA = (int16_t) wAux2;
 8003666:	b214      	sxth	r4, r2
              hCurrB = -hCurrA;
 8003668:	b22d      	sxth	r5, r5
 800366a:	e786      	b.n	800357a <R1_GetPhaseCurrents+0x16e>
              hCurrA = -hCurrB;
 800366c:	4254      	negs	r4, r2
              hCurrB = (int16_t) wAux2;
 800366e:	b215      	sxth	r5, r2
              hCurrA = -hCurrB;
 8003670:	b224      	sxth	r4, r4
 8003672:	e782      	b.n	800357a <R1_GetPhaseCurrents+0x16e>
  switch (pHandle->_Super.Sector)
 8003674:	2500      	movs	r5, #0
 8003676:	002c      	movs	r4, r5
 8003678:	e77f      	b.n	800357a <R1_GetPhaseCurrents+0x16e>
 800367a:	46c0      	nop			@ (mov r8, r8)
 800367c:	00007fff 	.word	0x00007fff
 8003680:	ffff8001 	.word	0xffff8001
 8003684:	0800623c 	.word	0x0800623c

08003688 <R1_HFCurrentsCalibration>:
  */
static void R1_HFCurrentsCalibration(PWMC_Handle_t *pHdl, ab_t *pStator_Currents)
{
  /* Derived class members container */
  PWMC_R1_Handle_t *pHandle = (PWMC_R1_Handle_t *)pHdl;
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8003688:	23cc      	movs	r3, #204	@ 0xcc
 800368a:	58c3      	ldr	r3, [r0, r3]
{
 800368c:	b530      	push	{r4, r5, lr}
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800368e:	685a      	ldr	r2, [r3, #4]
  /* Clear flag used for FOC duration check */
  pHandle->FOCDurationFlag = false;
 8003690:	2400      	movs	r4, #0
 8003692:	23c8      	movs	r3, #200	@ 0xc8
 8003694:	54c4      	strb	r4, [r0, r3]
 8003696:	6853      	ldr	r3, [r2, #4]
 8003698:	3470      	adds	r4, #112	@ 0x70
 800369a:	43a3      	bics	r3, r4
 800369c:	6053      	str	r3, [r2, #4]

  /* Disabling the External triggering for ADCx */
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);
  if (pHandle->Index < NB_CONVERSIONS)
 800369e:	23c4      	movs	r3, #196	@ 0xc4
 80036a0:	5cc2      	ldrb	r2, [r0, r3]
 80036a2:	2a0f      	cmp	r2, #15
 80036a4:	d809      	bhi.n	80036ba <R1_HFCurrentsCalibration+0x32>
  {
    pHandle->PhaseOffset += pHandle->CurConv[1] ;
 80036a6:	22b6      	movs	r2, #182	@ 0xb6
 80036a8:	3430      	adds	r4, #48	@ 0x30
 80036aa:	5a85      	ldrh	r5, [r0, r2]
 80036ac:	5902      	ldr	r2, [r0, r4]
 80036ae:	1952      	adds	r2, r2, r5
 80036b0:	5102      	str	r2, [r0, r4]
    pHandle->Index++;
 80036b2:	5cc2      	ldrb	r2, [r0, r3]
 80036b4:	3201      	adds	r2, #1
 80036b6:	b2d2      	uxtb	r2, r2
 80036b8:	54c2      	strb	r2, [r0, r3]
  }

  /* During offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 80036ba:	2300      	movs	r3, #0
 80036bc:	800b      	strh	r3, [r1, #0]
  pStator_Currents->b = 0;
 80036be:	804b      	strh	r3, [r1, #2]

}
 80036c0:	bd30      	pop	{r4, r5, pc}
 80036c2:	46c0      	nop			@ (mov r8, r8)

080036c4 <R1_SetADCSampPointPolarization>:
  /* Derived class members container */
  PWMC_R1_Handle_t *pHandle = (PWMC_R1_Handle_t *)pHdl;

  uint16_t hAux;
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80036c4:	21cc      	movs	r1, #204	@ 0xcc
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 80036c6:	22b8      	movs	r2, #184	@ 0xb8
{
 80036c8:	b530      	push	{r4, r5, lr}
 80036ca:	0003      	movs	r3, r0
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80036cc:	5a82      	ldrh	r2, [r0, r2]
 80036ce:	5840      	ldr	r0, [r0, r1]
 80036d0:	0852      	lsrs	r2, r2, #1
 80036d2:	8bc4      	ldrh	r4, [r0, #30]
 80036d4:	8c01      	ldrh	r1, [r0, #32]
 80036d6:	1909      	adds	r1, r1, r4
 80036d8:	b289      	uxth	r1, r1
 80036da:	1a55      	subs	r5, r2, r1
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 80036dc:	24ba      	movs	r4, #186	@ 0xba
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
                   + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80036de:	1852      	adds	r2, r2, r1
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 80036e0:	21bc      	movs	r1, #188	@ 0xbc
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 80036e2:	531d      	strh	r5, [r3, r4]
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 80036e4:	525a      	strh	r2, [r3, r1]
  LL_ADC_REG_SetSequencerChannels(ADC1, __LL_ADC_DECIMAL_NB_TO_CHANNEL (pHandle->pParams_str->IChannel));
 80036e6:	2222      	movs	r2, #34	@ 0x22
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80036e8:	2180      	movs	r1, #128	@ 0x80
 80036ea:	5c82      	ldrb	r2, [r0, r2]
 80036ec:	0189      	lsls	r1, r1, #6
 80036ee:	4091      	lsls	r1, r2
 80036f0:	4a0d      	ldr	r2, [pc, #52]	@ (8003728 <R1_SetADCSampPointPolarization+0x64>)
 80036f2:	0b49      	lsrs	r1, r1, #13
 80036f4:	6291      	str	r1, [r2, #40]	@ 0x28
  LL_ADC_SetSamplingTimeCommonChannels (ADC1, pHandle->pParams_str->ISamplingTime);
 80036f6:	2123      	movs	r1, #35	@ 0x23
 80036f8:	5c41      	ldrb	r1, [r0, r1]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 80036fa:	2007      	movs	r0, #7
 80036fc:	6954      	ldr	r4, [r2, #20]
 80036fe:	4384      	bics	r4, r0
 8003700:	4321      	orrs	r1, r4
 8003702:	6151      	str	r1, [r2, #20]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8003704:	68d0      	ldr	r0, [r2, #12]
 8003706:	4909      	ldr	r1, [pc, #36]	@ (800372c <R1_SetADCSampPointPolarization+0x68>)
 8003708:	4008      	ands	r0, r1
 800370a:	2188      	movs	r1, #136	@ 0x88
 800370c:	00c9      	lsls	r1, r1, #3
 800370e:	4301      	orrs	r1, r0
 8003710:	60d1      	str	r1, [r2, #12]
  LL_ADC_REG_SetTriggerSource(ADC1, LL_ADC_REG_TRIG_EXT_TIM1_CH4);

  /* Check software error */
  if (pHandle->FOCDurationFlag == true)
 8003712:	22c8      	movs	r2, #200	@ 0xc8
 8003714:	5c99      	ldrb	r1, [r3, r2]
  }
  else
  {
    hAux = MC_NO_ERROR;
  }
  if (pHandle->_Super.SWerror == 1u)
 8003716:	3a72      	subs	r2, #114	@ 0x72
 8003718:	5a98      	ldrh	r0, [r3, r2]
 800371a:	2801      	cmp	r0, #1
 800371c:	d001      	beq.n	8003722 <R1_SetADCSampPointPolarization+0x5e>
  if (pHandle->FOCDurationFlag == true)
 800371e:	0008      	movs	r0, r1
  else
  {
    /* Nothing to do */
  }
  return (hAux);
}
 8003720:	bd30      	pop	{r4, r5, pc}
    pHandle->_Super.SWerror = 0u;
 8003722:	2100      	movs	r1, #0
 8003724:	5299      	strh	r1, [r3, r2]
 8003726:	e7fb      	b.n	8003720 <R1_SetADCSampPointPolarization+0x5c>
 8003728:	40012400 	.word	0x40012400
 800372c:	fffff23f 	.word	0xfffff23f

08003730 <R1_CalcDutyCycles>:
  * @param  pHandle related object of class CPWMC
  * @retval uint16_t It returns MC_DURATION if the TIMx update occurs
  *         before the end of FOC algorithm else returns MC_NO_ERROR
  */
__weak uint16_t R1_CalcDutyCycles(PWMC_Handle_t *pHdl)
{
 8003730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003732:	4657      	mov	r7, sl
 8003734:	464e      	mov	r6, r9
 8003736:	4645      	mov	r5, r8
 8003738:	46de      	mov	lr, fp
  PWMC_R1_Handle_t *pHandle = (PWMC_R1_Handle_t *)pHdl;
  DMA_TypeDef *DMAx = pHandle->pParams_str->DMAx;
 800373a:	22cc      	movs	r2, #204	@ 0xcc
{
 800373c:	b5e0      	push	{r5, r6, r7, lr}
  DMA_TypeDef *DMAx = pHandle->pParams_str->DMAx;
 800373e:	5881      	ldr	r1, [r0, r2]
{
 8003740:	b091      	sub	sp, #68	@ 0x44
  DMA_TypeDef *DMAx = pHandle->pParams_str->DMAx;
 8003742:	688a      	ldr	r2, [r1, #8]
 8003744:	9100      	str	r1, [sp, #0]
 8003746:	920a      	str	r2, [sp, #40]	@ 0x28
  uint8_t midVal;
  uint8_t minVal;
  uint8_t max_bad_flag;
  uint8_t min_bad_flag;

  aCCRval[0] = (int16_t)pHandle->_Super.CntPhA;
 8003748:	2250      	movs	r2, #80	@ 0x50
 800374a:	5a82      	ldrh	r2, [r0, r2]
{
 800374c:	0003      	movs	r3, r0
  aCCRval[0] = (int16_t)pHandle->_Super.CntPhA;
 800374e:	4690      	mov	r8, r2
  aCCRval[1] = (int16_t)pHandle->_Super.CntPhB;
 8003750:	2252      	movs	r2, #82	@ 0x52
 8003752:	5a82      	ldrh	r2, [r0, r2]
  aCCRval[2] = (int16_t)pHandle->_Super.CntPhC;

  maxVal = (uint8_t)pHandle->_Super.highDuty;
  midVal = (uint8_t)pHandle->_Super.midDuty;
  minVal = (uint8_t)pHandle->_Super.lowDuty;
  pHandle->iflag=0x00;
 8003754:	2600      	movs	r6, #0
  aCCRval[1] = (int16_t)pHandle->_Super.CntPhB;
 8003756:	4691      	mov	r9, r2
  aCCRval[0] = (int16_t)pHandle->_Super.CntPhA;
 8003758:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800375a:	920e      	str	r2, [sp, #56]	@ 0x38
  aCCRval[2] = (int16_t)pHandle->_Super.CntPhC;
 800375c:	2254      	movs	r2, #84	@ 0x54
 800375e:	5a82      	ldrh	r2, [r0, r2]
 8003760:	4692      	mov	sl, r2
 8003762:	4651      	mov	r1, sl
 8003764:	aa0e      	add	r2, sp, #56	@ 0x38
 8003766:	8091      	strh	r1, [r2, #4]
  maxVal = (uint8_t)pHandle->_Super.highDuty;
 8003768:	225c      	movs	r2, #92	@ 0x5c
 800376a:	5c84      	ldrb	r4, [r0, r2]
  midVal = (uint8_t)pHandle->_Super.midDuty;
 800376c:	3a02      	subs	r2, #2
 800376e:	5c80      	ldrb	r0, [r0, r2]
  minVal = (uint8_t)pHandle->_Super.lowDuty;
 8003770:	3a02      	subs	r2, #2
 8003772:	5c9d      	ldrb	r5, [r3, r2]
  pHandle->iflag=0x00;
 8003774:	326d      	adds	r2, #109	@ 0x6d
 8003776:	549e      	strb	r6, [r3, r2]
 8003778:	920b      	str	r2, [sp, #44]	@ 0x2c

  /* Phase-shift and set iflag */
  submax_mid = aCCRval[maxVal] - aCCRval[midVal];
 800377a:	a90e      	add	r1, sp, #56	@ 0x38
 800377c:	0062      	lsls	r2, r4, #1
 800377e:	5e57      	ldrsh	r7, [r2, r1]
 8003780:	a90e      	add	r1, sp, #56	@ 0x38
 8003782:	5a8a      	ldrh	r2, [r1, r2]
 8003784:	9404      	str	r4, [sp, #16]
 8003786:	920d      	str	r2, [sp, #52]	@ 0x34
 8003788:	0014      	movs	r4, r2
 800378a:	000a      	movs	r2, r1
 800378c:	0040      	lsls	r0, r0, #1
 800378e:	5e82      	ldrsh	r2, [r0, r2]
 8003790:	a90e      	add	r1, sp, #56	@ 0x38
 8003792:	5a09      	ldrh	r1, [r1, r0]
 8003794:	468b      	mov	fp, r1
  submax_mid_deltmin = submax_mid - (int16_t)pHandle->pParams_str->TMin;
 8003796:	9900      	ldr	r1, [sp, #0]
 8003798:	8b88      	ldrh	r0, [r1, #28]
 800379a:	4659      	mov	r1, fp
 800379c:	1a24      	subs	r4, r4, r0
 800379e:	9003      	str	r0, [sp, #12]
 80037a0:	1a64      	subs	r4, r4, r1
  submid_min = aCCRval[midVal] - aCCRval[minVal];
 80037a2:	0068      	lsls	r0, r5, #1
 80037a4:	a90e      	add	r1, sp, #56	@ 0x38
 80037a6:	5e40      	ldrsh	r0, [r0, r1]
  submid_min_deltmin = submid_min - (int16_t)pHandle->pParams_str->TMin;
 80037a8:	4659      	mov	r1, fp
  submid_min = aCCRval[midVal] - aCCRval[minVal];
 80037aa:	9009      	str	r0, [sp, #36]	@ 0x24
  submid_min_deltmin = submid_min - (int16_t)pHandle->pParams_str->TMin;
 80037ac:	9803      	ldr	r0, [sp, #12]
  submax_mid_deltmin = submax_mid - (int16_t)pHandle->pParams_str->TMin;
 80037ae:	b224      	sxth	r4, r4
  submid_min_deltmin = submid_min - (int16_t)pHandle->pParams_str->TMin;
 80037b0:	1a08      	subs	r0, r1, r0
 80037b2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80037b4:	1a40      	subs	r0, r0, r1
 80037b6:	b281      	uxth	r1, r0
 80037b8:	910c      	str	r1, [sp, #48]	@ 0x30
  pHandle->aShiftval[0]=0;
 80037ba:	21a8      	movs	r1, #168	@ 0xa8
 80037bc:	505e      	str	r6, [r3, r1]
  pHandle->aShiftval[1]=0;
  pHandle->aShiftval[2]=0;
 80037be:	3104      	adds	r1, #4
 80037c0:	525e      	strh	r6, [r3, r1]
  {
    pHandle->iflag |= ALFLAG[maxVal];
  }
  else
  {
    if ((1 - submax_mid_deltmin + aCCRval[maxVal] + (int16_t) pHandle->pParams_str->hTADConv)
 80037c2:	9e00      	ldr	r6, [sp, #0]
  submid_min_deltmin = submid_min - (int16_t)pHandle->pParams_str->TMin;
 80037c4:	b200      	sxth	r0, r0
    if ((1 - submax_mid_deltmin + aCCRval[maxVal] + (int16_t) pHandle->pParams_str->hTADConv)
 80037c6:	8c31      	ldrh	r1, [r6, #32]
 80037c8:	9106      	str	r1, [sp, #24]
 80037ca:	2120      	movs	r1, #32
 80037cc:	5e71      	ldrsh	r1, [r6, r1]
       > (int16_t)(pHandle->Half_PWMPeriod))
 80037ce:	26b8      	movs	r6, #184	@ 0xb8
    if ((1 - submax_mid_deltmin + aCCRval[maxVal] + (int16_t) pHandle->pParams_str->hTADConv)
 80037d0:	9107      	str	r1, [sp, #28]
       > (int16_t)(pHandle->Half_PWMPeriod))
 80037d2:	5f99      	ldrsh	r1, [r3, r6]
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->TMin - (int16_t)pHandle->pParams_str->TSample;
  }
  else if ((1U == max_bad_flag) && (1U == min_bad_flag))
  {
    SamplePoint1 = (int16_t)pHandle->Half_PWMPeriod / 2;
    SamplePoint2 = SamplePoint1 + (int16_t)pHandle->pParams_str->TSample + (int16_t)pHandle->pParams_str->hTADConv;
 80037d4:	9e00      	ldr	r6, [sp, #0]
       > (int16_t)(pHandle->Half_PWMPeriod))
 80037d6:	9101      	str	r1, [sp, #4]
    SamplePoint2 = SamplePoint1 + (int16_t)pHandle->pParams_str->TSample + (int16_t)pHandle->pParams_str->hTADConv;
 80037d8:	8bf1      	ldrh	r1, [r6, #30]
    pHandle->iflag |= ALFLAG[minVal];
 80037da:	4ec6      	ldr	r6, [pc, #792]	@ (8003af4 <R1_CalcDutyCycles+0x3c4>)
    SamplePoint2 = SamplePoint1 + (int16_t)pHandle->pParams_str->TSample + (int16_t)pHandle->pParams_str->hTADConv;
 80037dc:	9105      	str	r1, [sp, #20]
    pHandle->iflag |= ALFLAG[minVal];
 80037de:	5771      	ldrsb	r1, [r6, r5]
 80037e0:	9608      	str	r6, [sp, #32]
 80037e2:	9102      	str	r1, [sp, #8]
  if(submax_mid_deltmin > 0)
 80037e4:	2c00      	cmp	r4, #0
 80037e6:	dc00      	bgt.n	80037ea <R1_CalcDutyCycles+0xba>
 80037e8:	e0db      	b.n	80039a2 <R1_CalcDutyCycles+0x272>
    pHandle->iflag |= ALFLAG[maxVal];
 80037ea:	9c04      	ldr	r4, [sp, #16]
 80037ec:	5734      	ldrsb	r4, [r6, r4]
  if(submid_min_deltmin > 0)
 80037ee:	2800      	cmp	r0, #0
 80037f0:	dc00      	bgt.n	80037f4 <R1_CalcDutyCycles+0xc4>
 80037f2:	e09a      	b.n	800392a <R1_CalcDutyCycles+0x1fa>
    pHandle->iflag |= ALFLAG[minVal];
 80037f4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80037f6:	430c      	orrs	r4, r1
 80037f8:	549c      	strb	r4, [r3, r2]
 80037fa:	464d      	mov	r5, r9
 80037fc:	4654      	mov	r4, sl
 80037fe:	4646      	mov	r6, r8
    SamplePoint1 = (int16_t)aCCRval[midVal] - (int16_t)pHandle->pParams_str->TSample;
 8003800:	465a      	mov	r2, fp
 8003802:	9905      	ldr	r1, [sp, #20]
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->TMin - (int16_t)pHandle->pParams_str->TSample;
 8003804:	9803      	ldr	r0, [sp, #12]
    SamplePoint1 = (int16_t)aCCRval[midVal] - (int16_t)pHandle->pParams_str->TSample;
 8003806:	1a52      	subs	r2, r2, r1
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->TMin - (int16_t)pHandle->pParams_str->TSample;
 8003808:	1a40      	subs	r0, r0, r1
 800380a:	4458      	add	r0, fp
    SamplePoint1 = (int16_t)aCCRval[midVal] - (int16_t)pHandle->pParams_str->TSample;
 800380c:	b212      	sxth	r2, r2
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->TMin - (int16_t)pHandle->pParams_str->TSample;
 800380e:	b200      	sxth	r0, r0
  {
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->TMin - (int16_t)pHandle->pParams_str->TSample;
    SamplePoint1 = aCCRval[midVal];
  }

  if ((SamplePoint2-SamplePoint1) < (int16_t)pHandle->pParams_str->hTADConv)
 8003810:	9907      	ldr	r1, [sp, #28]
 8003812:	1a87      	subs	r7, r0, r2
 8003814:	428f      	cmp	r7, r1
 8003816:	da13      	bge.n	8003840 <R1_CalcDutyCycles+0x110>
  {
    pHandle->iflag &=  ALFLAG[maxVal];
 8003818:	20c5      	movs	r0, #197	@ 0xc5
 800381a:	9904      	ldr	r1, [sp, #16]
 800381c:	9a08      	ldr	r2, [sp, #32]
 800381e:	5c1f      	ldrb	r7, [r3, r0]
 8003820:	5c52      	ldrb	r2, [r2, r1]
    pHandle->iflag &= ~ALFLAG[minVal];
 8003822:	9902      	ldr	r1, [sp, #8]
    pHandle->iflag &=  ALFLAG[maxVal];
 8003824:	403a      	ands	r2, r7
    pHandle->iflag &= ~ALFLAG[minVal];
 8003826:	438a      	bics	r2, r1
    SamplePoint1 = (int16_t)pHandle->Half_PWMPeriod /2 ;
 8003828:	9901      	ldr	r1, [sp, #4]
    pHandle->iflag &= ~ALFLAG[minVal];
 800382a:	541a      	strb	r2, [r3, r0]
    SamplePoint1 = (int16_t)pHandle->Half_PWMPeriod /2 ;
 800382c:	468c      	mov	ip, r1
 800382e:	0fca      	lsrs	r2, r1, #31
    SamplePoint2 = SamplePoint1 + (int16_t)pHandle->pParams_str->TSample + (int16_t)pHandle->pParams_str->hTADConv;
 8003830:	9906      	ldr	r1, [sp, #24]
    SamplePoint1 = (int16_t)pHandle->Half_PWMPeriod /2 ;
 8003832:	4462      	add	r2, ip
    SamplePoint2 = SamplePoint1 + (int16_t)pHandle->pParams_str->TSample + (int16_t)pHandle->pParams_str->hTADConv;
 8003834:	468c      	mov	ip, r1
 8003836:	9805      	ldr	r0, [sp, #20]
    SamplePoint1 = (int16_t)pHandle->Half_PWMPeriod /2 ;
 8003838:	1052      	asrs	r2, r2, #1
    SamplePoint2 = SamplePoint1 + (int16_t)pHandle->pParams_str->TSample + (int16_t)pHandle->pParams_str->hTADConv;
 800383a:	4460      	add	r0, ip
 800383c:	1880      	adds	r0, r0, r2
 800383e:	b200      	sxth	r0, r0
  {
    /* Nothing to do */
  }

  /* Saturate sampling point */
  if ((SamplePoint2 >= (int16_t)(pHandle->Half_PWMPeriod)) || (SamplePoint2 <= 0))
 8003840:	9901      	ldr	r1, [sp, #4]
 8003842:	4288      	cmp	r0, r1
 8003844:	db00      	blt.n	8003848 <R1_CalcDutyCycles+0x118>
 8003846:	e0a0      	b.n	800398a <R1_CalcDutyCycles+0x25a>
 8003848:	2800      	cmp	r0, #0
 800384a:	dc00      	bgt.n	800384e <R1_CalcDutyCycles+0x11e>
 800384c:	e09d      	b.n	800398a <R1_CalcDutyCycles+0x25a>
  }
  else
  {
    /* Nothing to do */
  }
  if ((SamplePoint1 >= (int16_t)pHandle->Half_PWMPeriod) || (SamplePoint1 <= 0))
 800384e:	9901      	ldr	r1, [sp, #4]
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->hTADConv;
 8003850:	b280      	uxth	r0, r0
  if ((SamplePoint1 >= (int16_t)pHandle->Half_PWMPeriod) || (SamplePoint1 <= 0))
 8003852:	428a      	cmp	r2, r1
 8003854:	db00      	blt.n	8003858 <R1_CalcDutyCycles+0x128>
 8003856:	e092      	b.n	800397e <R1_CalcDutyCycles+0x24e>
 8003858:	2a00      	cmp	r2, #0
 800385a:	dc00      	bgt.n	800385e <R1_CalcDutyCycles+0x12e>
 800385c:	e08f      	b.n	800397e <R1_CalcDutyCycles+0x24e>
  else
  {
    /* Nothing to do */
  }

  pHandle->CntSmp1 = SamplePoint1;
 800385e:	b292      	uxth	r2, r2
 8003860:	4693      	mov	fp, r2
 8003862:	22ba      	movs	r2, #186	@ 0xba
 8003864:	4659      	mov	r1, fp
 8003866:	5299      	strh	r1, [r3, r2]
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8003868:	990a      	ldr	r1, [sp, #40]	@ 0x28
  pHandle->CntSmp2 = SamplePoint2;
 800386a:	3202      	adds	r2, #2
 800386c:	468c      	mov	ip, r1
 800386e:	2102      	movs	r1, #2
 8003870:	5298      	strh	r0, [r3, r2]
 8003872:	9a00      	ldr	r2, [sp, #0]
 8003874:	68d7      	ldr	r7, [r2, #12]
 8003876:	4aa0      	ldr	r2, [pc, #640]	@ (8003af8 <R1_CalcDutyCycles+0x3c8>)
 8003878:	5cba      	ldrb	r2, [r7, r2]
 800387a:	4462      	add	r2, ip
 800387c:	6817      	ldr	r7, [r2, #0]
 800387e:	438f      	bics	r7, r1
 8003880:	6017      	str	r7, [r2, #0]

  /* Critical section start */
  LL_DMA_DisableIT_TC(DMAx, pHandle->pParams_str->DMAChannelX);

  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA + pHandle->aShiftval[0];
 8003882:	2794      	movs	r7, #148	@ 0x94
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
  /* Second half PWM period CCR value transfered by DMA */
  pHandle->DmaBuffCCR_latch[3]= pHandle->_Super.CntPhA - pHandle->aShiftval[0];
 8003884:	4641      	mov	r1, r8
  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA + pHandle->aShiftval[0];
 8003886:	53de      	strh	r6, [r3, r7]
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 8003888:	3702      	adds	r7, #2
 800388a:	53dd      	strh	r5, [r3, r7]
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 800388c:	3702      	adds	r7, #2
 800388e:	53dc      	strh	r4, [r3, r7]
  pHandle->DmaBuffCCR_latch[3]= pHandle->_Super.CntPhA - pHandle->aShiftval[0];
 8003890:	3702      	adds	r7, #2
 8003892:	53d9      	strh	r1, [r3, r7]
  pHandle->DmaBuffCCR_latch[4]= pHandle->_Super.CntPhB - pHandle->aShiftval[1];
 8003894:	4649      	mov	r1, r9
 8003896:	3702      	adds	r7, #2
 8003898:	53d9      	strh	r1, [r3, r7]
  pHandle->DmaBuffCCR_latch[5]= pHandle->_Super.CntPhC - pHandle->aShiftval[2];
 800389a:	4651      	mov	r1, sl
 800389c:	3702      	adds	r7, #2
 800389e:	53d9      	strh	r1, [r3, r7]

  if (pHandle->TCDoneFlag == true)
 80038a0:	372b      	adds	r7, #43	@ 0x2b
 80038a2:	5ddf      	ldrb	r7, [r3, r7]
 80038a4:	2f00      	cmp	r7, #0
 80038a6:	d011      	beq.n	80038cc <R1_CalcDutyCycles+0x19c>
  {
    /* First half PWM period CCR value transfered by DMA */
    pHandle->DmaBuffCCR[0] = pHandle->DmaBuffCCR_latch[0];
 80038a8:	2788      	movs	r7, #136	@ 0x88
 80038aa:	53de      	strh	r6, [r3, r7]
    pHandle->DmaBuffCCR[1] = pHandle->DmaBuffCCR_latch[1];
 80038ac:	268a      	movs	r6, #138	@ 0x8a
 80038ae:	539d      	strh	r5, [r3, r6]
    pHandle->DmaBuffCCR[2] = pHandle->DmaBuffCCR_latch[2];
 80038b0:	258c      	movs	r5, #140	@ 0x8c
    /* Second half PWM period CCR value transfered by DMA */
    pHandle->DmaBuffCCR[3]= pHandle->DmaBuffCCR_latch[3];
 80038b2:	4641      	mov	r1, r8
    pHandle->DmaBuffCCR[2] = pHandle->DmaBuffCCR_latch[2];
 80038b4:	535c      	strh	r4, [r3, r5]
    pHandle->DmaBuffCCR[3]= pHandle->DmaBuffCCR_latch[3];
 80038b6:	248e      	movs	r4, #142	@ 0x8e
 80038b8:	5319      	strh	r1, [r3, r4]
    pHandle->DmaBuffCCR[4]= pHandle->DmaBuffCCR_latch[4];
 80038ba:	4649      	mov	r1, r9
 80038bc:	3402      	adds	r4, #2
 80038be:	5319      	strh	r1, [r3, r4]
    pHandle->DmaBuffCCR[5]= pHandle->DmaBuffCCR_latch[5];
 80038c0:	4651      	mov	r1, sl
 80038c2:	3402      	adds	r4, #2
 80038c4:	5319      	strh	r1, [r3, r4]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80038c6:	4659      	mov	r1, fp
 80038c8:	4c8c      	ldr	r4, [pc, #560]	@ (8003afc <R1_CalcDutyCycles+0x3cc>)
 80038ca:	6421      	str	r1, [r4, #64]	@ 0x40
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 80038cc:	2502      	movs	r5, #2
 80038ce:	6814      	ldr	r4, [r2, #0]
    /* Do nothing, it will be applied during DMA transfer complete IRQ */
  }
  /* Critical section end */
  LL_DMA_EnableIT_TC(DMAx, pHandle->pParams_str->DMAChannelX);

  LL_ADC_REG_SetSequencerChannels(ADC1, __LL_ADC_DECIMAL_NB_TO_CHANNEL (pHandle->pParams_str->IChannel));
 80038d0:	9900      	ldr	r1, [sp, #0]
 80038d2:	432c      	orrs	r4, r5
 80038d4:	6014      	str	r4, [r2, #0]
 80038d6:	2222      	movs	r2, #34	@ 0x22
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80038d8:	2480      	movs	r4, #128	@ 0x80
 80038da:	5c8a      	ldrb	r2, [r1, r2]
 80038dc:	01a4      	lsls	r4, r4, #6
 80038de:	4094      	lsls	r4, r2
 80038e0:	4a87      	ldr	r2, [pc, #540]	@ (8003b00 <R1_CalcDutyCycles+0x3d0>)
 80038e2:	0b64      	lsrs	r4, r4, #13
 80038e4:	6294      	str	r4, [r2, #40]	@ 0x28
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 80038e6:	6954      	ldr	r4, [r2, #20]
  LL_ADC_SetSamplingTimeCommonChannels (ADC1, pHandle->pParams_str->ISamplingTime);
 80038e8:	3521      	adds	r5, #33	@ 0x21
 80038ea:	5d49      	ldrb	r1, [r1, r5]
 80038ec:	3d1c      	subs	r5, #28
 80038ee:	43ac      	bics	r4, r5
 80038f0:	4321      	orrs	r1, r4
 80038f2:	6151      	str	r1, [r2, #20]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 80038f4:	68d4      	ldr	r4, [r2, #12]
 80038f6:	4983      	ldr	r1, [pc, #524]	@ (8003b04 <R1_CalcDutyCycles+0x3d4>)
 80038f8:	400c      	ands	r4, r1
 80038fa:	2188      	movs	r1, #136	@ 0x88
 80038fc:	00c9      	lsls	r1, r1, #3
 80038fe:	4321      	orrs	r1, r4
 8003900:	60d1      	str	r1, [r2, #12]
  LL_ADC_REG_SetTriggerSource(ADC1, LL_ADC_REG_TRIG_EXT_TIM1_CH4);

  pHandle->DmaBuffCCR_ADCTrig[0] = SamplePoint2;
 8003902:	22ae      	movs	r2, #174	@ 0xae
  pHandle->DmaBuffCCR_ADCTrig[2] = SamplePoint1;
 8003904:	4659      	mov	r1, fp
  pHandle->DmaBuffCCR_ADCTrig[0] = SamplePoint2;
 8003906:	5298      	strh	r0, [r3, r2]
  pHandle->DmaBuffCCR_ADCTrig[2] = SamplePoint1;
 8003908:	3204      	adds	r2, #4
 800390a:	5299      	strh	r1, [r3, r2]

  /* Check software error */
  if (pHandle->FOCDurationFlag == true)
 800390c:	3216      	adds	r2, #22
 800390e:	5c99      	ldrb	r1, [r3, r2]
  }
  else
  {
    hAux = MC_NO_ERROR;
  }
  if (pHandle->_Super.SWerror == 1u)
 8003910:	3a72      	subs	r2, #114	@ 0x72
 8003912:	5a98      	ldrh	r0, [r3, r2]
 8003914:	2801      	cmp	r0, #1
 8003916:	d100      	bne.n	800391a <R1_CalcDutyCycles+0x1ea>
 8003918:	e0a1      	b.n	8003a5e <R1_CalcDutyCycles+0x32e>
  if (pHandle->FOCDurationFlag == true)
 800391a:	0008      	movs	r0, r1
  {
    /* Nothing to do */
  }

  return (hAux);
}
 800391c:	b011      	add	sp, #68	@ 0x44
 800391e:	bcf0      	pop	{r4, r5, r6, r7}
 8003920:	46bb      	mov	fp, r7
 8003922:	46b2      	mov	sl, r6
 8003924:	46a9      	mov	r9, r5
 8003926:	46a0      	mov	r8, r4
 8003928:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800392a:	b2e4      	uxtb	r4, r4
    if ((submid_min_deltmin - 1 + aCCRval[minVal]) < 0)
 800392c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800392e:	3801      	subs	r0, #1
 8003930:	42c8      	cmn	r0, r1
 8003932:	d46a      	bmi.n	8003a0a <R1_CalcDutyCycles+0x2da>
      pHandle->iflag |= ALFLAG[minVal];
 8003934:	9a02      	ldr	r2, [sp, #8]
      pHandle->aShiftval[minVal] = (uint16_t)submid_min_deltmin - 1U;
 8003936:	3554      	adds	r5, #84	@ 0x54
      pHandle->iflag |= ALFLAG[minVal];
 8003938:	4314      	orrs	r4, r2
 800393a:	22c5      	movs	r2, #197	@ 0xc5
 800393c:	549c      	strb	r4, [r3, r2]
      pHandle->aShiftval[minVal] = (uint16_t)submid_min_deltmin - 1U;
 800393e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8003940:	006d      	lsls	r5, r5, #1
 8003942:	3a01      	subs	r2, #1
 8003944:	52ea      	strh	r2, [r5, r3]
  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA + pHandle->aShiftval[0];
 8003946:	22a8      	movs	r2, #168	@ 0xa8
 8003948:	5a9f      	ldrh	r7, [r3, r2]
 800394a:	4642      	mov	r2, r8
 800394c:	19d6      	adds	r6, r2, r7
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 800394e:	22aa      	movs	r2, #170	@ 0xaa
 8003950:	5a98      	ldrh	r0, [r3, r2]
 8003952:	464a      	mov	r2, r9
 8003954:	1815      	adds	r5, r2, r0
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 8003956:	22ac      	movs	r2, #172	@ 0xac
 8003958:	4651      	mov	r1, sl
 800395a:	5a9a      	ldrh	r2, [r3, r2]
  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA + pHandle->aShiftval[0];
 800395c:	b2b6      	uxth	r6, r6
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 800395e:	188c      	adds	r4, r1, r2
  pHandle->DmaBuffCCR_latch[3]= pHandle->_Super.CntPhA - pHandle->aShiftval[0];
 8003960:	4641      	mov	r1, r8
 8003962:	1bcf      	subs	r7, r1, r7
 8003964:	b2b9      	uxth	r1, r7
 8003966:	4688      	mov	r8, r1
  pHandle->DmaBuffCCR_latch[4]= pHandle->_Super.CntPhB - pHandle->aShiftval[1];
 8003968:	4649      	mov	r1, r9
 800396a:	1a08      	subs	r0, r1, r0
 800396c:	b281      	uxth	r1, r0
 800396e:	4689      	mov	r9, r1
  pHandle->DmaBuffCCR_latch[5]= pHandle->_Super.CntPhC - pHandle->aShiftval[2];
 8003970:	4651      	mov	r1, sl
 8003972:	1a8a      	subs	r2, r1, r2
 8003974:	b292      	uxth	r2, r2
 8003976:	4692      	mov	sl, r2
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 8003978:	b2ad      	uxth	r5, r5
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 800397a:	b2a4      	uxth	r4, r4
 800397c:	e740      	b.n	8003800 <R1_CalcDutyCycles+0xd0>
    pHandle->iflag &= ~ALFLAG[minVal];
 800397e:	27c5      	movs	r7, #197	@ 0xc5
 8003980:	9902      	ldr	r1, [sp, #8]
 8003982:	5dda      	ldrb	r2, [r3, r7]
 8003984:	438a      	bics	r2, r1
 8003986:	55da      	strb	r2, [r3, r7]
    SamplePoint1 = aCCRval[midVal];
 8003988:	e76b      	b.n	8003862 <R1_CalcDutyCycles+0x132>
    pHandle->iflag &=  ALFLAG[maxVal];
 800398a:	27c5      	movs	r7, #197	@ 0xc5
 800398c:	5dd9      	ldrb	r1, [r3, r7]
 800398e:	9804      	ldr	r0, [sp, #16]
 8003990:	468c      	mov	ip, r1
 8003992:	9908      	ldr	r1, [sp, #32]
 8003994:	5c08      	ldrb	r0, [r1, r0]
 8003996:	4661      	mov	r1, ip
 8003998:	4008      	ands	r0, r1
 800399a:	55d8      	strb	r0, [r3, r7]
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->hTADConv;
 800399c:	9806      	ldr	r0, [sp, #24]
 800399e:	4458      	add	r0, fp
 80039a0:	e755      	b.n	800384e <R1_CalcDutyCycles+0x11e>
    if ((1 - submax_mid_deltmin + aCCRval[maxVal] + (int16_t) pHandle->pParams_str->hTADConv)
 80039a2:	9907      	ldr	r1, [sp, #28]
 80039a4:	1b3f      	subs	r7, r7, r4
 80039a6:	468c      	mov	ip, r1
 80039a8:	3701      	adds	r7, #1
 80039aa:	9901      	ldr	r1, [sp, #4]
 80039ac:	4467      	add	r7, ip
 80039ae:	428f      	cmp	r7, r1
 80039b0:	dc58      	bgt.n	8003a64 <R1_CalcDutyCycles+0x334>
      pHandle->iflag |= ALFLAG[maxVal];
 80039b2:	9904      	ldr	r1, [sp, #16]
 80039b4:	5677      	ldrsb	r7, [r6, r1]
      pHandle->aShiftval[maxVal] = 1U - (uint16_t)submax_mid_deltmin;
 80039b6:	3154      	adds	r1, #84	@ 0x54
 80039b8:	004e      	lsls	r6, r1, #1
 80039ba:	9903      	ldr	r1, [sp, #12]
 80039bc:	1c4c      	adds	r4, r1, #1
 80039be:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80039c0:	445c      	add	r4, fp
 80039c2:	1a64      	subs	r4, r4, r1
 80039c4:	52f4      	strh	r4, [r6, r3]
  if(submid_min_deltmin > 0)
 80039c6:	2800      	cmp	r0, #0
 80039c8:	dd5c      	ble.n	8003a84 <R1_CalcDutyCycles+0x354>
    pHandle->iflag |= ALFLAG[minVal];
 80039ca:	9a02      	ldr	r2, [sp, #8]
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 80039cc:	4649      	mov	r1, r9
    pHandle->iflag |= ALFLAG[minVal];
 80039ce:	4317      	orrs	r7, r2
 80039d0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80039d2:	549f      	strb	r7, [r3, r2]
  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA + pHandle->aShiftval[0];
 80039d4:	22a8      	movs	r2, #168	@ 0xa8
 80039d6:	5a98      	ldrh	r0, [r3, r2]
 80039d8:	4642      	mov	r2, r8
 80039da:	1816      	adds	r6, r2, r0
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 80039dc:	22aa      	movs	r2, #170	@ 0xaa
 80039de:	5a9a      	ldrh	r2, [r3, r2]
  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA + pHandle->aShiftval[0];
 80039e0:	b2b6      	uxth	r6, r6
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 80039e2:	188d      	adds	r5, r1, r2
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 80039e4:	21ac      	movs	r1, #172	@ 0xac
 80039e6:	5a5f      	ldrh	r7, [r3, r1]
 80039e8:	4651      	mov	r1, sl
 80039ea:	19cc      	adds	r4, r1, r7
  pHandle->DmaBuffCCR_latch[3]= pHandle->_Super.CntPhA - pHandle->aShiftval[0];
 80039ec:	4641      	mov	r1, r8
 80039ee:	1a08      	subs	r0, r1, r0
 80039f0:	b281      	uxth	r1, r0
 80039f2:	4688      	mov	r8, r1
  pHandle->DmaBuffCCR_latch[4]= pHandle->_Super.CntPhB - pHandle->aShiftval[1];
 80039f4:	4649      	mov	r1, r9
 80039f6:	1a8a      	subs	r2, r1, r2
 80039f8:	b292      	uxth	r2, r2
 80039fa:	4691      	mov	r9, r2
  pHandle->DmaBuffCCR_latch[5]= pHandle->_Super.CntPhC - pHandle->aShiftval[2];
 80039fc:	4652      	mov	r2, sl
 80039fe:	1bd7      	subs	r7, r2, r7
 8003a00:	b2ba      	uxth	r2, r7
 8003a02:	4692      	mov	sl, r2
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 8003a04:	b2ad      	uxth	r5, r5
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 8003a06:	b2a4      	uxth	r4, r4
 8003a08:	e6fa      	b.n	8003800 <R1_CalcDutyCycles+0xd0>
      pHandle->iflag &= ~ALFLAG[minVal];
 8003a0a:	20c5      	movs	r0, #197	@ 0xc5
 8003a0c:	9902      	ldr	r1, [sp, #8]
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 8003a0e:	464d      	mov	r5, r9
      pHandle->iflag &= ~ALFLAG[minVal];
 8003a10:	438c      	bics	r4, r1
 8003a12:	541c      	strb	r4, [r3, r0]
  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA + pHandle->aShiftval[0];
 8003a14:	24a8      	movs	r4, #168	@ 0xa8
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->TMin - (int16_t)pHandle->pParams_str->TSample;
 8003a16:	9903      	ldr	r1, [sp, #12]
 8003a18:	9805      	ldr	r0, [sp, #20]
 8003a1a:	1a08      	subs	r0, r1, r0
  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA + pHandle->aShiftval[0];
 8003a1c:	5b19      	ldrh	r1, [r3, r4]
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 8003a1e:	3402      	adds	r4, #2
 8003a20:	5b1c      	ldrh	r4, [r3, r4]
  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA + pHandle->aShiftval[0];
 8003a22:	000e      	movs	r6, r1
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 8003a24:	46a4      	mov	ip, r4
 8003a26:	9403      	str	r4, [sp, #12]
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 8003a28:	24ac      	movs	r4, #172	@ 0xac
 8003a2a:	5b1f      	ldrh	r7, [r3, r4]
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 8003a2c:	4465      	add	r5, ip
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 8003a2e:	46bc      	mov	ip, r7
  pHandle->DmaBuffCCR_latch[3]= pHandle->_Super.CntPhA - pHandle->aShiftval[0];
 8003a30:	4647      	mov	r7, r8
 8003a32:	1a79      	subs	r1, r7, r1
 8003a34:	b289      	uxth	r1, r1
  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA + pHandle->aShiftval[0];
 8003a36:	4446      	add	r6, r8
  pHandle->DmaBuffCCR_latch[3]= pHandle->_Super.CntPhA - pHandle->aShiftval[0];
 8003a38:	4688      	mov	r8, r1
  pHandle->DmaBuffCCR_latch[4]= pHandle->_Super.CntPhB - pHandle->aShiftval[1];
 8003a3a:	4649      	mov	r1, r9
 8003a3c:	9f03      	ldr	r7, [sp, #12]
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 8003a3e:	4654      	mov	r4, sl
  pHandle->DmaBuffCCR_latch[4]= pHandle->_Super.CntPhB - pHandle->aShiftval[1];
 8003a40:	1bc9      	subs	r1, r1, r7
 8003a42:	b289      	uxth	r1, r1
 8003a44:	4689      	mov	r9, r1
  pHandle->DmaBuffCCR_latch[5]= pHandle->_Super.CntPhC - pHandle->aShiftval[2];
 8003a46:	4667      	mov	r7, ip
 8003a48:	4651      	mov	r1, sl
 8003a4a:	1bcf      	subs	r7, r1, r7
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->TMin - (int16_t)pHandle->pParams_str->TSample;
 8003a4c:	4458      	add	r0, fp
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 8003a4e:	4464      	add	r4, ip
  pHandle->DmaBuffCCR_latch[5]= pHandle->_Super.CntPhC - pHandle->aShiftval[2];
 8003a50:	b2b9      	uxth	r1, r7
 8003a52:	468a      	mov	sl, r1
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->TMin - (int16_t)pHandle->pParams_str->TSample;
 8003a54:	b200      	sxth	r0, r0
  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA + pHandle->aShiftval[0];
 8003a56:	b2b6      	uxth	r6, r6
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 8003a58:	b2ad      	uxth	r5, r5
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 8003a5a:	b2a4      	uxth	r4, r4
 8003a5c:	e6d8      	b.n	8003810 <R1_CalcDutyCycles+0xe0>
    pHandle->_Super.SWerror = 0u;
 8003a5e:	2100      	movs	r1, #0
 8003a60:	5299      	strh	r1, [r3, r2]
  return (hAux);
 8003a62:	e75b      	b.n	800391c <R1_CalcDutyCycles+0x1ec>
  if(submid_min_deltmin > 0)
 8003a64:	2800      	cmp	r0, #0
 8003a66:	dd0f      	ble.n	8003a88 <R1_CalcDutyCycles+0x358>
    pHandle->iflag |= ALFLAG[minVal];
 8003a68:	4654      	mov	r4, sl
 8003a6a:	464d      	mov	r5, r9
 8003a6c:	4646      	mov	r6, r8
 8003a6e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8003a70:	9902      	ldr	r1, [sp, #8]
 8003a72:	5499      	strb	r1, [r3, r2]
    SamplePoint1 = aCCRval[midVal] - (int16_t)pHandle->pParams_str->TSample;
 8003a74:	465a      	mov	r2, fp
 8003a76:	9905      	ldr	r1, [sp, #20]
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->hTADConv;
 8003a78:	9806      	ldr	r0, [sp, #24]
    SamplePoint1 = aCCRval[midVal] - (int16_t)pHandle->pParams_str->TSample;
 8003a7a:	1a52      	subs	r2, r2, r1
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->hTADConv;
 8003a7c:	4458      	add	r0, fp
    SamplePoint1 = aCCRval[midVal] - (int16_t)pHandle->pParams_str->TSample;
 8003a7e:	b212      	sxth	r2, r2
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->hTADConv;
 8003a80:	b200      	sxth	r0, r0
 8003a82:	e6c5      	b.n	8003810 <R1_CalcDutyCycles+0xe0>
 8003a84:	b2fc      	uxtb	r4, r7
 8003a86:	e751      	b.n	800392c <R1_CalcDutyCycles+0x1fc>
    if ((submid_min_deltmin - 1 + aCCRval[minVal]) < 0)
 8003a88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003a8a:	3801      	subs	r0, #1
 8003a8c:	42d0      	cmn	r0, r2
 8003a8e:	d50d      	bpl.n	8003aac <R1_CalcDutyCycles+0x37c>
    SamplePoint1 = (int16_t)pHandle->Half_PWMPeriod / 2;
 8003a90:	468c      	mov	ip, r1
 8003a92:	0fca      	lsrs	r2, r1, #31
    SamplePoint2 = SamplePoint1 + (int16_t)pHandle->pParams_str->TSample + (int16_t)pHandle->pParams_str->hTADConv;
 8003a94:	9905      	ldr	r1, [sp, #20]
    SamplePoint1 = (int16_t)pHandle->Half_PWMPeriod / 2;
 8003a96:	4462      	add	r2, ip
    SamplePoint2 = SamplePoint1 + (int16_t)pHandle->pParams_str->TSample + (int16_t)pHandle->pParams_str->hTADConv;
 8003a98:	468c      	mov	ip, r1
 8003a9a:	9806      	ldr	r0, [sp, #24]
    SamplePoint1 = (int16_t)pHandle->Half_PWMPeriod / 2;
 8003a9c:	1052      	asrs	r2, r2, #1
    SamplePoint2 = SamplePoint1 + (int16_t)pHandle->pParams_str->TSample + (int16_t)pHandle->pParams_str->hTADConv;
 8003a9e:	4460      	add	r0, ip
 8003aa0:	1880      	adds	r0, r0, r2
 8003aa2:	4654      	mov	r4, sl
 8003aa4:	464d      	mov	r5, r9
 8003aa6:	4646      	mov	r6, r8
 8003aa8:	b200      	sxth	r0, r0
 8003aaa:	e6b1      	b.n	8003810 <R1_CalcDutyCycles+0xe0>
      pHandle->iflag |= ALFLAG[minVal];
 8003aac:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8003aae:	9902      	ldr	r1, [sp, #8]
      pHandle->aShiftval[minVal] = (uint16_t)submid_min_deltmin - 1U;
 8003ab0:	3554      	adds	r5, #84	@ 0x54
      pHandle->iflag |= ALFLAG[minVal];
 8003ab2:	5499      	strb	r1, [r3, r2]
      pHandle->aShiftval[minVal] = (uint16_t)submid_min_deltmin - 1U;
 8003ab4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8003ab6:	006d      	lsls	r5, r5, #1
 8003ab8:	3a01      	subs	r2, #1
 8003aba:	52ea      	strh	r2, [r5, r3]
  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA + pHandle->aShiftval[0];
 8003abc:	22a8      	movs	r2, #168	@ 0xa8
 8003abe:	5a98      	ldrh	r0, [r3, r2]
 8003ac0:	4642      	mov	r2, r8
 8003ac2:	1816      	adds	r6, r2, r0
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 8003ac4:	22aa      	movs	r2, #170	@ 0xaa
 8003ac6:	4649      	mov	r1, r9
 8003ac8:	5a9a      	ldrh	r2, [r3, r2]
  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA + pHandle->aShiftval[0];
 8003aca:	b2b6      	uxth	r6, r6
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 8003acc:	188d      	adds	r5, r1, r2
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 8003ace:	21ac      	movs	r1, #172	@ 0xac
 8003ad0:	5a5f      	ldrh	r7, [r3, r1]
 8003ad2:	4651      	mov	r1, sl
 8003ad4:	19cc      	adds	r4, r1, r7
  pHandle->DmaBuffCCR_latch[3]= pHandle->_Super.CntPhA - pHandle->aShiftval[0];
 8003ad6:	4641      	mov	r1, r8
 8003ad8:	1a08      	subs	r0, r1, r0
 8003ada:	b281      	uxth	r1, r0
 8003adc:	4688      	mov	r8, r1
  pHandle->DmaBuffCCR_latch[4]= pHandle->_Super.CntPhB - pHandle->aShiftval[1];
 8003ade:	4649      	mov	r1, r9
 8003ae0:	1a8a      	subs	r2, r1, r2
 8003ae2:	b292      	uxth	r2, r2
 8003ae4:	4691      	mov	r9, r2
  pHandle->DmaBuffCCR_latch[5]= pHandle->_Super.CntPhC - pHandle->aShiftval[2];
 8003ae6:	4652      	mov	r2, sl
 8003ae8:	1bd7      	subs	r7, r2, r7
 8003aea:	b2ba      	uxth	r2, r7
 8003aec:	4692      	mov	sl, r2
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 8003aee:	b2ad      	uxth	r5, r5
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 8003af0:	b2a4      	uxth	r4, r4
 8003af2:	e7bf      	b.n	8003a74 <R1_CalcDutyCycles+0x344>
 8003af4:	08006254 	.word	0x08006254
 8003af8:	08006257 	.word	0x08006257
 8003afc:	40012c00 	.word	0x40012c00
 8003b00:	40012400 	.word	0x40012400
 8003b04:	fffff23f 	.word	0xfffff23f

08003b08 <R1_Init>:
{
 8003b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b0a:	4657      	mov	r7, sl
 8003b0c:	464e      	mov	r6, r9
 8003b0e:	4645      	mov	r5, r8
 8003b10:	46de      	mov	lr, fp
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8003b12:	23cc      	movs	r3, #204	@ 0xcc
{
 8003b14:	b5e0      	push	{r5, r6, r7, lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8003b16:	58c6      	ldr	r6, [r0, r3]
{
 8003b18:	b085      	sub	sp, #20
  DMA_TypeDef * DMAx = pHandle->pParams_str->DMAx;
 8003b1a:	68b2      	ldr	r2, [r6, #8]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8003b1c:	6873      	ldr	r3, [r6, #4]
  DMA_TypeDef * DMAx = pHandle->pParams_str->DMAx;
 8003b1e:	9201      	str	r2, [sp, #4]
  pHandle->iflag = 0;
 8003b20:	2200      	movs	r2, #0
 8003b22:	4694      	mov	ip, r2
 8003b24:	4661      	mov	r1, ip
 8003b26:	32c5      	adds	r2, #197	@ 0xc5
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 8003b28:	6835      	ldr	r5, [r6, #0]
  pHandle->iflag = 0;
 8003b2a:	5481      	strb	r1, [r0, r2]
  pHandle->FOCDurationFlag = false;
 8003b2c:	3203      	adds	r2, #3
 8003b2e:	5481      	strb	r1, [r0, r2]
  pHandle->Half_PWMPeriod = (pHandle->_Super.PWMperiod/2u);
 8003b30:	3a58      	subs	r2, #88	@ 0x58
 8003b32:	5a84      	ldrh	r4, [r0, r2]
 8003b34:	4690      	mov	r8, r2
 8003b36:	0862      	lsrs	r2, r4, #1
 8003b38:	4692      	mov	sl, r2
 8003b3a:	22b8      	movs	r2, #184	@ 0xb8
 8003b3c:	4651      	mov	r1, sl
 8003b3e:	5281      	strh	r1, [r0, r2]
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8003b40:	8c32      	ldrh	r2, [r6, #32]
 8003b42:	9600      	str	r6, [sp, #0]
 8003b44:	8bf7      	ldrh	r7, [r6, #30]
 8003b46:	08a4      	lsrs	r4, r4, #2
 8003b48:	46b9      	mov	r9, r7
 8003b4a:	444a      	add	r2, r9
 8003b4c:	b292      	uxth	r2, r2
 8003b4e:	1aa7      	subs	r7, r4, r2
 8003b50:	b2bf      	uxth	r7, r7
 8003b52:	46b9      	mov	r9, r7
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8003b54:	27ba      	movs	r7, #186	@ 0xba
 8003b56:	464e      	mov	r6, r9
 8003b58:	53c6      	strh	r6, [r0, r7]
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8003b5a:	26bc      	movs	r6, #188	@ 0xbc
                   + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8003b5c:	18a2      	adds	r2, r4, r2
 8003b5e:	b292      	uxth	r2, r2
 8003b60:	0421      	lsls	r1, r4, #16
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8003b62:	5382      	strh	r2, [r0, r6]
  pHandle->_Super.CntPhB = pHandle->Half_PWMPeriod >> 1;
 8003b64:	4321      	orrs	r1, r4
  pHandle->_Super.CntPhC = pHandle->Half_PWMPeriod >> 1;
 8003b66:	3e68      	subs	r6, #104	@ 0x68
  pHandle->_Super.CntPhA = pHandle->Half_PWMPeriod >> 1;
 8003b68:	6501      	str	r1, [r0, #80]	@ 0x50
  pHandle->_Super.CntPhC = pHandle->Half_PWMPeriod >> 1;
 8003b6a:	5384      	strh	r4, [r0, r6]
  pHandle->DmaBuffCCR[0]       = pHandle->_Super.CntPhA;      /* CCR1 value overwritten during first half PWM period */
 8003b6c:	2488      	movs	r4, #136	@ 0x88
 8003b6e:	5101      	str	r1, [r0, r4]
 8003b70:	3404      	adds	r4, #4
 8003b72:	5101      	str	r1, [r0, r4]
 8003b74:	3404      	adds	r4, #4
 8003b76:	5101      	str	r1, [r0, r4]
 8003b78:	3404      	adds	r4, #4
 8003b7a:	5101      	str	r1, [r0, r4]
 8003b7c:	3404      	adds	r4, #4
 8003b7e:	5101      	str	r1, [r0, r4]
 8003b80:	3404      	adds	r4, #4
 8003b82:	5101      	str	r1, [r0, r4]
  pHandle->DmaBuffCCR_ADCTrig[0] = pHandle->CntSmp2;
 8003b84:	21ae      	movs	r1, #174	@ 0xae
 8003b86:	5242      	strh	r2, [r0, r1]
  pHandle->DmaBuffCCR_ADCTrig[1] = pHandle->Half_PWMPeriod-1u;
 8003b88:	4652      	mov	r2, sl
 8003b8a:	3102      	adds	r1, #2
 8003b8c:	3a01      	subs	r2, #1
 8003b8e:	5242      	strh	r2, [r0, r1]
  pHandle->DmaBuffCCR_ADCTrig[2] = pHandle->CntSmp1;
 8003b90:	4649      	mov	r1, r9
 8003b92:	22b2      	movs	r2, #178	@ 0xb2
 8003b94:	5281      	strh	r1, [r0, r2]
  pHandle->_Super.BrakeActionLock = false;
 8003b96:	4661      	mov	r1, ip
  SET_BIT(RCC->APB2ENR, Periphs);
 8003b98:	2480      	movs	r4, #128	@ 0x80
 8003b9a:	3a2f      	subs	r2, #47	@ 0x2f
 8003b9c:	5481      	strb	r1, [r0, r2]
 8003b9e:	4a7c      	ldr	r2, [pc, #496]	@ (8003d90 <R1_Init+0x288>)
 8003ba0:	03e4      	lsls	r4, r4, #15
 8003ba2:	6991      	ldr	r1, [r2, #24]
 8003ba4:	4321      	orrs	r1, r4
 8003ba6:	6191      	str	r1, [r2, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003ba8:	6992      	ldr	r2, [r2, #24]
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 8003baa:	497a      	ldr	r1, [pc, #488]	@ (8003d94 <R1_Init+0x28c>)
 8003bac:	4022      	ands	r2, r4
 8003bae:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 8003bb0:	9a03      	ldr	r2, [sp, #12]
 8003bb2:	2280      	movs	r2, #128	@ 0x80
 8003bb4:	68cc      	ldr	r4, [r1, #12]
 8003bb6:	0112      	lsls	r2, r2, #4
 8003bb8:	4322      	orrs	r2, r4
 8003bba:	60ca      	str	r2, [r1, #12]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8003bbc:	2101      	movs	r1, #1
 8003bbe:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8003bc0:	2408      	movs	r4, #8
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8003bc2:	438a      	bics	r2, r1
  MODIFY_REG(TIMx->CR1, (TIM_CR1_DIR | TIM_CR1_CMS), CounterMode);
 8003bc4:	4641      	mov	r1, r8
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8003bc6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(TIMx->CR1, (TIM_CR1_DIR | TIM_CR1_CMS), CounterMode);
 8003bc8:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8003bca:	9f01      	ldr	r7, [sp, #4]
 8003bcc:	438a      	bics	r2, r1
 8003bce:	3930      	subs	r1, #48	@ 0x30
 8003bd0:	430a      	orrs	r2, r1
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8003bd2:	4641      	mov	r1, r8
  MODIFY_REG(TIMx->CR1, (TIM_CR1_DIR | TIM_CR1_CMS), CounterMode);
 8003bd4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8003bd6:	685a      	ldr	r2, [r3, #4]
 8003bd8:	46b8      	mov	r8, r7
 8003bda:	438a      	bics	r2, r1
 8003bdc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8003bde:	699a      	ldr	r2, [r3, #24]
 8003be0:	496d      	ldr	r1, [pc, #436]	@ (8003d98 <R1_Init+0x290>)
 8003be2:	43a2      	bics	r2, r4
 8003be4:	619a      	str	r2, [r3, #24]
 8003be6:	699a      	ldr	r2, [r3, #24]
 8003be8:	9e00      	ldr	r6, [sp, #0]
 8003bea:	400a      	ands	r2, r1
 8003bec:	619a      	str	r2, [r3, #24]
 8003bee:	69da      	ldr	r2, [r3, #28]
 8003bf0:	43a2      	bics	r2, r4
 8003bf2:	61da      	str	r2, [r3, #28]
 8003bf4:	69da      	ldr	r2, [r3, #28]
 8003bf6:	400a      	ands	r2, r1
 8003bf8:	61da      	str	r2, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8003bfa:	2280      	movs	r2, #128	@ 0x80
 8003bfc:	6a19      	ldr	r1, [r3, #32]
 8003bfe:	0152      	lsls	r2, r2, #5
 8003c00:	430a      	orrs	r2, r1
 8003c02:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8003c04:	4662      	mov	r2, ip
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 8003c06:	2180      	movs	r1, #128	@ 0x80
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8003c08:	631a      	str	r2, [r3, #48]	@ 0x30
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8003c0a:	3a81      	subs	r2, #129	@ 0x81
 8003c0c:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 8003c0e:	68da      	ldr	r2, [r3, #12]
 8003c10:	430a      	orrs	r2, r1
 8003c12:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->CCER, Channels);
 8003c14:	6a19      	ldr	r1, [r3, #32]
 8003c16:	4a61      	ldr	r2, [pc, #388]	@ (8003d9c <R1_Init+0x294>)
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	621a      	str	r2, [r3, #32]
 8003c1c:	4960      	ldr	r1, [pc, #384]	@ (8003da0 <R1_Init+0x298>)
 8003c1e:	68f2      	ldr	r2, [r6, #12]
 8003c20:	188a      	adds	r2, r1, r2
 8003c22:	3a01      	subs	r2, #1
 8003c24:	7812      	ldrb	r2, [r2, #0]
 8003c26:	4442      	add	r2, r8
 8003c28:	6816      	ldr	r6, [r2, #0]
 8003c2a:	46b4      	mov	ip, r6
 8003c2c:	4667      	mov	r7, ip
 8003c2e:	4e5d      	ldr	r6, [pc, #372]	@ (8003da4 <R1_Init+0x29c>)
 8003c30:	46b1      	mov	r9, r6
 8003c32:	4037      	ands	r7, r6
 8003c34:	4e5c      	ldr	r6, [pc, #368]	@ (8003da8 <R1_Init+0x2a0>)
 8003c36:	4337      	orrs	r7, r6
 8003c38:	6017      	str	r7, [r2, #0]
 8003c3a:	46b0      	mov	r8, r6
  MODIFY_REG(TIMx->DCR, (TIM_DCR_DBL | TIM_DCR_DBA), (DMABurstBaseAddress | DMABurstLength));
 8003c3c:	6c9e      	ldr	r6, [r3, #72]	@ 0x48
 8003c3e:	46b2      	mov	sl, r6
 8003c40:	4657      	mov	r7, sl
 8003c42:	4e5a      	ldr	r6, [pc, #360]	@ (8003dac <R1_Init+0x2a4>)
 8003c44:	4037      	ands	r7, r6
 8003c46:	4e5a      	ldr	r6, [pc, #360]	@ (8003db0 <R1_Init+0x2a8>)
 8003c48:	4337      	orrs	r7, r6
  LL_DMA_SetMemoryAddress(DMAx, pHandle->pParams_str->DMAChannelX, (uint32_t)&pHandle->DmaBuffCCR[0]);
 8003c4a:	2688      	movs	r6, #136	@ 0x88
 8003c4c:	46b4      	mov	ip, r6
 8003c4e:	4484      	add	ip, r0
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8003c50:	4666      	mov	r6, ip
 8003c52:	649f      	str	r7, [r3, #72]	@ 0x48
 8003c54:	60d6      	str	r6, [r2, #12]
  LL_DMA_SetPeriphAddress(DMAx, pHandle->pParams_str->DMAChannelX, (uint32_t) &TIMx->DMAR);
 8003c56:	264c      	movs	r6, #76	@ 0x4c
 8003c58:	46b4      	mov	ip, r6
 8003c5a:	449c      	add	ip, r3
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8003c5c:	4666      	mov	r6, ip
 8003c5e:	6096      	str	r6, [r2, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8003c60:	6856      	ldr	r6, [r2, #4]
  LL_DMA_SetPeriphAddress(DMAx, pHandle->pParams_str->DMASamplingPtChannelX, (uint32_t) &TIMx->CCR4);
 8003c62:	3340      	adds	r3, #64	@ 0x40
 8003c64:	0c36      	lsrs	r6, r6, #16
 8003c66:	0436      	lsls	r6, r6, #16
 8003c68:	46b4      	mov	ip, r6
 8003c6a:	2606      	movs	r6, #6
 8003c6c:	4667      	mov	r7, ip
 8003c6e:	4337      	orrs	r7, r6
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8003c70:	9e00      	ldr	r6, [sp, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8003c72:	6057      	str	r7, [r2, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8003c74:	6936      	ldr	r6, [r6, #16]
 8003c76:	9f01      	ldr	r7, [sp, #4]
 8003c78:	46b4      	mov	ip, r6
 8003c7a:	2601      	movs	r6, #1
 8003c7c:	4276      	negs	r6, r6
 8003c7e:	46b2      	mov	sl, r6
 8003c80:	448c      	add	ip, r1
 8003c82:	44d4      	add	ip, sl
 8003c84:	4666      	mov	r6, ip
 8003c86:	7836      	ldrb	r6, [r6, #0]
 8003c88:	46ba      	mov	sl, r7
 8003c8a:	46b4      	mov	ip, r6
 8003c8c:	44d4      	add	ip, sl
 8003c8e:	4666      	mov	r6, ip
 8003c90:	464f      	mov	r7, r9
 8003c92:	6836      	ldr	r6, [r6, #0]
 8003c94:	4037      	ands	r7, r6
 8003c96:	46b9      	mov	r9, r7
 8003c98:	4647      	mov	r7, r8
 8003c9a:	464e      	mov	r6, r9
 8003c9c:	4337      	orrs	r7, r6
 8003c9e:	4666      	mov	r6, ip
 8003ca0:	6037      	str	r7, [r6, #0]
  LL_DMA_SetMemoryAddress(DMAx, pHandle->pParams_str->DMASamplingPtChannelX, (uint32_t)&pHandle->DmaBuffCCR_ADCTrig[0]);
 8003ca2:	26ae      	movs	r6, #174	@ 0xae
 8003ca4:	46b0      	mov	r8, r6
 8003ca6:	4480      	add	r8, r0
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8003ca8:	4666      	mov	r6, ip
 8003caa:	4647      	mov	r7, r8
 8003cac:	60f7      	str	r7, [r6, #12]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8003cae:	60b3      	str	r3, [r6, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8003cb0:	6873      	ldr	r3, [r6, #4]
 8003cb2:	2603      	movs	r6, #3
 8003cb4:	0c1b      	lsrs	r3, r3, #16
 8003cb6:	041b      	lsls	r3, r3, #16
 8003cb8:	4333      	orrs	r3, r6
 8003cba:	4666      	mov	r6, ip
 8003cbc:	6073      	str	r3, [r6, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8003cbe:	2602      	movs	r6, #2
 8003cc0:	6813      	ldr	r3, [r2, #0]
 8003cc2:	46b4      	mov	ip, r6
 8003cc4:	4333      	orrs	r3, r6
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8003cc6:	9e00      	ldr	r6, [sp, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8003cc8:	6013      	str	r3, [r2, #0]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8003cca:	69b2      	ldr	r2, [r6, #24]
  LL_DMA_SetMemoryAddress(DMAx, pHandle->pParams_str->DMA_ADC_DR_ChannelX, (uint32_t)pHandle->CurConv);
 8003ccc:	0003      	movs	r3, r0
 8003cce:	1889      	adds	r1, r1, r2
 8003cd0:	3901      	subs	r1, #1
 8003cd2:	780a      	ldrb	r2, [r1, #0]
 8003cd4:	9901      	ldr	r1, [sp, #4]
 8003cd6:	33b4      	adds	r3, #180	@ 0xb4
 8003cd8:	4688      	mov	r8, r1
 8003cda:	4442      	add	r2, r8
 8003cdc:	60d3      	str	r3, [r2, #12]
  LL_DMA_SetPeriphAddress(DMAx, pHandle->pParams_str->DMA_ADC_DR_ChannelX, (uint32_t)&ADCx->DR);
 8003cde:	002b      	movs	r3, r5
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8003ce0:	4661      	mov	r1, ip
 8003ce2:	3340      	adds	r3, #64	@ 0x40
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8003ce4:	6093      	str	r3, [r2, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8003ce6:	6853      	ldr	r3, [r2, #4]
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS));
 8003ce8:	2702      	movs	r7, #2
 8003cea:	0c1b      	lsrs	r3, r3, #16
 8003cec:	041b      	lsls	r3, r3, #16
 8003cee:	430b      	orrs	r3, r1
 8003cf0:	6053      	str	r3, [r2, #4]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8003cf2:	2204      	movs	r2, #4
 8003cf4:	686b      	ldr	r3, [r5, #4]
 8003cf6:	4393      	bics	r3, r2
 8003cf8:	606b      	str	r3, [r5, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8003cfa:	602a      	str	r2, [r5, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 8003cfc:	686b      	ldr	r3, [r5, #4]
  MODIFY_REG(ADCx->CR,
 8003cfe:	4a2d      	ldr	r2, [pc, #180]	@ (8003db4 <R1_Init+0x2ac>)
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 8003d00:	43a3      	bics	r3, r4
 8003d02:	606b      	str	r3, [r5, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOS);
 8003d04:	602c      	str	r4, [r5, #0]
  MODIFY_REG(ADCx->CR,
 8003d06:	6891      	ldr	r1, [r2, #8]
 8003d08:	4b2b      	ldr	r3, [pc, #172]	@ (8003db8 <R1_Init+0x2b0>)
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTP) == (ADC_CR_ADSTP));
 8003d0a:	3408      	adds	r4, #8
  MODIFY_REG(ADCx->CR,
 8003d0c:	4019      	ands	r1, r3
 8003d0e:	3318      	adds	r3, #24
 8003d10:	430b      	orrs	r3, r1
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 8003d12:	2104      	movs	r1, #4
  MODIFY_REG(ADCx->CR,
 8003d14:	6093      	str	r3, [r2, #8]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8003d16:	6893      	ldr	r3, [r2, #8]
         (LL_ADC_REG_IsStopConversionOngoing(ADC1) == SET) ||
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	dbfc      	blt.n	8003d16 <R1_Init+0x20e>
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 8003d1c:	6893      	ldr	r3, [r2, #8]
  while ((LL_ADC_IsCalibrationOnGoing(ADC1) == SET) ||
 8003d1e:	4219      	tst	r1, r3
 8003d20:	d1f9      	bne.n	8003d16 <R1_Init+0x20e>
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTP) == (ADC_CR_ADSTP));
 8003d22:	6893      	ldr	r3, [r2, #8]
         (LL_ADC_REG_IsConversionOngoing(ADC1) == SET) ||
 8003d24:	421c      	tst	r4, r3
 8003d26:	d1f6      	bne.n	8003d16 <R1_Init+0x20e>
  return (READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS));
 8003d28:	6893      	ldr	r3, [r2, #8]
         (LL_ADC_REG_IsStopConversionOngoing(ADC1) == SET) ||
 8003d2a:	421f      	tst	r7, r3
 8003d2c:	d1f3      	bne.n	8003d16 <R1_Init+0x20e>
  MODIFY_REG(ADCx->CR,
 8003d2e:	6893      	ldr	r3, [r2, #8]
 8003d30:	4921      	ldr	r1, [pc, #132]	@ (8003db8 <R1_Init+0x2b0>)
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8003d32:	4c22      	ldr	r4, [pc, #136]	@ (8003dbc <R1_Init+0x2b4>)
  MODIFY_REG(ADCx->CR,
 8003d34:	400b      	ands	r3, r1
 8003d36:	2101      	movs	r1, #1
 8003d38:	430b      	orrs	r3, r1
 8003d3a:	6093      	str	r3, [r2, #8]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8003d3c:	68eb      	ldr	r3, [r5, #12]
 8003d3e:	4023      	ands	r3, r4
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8003d40:	2403      	movs	r4, #3
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8003d42:	60eb      	str	r3, [r5, #12]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8003d44:	68d3      	ldr	r3, [r2, #12]
 8003d46:	43a3      	bics	r3, r4
 8003d48:	430b      	orrs	r3, r1
 8003d4a:	60d3      	str	r3, [r2, #12]
  while (LL_ADC_IsActiveFlag_ADRDY(ADC1) == RESET)
 8003d4c:	2201      	movs	r2, #1
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 8003d4e:	4919      	ldr	r1, [pc, #100]	@ (8003db4 <R1_Init+0x2ac>)
 8003d50:	680b      	ldr	r3, [r1, #0]
 8003d52:	421a      	tst	r2, r3
 8003d54:	d0fc      	beq.n	8003d50 <R1_Init+0x248>
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8003d56:	68e9      	ldr	r1, [r5, #12]
 8003d58:	4b18      	ldr	r3, [pc, #96]	@ (8003dbc <R1_Init+0x2b4>)
 8003d5a:	4019      	ands	r1, r3
 8003d5c:	2380      	movs	r3, #128	@ 0x80
 8003d5e:	00db      	lsls	r3, r3, #3
 8003d60:	430b      	orrs	r3, r1
 8003d62:	60eb      	str	r3, [r5, #12]
  LL_ADC_REG_SetSequencerChannels (ADCx, __LL_ADC_DECIMAL_NB_TO_CHANNEL (pHandle->pParams_str->IChannel));
 8003d64:	2322      	movs	r3, #34	@ 0x22
 8003d66:	9900      	ldr	r1, [sp, #0]
 8003d68:	5ccb      	ldrb	r3, [r1, r3]
 8003d6a:	0011      	movs	r1, r2
 8003d6c:	4099      	lsls	r1, r3
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003d6e:	034b      	lsls	r3, r1, #13
 8003d70:	0b5b      	lsrs	r3, r3, #13
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8003d72:	4913      	ldr	r1, [pc, #76]	@ (8003dc0 <R1_Init+0x2b8>)
 8003d74:	62ab      	str	r3, [r5, #40]	@ 0x28
 8003d76:	680b      	ldr	r3, [r1, #0]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	600b      	str	r3, [r1, #0]
  pHandle->ADCRegularLocked=false; /* We allow ADC usage for regular conversion on Systick */
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	23ca      	movs	r3, #202	@ 0xca
 8003d80:	54c2      	strb	r2, [r0, r3]
}
 8003d82:	b005      	add	sp, #20
 8003d84:	bcf0      	pop	{r4, r5, r6, r7}
 8003d86:	46bb      	mov	fp, r7
 8003d88:	46b2      	mov	sl, r6
 8003d8a:	46a9      	mov	r9, r5
 8003d8c:	46a0      	mov	r8, r4
 8003d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d90:	40021000 	.word	0x40021000
 8003d94:	40015800 	.word	0x40015800
 8003d98:	fffff7ff 	.word	0xfffff7ff
 8003d9c:	00000555 	.word	0x00000555
 8003da0:	08006258 	.word	0x08006258
 8003da4:	ffff800f 	.word	0xffff800f
 8003da8:	000035b0 	.word	0x000035b0
 8003dac:	ffffe0e0 	.word	0xffffe0e0
 8003db0:	0000020d 	.word	0x0000020d
 8003db4:	40012400 	.word	0x40012400
 8003db8:	7fffffe8 	.word	0x7fffffe8
 8003dbc:	fffff23f 	.word	0xfffff23f
 8003dc0:	40012c00 	.word	0x40012c00

08003dc4 <R1_SetOffsetCalib>:
  pHandle->PhaseOffset = offsets->phaseAOffset;
 8003dc4:	23a0      	movs	r3, #160	@ 0xa0
 8003dc6:	680a      	ldr	r2, [r1, #0]
 8003dc8:	50c2      	str	r2, [r0, r3]
  pHdl->offsetCalibStatus = true;
 8003dca:	2201      	movs	r2, #1
 8003dcc:	3b21      	subs	r3, #33	@ 0x21
 8003dce:	54c2      	strb	r2, [r0, r3]
}
 8003dd0:	4770      	bx	lr
 8003dd2:	46c0      	nop			@ (mov r8, r8)

08003dd4 <R1_GetOffsetCalib>:
  offsets->phaseAOffset = pHandle->PhaseOffset;
 8003dd4:	23a0      	movs	r3, #160	@ 0xa0
 8003dd6:	58c3      	ldr	r3, [r0, r3]
 8003dd8:	600b      	str	r3, [r1, #0]
}
 8003dda:	4770      	bx	lr

08003ddc <R1_TurnOnLowSides>:
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8003ddc:	23cc      	movs	r3, #204	@ 0xcc
{
 8003dde:	b510      	push	{r4, lr}
  pHandle->_Super.TurnOnLowSidesAction = true;
 8003de0:	227c      	movs	r2, #124	@ 0x7c
 8003de2:	2401      	movs	r4, #1
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8003de4:	58c3      	ldr	r3, [r0, r3]
 8003de6:	685b      	ldr	r3, [r3, #4]
  pHandle->_Super.TurnOnLowSidesAction = true;
 8003de8:	5484      	strb	r4, [r0, r2]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8003dea:	6359      	str	r1, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8003dec:	6399      	str	r1, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8003dee:	63d9      	str	r1, [r3, #60]	@ 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8003df0:	2101      	movs	r1, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003df2:	3a7e      	subs	r2, #126	@ 0x7e
 8003df4:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8003df6:	691a      	ldr	r2, [r3, #16]
 8003df8:	4211      	tst	r1, r2
 8003dfa:	d0fc      	beq.n	8003df6 <R1_TurnOnLowSides+0x1a>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8003dfc:	2280      	movs	r2, #128	@ 0x80
 8003dfe:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003e00:	0212      	lsls	r2, r2, #8
 8003e02:	430a      	orrs	r2, r1
 8003e04:	645a      	str	r2, [r3, #68]	@ 0x44
  if ((pHandle->_Super.LowSideOutputs) == ES_GPIO)
 8003e06:	237b      	movs	r3, #123	@ 0x7b
 8003e08:	5cc3      	ldrb	r3, [r0, r3]
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d000      	beq.n	8003e10 <R1_TurnOnLowSides+0x34>
}
 8003e0e:	bd10      	pop	{r4, pc}
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 8003e10:	2248      	movs	r2, #72	@ 0x48
 8003e12:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8003e14:	5a82      	ldrh	r2, [r0, r2]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8003e16:	619a      	str	r2, [r3, #24]
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8003e18:	224a      	movs	r2, #74	@ 0x4a
 8003e1a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8003e1c:	5a82      	ldrh	r2, [r0, r2]
 8003e1e:	619a      	str	r2, [r3, #24]
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8003e20:	224c      	movs	r2, #76	@ 0x4c
 8003e22:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8003e24:	5a82      	ldrh	r2, [r0, r2]
 8003e26:	619a      	str	r2, [r3, #24]
}
 8003e28:	e7f1      	b.n	8003e0e <R1_TurnOnLowSides+0x32>
 8003e2a:	46c0      	nop			@ (mov r8, r8)

08003e2c <R1_SwitchOnPWM>:
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8003e2c:	23cc      	movs	r3, #204	@ 0xcc
 8003e2e:	58c1      	ldr	r1, [r0, r3]
{
 8003e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e32:	46de      	mov	lr, fp
 8003e34:	4657      	mov	r7, sl
 8003e36:	464e      	mov	r6, r9
 8003e38:	4645      	mov	r5, r8
  ADC_TypeDef *ADCx = pHandle->pParams_str->ADCx;
 8003e3a:	680a      	ldr	r2, [r1, #0]
{
 8003e3c:	b5e0      	push	{r5, r6, r7, lr}
  ADC_TypeDef *ADCx = pHandle->pParams_str->ADCx;
 8003e3e:	4693      	mov	fp, r2
  DMA_TypeDef *DMAx = pHandle->pParams_str->DMAx;
 8003e40:	688a      	ldr	r2, [r1, #8]
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8003e42:	8bce      	ldrh	r6, [r1, #30]
  DMA_TypeDef *DMAx = pHandle->pParams_str->DMAx;
 8003e44:	4694      	mov	ip, r2
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8003e46:	22b8      	movs	r2, #184	@ 0xb8
 8003e48:	5a85      	ldrh	r5, [r0, r2]
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8003e4a:	8c0a      	ldrh	r2, [r1, #32]
 8003e4c:	086c      	lsrs	r4, r5, #1
 8003e4e:	1992      	adds	r2, r2, r6
 8003e50:	b292      	uxth	r2, r2
 8003e52:	1aa7      	subs	r7, r4, r2
 8003e54:	b2be      	uxth	r6, r7
 8003e56:	0037      	movs	r7, r6
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8003e58:	26ba      	movs	r6, #186	@ 0xba
{
 8003e5a:	b085      	sub	sp, #20
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8003e5c:	684b      	ldr	r3, [r1, #4]
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8003e5e:	9701      	str	r7, [sp, #4]
 8003e60:	5387      	strh	r7, [r0, r6]
  pHandle->_Super.TurnOnLowSidesAction = false;
 8003e62:	2700      	movs	r7, #0
                   + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8003e64:	18a2      	adds	r2, r4, r2
 8003e66:	b292      	uxth	r2, r2
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8003e68:	3602      	adds	r6, #2
 8003e6a:	5382      	strh	r2, [r0, r6]
  pHandle->_Super.TurnOnLowSidesAction = false;
 8003e6c:	3e40      	subs	r6, #64	@ 0x40
 8003e6e:	5587      	strb	r7, [r0, r6]
  pHandle->DmaBuffCCR_ADCTrig[0] = pHandle->CntSmp2;
 8003e70:	3632      	adds	r6, #50	@ 0x32
 8003e72:	5382      	strh	r2, [r0, r6]
  pHandle->DmaBuffCCR_ADCTrig[2] = pHandle->CntSmp1;
 8003e74:	22b2      	movs	r2, #178	@ 0xb2
 8003e76:	9e01      	ldr	r6, [sp, #4]
 8003e78:	5286      	strh	r6, [r0, r2]
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t)(pHandle->Half_PWMPeriod + 1));
 8003e7a:	1c6a      	adds	r2, r5, #1
  WRITE_REG(TIMx->CCR4, CompareValue);
 8003e7c:	641a      	str	r2, [r3, #64]	@ 0x40
 8003e7e:	9203      	str	r2, [sp, #12]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8003e80:	2280      	movs	r2, #128	@ 0x80
  WRITE_REG(TIMx->CCR1, CompareValue);
 8003e82:	635c      	str	r4, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8003e84:	639c      	str	r4, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8003e86:	63dc      	str	r4, [r3, #60]	@ 0x3c
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8003e88:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 8003e8a:	0212      	lsls	r2, r2, #8
 8003e8c:	4322      	orrs	r2, r4
 8003e8e:	645a      	str	r2, [r3, #68]	@ 0x44
  if ((pHandle->_Super.LowSideOutputs) == ES_GPIO)
 8003e90:	227b      	movs	r2, #123	@ 0x7b
 8003e92:	5c82      	ldrb	r2, [r0, r2]
 8003e94:	2a02      	cmp	r2, #2
 8003e96:	d100      	bne.n	8003e9a <R1_SwitchOnPWM+0x6e>
 8003e98:	e0cd      	b.n	8004036 <R1_SwitchOnPWM+0x20a>
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	2410      	movs	r4, #16
 8003e9e:	9f01      	ldr	r7, [sp, #4]
  if (LL_TIM_COUNTERDIRECTION_UP == LL_TIM_GetDirection(TIMx))
 8003ea0:	06d2      	lsls	r2, r2, #27
 8003ea2:	d500      	bpl.n	8003ea6 <R1_SwitchOnPWM+0x7a>
 8003ea4:	e0bf      	b.n	8004026 <R1_SwitchOnPWM+0x1fa>
 8003ea6:	681a      	ldr	r2, [r3, #0]
    while (LL_TIM_COUNTERDIRECTION_UP == LL_TIM_GetDirection(TIMx))
 8003ea8:	4214      	tst	r4, r2
 8003eaa:	d0fc      	beq.n	8003ea6 <R1_SwitchOnPWM+0x7a>
/* Make this define visible for all projects */
#define NBR_OF_MOTORS             1

__STATIC_INLINE void LL_DMA_ClearFlag_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  if (NULL == DMAx)
 8003eac:	4662      	mov	r2, ip
    /* Nothing to do */
  }
  else
  {
    /* Clear TC bits with bits position depending on parameter "Channel" */
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 8003eae:	690d      	ldr	r5, [r1, #16]
 8003eb0:	68cc      	ldr	r4, [r1, #12]
 8003eb2:	3d01      	subs	r5, #1
 8003eb4:	9701      	str	r7, [sp, #4]
 8003eb6:	9502      	str	r5, [sp, #8]
 8003eb8:	3c01      	subs	r4, #1
  if (NULL == DMAx)
 8003eba:	2a00      	cmp	r2, #0
 8003ebc:	d017      	beq.n	8003eee <R1_SwitchOnPWM+0xc2>
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 8003ebe:	00a2      	lsls	r2, r4, #2
 8003ec0:	4690      	mov	r8, r2
 8003ec2:	2602      	movs	r6, #2
 8003ec4:	4645      	mov	r5, r8
 8003ec6:	0032      	movs	r2, r6
 8003ec8:	40aa      	lsls	r2, r5
 8003eca:	4665      	mov	r5, ip
 8003ecc:	606a      	str	r2, [r5, #4]
    /* Nothing to do */
  }
  else
  {
    /* Clear HT bits with bits position depending on parameter "Channel" */
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CHTIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 8003ece:	2204      	movs	r2, #4
 8003ed0:	4645      	mov	r5, r8
 8003ed2:	0017      	movs	r7, r2
 8003ed4:	40af      	lsls	r7, r5
 8003ed6:	4665      	mov	r5, ip
 8003ed8:	606f      	str	r7, [r5, #4]
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 8003eda:	9d02      	ldr	r5, [sp, #8]
 8003edc:	00ad      	lsls	r5, r5, #2
 8003ede:	46a8      	mov	r8, r5
 8003ee0:	40ae      	lsls	r6, r5
 8003ee2:	4665      	mov	r5, ip
 8003ee4:	606e      	str	r6, [r5, #4]
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CHTIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 8003ee6:	4645      	mov	r5, r8
 8003ee8:	40aa      	lsls	r2, r5
 8003eea:	4665      	mov	r5, ip
 8003eec:	606a      	str	r2, [r5, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003eee:	2202      	movs	r2, #2
  pHandle->TCCnt = 0;
 8003ef0:	2600      	movs	r6, #0
 8003ef2:	2706      	movs	r7, #6
 8003ef4:	4252      	negs	r2, r2
 8003ef6:	611a      	str	r2, [r3, #16]
 8003ef8:	32c8      	adds	r2, #200	@ 0xc8
 8003efa:	5486      	strb	r6, [r0, r2]
  pHandle->TCDoneFlag = false;
 8003efc:	3203      	adds	r2, #3
 8003efe:	5486      	strb	r6, [r0, r2]
 8003f00:	4a5c      	ldr	r2, [pc, #368]	@ (8004074 <R1_SwitchOnPWM+0x248>)
  pHandle->TCCnt = 0;
 8003f02:	46b0      	mov	r8, r6
 8003f04:	5d14      	ldrb	r4, [r2, r4]
 8003f06:	4464      	add	r4, ip
 8003f08:	6866      	ldr	r6, [r4, #4]
 8003f0a:	0c36      	lsrs	r6, r6, #16
 8003f0c:	0436      	lsls	r6, r6, #16
 8003f0e:	433e      	orrs	r6, r7
 8003f10:	6066      	str	r6, [r4, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8003f12:	6826      	ldr	r6, [r4, #0]
 8003f14:	46b1      	mov	r9, r6
 8003f16:	2601      	movs	r6, #1
 8003f18:	464f      	mov	r7, r9
 8003f1a:	4337      	orrs	r7, r6
 8003f1c:	6027      	str	r7, [r4, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_UDE);
 8003f1e:	68df      	ldr	r7, [r3, #12]
 8003f20:	46ba      	mov	sl, r7
 8003f22:	2780      	movs	r7, #128	@ 0x80
 8003f24:	007f      	lsls	r7, r7, #1
 8003f26:	46b9      	mov	r9, r7
 8003f28:	4657      	mov	r7, sl
 8003f2a:	464d      	mov	r5, r9
 8003f2c:	432f      	orrs	r7, r5
 8003f2e:	60df      	str	r7, [r3, #12]
  SET_BIT(TIMx->DIER, TIM_DIER_CC4DE);
 8003f30:	68dd      	ldr	r5, [r3, #12]
 8003f32:	46aa      	mov	sl, r5
 8003f34:	2580      	movs	r5, #128	@ 0x80
 8003f36:	4657      	mov	r7, sl
 8003f38:	016d      	lsls	r5, r5, #5
 8003f3a:	432f      	orrs	r7, r5
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8003f3c:	9d02      	ldr	r5, [sp, #8]
 8003f3e:	60df      	str	r7, [r3, #12]
 8003f40:	5d55      	ldrb	r5, [r2, r5]
 8003f42:	2703      	movs	r7, #3
 8003f44:	4465      	add	r5, ip
 8003f46:	46a9      	mov	r9, r5
 8003f48:	686d      	ldr	r5, [r5, #4]
 8003f4a:	46ba      	mov	sl, r7
 8003f4c:	0c2d      	lsrs	r5, r5, #16
 8003f4e:	042d      	lsls	r5, r5, #16
 8003f50:	433d      	orrs	r5, r7
 8003f52:	464f      	mov	r7, r9
 8003f54:	607d      	str	r5, [r7, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8003f56:	683d      	ldr	r5, [r7, #0]
 8003f58:	4335      	orrs	r5, r6
 8003f5a:	603d      	str	r5, [r7, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8003f5c:	2702      	movs	r7, #2
  WRITE_REG(TIMx->CCR4, CompareValue);
 8003f5e:	9d03      	ldr	r5, [sp, #12]
 8003f60:	641d      	str	r5, [r3, #64]	@ 0x40
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8003f62:	698d      	ldr	r5, [r1, #24]
 8003f64:	1952      	adds	r2, r2, r5
 8003f66:	3a01      	subs	r2, #1
 8003f68:	7812      	ldrb	r2, [r2, #0]
 8003f6a:	4462      	add	r2, ip
 8003f6c:	6815      	ldr	r5, [r2, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8003f6e:	46bc      	mov	ip, r7
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8003f70:	43b5      	bics	r5, r6
 8003f72:	6015      	str	r5, [r2, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8003f74:	6855      	ldr	r5, [r2, #4]
 8003f76:	0c2d      	lsrs	r5, r5, #16
 8003f78:	042d      	lsls	r5, r5, #16
 8003f7a:	433d      	orrs	r5, r7
 8003f7c:	6055      	str	r5, [r2, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8003f7e:	6815      	ldr	r5, [r2, #0]
  LL_ADC_REG_SetSequencerChannels (ADCx, __LL_ADC_DECIMAL_NB_TO_CHANNEL (pHandle->pParams_str->IChannel));
 8003f80:	0037      	movs	r7, r6
 8003f82:	4335      	orrs	r5, r6
 8003f84:	6015      	str	r5, [r2, #0]
 8003f86:	2522      	movs	r5, #34	@ 0x22
 8003f88:	5d4d      	ldrb	r5, [r1, r5]
 8003f8a:	40af      	lsls	r7, r5
 8003f8c:	037d      	lsls	r5, r7, #13
 8003f8e:	465f      	mov	r7, fp
 8003f90:	0b6d      	lsrs	r5, r5, #13
 8003f92:	62bd      	str	r5, [r7, #40]	@ 0x28
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8003f94:	4d38      	ldr	r5, [pc, #224]	@ (8004078 <R1_SwitchOnPWM+0x24c>)
 8003f96:	696f      	ldr	r7, [r5, #20]
 8003f98:	46b9      	mov	r9, r7
  LL_ADC_SetSamplingTimeCommonChannels (ADC1, pHandle->pParams_str->ISamplingTime);
 8003f9a:	2723      	movs	r7, #35	@ 0x23
 8003f9c:	5dcf      	ldrb	r7, [r1, r7]
 8003f9e:	9702      	str	r7, [sp, #8]
 8003fa0:	2707      	movs	r7, #7
 8003fa2:	46bb      	mov	fp, r7
 8003fa4:	464f      	mov	r7, r9
 8003fa6:	4659      	mov	r1, fp
 8003fa8:	438f      	bics	r7, r1
 8003faa:	0039      	movs	r1, r7
 8003fac:	9f02      	ldr	r7, [sp, #8]
 8003fae:	430f      	orrs	r7, r1
 8003fb0:	616f      	str	r7, [r5, #20]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8003fb2:	4657      	mov	r7, sl
 8003fb4:	68e9      	ldr	r1, [r5, #12]
 8003fb6:	43b9      	bics	r1, r7
 8003fb8:	4331      	orrs	r1, r6
 8003fba:	60e9      	str	r1, [r5, #12]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8003fbc:	68e9      	ldr	r1, [r5, #12]
 8003fbe:	4f2f      	ldr	r7, [pc, #188]	@ (800407c <R1_SwitchOnPWM+0x250>)
 8003fc0:	400f      	ands	r7, r1
 8003fc2:	2188      	movs	r1, #136	@ 0x88
 8003fc4:	00c9      	lsls	r1, r1, #3
 8003fc6:	4339      	orrs	r1, r7
 8003fc8:	60e9      	str	r1, [r5, #12]
  MODIFY_REG(ADCx->CR,
 8003fca:	68a9      	ldr	r1, [r5, #8]
 8003fcc:	4f2c      	ldr	r7, [pc, #176]	@ (8004080 <R1_SwitchOnPWM+0x254>)
 8003fce:	4039      	ands	r1, r7
 8003fd0:	2704      	movs	r7, #4
 8003fd2:	4339      	orrs	r1, r7
 8003fd4:	60a9      	str	r1, [r5, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8003fd6:	2570      	movs	r5, #112	@ 0x70
 8003fd8:	6859      	ldr	r1, [r3, #4]
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8003fda:	9f01      	ldr	r7, [sp, #4]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8003fdc:	4329      	orrs	r1, r5
 8003fde:	6059      	str	r1, [r3, #4]
  pHandle->FOCDurationFlag = false;
 8003fe0:	4645      	mov	r5, r8
 8003fe2:	21c8      	movs	r1, #200	@ 0xc8
 8003fe4:	5445      	strb	r5, [r0, r1]
  pHandle->ADCRegularLocked=true;
 8003fe6:	3102      	adds	r1, #2
 8003fe8:	5446      	strb	r6, [r0, r1]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8003fea:	4660      	mov	r0, ip
 8003fec:	6821      	ldr	r1, [r4, #0]
 8003fee:	4301      	orrs	r1, r0
 8003ff0:	6021      	str	r1, [r4, #0]
 8003ff2:	6811      	ldr	r1, [r2, #0]
 8003ff4:	4301      	orrs	r1, r0
 8003ff6:	6011      	str	r1, [r2, #0]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003ff8:	2202      	movs	r2, #2
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8003ffa:	2101      	movs	r1, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003ffc:	4252      	negs	r2, r2
 8003ffe:	611a      	str	r2, [r3, #16]
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8004000:	300e      	adds	r0, #14
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8004002:	691a      	ldr	r2, [r3, #16]
 8004004:	4211      	tst	r1, r2
 8004006:	d0fc      	beq.n	8004002 <R1_SwitchOnPWM+0x1d6>
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8004008:	681a      	ldr	r2, [r3, #0]
  while ((LL_TIM_IsActiveFlag_UPDATE(TIMx) == RESET) || (LL_TIM_GetDirection(TIMx) == LL_TIM_COUNTERDIRECTION_DOWN))
 800400a:	4210      	tst	r0, r2
 800400c:	d1f9      	bne.n	8004002 <R1_SwitchOnPWM+0x1d6>
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800400e:	481d      	ldr	r0, [pc, #116]	@ (8004084 <R1_SwitchOnPWM+0x258>)
 8004010:	68c2      	ldr	r2, [r0, #12]
 8004012:	430a      	orrs	r2, r1
 8004014:	60c2      	str	r2, [r0, #12]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8004016:	641f      	str	r7, [r3, #64]	@ 0x40
}
 8004018:	b005      	add	sp, #20
 800401a:	bcf0      	pop	{r4, r5, r6, r7}
 800401c:	46bb      	mov	fp, r7
 800401e:	46b2      	mov	sl, r6
 8004020:	46a9      	mov	r9, r5
 8004022:	46a0      	mov	r8, r4
 8004024:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8004026:	681a      	ldr	r2, [r3, #0]
    while (LL_TIM_COUNTERDIRECTION_DOWN == LL_TIM_GetDirection(TIMx))
 8004028:	4214      	tst	r4, r2
 800402a:	d1fc      	bne.n	8004026 <R1_SwitchOnPWM+0x1fa>
 800402c:	2410      	movs	r4, #16
 800402e:	681a      	ldr	r2, [r3, #0]
    while (LL_TIM_COUNTERDIRECTION_UP == LL_TIM_GetDirection(TIMx))
 8004030:	4214      	tst	r4, r2
 8004032:	d0fc      	beq.n	800402e <R1_SwitchOnPWM+0x202>
 8004034:	e73a      	b.n	8003eac <R1_SwitchOnPWM+0x80>
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 8004036:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8004038:	244c      	movs	r4, #76	@ 0x4c
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 800403a:	4690      	mov	r8, r2
 800403c:	2248      	movs	r2, #72	@ 0x48
 800403e:	5a82      	ldrh	r2, [r0, r2]
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0u)
 8004040:	6a1f      	ldr	r7, [r3, #32]
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 8004042:	4691      	mov	r9, r2
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8004044:	224a      	movs	r2, #74	@ 0x4a
 8004046:	5a86      	ldrh	r6, [r0, r2]
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8004048:	6c42      	ldr	r2, [r0, #68]	@ 0x44
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800404a:	6c05      	ldr	r5, [r0, #64]	@ 0x40
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800404c:	9202      	str	r2, [sp, #8]
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0u)
 800404e:	4a0e      	ldr	r2, [pc, #56]	@ (8004088 <R1_SwitchOnPWM+0x25c>)
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8004050:	5b04      	ldrh	r4, [r0, r4]
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0u)
 8004052:	4217      	tst	r7, r2
 8004054:	d006      	beq.n	8004064 <R1_SwitchOnPWM+0x238>
 8004056:	4642      	mov	r2, r8
 8004058:	464f      	mov	r7, r9
 800405a:	6197      	str	r7, [r2, #24]
 800405c:	9a02      	ldr	r2, [sp, #8]
 800405e:	61ae      	str	r6, [r5, #24]
 8004060:	6194      	str	r4, [r2, #24]
}
 8004062:	e71a      	b.n	8003e9a <R1_SwitchOnPWM+0x6e>
  WRITE_REG(GPIOx->BRR, PinMask);
 8004064:	4642      	mov	r2, r8
 8004066:	464f      	mov	r7, r9
 8004068:	6297      	str	r7, [r2, #40]	@ 0x28
 800406a:	9a02      	ldr	r2, [sp, #8]
 800406c:	62ae      	str	r6, [r5, #40]	@ 0x28
 800406e:	6294      	str	r4, [r2, #40]	@ 0x28
}
 8004070:	e713      	b.n	8003e9a <R1_SwitchOnPWM+0x6e>
 8004072:	46c0      	nop			@ (mov r8, r8)
 8004074:	08006258 	.word	0x08006258
 8004078:	40012400 	.word	0x40012400
 800407c:	fffff23f 	.word	0xfffff23f
 8004080:	7fffffe8 	.word	0x7fffffe8
 8004084:	40012c00 	.word	0x40012c00
 8004088:	00000555 	.word	0x00000555

0800408c <R1_SwitchOffPWM>:
{
 800408c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800408e:	4657      	mov	r7, sl
 8004090:	464e      	mov	r6, r9
 8004092:	4645      	mov	r5, r8
 8004094:	46de      	mov	lr, fp
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8004096:	23cc      	movs	r3, #204	@ 0xcc
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8004098:	22b8      	movs	r2, #184	@ 0xb8
{
 800409a:	b5e0      	push	{r5, r6, r7, lr}
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 800409c:	5a82      	ldrh	r2, [r0, r2]
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800409e:	58c6      	ldr	r6, [r0, r3]
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80040a0:	0855      	lsrs	r5, r2, #1
 80040a2:	8bf4      	ldrh	r4, [r6, #30]
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 80040a4:	4694      	mov	ip, r2
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80040a6:	8c32      	ldrh	r2, [r6, #32]
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80040a8:	6873      	ldr	r3, [r6, #4]
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80040aa:	1912      	adds	r2, r2, r4
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 80040ac:	24ba      	movs	r4, #186	@ 0xba
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80040ae:	b292      	uxth	r2, r2
 80040b0:	1aaf      	subs	r7, r5, r2
 80040b2:	b2bf      	uxth	r7, r7
                   + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80040b4:	18ad      	adds	r5, r5, r2
{
 80040b6:	b083      	sub	sp, #12
  DMA_TypeDef *DMAx = pHandle->pParams_str->DMAx;
 80040b8:	68b1      	ldr	r1, [r6, #8]
                   + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80040ba:	b2ad      	uxth	r5, r5
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 80040bc:	5307      	strh	r7, [r0, r4]
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 80040be:	3402      	adds	r4, #2
 80040c0:	5305      	strh	r5, [r0, r4]
                   + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80040c2:	9501      	str	r5, [sp, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 80040c4:	2501      	movs	r5, #1
 80040c6:	68dc      	ldr	r4, [r3, #12]
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80040c8:	9700      	str	r7, [sp, #0]
 80040ca:	43ac      	bics	r4, r5
 80040cc:	60dc      	str	r4, [r3, #12]
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 80040ce:	681c      	ldr	r4, [r3, #0]
  if (LL_TIM_COUNTERDIRECTION_UP == LL_TIM_GetDirection(TIMx))
 80040d0:	06e4      	lsls	r4, r4, #27
 80040d2:	d400      	bmi.n	80040d6 <R1_SwitchOffPWM+0x4a>
 80040d4:	e0c3      	b.n	800425e <R1_SwitchOffPWM+0x1d2>
 80040d6:	2410      	movs	r4, #16
 80040d8:	46a0      	mov	r8, r4
    while (LL_TIM_COUNTERDIRECTION_DOWN == LL_TIM_GetDirection(TIMx))
 80040da:	4645      	mov	r5, r8
 80040dc:	681c      	ldr	r4, [r3, #0]
 80040de:	4225      	tst	r5, r4
 80040e0:	d1fb      	bne.n	80040da <R1_SwitchOffPWM+0x4e>
 80040e2:	2410      	movs	r4, #16
 80040e4:	46a0      	mov	r8, r4
    while (LL_TIM_COUNTERDIRECTION_UP == LL_TIM_GetDirection(TIMx))
 80040e6:	4645      	mov	r5, r8
 80040e8:	681c      	ldr	r4, [r3, #0]
 80040ea:	4225      	tst	r5, r4
 80040ec:	d0fb      	beq.n	80040e6 <R1_SwitchOffPWM+0x5a>
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 80040ee:	4c6c      	ldr	r4, [pc, #432]	@ (80042a0 <R1_SwitchOffPWM+0x214>)
 80040f0:	46a2      	mov	sl, r4
 80040f2:	68f4      	ldr	r4, [r6, #12]
 80040f4:	4454      	add	r4, sl
 80040f6:	3c01      	subs	r4, #1
 80040f8:	7824      	ldrb	r4, [r4, #0]
 80040fa:	1864      	adds	r4, r4, r1
 80040fc:	6825      	ldr	r5, [r4, #0]
 80040fe:	46a8      	mov	r8, r5
 8004100:	2502      	movs	r5, #2
 8004102:	46a9      	mov	r9, r5
 8004104:	4645      	mov	r5, r8
 8004106:	464f      	mov	r7, r9
 8004108:	43bd      	bics	r5, r7
 800410a:	6025      	str	r5, [r4, #0]
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_HTIE);
 800410c:	6825      	ldr	r5, [r4, #0]
 800410e:	46a8      	mov	r8, r5
 8004110:	2504      	movs	r5, #4
 8004112:	46a9      	mov	r9, r5
 8004114:	4645      	mov	r5, r8
 8004116:	464f      	mov	r7, r9
 8004118:	43bd      	bics	r5, r7
 800411a:	6025      	str	r5, [r4, #0]
  pHandle->_Super.TurnOnLowSidesAction = false;
 800411c:	257c      	movs	r5, #124	@ 0x7c
 800411e:	46a8      	mov	r8, r5
 8004120:	2500      	movs	r5, #0
 8004122:	46a9      	mov	r9, r5
 8004124:	4645      	mov	r5, r8
 8004126:	464f      	mov	r7, r9
 8004128:	5547      	strb	r7, [r0, r5]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800412a:	6c5d      	ldr	r5, [r3, #68]	@ 0x44
 800412c:	46a8      	mov	r8, r5
 800412e:	4d5d      	ldr	r5, [pc, #372]	@ (80042a4 <R1_SwitchOffPWM+0x218>)
 8004130:	46a9      	mov	r9, r5
 8004132:	4645      	mov	r5, r8
 8004134:	464f      	mov	r7, r9
 8004136:	403d      	ands	r5, r7
 8004138:	645d      	str	r5, [r3, #68]	@ 0x44
  if (pHandle->_Super.BrakeActionLock == true)
 800413a:	2583      	movs	r5, #131	@ 0x83
 800413c:	5d45      	ldrb	r5, [r0, r5]
 800413e:	2d00      	cmp	r5, #0
 8004140:	d104      	bne.n	800414c <R1_SwitchOffPWM+0xc0>
    if ((pHandle->_Super.LowSideOutputs) == ES_GPIO)
 8004142:	357b      	adds	r5, #123	@ 0x7b
 8004144:	5d45      	ldrb	r5, [r0, r5]
 8004146:	2d02      	cmp	r5, #2
 8004148:	d100      	bne.n	800414c <R1_SwitchOffPWM+0xc0>
 800414a:	e08f      	b.n	800426c <R1_SwitchOffPWM+0x1e0>
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800414c:	69b5      	ldr	r5, [r6, #24]
 800414e:	46a8      	mov	r8, r5
 8004150:	2501      	movs	r5, #1
 8004152:	426d      	negs	r5, r5
 8004154:	46a9      	mov	r9, r5
 8004156:	44d0      	add	r8, sl
 8004158:	44c8      	add	r8, r9
 800415a:	4645      	mov	r5, r8
 800415c:	782d      	ldrb	r5, [r5, #0]
 800415e:	46a8      	mov	r8, r5
 8004160:	4488      	add	r8, r1
 8004162:	4645      	mov	r5, r8
 8004164:	682d      	ldr	r5, [r5, #0]
 8004166:	46ab      	mov	fp, r5
 8004168:	2501      	movs	r5, #1
 800416a:	46a9      	mov	r9, r5
 800416c:	465d      	mov	r5, fp
 800416e:	464f      	mov	r7, r9
 8004170:	43bd      	bics	r5, r7
 8004172:	46ab      	mov	fp, r5
 8004174:	4645      	mov	r5, r8
 8004176:	465f      	mov	r7, fp
 8004178:	602f      	str	r7, [r5, #0]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF1);
 800417a:	464d      	mov	r5, r9
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800417c:	464f      	mov	r7, r9
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF1);
 800417e:	604d      	str	r5, [r1, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 8004180:	3501      	adds	r5, #1
 8004182:	604d      	str	r5, [r1, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF1);
 8004184:	3502      	adds	r5, #2
 8004186:	604d      	str	r5, [r1, #4]
 8004188:	46a8      	mov	r8, r5
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800418a:	6825      	ldr	r5, [r4, #0]
 800418c:	43bd      	bics	r5, r7
 800418e:	6025      	str	r5, [r4, #0]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UDE);
 8004190:	68dc      	ldr	r4, [r3, #12]
 8004192:	4d45      	ldr	r5, [pc, #276]	@ (80042a8 <R1_SwitchOffPWM+0x21c>)
 8004194:	402c      	ands	r4, r5
 8004196:	60dc      	str	r4, [r3, #12]
 8004198:	6934      	ldr	r4, [r6, #16]
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t)(pHandle->Half_PWMPeriod + 1));
 800419a:	4666      	mov	r6, ip
 800419c:	4454      	add	r4, sl
 800419e:	3c01      	subs	r4, #1
 80041a0:	7824      	ldrb	r4, [r4, #0]
 80041a2:	3601      	adds	r6, #1
 80041a4:	1909      	adds	r1, r1, r4
 80041a6:	680c      	ldr	r4, [r1, #0]
 80041a8:	43bc      	bics	r4, r7
 80041aa:	600c      	str	r4, [r1, #0]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_CC4DE);
 80041ac:	68d9      	ldr	r1, [r3, #12]
 80041ae:	4c3f      	ldr	r4, [pc, #252]	@ (80042ac <R1_SwitchOffPWM+0x220>)
 80041b0:	4021      	ands	r1, r4
 80041b2:	60d9      	str	r1, [r3, #12]
  pHandle->DmaBuffCCR_ADCTrig[0] = pHandle->CntSmp2;
 80041b4:	21ae      	movs	r1, #174	@ 0xae
 80041b6:	9c01      	ldr	r4, [sp, #4]
 80041b8:	5244      	strh	r4, [r0, r1]
  pHandle->DmaBuffCCR_ADCTrig[2] = pHandle->CntSmp1;
 80041ba:	9c00      	ldr	r4, [sp, #0]
 80041bc:	3104      	adds	r1, #4
 80041be:	5244      	strh	r4, [r0, r1]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80041c0:	2470      	movs	r4, #112	@ 0x70
  WRITE_REG(TIMx->CCR4, CompareValue);
 80041c2:	641e      	str	r6, [r3, #64]	@ 0x40
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80041c4:	6859      	ldr	r1, [r3, #4]
 80041c6:	43a1      	bics	r1, r4
  if (LL_ADC_REG_IsConversionOngoing (ADC1))
 80041c8:	4644      	mov	r4, r8
 80041ca:	6059      	str	r1, [r3, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 80041cc:	4938      	ldr	r1, [pc, #224]	@ (80042b0 <R1_SwitchOffPWM+0x224>)
 80041ce:	688b      	ldr	r3, [r1, #8]
 80041d0:	421c      	tst	r4, r3
 80041d2:	d009      	beq.n	80041e8 <R1_SwitchOffPWM+0x15c>
  MODIFY_REG(ADCx->CR,
 80041d4:	688b      	ldr	r3, [r1, #8]
 80041d6:	4c37      	ldr	r4, [pc, #220]	@ (80042b4 <R1_SwitchOffPWM+0x228>)
 80041d8:	4023      	ands	r3, r4
 80041da:	2410      	movs	r4, #16
 80041dc:	4323      	orrs	r3, r4
 80041de:	608b      	str	r3, [r1, #8]
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 80041e0:	3c0c      	subs	r4, #12
 80041e2:	688b      	ldr	r3, [r1, #8]
    while (LL_ADC_REG_IsConversionOngoing(ADC1))
 80041e4:	421c      	tst	r4, r3
 80041e6:	d1fc      	bne.n	80041e2 <R1_SwitchOffPWM+0x156>
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 80041e8:	4931      	ldr	r1, [pc, #196]	@ (80042b0 <R1_SwitchOffPWM+0x224>)
 80041ea:	4c33      	ldr	r4, [pc, #204]	@ (80042b8 <R1_SwitchOffPWM+0x22c>)
 80041ec:	68cb      	ldr	r3, [r1, #12]
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 80041ee:	27ba      	movs	r7, #186	@ 0xba
 80041f0:	4023      	ands	r3, r4
 80041f2:	60cb      	str	r3, [r1, #12]
  pHandle->ADCRegularLocked=false;
 80041f4:	2400      	movs	r4, #0
 80041f6:	23ca      	movs	r3, #202	@ 0xca
 80041f8:	54c4      	strb	r4, [r0, r3]
  pHandle->iflag = 0;
 80041fa:	3b05      	subs	r3, #5
 80041fc:	54c4      	strb	r4, [r0, r3]
  pHandle->FOCDurationFlag = false;
 80041fe:	3303      	adds	r3, #3
 8004200:	54c4      	strb	r4, [r0, r3]
  pHandle->Half_PWMPeriod = (pHandle->_Super.PWMperiod/2u);
 8004202:	3b58      	subs	r3, #88	@ 0x58
 8004204:	5ac1      	ldrh	r1, [r0, r3]
 8004206:	3348      	adds	r3, #72	@ 0x48
 8004208:	084e      	lsrs	r6, r1, #1
 800420a:	52c6      	strh	r6, [r0, r3]
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 800420c:	088b      	lsrs	r3, r1, #2
 800420e:	1a9d      	subs	r5, r3, r2
 8004210:	b2ad      	uxth	r5, r5
                   + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8004212:	18d2      	adds	r2, r2, r3
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8004214:	53c5      	strh	r5, [r0, r7]
                   + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8004216:	b292      	uxth	r2, r2
 8004218:	0419      	lsls	r1, r3, #16
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 800421a:	3702      	adds	r7, #2
 800421c:	53c2      	strh	r2, [r0, r7]
  pHandle->_Super.CntPhB = pHandle->Half_PWMPeriod >> 1;
 800421e:	4319      	orrs	r1, r3
  pHandle->_Super.CntPhC = pHandle->Half_PWMPeriod >> 1;
 8004220:	3f68      	subs	r7, #104	@ 0x68
  pHandle->_Super.CntPhA = pHandle->Half_PWMPeriod >> 1;
 8004222:	6501      	str	r1, [r0, #80]	@ 0x50
  pHandle->_Super.CntPhC = pHandle->Half_PWMPeriod >> 1;
 8004224:	53c3      	strh	r3, [r0, r7]
  pHandle->DmaBuffCCR[0]       = pHandle->_Super.CntPhA;      /* CCR1 value overwritten during first half PWM period */
 8004226:	2388      	movs	r3, #136	@ 0x88
 8004228:	50c1      	str	r1, [r0, r3]
 800422a:	3304      	adds	r3, #4
 800422c:	50c1      	str	r1, [r0, r3]
 800422e:	3304      	adds	r3, #4
 8004230:	50c1      	str	r1, [r0, r3]
 8004232:	3304      	adds	r3, #4
 8004234:	50c1      	str	r1, [r0, r3]
 8004236:	3304      	adds	r3, #4
 8004238:	50c1      	str	r1, [r0, r3]
 800423a:	3304      	adds	r3, #4
 800423c:	50c1      	str	r1, [r0, r3]
  pHandle->DmaBuffCCR_ADCTrig[0] = pHandle->CntSmp2;
 800423e:	3312      	adds	r3, #18
 8004240:	52c2      	strh	r2, [r0, r3]
  pHandle->DmaBuffCCR_ADCTrig[1] = pHandle->Half_PWMPeriod-1u;
 8004242:	22b0      	movs	r2, #176	@ 0xb0
 8004244:	3e01      	subs	r6, #1
  pHandle->DmaBuffCCR_ADCTrig[2] = pHandle->CntSmp1;
 8004246:	3304      	adds	r3, #4
  pHandle->DmaBuffCCR_ADCTrig[1] = pHandle->Half_PWMPeriod-1u;
 8004248:	5286      	strh	r6, [r0, r2]
  pHandle->DmaBuffCCR_ADCTrig[2] = pHandle->CntSmp1;
 800424a:	52c5      	strh	r5, [r0, r3]
  pHandle->_Super.BrakeActionLock = false;
 800424c:	3b2f      	subs	r3, #47	@ 0x2f
 800424e:	54c4      	strb	r4, [r0, r3]
}
 8004250:	b003      	add	sp, #12
 8004252:	bcf0      	pop	{r4, r5, r6, r7}
 8004254:	46bb      	mov	fp, r7
 8004256:	46b2      	mov	sl, r6
 8004258:	46a9      	mov	r9, r5
 800425a:	46a0      	mov	r8, r4
 800425c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 800425e:	2410      	movs	r4, #16
 8004260:	46a0      	mov	r8, r4
    while (LL_TIM_COUNTERDIRECTION_UP == LL_TIM_GetDirection(TIMx))
 8004262:	4645      	mov	r5, r8
 8004264:	681c      	ldr	r4, [r3, #0]
 8004266:	4225      	tst	r5, r4
 8004268:	d0fb      	beq.n	8004262 <R1_SwitchOffPWM+0x1d6>
 800426a:	e740      	b.n	80040ee <R1_SwitchOffPWM+0x62>
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 800426c:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 800426e:	46a8      	mov	r8, r5
 8004270:	2548      	movs	r5, #72	@ 0x48
 8004272:	5b45      	ldrh	r5, [r0, r5]
 8004274:	46a9      	mov	r9, r5
  WRITE_REG(GPIOx->BRR, PinMask);
 8004276:	4645      	mov	r5, r8
 8004278:	464f      	mov	r7, r9
 800427a:	62af      	str	r7, [r5, #40]	@ 0x28
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800427c:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 800427e:	46a8      	mov	r8, r5
 8004280:	254a      	movs	r5, #74	@ 0x4a
 8004282:	5b45      	ldrh	r5, [r0, r5]
 8004284:	46a9      	mov	r9, r5
 8004286:	4645      	mov	r5, r8
 8004288:	464f      	mov	r7, r9
 800428a:	62af      	str	r7, [r5, #40]	@ 0x28
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800428c:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 800428e:	46a8      	mov	r8, r5
 8004290:	254c      	movs	r5, #76	@ 0x4c
 8004292:	5b45      	ldrh	r5, [r0, r5]
 8004294:	46a9      	mov	r9, r5
 8004296:	4645      	mov	r5, r8
 8004298:	464f      	mov	r7, r9
 800429a:	62af      	str	r7, [r5, #40]	@ 0x28
}
 800429c:	e756      	b.n	800414c <R1_SwitchOffPWM+0xc0>
 800429e:	46c0      	nop			@ (mov r8, r8)
 80042a0:	08006258 	.word	0x08006258
 80042a4:	ffff7fff 	.word	0xffff7fff
 80042a8:	fffffeff 	.word	0xfffffeff
 80042ac:	ffffefff 	.word	0xffffefff
 80042b0:	40012400 	.word	0x40012400
 80042b4:	7fffffe8 	.word	0x7fffffe8
 80042b8:	fffff23f 	.word	0xfffff23f

080042bc <R1_CurrentReadingCalibration>:
{
 80042bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042be:	46c6      	mov	lr, r8
 80042c0:	0004      	movs	r4, r0
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80042c2:	26cc      	movs	r6, #204	@ 0xcc
  if (false == pHandle->_Super.offsetCalibStatus)
 80042c4:	277f      	movs	r7, #127	@ 0x7f
{
 80042c6:	b500      	push	{lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80042c8:	5980      	ldr	r0, [r0, r6]
  if (false == pHandle->_Super.offsetCalibStatus)
 80042ca:	5de3      	ldrb	r3, [r4, r7]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80042cc:	6845      	ldr	r5, [r0, #4]
  if (false == pHandle->_Super.offsetCalibStatus)
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d040      	beq.n	8004354 <R1_CurrentReadingCalibration+0x98>
  LL_TIM_OC_SetCompareCH1 (TIMx, pHandle->Half_PWMPeriod >> 1u);
 80042d2:	21b8      	movs	r1, #184	@ 0xb8
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_COM(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_COMG);
 80042d4:	2220      	movs	r2, #32
 80042d6:	5a63      	ldrh	r3, [r4, r1]
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 80042d8:	27ba      	movs	r7, #186	@ 0xba
  LL_TIM_OC_SetCompareCH1 (TIMx, pHandle->Half_PWMPeriod >> 1u);
 80042da:	085b      	lsrs	r3, r3, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 80042dc:	636b      	str	r3, [r5, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80042de:	63ab      	str	r3, [r5, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80042e0:	63eb      	str	r3, [r5, #60]	@ 0x3c
  SET_BIT(TIMx->EGR, TIM_EGR_COMG);
 80042e2:	696b      	ldr	r3, [r5, #20]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	616b      	str	r3, [r5, #20]
  SET_BIT(TIMx->CCER, Channels);
 80042e8:	6a2a      	ldr	r2, [r5, #32]
 80042ea:	4b32      	ldr	r3, [pc, #200]	@ (80043b4 <R1_CurrentReadingCalibration+0xf8>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	622b      	str	r3, [r5, #32]
  pHandle->iflag = 0;
 80042f0:	2500      	movs	r5, #0
 80042f2:	23c5      	movs	r3, #197	@ 0xc5
 80042f4:	54e5      	strb	r5, [r4, r3]
  pHandle->FOCDurationFlag = false;
 80042f6:	3303      	adds	r3, #3
 80042f8:	54e5      	strb	r5, [r4, r3]
  pHandle->Half_PWMPeriod = (pHandle->_Super.PWMperiod/2u);
 80042fa:	3b58      	subs	r3, #88	@ 0x58
 80042fc:	5ae2      	ldrh	r2, [r4, r3]
 80042fe:	0856      	lsrs	r6, r2, #1
 8004300:	5266      	strh	r6, [r4, r1]
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8004302:	8c03      	ldrh	r3, [r0, #32]
 8004304:	8bc0      	ldrh	r0, [r0, #30]
 8004306:	0892      	lsrs	r2, r2, #2
 8004308:	181b      	adds	r3, r3, r0
 800430a:	b29b      	uxth	r3, r3
 800430c:	1ad0      	subs	r0, r2, r3
 800430e:	b280      	uxth	r0, r0
                   + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8004310:	18d3      	adds	r3, r2, r3
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8004312:	53e0      	strh	r0, [r4, r7]
                   + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8004314:	b29b      	uxth	r3, r3
 8004316:	0411      	lsls	r1, r2, #16
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8004318:	3702      	adds	r7, #2
 800431a:	53e3      	strh	r3, [r4, r7]
  pHandle->_Super.CntPhB = pHandle->Half_PWMPeriod >> 1;
 800431c:	4311      	orrs	r1, r2
  pHandle->_Super.CntPhC = pHandle->Half_PWMPeriod >> 1;
 800431e:	3f68      	subs	r7, #104	@ 0x68
  pHandle->_Super.CntPhA = pHandle->Half_PWMPeriod >> 1;
 8004320:	6521      	str	r1, [r4, #80]	@ 0x50
  pHandle->_Super.CntPhC = pHandle->Half_PWMPeriod >> 1;
 8004322:	53e2      	strh	r2, [r4, r7]
  pHandle->DmaBuffCCR[0]       = pHandle->_Super.CntPhA;      /* CCR1 value overwritten during first half PWM period */
 8004324:	2288      	movs	r2, #136	@ 0x88
 8004326:	50a1      	str	r1, [r4, r2]
 8004328:	3204      	adds	r2, #4
 800432a:	50a1      	str	r1, [r4, r2]
 800432c:	3204      	adds	r2, #4
 800432e:	50a1      	str	r1, [r4, r2]
 8004330:	3204      	adds	r2, #4
 8004332:	50a1      	str	r1, [r4, r2]
 8004334:	3204      	adds	r2, #4
 8004336:	50a1      	str	r1, [r4, r2]
 8004338:	3204      	adds	r2, #4
 800433a:	50a1      	str	r1, [r4, r2]
  pHandle->DmaBuffCCR_ADCTrig[0] = pHandle->CntSmp2;
 800433c:	3212      	adds	r2, #18
 800433e:	52a3      	strh	r3, [r4, r2]
  pHandle->DmaBuffCCR_ADCTrig[2] = pHandle->CntSmp1;
 8004340:	23b2      	movs	r3, #178	@ 0xb2
  pHandle->DmaBuffCCR_ADCTrig[1] = pHandle->Half_PWMPeriod-1u;
 8004342:	3e01      	subs	r6, #1
 8004344:	3202      	adds	r2, #2
 8004346:	52a6      	strh	r6, [r4, r2]
  pHandle->DmaBuffCCR_ADCTrig[2] = pHandle->CntSmp1;
 8004348:	52e0      	strh	r0, [r4, r3]
  pHandle->_Super.BrakeActionLock = false;
 800434a:	3b2f      	subs	r3, #47	@ 0x2f
 800434c:	54e5      	strb	r5, [r4, r3]
}
 800434e:	bc80      	pop	{r7}
 8004350:	46b8      	mov	r8, r7
 8004352:	bdf0      	pop	{r4, r5, r6, r7, pc}
    pHandle->PhaseOffset = 0u;
 8004354:	22a0      	movs	r2, #160	@ 0xa0
 8004356:	50a3      	str	r3, [r4, r2]
 8004358:	4690      	mov	r8, r2
    pHandle->Index = 0u;
 800435a:	3224      	adds	r2, #36	@ 0x24
 800435c:	54a3      	strb	r3, [r4, r2]
  CLEAR_BIT(TIMx->CCER, Channels);
 800435e:	6a2b      	ldr	r3, [r5, #32]
 8004360:	4a15      	ldr	r2, [pc, #84]	@ (80043b8 <R1_CurrentReadingCalibration+0xfc>)
    R1_SwitchOnPWM(&pHandle->_Super);
 8004362:	0020      	movs	r0, r4
 8004364:	4013      	ands	r3, r2
 8004366:	622b      	str	r3, [r5, #32]
    pHandle->_Super.pFctGetPhaseCurrents = &R1_HFCurrentsCalibration;
 8004368:	4b14      	ldr	r3, [pc, #80]	@ (80043bc <R1_CurrentReadingCalibration+0x100>)
 800436a:	6023      	str	r3, [r4, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = &R1_SetADCSampPointPolarization;
 800436c:	4b14      	ldr	r3, [pc, #80]	@ (80043c0 <R1_CurrentReadingCalibration+0x104>)
 800436e:	6163      	str	r3, [r4, #20]
    R1_SwitchOnPWM(&pHandle->_Super);
 8004370:	f7ff fd5c 	bl	8003e2c <R1_SwitchOnPWM>
            pHandle->pParams_str->RepetitionCounter,
 8004374:	2324      	movs	r3, #36	@ 0x24
 8004376:	59a2      	ldr	r2, [r4, r6]
    waitForPolarizationEnd(TIMx,
 8004378:	0021      	movs	r1, r4
 800437a:	5cd2      	ldrb	r2, [r2, r3]
 800437c:	0023      	movs	r3, r4
 800437e:	0028      	movs	r0, r5
 8004380:	33c4      	adds	r3, #196	@ 0xc4
 8004382:	3156      	adds	r1, #86	@ 0x56
 8004384:	f7fe fe98 	bl	80030b8 <waitForPolarizationEnd>
    R1_SwitchOffPWM(&pHandle->_Super);
 8004388:	0020      	movs	r0, r4
 800438a:	f7ff fe7f 	bl	800408c <R1_SwitchOffPWM>
    pHandle->PhaseOffset >>= 4u;
 800438e:	4643      	mov	r3, r8
 8004390:	4642      	mov	r2, r8
 8004392:	58e3      	ldr	r3, [r4, r3]
 8004394:	091b      	lsrs	r3, r3, #4
 8004396:	50a3      	str	r3, [r4, r2]
    if (0U == pHandle->_Super.SWerror)
 8004398:	2356      	movs	r3, #86	@ 0x56
 800439a:	5ae3      	ldrh	r3, [r4, r3]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d101      	bne.n	80043a4 <R1_CurrentReadingCalibration+0xe8>
      pHandle->_Super.offsetCalibStatus = true;
 80043a0:	3301      	adds	r3, #1
 80043a2:	55e3      	strb	r3, [r4, r7]
    pHandle->_Super.pFctGetPhaseCurrents = &R1_GetPhaseCurrents;
 80043a4:	4b07      	ldr	r3, [pc, #28]	@ (80043c4 <R1_CurrentReadingCalibration+0x108>)
 80043a6:	6023      	str	r3, [r4, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = &R1_CalcDutyCycles;
 80043a8:	4b07      	ldr	r3, [pc, #28]	@ (80043c8 <R1_CurrentReadingCalibration+0x10c>)
 80043aa:	6163      	str	r3, [r4, #20]
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80043ac:	23cc      	movs	r3, #204	@ 0xcc
 80043ae:	58e0      	ldr	r0, [r4, r3]
 80043b0:	e78f      	b.n	80042d2 <R1_CurrentReadingCalibration+0x16>
 80043b2:	46c0      	nop			@ (mov r8, r8)
 80043b4:	00000555 	.word	0x00000555
 80043b8:	fffffaaa 	.word	0xfffffaaa
 80043bc:	08003689 	.word	0x08003689
 80043c0:	080036c5 	.word	0x080036c5
 80043c4:	0800340d 	.word	0x0800340d
 80043c8:	08003731 	.word	0x08003731

080043cc <R1_TIM1_UP_IRQHandler>:
  * @param pHdl: handler of the current instance of the PWM component
  */
__weak void *R1_TIM1_UP_IRQHandler(PWMC_R1_Handle_t *pHandle)
{

  if (pHandle->TCDoneFlag ==true)
 80043cc:	23c9      	movs	r3, #201	@ 0xc9
 80043ce:	5cc3      	ldrb	r3, [r0, r3]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00e      	beq.n	80043f2 <R1_TIM1_UP_IRQHandler+0x26>
  MODIFY_REG(ADCx->CR,
 80043d4:	4a08      	ldr	r2, [pc, #32]	@ (80043f8 <R1_TIM1_UP_IRQHandler+0x2c>)
 80043d6:	4909      	ldr	r1, [pc, #36]	@ (80043fc <R1_TIM1_UP_IRQHandler+0x30>)
 80043d8:	6893      	ldr	r3, [r2, #8]
 80043da:	400b      	ands	r3, r1
 80043dc:	2104      	movs	r1, #4
 80043de:	430b      	orrs	r3, r1
 80043e0:	6093      	str	r3, [r2, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80043e2:	4a07      	ldr	r2, [pc, #28]	@ (8004400 <R1_TIM1_UP_IRQHandler+0x34>)
 80043e4:	316c      	adds	r1, #108	@ 0x6c
 80043e6:	6853      	ldr	r3, [r2, #4]
 80043e8:	430b      	orrs	r3, r1
 80043ea:	6053      	str	r3, [r2, #4]
  {
    LL_ADC_REG_StartConversion(ADC1);
    LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_OC4REF);
    pHandle->FOCDurationFlag = true;
 80043ec:	23c8      	movs	r3, #200	@ 0xc8
 80043ee:	2201      	movs	r2, #1
 80043f0:	52c2      	strh	r2, [r0, r3]
  else
  {
    /* Nothing to do */
  }

  return (&(pHandle->_Super.Motor));
 80043f2:	3078      	adds	r0, #120	@ 0x78
}
 80043f4:	4770      	bx	lr
 80043f6:	46c0      	nop			@ (mov r8, r8)
 80043f8:	40012400 	.word	0x40012400
 80043fc:	7fffffe8 	.word	0x7fffffe8
 8004400:	40012c00 	.word	0x40012c00

08004404 <R1_DMAx_TC_IRQHandler>:
  *         Required only for R1 with rep rate > 1
  * @param pHdl: handler of the current instance of the PWM component
  */
__weak void *R1_DMAx_TC_IRQHandler(PWMC_R1_Handle_t *pHandle)
{
  DMA_TypeDef *DMAx = pHandle->pParams_str->DMAx;
 8004404:	23cc      	movs	r3, #204	@ 0xcc
 8004406:	58c2      	ldr	r2, [r0, r3]
{
 8004408:	b530      	push	{r4, r5, lr}
  DMA_TypeDef *DMAx = pHandle->pParams_str->DMAx;
 800440a:	6894      	ldr	r4, [r2, #8]
  if (NULL == DMAx)
 800440c:	2c00      	cmp	r4, #0
 800440e:	d005      	beq.n	800441c <R1_DMAx_TC_IRQHandler+0x18>
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CHTIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 8004410:	2104      	movs	r1, #4
 8004412:	68d3      	ldr	r3, [r2, #12]
 8004414:	3b01      	subs	r3, #1
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	4099      	lsls	r1, r3
 800441a:	6061      	str	r1, [r4, #4]

  LL_DMA_ClearFlag_HT(DMAx, pHandle->pParams_str->DMAChannelX);
  pHandle->TCCnt++;
 800441c:	21c6      	movs	r1, #198	@ 0xc6
  if (pHandle->TCCnt == (pHandle->pParams_str->RepetitionCounter + 1)>>1)
 800441e:	2424      	movs	r4, #36	@ 0x24
  pHandle->TCCnt++;
 8004420:	5c43      	ldrb	r3, [r0, r1]
 8004422:	3301      	adds	r3, #1
 8004424:	b2db      	uxtb	r3, r3
 8004426:	5443      	strb	r3, [r0, r1]
  if (pHandle->TCCnt == (pHandle->pParams_str->RepetitionCounter + 1)>>1)
 8004428:	5d12      	ldrb	r2, [r2, r4]
 800442a:	3201      	adds	r2, #1
 800442c:	1052      	asrs	r2, r2, #1
 800442e:	4293      	cmp	r3, r2
 8004430:	d110      	bne.n	8004454 <R1_DMAx_TC_IRQHandler+0x50>
  {
    /* First half PWM period CCR value transfered by DMA */
    pHandle->DmaBuffCCR[0] = pHandle->DmaBuffCCR_latch[0];
 8004432:	2398      	movs	r3, #152	@ 0x98
 8004434:	58c4      	ldr	r4, [r0, r3]
 8004436:	3304      	adds	r3, #4
 8004438:	58c2      	ldr	r2, [r0, r3]
 800443a:	3b08      	subs	r3, #8
 800443c:	58c5      	ldr	r5, [r0, r3]
 800443e:	3b0c      	subs	r3, #12
 8004440:	50c5      	str	r5, [r0, r3]
 8004442:	3304      	adds	r3, #4
 8004444:	50c4      	str	r4, [r0, r3]
 8004446:	3304      	adds	r3, #4
 8004448:	50c2      	str	r2, [r0, r3]
    /* Second half PWM period CCR value transfered by DMA */
    pHandle->DmaBuffCCR[3]= pHandle->DmaBuffCCR_latch[3];
    pHandle->DmaBuffCCR[4]= pHandle->DmaBuffCCR_latch[4];
    pHandle->DmaBuffCCR[5]= pHandle->DmaBuffCCR_latch[5];

    pHandle->TCCnt = 0;
 800444a:	2300      	movs	r3, #0
    pHandle->TCDoneFlag =true;
 800444c:	2201      	movs	r2, #1
    pHandle->TCCnt = 0;
 800444e:	5443      	strb	r3, [r0, r1]
    pHandle->TCDoneFlag =true;
 8004450:	33c9      	adds	r3, #201	@ 0xc9
 8004452:	54c2      	strb	r2, [r0, r3]
  }
  else
  {
  }

  return (&(pHandle->_Super.Motor));
 8004454:	3078      	adds	r0, #120	@ 0x78
}
 8004456:	bd30      	pop	{r4, r5, pc}

08004458 <RI_SetRegisterGlobal>:
#include "mcp.h"
#include "mcp_config.h"
#include "mc_configuration_registers.h"

uint8_t RI_SetRegisterGlobal(uint16_t regID, uint8_t typeID, uint8_t *data, uint16_t *size, int16_t dataAvailable)
{
 8004458:	b530      	push	{r4, r5, lr}
 800445a:	ac03      	add	r4, sp, #12
 800445c:	2500      	movs	r5, #0
 800445e:	5f64      	ldrsh	r4, [r4, r5]
  uint8_t retVal = MCP_CMD_OK;
  switch(typeID)
 8004460:	2918      	cmp	r1, #24
 8004462:	d02d      	beq.n	80044c0 <RI_SetRegisterGlobal+0x68>
 8004464:	d815      	bhi.n	8004492 <RI_SetRegisterGlobal+0x3a>
 8004466:	2908      	cmp	r1, #8
 8004468:	d031      	beq.n	80044ce <RI_SetRegisterGlobal+0x76>
 800446a:	2910      	cmp	r1, #16
 800446c:	d124      	bne.n	80044b8 <RI_SetRegisterGlobal+0x60>
      break;
    }

    case TYPE_DATA_16BIT:
    {
      switch (regID)
 800446e:	22e5      	movs	r2, #229	@ 0xe5
 8004470:	0112      	lsls	r2, r2, #4
 8004472:	4290      	cmp	r0, r2
 8004474:	d036      	beq.n	80044e4 <RI_SetRegisterGlobal+0x8c>
 8004476:	d937      	bls.n	80044e8 <RI_SetRegisterGlobal+0x90>
 8004478:	22e9      	movs	r2, #233	@ 0xe9
 800447a:	0112      	lsls	r2, r2, #4
 800447c:	4290      	cmp	r0, r2
 800447e:	d031      	beq.n	80044e4 <RI_SetRegisterGlobal+0x8c>
 8004480:	4a1f      	ldr	r2, [pc, #124]	@ (8004500 <RI_SetRegisterGlobal+0xa8>)
 8004482:	4694      	mov	ip, r2
 8004484:	4460      	add	r0, ip
 8004486:	1e42      	subs	r2, r0, #1
 8004488:	4190      	sbcs	r0, r2
 800448a:	3004      	adds	r0, #4
        {
          retVal = MCP_ERROR_UNKNOWN_REG;
          break;
        }
      }
      *size = 2;
 800448c:	2202      	movs	r2, #2
 800448e:	801a      	strh	r2, [r3, #0]
      break;
 8004490:	e015      	b.n	80044be <RI_SetRegisterGlobal+0x66>
  switch(typeID)
 8004492:	2928      	cmp	r1, #40	@ 0x28
 8004494:	d110      	bne.n	80044b8 <RI_SetRegisterGlobal+0x60>

    case TYPE_DATA_RAW:
    {
      uint16_t rawSize = *(uint16_t *)data; //cstat !MISRAC2012-Rule-11.3
      /* The size consumed by the structure is the structure size + 2 bytes used to store the size */
      *size = rawSize + 2U;
 8004496:	8812      	ldrh	r2, [r2, #0]
      uint8_t *rawData = data; /* rawData points to the first data (after size extraction) */
      rawData++;
      rawData++;

      if (*size > (uint16_t)dataAvailable)
 8004498:	b2a4      	uxth	r4, r4
      *size = rawSize + 2U;
 800449a:	3202      	adds	r2, #2
 800449c:	b292      	uxth	r2, r2
 800449e:	801a      	strh	r2, [r3, #0]
      if (*size > (uint16_t)dataAvailable)
 80044a0:	42a2      	cmp	r2, r4
 80044a2:	d81b      	bhi.n	80044dc <RI_SetRegisterGlobal+0x84>
        *size = 0;
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* This error stop the parsing of the CMD buffer */
      }
      else
      {
        switch (regID)
 80044a4:	2380      	movs	r3, #128	@ 0x80
 80044a6:	0002      	movs	r2, r0
 80044a8:	439a      	bics	r2, r3
 80044aa:	2a28      	cmp	r2, #40	@ 0x28
 80044ac:	d025      	beq.n	80044fa <RI_SetRegisterGlobal+0xa2>
        {
          case MC_REG_APPLICATION_CONFIG:
          case MC_REG_GLOBAL_CONFIG:
          case MC_REG_FOCFW_CONFIG:
          {
            retVal = MCP_ERROR_RO_REG;
 80044ae:	38e8      	subs	r0, #232	@ 0xe8
 80044b0:	1e43      	subs	r3, r0, #1
 80044b2:	4198      	sbcs	r0, r3
 80044b4:	3004      	adds	r0, #4
 80044b6:	e002      	b.n	80044be <RI_SetRegisterGlobal+0x66>
    }

    default:
    {
      retVal = MCP_ERROR_BAD_DATA_TYPE;
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 80044b8:	2200      	movs	r2, #0
      retVal = MCP_ERROR_BAD_DATA_TYPE;
 80044ba:	2007      	movs	r0, #7
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 80044bc:	801a      	strh	r2, [r3, #0]
      break;
    }
  }
  return (retVal);
}
 80044be:	bd30      	pop	{r4, r5, pc}
          retVal = MCP_ERROR_RO_REG;
 80044c0:	3818      	subs	r0, #24
 80044c2:	1e42      	subs	r2, r0, #1
 80044c4:	4190      	sbcs	r0, r2
      *size = 4;
 80044c6:	2204      	movs	r2, #4
          retVal = MCP_ERROR_RO_REG;
 80044c8:	3004      	adds	r0, #4
      *size = 4;
 80044ca:	801a      	strh	r2, [r3, #0]
      break;
 80044cc:	e7f7      	b.n	80044be <RI_SetRegisterGlobal+0x66>
          retVal = MCP_ERROR_RO_REG;
 80044ce:	3848      	subs	r0, #72	@ 0x48
 80044d0:	1e42      	subs	r2, r0, #1
 80044d2:	4190      	sbcs	r0, r2
      *size = 1;
 80044d4:	2201      	movs	r2, #1
          retVal = MCP_ERROR_RO_REG;
 80044d6:	3004      	adds	r0, #4
      *size = 1;
 80044d8:	801a      	strh	r2, [r3, #0]
      break;
 80044da:	e7f0      	b.n	80044be <RI_SetRegisterGlobal+0x66>
        *size = 0;
 80044dc:	2200      	movs	r2, #0
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* This error stop the parsing of the CMD buffer */
 80044de:	200a      	movs	r0, #10
        *size = 0;
 80044e0:	801a      	strh	r2, [r3, #0]
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* This error stop the parsing of the CMD buffer */
 80044e2:	e7ec      	b.n	80044be <RI_SetRegisterGlobal+0x66>
  uint8_t retVal = MCP_CMD_OK;
 80044e4:	2000      	movs	r0, #0
 80044e6:	e7d1      	b.n	800448c <RI_SetRegisterGlobal+0x34>
      switch (regID)
 80044e8:	2240      	movs	r2, #64	@ 0x40
 80044ea:	4390      	bics	r0, r2
 80044ec:	4a05      	ldr	r2, [pc, #20]	@ (8004504 <RI_SetRegisterGlobal+0xac>)
 80044ee:	4694      	mov	ip, r2
 80044f0:	4460      	add	r0, ip
 80044f2:	1e42      	subs	r2, r0, #1
 80044f4:	4190      	sbcs	r0, r2
 80044f6:	3004      	adds	r0, #4
 80044f8:	e7c8      	b.n	800448c <RI_SetRegisterGlobal+0x34>
            retVal = MCP_ERROR_RO_REG;
 80044fa:	2004      	movs	r0, #4
 80044fc:	e7df      	b.n	80044be <RI_SetRegisterGlobal+0x66>
 80044fe:	46c0      	nop			@ (mov r8, r8)
 8004500:	ffffe4a8 	.word	0xffffe4a8
 8004504:	fffffa70 	.word	0xfffffa70

08004508 <RI_SetRegisterMotor1>:

uint8_t RI_SetRegisterMotor1(uint16_t regID, uint8_t typeID, uint8_t *data, uint16_t *size, int16_t dataAvailable)
{
 8004508:	b570      	push	{r4, r5, r6, lr}
 800450a:	001d      	movs	r5, r3
 800450c:	ab04      	add	r3, sp, #16
 800450e:	0004      	movs	r4, r0
 8004510:	2000      	movs	r0, #0
 8004512:	5e1b      	ldrsh	r3, [r3, r0]
  uint8_t retVal = MCP_CMD_OK;
  uint8_t motorID=0;
  MCI_Handle_t *pMCIN = &Mci[motorID];

  switch(typeID)
 8004514:	2918      	cmp	r1, #24
 8004516:	d037      	beq.n	8004588 <RI_SetRegisterMotor1+0x80>
 8004518:	d816      	bhi.n	8004548 <RI_SetRegisterMotor1+0x40>
 800451a:	2908      	cmp	r1, #8
 800451c:	d040      	beq.n	80045a0 <RI_SetRegisterMotor1+0x98>
 800451e:	2910      	cmp	r1, #16
 8004520:	d12e      	bne.n	8004580 <RI_SetRegisterMotor1+0x78>
    }

    case TYPE_DATA_16BIT:
    {
      uint16_t regdata16 = *(uint16_t *)data; //cstat !MISRAC2012-Rule-11.3
      switch (regID)
 8004522:	2388      	movs	r3, #136	@ 0x88
      uint16_t regdata16 = *(uint16_t *)data; //cstat !MISRAC2012-Rule-11.3
 8004524:	8811      	ldrh	r1, [r2, #0]
      switch (regID)
 8004526:	005b      	lsls	r3, r3, #1
 8004528:	429c      	cmp	r4, r3
 800452a:	d100      	bne.n	800452e <RI_SetRegisterMotor1+0x26>
 800452c:	e079      	b.n	8004622 <RI_SetRegisterMotor1+0x11a>
 800452e:	d853      	bhi.n	80045d8 <RI_SetRegisterMotor1+0xd0>
 8004530:	2c90      	cmp	r4, #144	@ 0x90
 8004532:	d100      	bne.n	8004536 <RI_SetRegisterMotor1+0x2e>
 8004534:	e07d      	b.n	8004632 <RI_SetRegisterMotor1+0x12a>
        case MC_REG_DAC_USER2:
          break;

        default:
        {
          retVal = MCP_ERROR_UNKNOWN_REG;
 8004536:	2005      	movs	r0, #5
      switch (regID)
 8004538:	2cd0      	cmp	r4, #208	@ 0xd0
 800453a:	d163      	bne.n	8004604 <RI_SetRegisterMotor1+0xfc>
          PID_SetKI(&PIDSpeedHandle_M1, (int16_t)regdata16);
 800453c:	4861      	ldr	r0, [pc, #388]	@ (80046c4 <RI_SetRegisterMotor1+0x1bc>)
 800453e:	b209      	sxth	r1, r1
 8004540:	f001 f960 	bl	8005804 <PID_SetKI>
  uint8_t retVal = MCP_CMD_OK;
 8004544:	2000      	movs	r0, #0
 8004546:	e05d      	b.n	8004604 <RI_SetRegisterMotor1+0xfc>
  switch(typeID)
 8004548:	2928      	cmp	r1, #40	@ 0x28
 800454a:	d119      	bne.n	8004580 <RI_SetRegisterMotor1+0x78>

    case TYPE_DATA_RAW:
    {
      uint16_t rawSize = *(uint16_t *)data; //cstat !MISRAC2012-Rule-11.3
      /* The size consumed by the structure is the structure size + 2 bytes used to store the size */
      *size = rawSize + 2U;
 800454c:	8811      	ldrh	r1, [r2, #0]
      uint8_t *rawData = data; /* rawData points to the first data (after size extraction) */
      rawData++;
      rawData++;

      if (*size > (uint16_t)dataAvailable)
 800454e:	b29b      	uxth	r3, r3
      *size = rawSize + 2U;
 8004550:	3102      	adds	r1, #2
 8004552:	b289      	uxth	r1, r1
 8004554:	8029      	strh	r1, [r5, #0]
      if (*size > (uint16_t)dataAvailable)
 8004556:	4299      	cmp	r1, r3
 8004558:	d836      	bhi.n	80045c8 <RI_SetRegisterMotor1+0xc0>
        *size = 0;
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* This error stop the parsing of the CMD buffer */
      }
      else
      {
        switch (regID)
 800455a:	23d4      	movs	r3, #212	@ 0xd4
 800455c:	005b      	lsls	r3, r3, #1
 800455e:	429c      	cmp	r4, r3
 8004560:	d100      	bne.n	8004564 <RI_SetRegisterMotor1+0x5c>
 8004562:	e07c      	b.n	800465e <RI_SetRegisterMotor1+0x156>
 8004564:	d900      	bls.n	8004568 <RI_SetRegisterMotor1+0x60>
 8004566:	e089      	b.n	800467c <RI_SetRegisterMotor1+0x174>
 8004568:	0022      	movs	r2, r4
 800456a:	3b29      	subs	r3, #41	@ 0x29
 800456c:	3bff      	subs	r3, #255	@ 0xff
 800456e:	439a      	bics	r2, r3
 8004570:	2a28      	cmp	r2, #40	@ 0x28
 8004572:	d100      	bne.n	8004576 <RI_SetRegisterMotor1+0x6e>
 8004574:	e091      	b.n	800469a <RI_SetRegisterMotor1+0x192>
        {
          case MC_REG_APPLICATION_CONFIG:
          case MC_REG_GLOBAL_CONFIG:
          case MC_REG_FOCFW_CONFIG:
          {
            retVal = MCP_ERROR_RO_REG;
 8004576:	3ce8      	subs	r4, #232	@ 0xe8
 8004578:	1e63      	subs	r3, r4, #1
 800457a:	419c      	sbcs	r4, r3
 800457c:	1d20      	adds	r0, r4, #4
 800457e:	e002      	b.n	8004586 <RI_SetRegisterMotor1+0x7e>
    }

    default:
    {
      retVal = MCP_ERROR_BAD_DATA_TYPE;
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 8004580:	2300      	movs	r3, #0
      retVal = MCP_ERROR_BAD_DATA_TYPE;
 8004582:	2007      	movs	r0, #7
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 8004584:	802b      	strh	r3, [r5, #0]
      break;
    }
  }
  return (retVal);
}
 8004586:	bd70      	pop	{r4, r5, r6, pc}
      switch (regID)
 8004588:	2c58      	cmp	r4, #88	@ 0x58
 800458a:	d050      	beq.n	800462e <RI_SetRegisterMotor1+0x126>
 800458c:	2c98      	cmp	r4, #152	@ 0x98
 800458e:	d03c      	beq.n	800460a <RI_SetRegisterMotor1+0x102>
          retVal = MCP_ERROR_RO_REG;
 8004590:	0020      	movs	r0, r4
 8004592:	3818      	subs	r0, #24
 8004594:	1e43      	subs	r3, r0, #1
 8004596:	4198      	sbcs	r0, r3
 8004598:	3004      	adds	r0, #4
      *size = 4;
 800459a:	2304      	movs	r3, #4
 800459c:	802b      	strh	r3, [r5, #0]
      break;
 800459e:	e7f2      	b.n	8004586 <RI_SetRegisterMotor1+0x7e>
      switch (regID)
 80045a0:	2c48      	cmp	r4, #72	@ 0x48
 80045a2:	d015      	beq.n	80045d0 <RI_SetRegisterMotor1+0xc8>
 80045a4:	2005      	movs	r0, #5
 80045a6:	2c88      	cmp	r4, #136	@ 0x88
 80045a8:	d113      	bne.n	80045d2 <RI_SetRegisterMotor1+0xca>
          uint8_t regdata8 = *data;
 80045aa:	7813      	ldrb	r3, [r2, #0]
          if ((uint8_t)MCM_TORQUE_MODE == regdata8)
 80045ac:	2b04      	cmp	r3, #4
 80045ae:	d076      	beq.n	800469e <RI_SetRegisterMotor1+0x196>
          if ((uint8_t)MCM_SPEED_MODE == regdata8)
 80045b0:	2b03      	cmp	r3, #3
 80045b2:	d04f      	beq.n	8004654 <RI_SetRegisterMotor1+0x14c>
          if ((uint8_t)regdata8 == MCM_OPEN_LOOP_CURRENT_MODE)
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d100      	bne.n	80045ba <RI_SetRegisterMotor1+0xb2>
 80045b8:	e07c      	b.n	80046b4 <RI_SetRegisterMotor1+0x1ac>
          if ((uint8_t)regdata8 == MCM_OPEN_LOOP_VOLTAGE_MODE)
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d102      	bne.n	80045c4 <RI_SetRegisterMotor1+0xbc>
            MCI_SetOpenLoopVoltageMode(pMCIN);
 80045be:	4842      	ldr	r0, [pc, #264]	@ (80046c8 <RI_SetRegisterMotor1+0x1c0>)
 80045c0:	f7fd fe12 	bl	80021e8 <MCI_SetOpenLoopVoltageMode>
  uint8_t retVal = MCP_CMD_OK;
 80045c4:	2000      	movs	r0, #0
 80045c6:	e004      	b.n	80045d2 <RI_SetRegisterMotor1+0xca>
        *size = 0;
 80045c8:	2300      	movs	r3, #0
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* This error stop the parsing of the CMD buffer */
 80045ca:	200a      	movs	r0, #10
        *size = 0;
 80045cc:	802b      	strh	r3, [r5, #0]
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* This error stop the parsing of the CMD buffer */
 80045ce:	e7da      	b.n	8004586 <RI_SetRegisterMotor1+0x7e>
            retVal = MCP_ERROR_RO_REG;
 80045d0:	2004      	movs	r0, #4
      *size = 1;
 80045d2:	2301      	movs	r3, #1
 80045d4:	802b      	strh	r3, [r5, #0]
      break;
 80045d6:	e7d6      	b.n	8004586 <RI_SetRegisterMotor1+0x7e>
      switch (regID)
 80045d8:	23e5      	movs	r3, #229	@ 0xe5
 80045da:	011b      	lsls	r3, r3, #4
 80045dc:	429c      	cmp	r4, r3
 80045de:	d0b1      	beq.n	8004544 <RI_SetRegisterMotor1+0x3c>
 80045e0:	d82d      	bhi.n	800463e <RI_SetRegisterMotor1+0x136>
 80045e2:	239d      	movs	r3, #157	@ 0x9d
 80045e4:	011b      	lsls	r3, r3, #4
 80045e6:	429c      	cmp	r4, r3
 80045e8:	d069      	beq.n	80046be <RI_SetRegisterMotor1+0x1b6>
 80045ea:	d849      	bhi.n	8004680 <RI_SetRegisterMotor1+0x178>
 80045ec:	23b2      	movs	r3, #178	@ 0xb2
 80045ee:	2240      	movs	r2, #64	@ 0x40
 80045f0:	0021      	movs	r1, r4
 80045f2:	00db      	lsls	r3, r3, #3
 80045f4:	4391      	bics	r1, r2
 80045f6:	4299      	cmp	r1, r3
 80045f8:	d061      	beq.n	80046be <RI_SetRegisterMotor1+0x1b6>
          retVal = MCP_ERROR_RO_REG;
 80045fa:	4b34      	ldr	r3, [pc, #208]	@ (80046cc <RI_SetRegisterMotor1+0x1c4>)
 80045fc:	18e0      	adds	r0, r4, r3
 80045fe:	1e43      	subs	r3, r0, #1
 8004600:	4198      	sbcs	r0, r3
 8004602:	3004      	adds	r0, #4
      *size = 2;
 8004604:	2302      	movs	r3, #2
 8004606:	802b      	strh	r3, [r5, #0]
      break;
 8004608:	e7bd      	b.n	8004586 <RI_SetRegisterMotor1+0x7e>
          MCI_ExecSpeedRamp(pMCIN,((((int16_t)regdata32) * ((int16_t)SPEED_UNIT)) / (int16_t)U_RPM), 0);
 800460a:	2300      	movs	r3, #0
 800460c:	5ed0      	ldrsh	r0, [r2, r3]
 800460e:	2106      	movs	r1, #6
 8004610:	f7fb fe04 	bl	800021c <__divsi3>
 8004614:	2200      	movs	r2, #0
 8004616:	b201      	sxth	r1, r0
 8004618:	482b      	ldr	r0, [pc, #172]	@ (80046c8 <RI_SetRegisterMotor1+0x1c0>)
 800461a:	f7fd fdb7 	bl	800218c <MCI_ExecSpeedRamp>
  uint8_t retVal = MCP_CMD_OK;
 800461e:	2000      	movs	r0, #0
          break;
 8004620:	e7bb      	b.n	800459a <RI_SetRegisterMotor1+0x92>
          PID_SetKD(&PIDSpeedHandle_M1, (int16_t)regdata16);
 8004622:	4828      	ldr	r0, [pc, #160]	@ (80046c4 <RI_SetRegisterMotor1+0x1bc>)
 8004624:	b209      	sxth	r1, r1
 8004626:	f001 f8f9 	bl	800581c <PID_SetKD>
  uint8_t retVal = MCP_CMD_OK;
 800462a:	2000      	movs	r0, #0
 800462c:	e7ea      	b.n	8004604 <RI_SetRegisterMotor1+0xfc>
          retVal = MCP_ERROR_RO_REG;
 800462e:	2004      	movs	r0, #4
 8004630:	e7b3      	b.n	800459a <RI_SetRegisterMotor1+0x92>
          PID_SetKP(&PIDSpeedHandle_M1, (int16_t)regdata16);
 8004632:	4824      	ldr	r0, [pc, #144]	@ (80046c4 <RI_SetRegisterMotor1+0x1bc>)
 8004634:	b209      	sxth	r1, r1
 8004636:	f001 f8e3 	bl	8005800 <PID_SetKP>
  uint8_t retVal = MCP_CMD_OK;
 800463a:	2000      	movs	r0, #0
 800463c:	e7e2      	b.n	8004604 <RI_SetRegisterMotor1+0xfc>
      switch (regID)
 800463e:	23e9      	movs	r3, #233	@ 0xe9
 8004640:	011b      	lsls	r3, r3, #4
 8004642:	429c      	cmp	r4, r3
 8004644:	d100      	bne.n	8004648 <RI_SetRegisterMotor1+0x140>
 8004646:	e77d      	b.n	8004544 <RI_SetRegisterMotor1+0x3c>
          retVal = MCP_ERROR_RO_REG;
 8004648:	4b21      	ldr	r3, [pc, #132]	@ (80046d0 <RI_SetRegisterMotor1+0x1c8>)
 800464a:	18e0      	adds	r0, r4, r3
 800464c:	1e43      	subs	r3, r0, #1
 800464e:	4198      	sbcs	r0, r3
 8004650:	3004      	adds	r0, #4
 8004652:	e7d7      	b.n	8004604 <RI_SetRegisterMotor1+0xfc>
            MCI_SetSpeedMode(pMCIN);
 8004654:	481c      	ldr	r0, [pc, #112]	@ (80046c8 <RI_SetRegisterMotor1+0x1c0>)
 8004656:	f7fd fdab 	bl	80021b0 <MCI_SetSpeedMode>
  uint8_t retVal = MCP_CMD_OK;
 800465a:	2000      	movs	r0, #0
 800465c:	e7b9      	b.n	80045d2 <RI_SetRegisterMotor1+0xca>
            rpm = (((int32_t)(*(int16_t *)&rawData[2])) << 16) | *(uint16_t *)rawData; //cstat !MISRAC2012-Rule-11.3
 800465e:	8890      	ldrh	r0, [r2, #4]
 8004660:	8853      	ldrh	r3, [r2, #2]
 8004662:	0400      	lsls	r0, r0, #16
            MCI_ExecSpeedRamp(pMCIN, (int16_t)((rpm * SPEED_UNIT) / U_RPM), duration);
 8004664:	2106      	movs	r1, #6
            rpm = (((int32_t)(*(int16_t *)&rawData[2])) << 16) | *(uint16_t *)rawData; //cstat !MISRAC2012-Rule-11.3
 8004666:	4318      	orrs	r0, r3
            MCI_ExecSpeedRamp(pMCIN, (int16_t)((rpm * SPEED_UNIT) / U_RPM), duration);
 8004668:	88d4      	ldrh	r4, [r2, #6]
 800466a:	f7fb fdd7 	bl	800021c <__divsi3>
 800466e:	0022      	movs	r2, r4
 8004670:	b201      	sxth	r1, r0
 8004672:	4815      	ldr	r0, [pc, #84]	@ (80046c8 <RI_SetRegisterMotor1+0x1c0>)
 8004674:	f7fd fd8a 	bl	800218c <MCI_ExecSpeedRamp>
  uint8_t retVal = MCP_CMD_OK;
 8004678:	2000      	movs	r0, #0
            break;
 800467a:	e784      	b.n	8004586 <RI_SetRegisterMotor1+0x7e>
        switch (regID)
 800467c:	2005      	movs	r0, #5
 800467e:	e782      	b.n	8004586 <RI_SetRegisterMotor1+0x7e>
      switch (regID)
 8004680:	23a1      	movs	r3, #161	@ 0xa1
 8004682:	2240      	movs	r2, #64	@ 0x40
 8004684:	0021      	movs	r1, r4
 8004686:	011b      	lsls	r3, r3, #4
 8004688:	4391      	bics	r1, r2
 800468a:	4299      	cmp	r1, r3
 800468c:	d017      	beq.n	80046be <RI_SetRegisterMotor1+0x1b6>
          retVal = MCP_ERROR_RO_REG;
 800468e:	4b11      	ldr	r3, [pc, #68]	@ (80046d4 <RI_SetRegisterMotor1+0x1cc>)
 8004690:	18e0      	adds	r0, r4, r3
 8004692:	1e43      	subs	r3, r0, #1
 8004694:	4198      	sbcs	r0, r3
 8004696:	3004      	adds	r0, #4
 8004698:	e7b4      	b.n	8004604 <RI_SetRegisterMotor1+0xfc>
            retVal = MCP_ERROR_RO_REG;
 800469a:	2004      	movs	r0, #4
 800469c:	e773      	b.n	8004586 <RI_SetRegisterMotor1+0x7e>
            MCI_ExecTorqueRamp(pMCIN, MCI_GetTeref(pMCIN), 0);
 800469e:	4c0a      	ldr	r4, [pc, #40]	@ (80046c8 <RI_SetRegisterMotor1+0x1c0>)
 80046a0:	0020      	movs	r0, r4
 80046a2:	f7fd fea1 	bl	80023e8 <MCI_GetTeref>
 80046a6:	2200      	movs	r2, #0
 80046a8:	0001      	movs	r1, r0
 80046aa:	0020      	movs	r0, r4
 80046ac:	f7fd fd76 	bl	800219c <MCI_ExecTorqueRamp>
  uint8_t retVal = MCP_CMD_OK;
 80046b0:	2000      	movs	r0, #0
 80046b2:	e78e      	b.n	80045d2 <RI_SetRegisterMotor1+0xca>
            MCI_SetOpenLoopCurrentMode(pMCIN);
 80046b4:	4804      	ldr	r0, [pc, #16]	@ (80046c8 <RI_SetRegisterMotor1+0x1c0>)
 80046b6:	f7fd fd89 	bl	80021cc <MCI_SetOpenLoopCurrentMode>
  uint8_t retVal = MCP_CMD_OK;
 80046ba:	2000      	movs	r0, #0
 80046bc:	e789      	b.n	80045d2 <RI_SetRegisterMotor1+0xca>
          retVal = MCP_ERROR_RO_REG;
 80046be:	2004      	movs	r0, #4
 80046c0:	e7a0      	b.n	8004604 <RI_SetRegisterMotor1+0xfc>
 80046c2:	46c0      	nop			@ (mov r8, r8)
 80046c4:	20000290 	.word	0x20000290
 80046c8:	20000000 	.word	0x20000000
 80046cc:	fffff870 	.word	0xfffff870
 80046d0:	ffffe4a8 	.word	0xffffe4a8
 80046d4:	fffff570 	.word	0xfffff570

080046d8 <RI_GetRegisterGlobal>:

uint8_t RI_GetRegisterGlobal(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace){
 80046d8:	b570      	push	{r4, r5, r6, lr}
    uint8_t retVal = MCP_CMD_OK;
    switch (typeID)
 80046da:	000c      	movs	r4, r1
 80046dc:	3c08      	subs	r4, #8
uint8_t RI_GetRegisterGlobal(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace){
 80046de:	001d      	movs	r5, r3
    switch (typeID)
 80046e0:	b2e4      	uxtb	r4, r4
uint8_t RI_GetRegisterGlobal(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace){
 80046e2:	ab04      	add	r3, sp, #16
 80046e4:	0006      	movs	r6, r0
 80046e6:	2000      	movs	r0, #0
 80046e8:	5e1b      	ldrsh	r3, [r3, r0]
    switch (typeID)
 80046ea:	2c20      	cmp	r4, #32
 80046ec:	d803      	bhi.n	80046f6 <RI_GetRegisterGlobal+0x1e>
 80046ee:	4821      	ldr	r0, [pc, #132]	@ (8004774 <RI_GetRegisterGlobal+0x9c>)
 80046f0:	00a4      	lsls	r4, r4, #2
 80046f2:	5900      	ldr	r0, [r0, r4]
 80046f4:	4687      	mov	pc, r0
 80046f6:	2007      	movs	r0, #7
        retVal = MCP_ERROR_BAD_DATA_TYPE;
        break;
      }
    }
  return (retVal);
}
 80046f8:	bd70      	pop	{r4, r5, r6, pc}
        switch (regID)
 80046fa:	2e28      	cmp	r6, #40	@ 0x28
 80046fc:	d026      	beq.n	800474c <RI_GetRegisterGlobal+0x74>
        *size = (*rawSize) + 2U;
 80046fe:	8813      	ldrh	r3, [r2, #0]
            retVal = MCP_ERROR_UNKNOWN_REG;
 8004700:	2005      	movs	r0, #5
        *size = (*rawSize) + 2U;
 8004702:	3302      	adds	r3, #2
 8004704:	b29b      	uxth	r3, r3
 8004706:	802b      	strh	r3, [r5, #0]
        break;
 8004708:	e7f6      	b.n	80046f8 <RI_GetRegisterGlobal+0x20>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 800470a:	0008      	movs	r0, r1
        if (freeSpace > 0)
 800470c:	2b00      	cmp	r3, #0
 800470e:	ddf3      	ble.n	80046f8 <RI_GetRegisterGlobal+0x20>
          *size = 1;
 8004710:	2301      	movs	r3, #1
            retVal = MCP_ERROR_UNKNOWN_REG;
 8004712:	2005      	movs	r0, #5
          *size = 1;
 8004714:	802b      	strh	r3, [r5, #0]
 8004716:	e7ef      	b.n	80046f8 <RI_GetRegisterGlobal+0x20>
        if (freeSpace >= 2)
 8004718:	2b01      	cmp	r3, #1
 800471a:	dd29      	ble.n	8004770 <RI_GetRegisterGlobal+0x98>
          switch (regID)
 800471c:	4b16      	ldr	r3, [pc, #88]	@ (8004778 <RI_GetRegisterGlobal+0xa0>)
 800471e:	18f0      	adds	r0, r6, r3
 8004720:	4b16      	ldr	r3, [pc, #88]	@ (800477c <RI_GetRegisterGlobal+0xa4>)
 8004722:	4018      	ands	r0, r3
 8004724:	4243      	negs	r3, r0
 8004726:	4158      	adcs	r0, r3
 8004728:	2304      	movs	r3, #4
 800472a:	4240      	negs	r0, r0
 800472c:	4398      	bics	r0, r3
          *size = 2;
 800472e:	3b02      	subs	r3, #2
          switch (regID)
 8004730:	3005      	adds	r0, #5
          *size = 2;
 8004732:	802b      	strh	r3, [r5, #0]
 8004734:	e7e0      	b.n	80046f8 <RI_GetRegisterGlobal+0x20>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8004736:	2008      	movs	r0, #8
        if (freeSpace >= 4)
 8004738:	2b03      	cmp	r3, #3
 800473a:	dddd      	ble.n	80046f8 <RI_GetRegisterGlobal+0x20>
          *size = 4;
 800473c:	2304      	movs	r3, #4
            retVal = MCP_ERROR_UNKNOWN_REG;
 800473e:	3803      	subs	r0, #3
          *size = 4;
 8004740:	802b      	strh	r3, [r5, #0]
 8004742:	e7d9      	b.n	80046f8 <RI_GetRegisterGlobal+0x20>
            *size= 0 ; /* */
 8004744:	2300      	movs	r3, #0
            retVal = MCP_ERROR_UNKNOWN_REG;
 8004746:	2005      	movs	r0, #5
            *size= 0 ; /* */
 8004748:	802b      	strh	r3, [r5, #0]
        break;
 800474a:	e7d5      	b.n	80046f8 <RI_GetRegisterGlobal+0x20>
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 800474c:	210a      	movs	r1, #10
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 800474e:	b29b      	uxth	r3, r3
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 8004750:	8011      	strh	r1, [r2, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8004752:	2b0b      	cmp	r3, #11
 8004754:	d803      	bhi.n	800475e <RI_GetRegisterGlobal+0x86>
 8004756:	230c      	movs	r3, #12
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8004758:	2008      	movs	r0, #8
        *size = (*rawSize) + 2U;
 800475a:	802b      	strh	r3, [r5, #0]
        break;
 800475c:	e7cc      	b.n	80046f8 <RI_GetRegisterGlobal+0x20>
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 800475e:	1c90      	adds	r0, r2, #2
 8004760:	4907      	ldr	r1, [pc, #28]	@ (8004780 <RI_GetRegisterGlobal+0xa8>)
 8004762:	220a      	movs	r2, #10
 8004764:	f001 fad6 	bl	8005d14 <memcpy>
 8004768:	230c      	movs	r3, #12
    uint8_t retVal = MCP_CMD_OK;
 800476a:	2000      	movs	r0, #0
        *size = (*rawSize) + 2U;
 800476c:	802b      	strh	r3, [r5, #0]
        break;
 800476e:	e7c3      	b.n	80046f8 <RI_GetRegisterGlobal+0x20>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8004770:	2008      	movs	r0, #8
 8004772:	e7c1      	b.n	80046f8 <RI_GetRegisterGlobal+0x20>
 8004774:	08006260 	.word	0x08006260
 8004778:	fffff1b0 	.word	0xfffff1b0
 800477c:	0000ffbf 	.word	0x0000ffbf
 8004780:	08005ec4 	.word	0x08005ec4

08004784 <RI_GetRegisterMotor1>:

  uint8_t RI_GetRegisterMotor1(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace) {
 8004784:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t retVal = MCP_CMD_OK;
    uint8_t motorID=0;
    MCI_Handle_t *pMCIN = &Mci[motorID];
    BusVoltageSensor_Handle_t* BusVoltageSensor= &BusVoltageSensor_M1._Super;
    switch (typeID)
 8004786:	000c      	movs	r4, r1
  uint8_t RI_GetRegisterMotor1(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace) {
 8004788:	b085      	sub	sp, #20
    switch (typeID)
 800478a:	3c08      	subs	r4, #8
  uint8_t RI_GetRegisterMotor1(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace) {
 800478c:	001e      	movs	r6, r3
    switch (typeID)
 800478e:	b2e4      	uxtb	r4, r4
  uint8_t RI_GetRegisterMotor1(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace) {
 8004790:	ab0a      	add	r3, sp, #40	@ 0x28
 8004792:	0017      	movs	r7, r2
 8004794:	0005      	movs	r5, r0
 8004796:	2200      	movs	r2, #0
 8004798:	5e9b      	ldrsh	r3, [r3, r2]
    switch (typeID)
 800479a:	2c20      	cmp	r4, #32
 800479c:	d803      	bhi.n	80047a6 <RI_GetRegisterMotor1+0x22>
 800479e:	4a92      	ldr	r2, [pc, #584]	@ (80049e8 <RI_GetRegisterMotor1+0x264>)
 80047a0:	00a4      	lsls	r4, r4, #2
 80047a2:	5912      	ldr	r2, [r2, r4]
 80047a4:	4697      	mov	pc, r2
 80047a6:	2007      	movs	r0, #7
        retVal = MCP_ERROR_BAD_DATA_TYPE;
        break;
      }
    }
    return (retVal);
  }
 80047a8:	b005      	add	sp, #20
 80047aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        switch (regID)
 80047ac:	2294      	movs	r2, #148	@ 0x94
 80047ae:	0052      	lsls	r2, r2, #1
 80047b0:	4290      	cmp	r0, r2
 80047b2:	d100      	bne.n	80047b6 <RI_GetRegisterMotor1+0x32>
 80047b4:	e0a9      	b.n	800490a <RI_GetRegisterMotor1+0x186>
 80047b6:	d900      	bls.n	80047ba <RI_GetRegisterMotor1+0x36>
 80047b8:	e080      	b.n	80048bc <RI_GetRegisterMotor1+0x138>
        rawData++;
 80047ba:	1cb8      	adds	r0, r7, #2
        switch (regID)
 80047bc:	2da8      	cmp	r5, #168	@ 0xa8
 80047be:	d100      	bne.n	80047c2 <RI_GetRegisterMotor1+0x3e>
 80047c0:	e09a      	b.n	80048f8 <RI_GetRegisterMotor1+0x174>
 80047c2:	2de8      	cmp	r5, #232	@ 0xe8
 80047c4:	d169      	bne.n	800489a <RI_GetRegisterMotor1+0x116>
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 80047c6:	220e      	movs	r2, #14
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80047c8:	b29b      	uxth	r3, r3
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 80047ca:	803a      	strh	r2, [r7, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80047cc:	2b0f      	cmp	r3, #15
 80047ce:	d900      	bls.n	80047d2 <RI_GetRegisterMotor1+0x4e>
 80047d0:	e0de      	b.n	8004990 <RI_GetRegisterMotor1+0x20c>
 80047d2:	2310      	movs	r3, #16
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80047d4:	2008      	movs	r0, #8
        *size = (*rawSize) + 2U;
 80047d6:	8033      	strh	r3, [r6, #0]
        break;
 80047d8:	e7e6      	b.n	80047a8 <RI_GetRegisterMotor1+0x24>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80047da:	0008      	movs	r0, r1
        if (freeSpace > 0)
 80047dc:	2b00      	cmp	r3, #0
 80047de:	dde3      	ble.n	80047a8 <RI_GetRegisterMotor1+0x24>
          switch (regID)
 80047e0:	2d48      	cmp	r5, #72	@ 0x48
 80047e2:	d100      	bne.n	80047e6 <RI_GetRegisterMotor1+0x62>
 80047e4:	e082      	b.n	80048ec <RI_GetRegisterMotor1+0x168>
 80047e6:	2005      	movs	r0, #5
 80047e8:	2d88      	cmp	r5, #136	@ 0x88
 80047ea:	d104      	bne.n	80047f6 <RI_GetRegisterMotor1+0x72>
              *data = (uint8_t)MCI_GetControlMode(pMCIN);
 80047ec:	487f      	ldr	r0, [pc, #508]	@ (80049ec <RI_GetRegisterMotor1+0x268>)
 80047ee:	f7fd fdbf 	bl	8002370 <MCI_GetControlMode>
 80047f2:	7038      	strb	r0, [r7, #0]
    uint8_t retVal = MCP_CMD_OK;
 80047f4:	2000      	movs	r0, #0
          *size = 1;
 80047f6:	2301      	movs	r3, #1
 80047f8:	8033      	strh	r3, [r6, #0]
 80047fa:	e7d5      	b.n	80047a8 <RI_GetRegisterMotor1+0x24>
        if (freeSpace >= 2)
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	dd33      	ble.n	8004868 <RI_GetRegisterMotor1+0xe4>
          switch (regID)
 8004800:	239d      	movs	r3, #157	@ 0x9d
 8004802:	011b      	lsls	r3, r3, #4
 8004804:	4298      	cmp	r0, r3
 8004806:	d100      	bne.n	800480a <RI_GetRegisterMotor1+0x86>
 8004808:	e0e4      	b.n	80049d4 <RI_GetRegisterMotor1+0x250>
 800480a:	d82f      	bhi.n	800486c <RI_GetRegisterMotor1+0xe8>
 800480c:	2388      	movs	r3, #136	@ 0x88
 800480e:	005b      	lsls	r3, r3, #1
 8004810:	4298      	cmp	r0, r3
 8004812:	d04e      	beq.n	80048b2 <RI_GetRegisterMotor1+0x12e>
 8004814:	d900      	bls.n	8004818 <RI_GetRegisterMotor1+0x94>
 8004816:	e0a1      	b.n	800495c <RI_GetRegisterMotor1+0x1d8>
 8004818:	2890      	cmp	r0, #144	@ 0x90
 800481a:	d100      	bne.n	800481e <RI_GetRegisterMotor1+0x9a>
 800481c:	e0c8      	b.n	80049b0 <RI_GetRegisterMotor1+0x22c>
 800481e:	28d0      	cmp	r0, #208	@ 0xd0
 8004820:	d000      	beq.n	8004824 <RI_GetRegisterMotor1+0xa0>
 8004822:	e0cf      	b.n	80049c4 <RI_GetRegisterMotor1+0x240>
              *regdata16 = PID_GetKI(&PIDSpeedHandle_M1);
 8004824:	4872      	ldr	r0, [pc, #456]	@ (80049f0 <RI_GetRegisterMotor1+0x26c>)
 8004826:	f000 fff3 	bl	8005810 <PID_GetKI>
 800482a:	8038      	strh	r0, [r7, #0]
    uint8_t retVal = MCP_CMD_OK;
 800482c:	2000      	movs	r0, #0
          *size = 2;
 800482e:	2302      	movs	r3, #2
 8004830:	8033      	strh	r3, [r6, #0]
 8004832:	e7b9      	b.n	80047a8 <RI_GetRegisterMotor1+0x24>
        if (freeSpace >= 4)
 8004834:	2b03      	cmp	r3, #3
 8004836:	dd17      	ble.n	8004868 <RI_GetRegisterMotor1+0xe4>
          switch (regID)
 8004838:	2898      	cmp	r0, #152	@ 0x98
 800483a:	d100      	bne.n	800483e <RI_GetRegisterMotor1+0xba>
 800483c:	e09c      	b.n	8004978 <RI_GetRegisterMotor1+0x1f4>
 800483e:	d872      	bhi.n	8004926 <RI_GetRegisterMotor1+0x1a2>
 8004840:	2818      	cmp	r0, #24
 8004842:	d025      	beq.n	8004890 <RI_GetRegisterMotor1+0x10c>
 8004844:	2858      	cmp	r0, #88	@ 0x58
 8004846:	d000      	beq.n	800484a <RI_GetRegisterMotor1+0xc6>
 8004848:	e094      	b.n	8004974 <RI_GetRegisterMotor1+0x1f0>
              *regdata32 = (((int32_t)MCI_GetAvrgMecSpeedUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 800484a:	4868      	ldr	r0, [pc, #416]	@ (80049ec <RI_GetRegisterMotor1+0x268>)
 800484c:	f7fd fda0 	bl	8002390 <MCI_GetAvrgMecSpeedUnit>
 8004850:	0043      	lsls	r3, r0, #1
 8004852:	181b      	adds	r3, r3, r0
 8004854:	005b      	lsls	r3, r3, #1
 8004856:	603b      	str	r3, [r7, #0]
    uint8_t retVal = MCP_CMD_OK;
 8004858:	2000      	movs	r0, #0
          *size = 4;
 800485a:	2304      	movs	r3, #4
 800485c:	8033      	strh	r3, [r6, #0]
 800485e:	e7a3      	b.n	80047a8 <RI_GetRegisterMotor1+0x24>
            *size= 0 ; /* */
 8004860:	2300      	movs	r3, #0
            retVal = MCP_ERROR_UNKNOWN_REG;
 8004862:	2005      	movs	r0, #5
            *size= 0 ; /* */
 8004864:	8033      	strh	r3, [r6, #0]
            break;
 8004866:	e79f      	b.n	80047a8 <RI_GetRegisterMotor1+0x24>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8004868:	2008      	movs	r0, #8
 800486a:	e79d      	b.n	80047a8 <RI_GetRegisterMotor1+0x24>
          switch (regID)
 800486c:	23a9      	movs	r3, #169	@ 0xa9
 800486e:	011b      	lsls	r3, r3, #4
 8004870:	4298      	cmp	r0, r3
 8004872:	d018      	beq.n	80048a6 <RI_GetRegisterMotor1+0x122>
 8004874:	d860      	bhi.n	8004938 <RI_GetRegisterMotor1+0x1b4>
 8004876:	3b80      	subs	r3, #128	@ 0x80
 8004878:	4298      	cmp	r0, r3
 800487a:	d100      	bne.n	800487e <RI_GetRegisterMotor1+0xfa>
 800487c:	e0a4      	b.n	80049c8 <RI_GetRegisterMotor1+0x244>
 800487e:	3340      	adds	r3, #64	@ 0x40
 8004880:	4298      	cmp	r0, r3
 8004882:	d000      	beq.n	8004886 <RI_GetRegisterMotor1+0x102>
 8004884:	e09e      	b.n	80049c4 <RI_GetRegisterMotor1+0x240>
              *regdata16 = MCI_GetValphabeta(pMCIN).alpha;
 8004886:	4859      	ldr	r0, [pc, #356]	@ (80049ec <RI_GetRegisterMotor1+0x268>)
 8004888:	f7fd fd9e 	bl	80023c8 <MCI_GetValphabeta>
 800488c:	8038      	strh	r0, [r7, #0]
              break;
 800488e:	e7cd      	b.n	800482c <RI_GetRegisterMotor1+0xa8>
              *regdataU32 = MCI_GetFaultState(pMCIN);
 8004890:	4856      	ldr	r0, [pc, #344]	@ (80049ec <RI_GetRegisterMotor1+0x268>)
 8004892:	f7fd fd67 	bl	8002364 <MCI_GetFaultState>
 8004896:	6038      	str	r0, [r7, #0]
              break;
 8004898:	e7de      	b.n	8004858 <RI_GetRegisterMotor1+0xd4>
        *size = (*rawSize) + 2U;
 800489a:	883b      	ldrh	r3, [r7, #0]
            retVal = MCP_ERROR_UNKNOWN_REG;
 800489c:	2005      	movs	r0, #5
        *size = (*rawSize) + 2U;
 800489e:	3302      	adds	r3, #2
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	8033      	strh	r3, [r6, #0]
        break;
 80048a4:	e780      	b.n	80047a8 <RI_GetRegisterMotor1+0x24>
              *regdata16 = MCI_GetValphabeta(pMCIN).beta;
 80048a6:	4851      	ldr	r0, [pc, #324]	@ (80049ec <RI_GetRegisterMotor1+0x268>)
 80048a8:	f7fd fd8e 	bl	80023c8 <MCI_GetValphabeta>
 80048ac:	0c00      	lsrs	r0, r0, #16
 80048ae:	8038      	strh	r0, [r7, #0]
              break;
 80048b0:	e7bc      	b.n	800482c <RI_GetRegisterMotor1+0xa8>
              *regdata16 = PID_GetKD(&PIDSpeedHandle_M1);
 80048b2:	484f      	ldr	r0, [pc, #316]	@ (80049f0 <RI_GetRegisterMotor1+0x26c>)
 80048b4:	f000 ffb4 	bl	8005820 <PID_GetKD>
 80048b8:	8038      	strh	r0, [r7, #0]
              break;
 80048ba:	e7b7      	b.n	800482c <RI_GetRegisterMotor1+0xa8>
        switch (regID)
 80048bc:	23d4      	movs	r3, #212	@ 0xd4
 80048be:	005b      	lsls	r3, r3, #1
 80048c0:	4298      	cmp	r0, r3
 80048c2:	d1ea      	bne.n	800489a <RI_GetRegisterMotor1+0x116>
            int32_t rpm32 = ((int32_t)(MCI_GetLastRampFinalSpeed(pMCIN) * U_RPM) / (int32_t)SPEED_UNIT);
 80048c4:	4c49      	ldr	r4, [pc, #292]	@ (80049ec <RI_GetRegisterMotor1+0x268>)
 80048c6:	0020      	movs	r0, r4
 80048c8:	f7fd fd56 	bl	8002378 <MCI_GetLastRampFinalSpeed>
 80048cc:	0043      	lsls	r3, r0, #1
 80048ce:	181b      	adds	r3, r3, r0
 80048d0:	005b      	lsls	r3, r3, #1
            *rpm16p = (uint16_t)rpm32;
 80048d2:	807b      	strh	r3, [r7, #2]
            *(rpm16p+1) = (uint16_t)(rpm32>>16);
 80048d4:	141b      	asrs	r3, r3, #16
 80048d6:	80bb      	strh	r3, [r7, #4]
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 80048d8:	0020      	movs	r0, r4
 80048da:	f7fd fd51 	bl	8002380 <MCI_GetLastRampFinalDuration>
            *rawSize = 6;
 80048de:	2306      	movs	r3, #6
 80048e0:	803b      	strh	r3, [r7, #0]
            break;
 80048e2:	3302      	adds	r3, #2
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 80048e4:	80f8      	strh	r0, [r7, #6]
    uint8_t retVal = MCP_CMD_OK;
 80048e6:	2000      	movs	r0, #0
        *size = (*rawSize) + 2U;
 80048e8:	8033      	strh	r3, [r6, #0]
        break;
 80048ea:	e75d      	b.n	80047a8 <RI_GetRegisterMotor1+0x24>
              *data = (uint8_t)MCI_GetSTMState(pMCIN);
 80048ec:	483f      	ldr	r0, [pc, #252]	@ (80049ec <RI_GetRegisterMotor1+0x268>)
 80048ee:	f7fd fce3 	bl	80022b8 <MCI_GetSTMState>
 80048f2:	7038      	strb	r0, [r7, #0]
    uint8_t retVal = MCP_CMD_OK;
 80048f4:	2000      	movs	r0, #0
 80048f6:	e77e      	b.n	80047f6 <RI_GetRegisterMotor1+0x72>
            *rawSize = (uint16_t)sizeof(ApplicationConfig_reg_t);
 80048f8:	2210      	movs	r2, #16
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80048fa:	b29b      	uxth	r3, r3
            *rawSize = (uint16_t)sizeof(ApplicationConfig_reg_t);
 80048fc:	803a      	strh	r2, [r7, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80048fe:	2b11      	cmp	r3, #17
 8004900:	d84e      	bhi.n	80049a0 <RI_GetRegisterMotor1+0x21c>
 8004902:	2312      	movs	r3, #18
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8004904:	2008      	movs	r0, #8
        *size = (*rawSize) + 2U;
 8004906:	8033      	strh	r3, [r6, #0]
        break;
 8004908:	e74e      	b.n	80047a8 <RI_GetRegisterMotor1+0x24>
            *rawSize = 12;
 800490a:	220c      	movs	r2, #12
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 800490c:	b29b      	uxth	r3, r3
            *rawSize = 12;
 800490e:	803a      	strh	r2, [r7, #0]
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 8004910:	2b0d      	cmp	r3, #13
 8004912:	d939      	bls.n	8004988 <RI_GetRegisterMotor1+0x204>
              memcpy(rawData, &scaleParams_M1, sizeof(ScaleParams_t) );
 8004914:	4937      	ldr	r1, [pc, #220]	@ (80049f4 <RI_GetRegisterMotor1+0x270>)
 8004916:	1cb8      	adds	r0, r7, #2
 8004918:	3204      	adds	r2, #4
 800491a:	f001 f9fb 	bl	8005d14 <memcpy>
 800491e:	230e      	movs	r3, #14
    uint8_t retVal = MCP_CMD_OK;
 8004920:	2000      	movs	r0, #0
        *size = (*rawSize) + 2U;
 8004922:	8033      	strh	r3, [r6, #0]
        break;
 8004924:	e740      	b.n	80047a8 <RI_GetRegisterMotor1+0x24>
          switch (regID)
 8004926:	4b34      	ldr	r3, [pc, #208]	@ (80049f8 <RI_GetRegisterMotor1+0x274>)
 8004928:	4298      	cmp	r0, r3
 800492a:	d123      	bne.n	8004974 <RI_GetRegisterMotor1+0x1f0>
              ReadVal.Float_Val = PQD_GetAvrgElMotorPowerW(pMPM[M1]);
 800492c:	4b33      	ldr	r3, [pc, #204]	@ (80049fc <RI_GetRegisterMotor1+0x278>)
 800492e:	6818      	ldr	r0, [r3, #0]
 8004930:	f000 ffd6 	bl	80058e0 <PQD_GetAvrgElMotorPowerW>
              *regdataU32 = ReadVal.U32_Val; //cstat !UNION-type-punning
 8004934:	6038      	str	r0, [r7, #0]
              break;
 8004936:	e78f      	b.n	8004858 <RI_GetRegisterMotor1+0xd4>
          switch (regID)
 8004938:	23e9      	movs	r3, #233	@ 0xe9
 800493a:	011b      	lsls	r3, r3, #4
 800493c:	4298      	cmp	r0, r3
 800493e:	d100      	bne.n	8004942 <RI_GetRegisterMotor1+0x1be>
 8004940:	e774      	b.n	800482c <RI_GetRegisterMotor1+0xa8>
 8004942:	4b2f      	ldr	r3, [pc, #188]	@ (8004a00 <RI_GetRegisterMotor1+0x27c>)
 8004944:	4298      	cmp	r0, r3
 8004946:	d138      	bne.n	80049ba <RI_GetRegisterMotor1+0x236>
            *regdata16 = ((OL_GetVoltage(&OpenLoop_ParamsM1)*100)/32767);
 8004948:	2064      	movs	r0, #100	@ 0x64
{
  int16_t hVoltage;
#ifdef NULL_PTR_CHECK_OPEN_LOOP
  hVoltage = ((MC_NULL == pHandle) ? 0 : pHandle->hVoltage);
#else
  hVoltage = pHandle->hVoltage;
 800494a:	4b2e      	ldr	r3, [pc, #184]	@ (8004a04 <RI_GetRegisterMotor1+0x280>)
 800494c:	492e      	ldr	r1, [pc, #184]	@ (8004a08 <RI_GetRegisterMotor1+0x284>)
 800494e:	2208      	movs	r2, #8
 8004950:	5e9b      	ldrsh	r3, [r3, r2]
 8004952:	4358      	muls	r0, r3
 8004954:	f7fb fc62 	bl	800021c <__divsi3>
 8004958:	8038      	strh	r0, [r7, #0]
              break;
 800495a:	e767      	b.n	800482c <RI_GetRegisterMotor1+0xa8>
          switch (regID)
 800495c:	23b2      	movs	r3, #178	@ 0xb2
 800495e:	00db      	lsls	r3, r3, #3
 8004960:	4298      	cmp	r0, r3
 8004962:	d03c      	beq.n	80049de <RI_GetRegisterMotor1+0x25a>
 8004964:	3340      	adds	r3, #64	@ 0x40
 8004966:	4298      	cmp	r0, r3
 8004968:	d12c      	bne.n	80049c4 <RI_GetRegisterMotor1+0x240>
              *regdata16 = NTC_GetAvTemp_C(&TempSensor_M1);
 800496a:	4828      	ldr	r0, [pc, #160]	@ (8004a0c <RI_GetRegisterMotor1+0x288>)
 800496c:	f000 ff16 	bl	800579c <NTC_GetAvTemp_C>
 8004970:	8038      	strh	r0, [r7, #0]
              break;
 8004972:	e75b      	b.n	800482c <RI_GetRegisterMotor1+0xa8>
          switch (regID)
 8004974:	2005      	movs	r0, #5
 8004976:	e770      	b.n	800485a <RI_GetRegisterMotor1+0xd6>
              *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 8004978:	481c      	ldr	r0, [pc, #112]	@ (80049ec <RI_GetRegisterMotor1+0x268>)
 800497a:	f7fd fd0f 	bl	800239c <MCI_GetMecSpeedRefUnit>
 800497e:	0043      	lsls	r3, r0, #1
 8004980:	181b      	adds	r3, r3, r0
 8004982:	005b      	lsls	r3, r3, #1
 8004984:	603b      	str	r3, [r7, #0]
              break;
 8004986:	e767      	b.n	8004858 <RI_GetRegisterMotor1+0xd4>
 8004988:	230e      	movs	r3, #14
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 800498a:	2008      	movs	r0, #8
        *size = (*rawSize) + 2U;
 800498c:	8033      	strh	r3, [r6, #0]
        break;
 800498e:	e70b      	b.n	80047a8 <RI_GetRegisterMotor1+0x24>
              FOCFwConfig_reg_t const *pFOCConfig_reg = FOCConfig_reg[motorID];
 8004990:	4b1f      	ldr	r3, [pc, #124]	@ (8004a10 <RI_GetRegisterMotor1+0x28c>)
              (void)memcpy(rawData, (const uint8_t *)pFOCConfig_reg, sizeof(FOCFwConfig_reg_t));
 8004992:	6819      	ldr	r1, [r3, #0]
 8004994:	f001 f9be 	bl	8005d14 <memcpy>
 8004998:	2310      	movs	r3, #16
    uint8_t retVal = MCP_CMD_OK;
 800499a:	2000      	movs	r0, #0
        *size = (*rawSize) + 2U;
 800499c:	8033      	strh	r3, [r6, #0]
        break;
 800499e:	e703      	b.n	80047a8 <RI_GetRegisterMotor1+0x24>
              ApplicationConfig_reg_t const *pApplicationConfig_reg = ApplicationConfig_reg[motorID];
 80049a0:	4b1c      	ldr	r3, [pc, #112]	@ (8004a14 <RI_GetRegisterMotor1+0x290>)
              (void)memcpy(rawData, (const uint8_t *)pApplicationConfig_reg, sizeof(ApplicationConfig_reg_t));
 80049a2:	6819      	ldr	r1, [r3, #0]
 80049a4:	f001 f9b6 	bl	8005d14 <memcpy>
 80049a8:	2312      	movs	r3, #18
    uint8_t retVal = MCP_CMD_OK;
 80049aa:	2000      	movs	r0, #0
        *size = (*rawSize) + 2U;
 80049ac:	8033      	strh	r3, [r6, #0]
        break;
 80049ae:	e6fb      	b.n	80047a8 <RI_GetRegisterMotor1+0x24>
              *regdata16 = PID_GetKP(&PIDSpeedHandle_M1);
 80049b0:	480f      	ldr	r0, [pc, #60]	@ (80049f0 <RI_GetRegisterMotor1+0x26c>)
 80049b2:	f000 ff29 	bl	8005808 <PID_GetKP>
 80049b6:	8038      	strh	r0, [r7, #0]
              break;
 80049b8:	e738      	b.n	800482c <RI_GetRegisterMotor1+0xa8>
          switch (regID)
 80049ba:	23e5      	movs	r3, #229	@ 0xe5
 80049bc:	011b      	lsls	r3, r3, #4
 80049be:	4298      	cmp	r0, r3
 80049c0:	d100      	bne.n	80049c4 <RI_GetRegisterMotor1+0x240>
 80049c2:	e733      	b.n	800482c <RI_GetRegisterMotor1+0xa8>
              retVal = MCP_ERROR_UNKNOWN_REG;
 80049c4:	2005      	movs	r0, #5
 80049c6:	e732      	b.n	800482e <RI_GetRegisterMotor1+0xaa>
              *regdata16 = MCI_GetVqd(pMCIN).d;
 80049c8:	4808      	ldr	r0, [pc, #32]	@ (80049ec <RI_GetRegisterMotor1+0x268>)
 80049ca:	f7fd fced 	bl	80023a8 <MCI_GetVqd>
 80049ce:	0c00      	lsrs	r0, r0, #16
 80049d0:	8038      	strh	r0, [r7, #0]
              break;
 80049d2:	e72b      	b.n	800482c <RI_GetRegisterMotor1+0xa8>
              *regdata16 = MCI_GetVqd(pMCIN).q;
 80049d4:	4805      	ldr	r0, [pc, #20]	@ (80049ec <RI_GetRegisterMotor1+0x268>)
 80049d6:	f7fd fce7 	bl	80023a8 <MCI_GetVqd>
 80049da:	8038      	strh	r0, [r7, #0]
              break;
 80049dc:	e726      	b.n	800482c <RI_GetRegisterMotor1+0xa8>
              *regdataU16 = VBS_GetAvBusVoltage_V(BusVoltageSensor);
 80049de:	480e      	ldr	r0, [pc, #56]	@ (8004a18 <RI_GetRegisterMotor1+0x294>)
 80049e0:	f000 fe8c 	bl	80056fc <VBS_GetAvBusVoltage_V>
 80049e4:	8038      	strh	r0, [r7, #0]
              break;
 80049e6:	e721      	b.n	800482c <RI_GetRegisterMotor1+0xa8>
 80049e8:	080062e4 	.word	0x080062e4
 80049ec:	20000000 	.word	0x20000000
 80049f0:	20000290 	.word	0x20000290
 80049f4:	20000334 	.word	0x20000334
 80049f8:	00001b58 	.word	0x00001b58
 80049fc:	2000002c 	.word	0x2000002c
 8004a00:	00001ad0 	.word	0x00001ad0
 8004a04:	20000124 	.word	0x20000124
 8004a08:	00007fff 	.word	0x00007fff
 8004a0c:	200002d8 	.word	0x200002d8
 8004a10:	20000330 	.word	0x20000330
 8004a14:	2000032c 	.word	0x2000032c
 8004a18:	200002cc 	.word	0x200002cc

08004a1c <RCM_ExecRegularConv>:
 * Otherwise, the latest stored conversion result will be returned.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
uint16_t RCM_ExecRegularConv (RegConv_t *regConv)
{
 8004a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t retVal;
  uint8_t handle = regConv->convHandle;
 8004a1e:	7b02      	ldrb	r2, [r0, #12]
  uint8_t formerNext;
  uint8_t i=0;
  uint8_t LastEnable = RCM_MAX_CONV;

  if (false == RCM_NoInj_array [handle].enable)
 8004a20:	4b59      	ldr	r3, [pc, #356]	@ (8004b88 <RCM_ExecRegularConv+0x16c>)
 8004a22:	0050      	lsls	r0, r2, #1
 8004a24:	1881      	adds	r1, r0, r2
 8004a26:	0049      	lsls	r1, r1, #1
 8004a28:	5c59      	ldrb	r1, [r3, r1]
 8004a2a:	2900      	cmp	r1, #0
 8004a2c:	d139      	bne.n	8004aa2 <RCM_ExecRegularConv+0x86>
  {
    /* Find position in the list */
    while (i < RCM_MAX_CONV)
    {
      if (true == RCM_NoInj_array [i].enable)
 8004a2e:	7819      	ldrb	r1, [r3, #0]
 8004a30:	2900      	cmp	r1, #0
 8004a32:	d113      	bne.n	8004a5c <RCM_ExecRegularConv+0x40>
  uint8_t LastEnable = RCM_MAX_CONV;
 8004a34:	2104      	movs	r1, #4
      if (true == RCM_NoInj_array [i].enable)
 8004a36:	799c      	ldrb	r4, [r3, #6]
 8004a38:	2c00      	cmp	r4, #0
 8004a3a:	d000      	beq.n	8004a3e <RCM_ExecRegularConv+0x22>
 8004a3c:	e073      	b.n	8004b26 <RCM_ExecRegularConv+0x10a>
 8004a3e:	7b1c      	ldrb	r4, [r3, #12]
 8004a40:	2c00      	cmp	r4, #0
 8004a42:	d000      	beq.n	8004a46 <RCM_ExecRegularConv+0x2a>
 8004a44:	e075      	b.n	8004b32 <RCM_ExecRegularConv+0x116>
 8004a46:	7c9e      	ldrb	r6, [r3, #18]
 8004a48:	2e00      	cmp	r6, #0
 8004a4a:	d100      	bne.n	8004a4e <RCM_ExecRegularConv+0x32>
 8004a4c:	e090      	b.n	8004b70 <RCM_ExecRegularConv+0x154>
      {
        if (RCM_NoInj_array[i].next > handle)
 8004a4e:	7ddc      	ldrb	r4, [r3, #23]
 8004a50:	4294      	cmp	r4, r2
 8004a52:	d800      	bhi.n	8004a56 <RCM_ExecRegularConv+0x3a>
 8004a54:	e095      	b.n	8004b82 <RCM_ExecRegularConv+0x166>
 8004a56:	2603      	movs	r6, #3
 8004a58:	2503      	movs	r5, #3
 8004a5a:	e005      	b.n	8004a68 <RCM_ExecRegularConv+0x4c>
 8004a5c:	795c      	ldrb	r4, [r3, #5]
          i = RCM_MAX_CONV; /* Stop the loop, handler inserted */
        }
        else
        { /* We found an enabled regular conv,
           * but do not know yet if it is the one we have to be linked to */
          LastEnable = i;
 8004a5e:	2100      	movs	r1, #0
        if (RCM_NoInj_array[i].next > handle)
 8004a60:	42a2      	cmp	r2, r4
 8004a62:	d2e8      	bcs.n	8004a36 <RCM_ExecRegularConv+0x1a>
  uint8_t i=0;
 8004a64:	2600      	movs	r6, #0
      if (true == RCM_NoInj_array [i].enable)
 8004a66:	2500      	movs	r5, #0
          RCM_NoInj_array[handle].next = formerNext;
 8004a68:	1881      	adds	r1, r0, r2
 8004a6a:	0049      	lsls	r1, r1, #1
 8004a6c:	1859      	adds	r1, r3, r1
 8004a6e:	714c      	strb	r4, [r1, #5]
          RCM_NoInj_array[handle].prev = i;
 8004a70:	710e      	strb	r6, [r1, #4]
          RCM_NoInj_array[i].next = handle;
 8004a72:	0069      	lsls	r1, r5, #1
 8004a74:	1949      	adds	r1, r1, r5
 8004a76:	0049      	lsls	r1, r1, #1
 8004a78:	1859      	adds	r1, r3, r1
 8004a7a:	714a      	strb	r2, [r1, #5]
          RCM_NoInj_array[formerNext].prev = handle;
 8004a7c:	0061      	lsls	r1, r4, #1
 8004a7e:	1909      	adds	r1, r1, r4
       {
         formerNext = RCM_NoInj_array[LastEnable].next;
         RCM_NoInj_array[handle].next = formerNext;
         RCM_NoInj_array[handle].prev = LastEnable;
         RCM_NoInj_array[LastEnable].next = handle;
         RCM_NoInj_array[formerNext].prev = handle;
 8004a80:	0049      	lsls	r1, r1, #1
 8004a82:	1859      	adds	r1, r3, r1
 8004a84:	710a      	strb	r2, [r1, #4]
      }
    }
    /* The handle is now linked with others, we can set the enable flag */
    RCM_NoInj_array[handle].enable = true;
    RCM_NoInj_array[handle].status = notvalid;
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8004a86:	4941      	ldr	r1, [pc, #260]	@ (8004b8c <RCM_ExecRegularConv+0x170>)
 8004a88:	780d      	ldrb	r5, [r1, #0]
    RCM_NoInj_array[handle].enable = true;
 8004a8a:	2601      	movs	r6, #1
 8004a8c:	1884      	adds	r4, r0, r2
 8004a8e:	0064      	lsls	r4, r4, #1
 8004a90:	531e      	strh	r6, [r3, r4]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8004a92:	006c      	lsls	r4, r5, #1
 8004a94:	1964      	adds	r4, r4, r5
 8004a96:	0064      	lsls	r4, r4, #1
 8004a98:	191c      	adds	r4, r3, r4
 8004a9a:	7864      	ldrb	r4, [r4, #1]
 8004a9c:	2c01      	cmp	r4, #1
 8004a9e:	d000      	beq.n	8004aa2 <RCM_ExecRegularConv+0x86>
    {/* Select the new conversion to be the next scheduled only if a conversion is not ongoing */
      RCM_currentHandle = handle;
 8004aa0:	700a      	strb	r2, [r1, #0]
  }
  else
  {
    /* Nothing to do the current handle is already scheduled */
  }
  if (false == PWM_Handle_M1.ADCRegularLocked)
 8004aa2:	24ca      	movs	r4, #202	@ 0xca
 8004aa4:	493a      	ldr	r1, [pc, #232]	@ (8004b90 <RCM_ExecRegularConv+0x174>)
 8004aa6:	5d09      	ldrb	r1, [r1, r4]
 8004aa8:	2900      	cmp	r1, #0
 8004aaa:	d137      	bne.n	8004b1c <RCM_ExecRegularConv+0x100>
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8004aac:	2703      	movs	r7, #3
  /* The ADC is free to be used asynchronously */
  {
    LL_ADC_REG_SetDMATransfer(RCM_handle_array[handle]->regADC, LL_ADC_REG_DMA_TRANSFER_NONE);
 8004aae:	4e39      	ldr	r6, [pc, #228]	@ (8004b94 <RCM_ExecRegularConv+0x178>)
 8004ab0:	0091      	lsls	r1, r2, #2
 8004ab2:	5875      	ldr	r5, [r6, r1]
 8004ab4:	6829      	ldr	r1, [r5, #0]
 8004ab6:	68cc      	ldr	r4, [r1, #12]
 8004ab8:	43bc      	bics	r4, r7
 8004aba:	60cc      	str	r4, [r1, #12]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8004abc:	68cc      	ldr	r4, [r1, #12]
 8004abe:	4f36      	ldr	r7, [pc, #216]	@ (8004b98 <RCM_ExecRegularConv+0x17c>)
 8004ac0:	403c      	ands	r4, r7
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8004ac2:	2707      	movs	r7, #7
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8004ac4:	60cc      	str	r4, [r1, #12]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8004ac6:	694c      	ldr	r4, [r1, #20]
 8004ac8:	43bc      	bics	r4, r7
 8004aca:	68af      	ldr	r7, [r5, #8]
 8004acc:	433c      	orrs	r4, r7
 8004ace:	614c      	str	r4, [r1, #20]
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004ad0:	2480      	movs	r4, #128	@ 0x80
    LL_ADC_REG_SetTriggerSource(RCM_handle_array[handle]->regADC, LL_ADC_REG_TRIG_SOFTWARE);

    /* Set Sampling time and channel */
    LL_ADC_SetSamplingTimeCommonChannels(RCM_handle_array[handle]->regADC, RCM_handle_array[handle]->samplingTime);
    LL_ADC_REG_SetSequencerChannels(RCM_handle_array[handle]->regADC,
                                    __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8004ad2:	792d      	ldrb	r5, [r5, #4]
 8004ad4:	01a4      	lsls	r4, r4, #6
 8004ad6:	40ac      	lsls	r4, r5
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8004ad8:	2504      	movs	r5, #4
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004ada:	0b64      	lsrs	r4, r4, #13
 8004adc:	628c      	str	r4, [r1, #40]	@ 0x28
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8004ade:	600d      	str	r5, [r1, #0]
  MODIFY_REG(ADCx->CR,
 8004ae0:	688c      	ldr	r4, [r1, #8]
 8004ae2:	4f2e      	ldr	r7, [pc, #184]	@ (8004b9c <RCM_ExecRegularConv+0x180>)
 8004ae4:	403c      	ands	r4, r7
 8004ae6:	432c      	orrs	r4, r5
 8004ae8:	608c      	str	r4, [r1, #8]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8004aea:	680c      	ldr	r4, [r1, #0]

    /* Start ADC conversion */
    LL_ADC_REG_StartConversion(RCM_handle_array[handle]->regADC);

    /* Wait EOC */
    while ( 0U == LL_ADC_IsActiveFlag_EOC(RCM_handle_array[handle]->regADC))
 8004aec:	4225      	tst	r5, r4
 8004aee:	d0fc      	beq.n	8004aea <RCM_ExecRegularConv+0xce>
* param  ADCx ADC instance
* retval Value between Min_Data=0x0000 and Max_Data=0xFFF0
*/
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12L(const ADC_TypeDef *ADCx)
{
  return (uint16_t)(READ_REG(ADCx->DR) & 0x0000FFF0UL);
 8004af0:	250f      	movs	r5, #15
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8004af2:	2703      	movs	r7, #3
 8004af4:	6c0c      	ldr	r4, [r1, #64]	@ 0x40
    {
      /* Nothing to do */
    }

    /* Read the "Regular" conversion (Not related to current sampling) */
    RCM_NoInj_array[handle].value = LL_ADC_REG_ReadConversionData12L(RCM_handle_array[handle]->regADC);
 8004af6:	1881      	adds	r1, r0, r2
 8004af8:	43ac      	bics	r4, r5
 8004afa:	0049      	lsls	r1, r1, #1
    LL_ADC_REG_SetDMATransfer(RCM_handle_array[RCM_currentHandle]->regADC, LL_ADC_REG_DMA_TRANSFER_LIMITED);
 8004afc:	4d23      	ldr	r5, [pc, #140]	@ (8004b8c <RCM_ExecRegularConv+0x170>)
    RCM_NoInj_array[handle].value = LL_ADC_REG_ReadConversionData12L(RCM_handle_array[handle]->regADC);
 8004afe:	1859      	adds	r1, r3, r1
 8004b00:	804c      	strh	r4, [r1, #2]
    LL_ADC_REG_SetDMATransfer(RCM_handle_array[RCM_currentHandle]->regADC, LL_ADC_REG_DMA_TRANSFER_LIMITED);
 8004b02:	782c      	ldrb	r4, [r5, #0]
 8004b04:	00a4      	lsls	r4, r4, #2
 8004b06:	5934      	ldr	r4, [r6, r4]
 8004b08:	6826      	ldr	r6, [r4, #0]
 8004b0a:	68f4      	ldr	r4, [r6, #12]
 8004b0c:	43bc      	bics	r4, r7
 8004b0e:	3f02      	subs	r7, #2
 8004b10:	433c      	orrs	r4, r7
 8004b12:	60f4      	str	r4, [r6, #12]
    RCM_currentHandle = RCM_NoInj_array[handle].next;
 8004b14:	794c      	ldrb	r4, [r1, #5]
 8004b16:	702c      	strb	r4, [r5, #0]
    RCM_NoInj_array[handle].status = valid;
 8004b18:	2402      	movs	r4, #2
 8004b1a:	704c      	strb	r4, [r1, #1]
  }
  else
  {
    /* Nothing to do */
  }
  retVal = RCM_NoInj_array[handle].value;
 8004b1c:	1880      	adds	r0, r0, r2
 8004b1e:	0040      	lsls	r0, r0, #1
 8004b20:	181b      	adds	r3, r3, r0
  return (retVal);
 8004b22:	8858      	ldrh	r0, [r3, #2]
}
 8004b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (RCM_NoInj_array[i].next > handle)
 8004b26:	7adc      	ldrb	r4, [r3, #11]
 8004b28:	42a2      	cmp	r2, r4
 8004b2a:	d319      	bcc.n	8004b60 <RCM_ExecRegularConv+0x144>
      if (true == RCM_NoInj_array [i].enable)
 8004b2c:	7b19      	ldrb	r1, [r3, #12]
 8004b2e:	2900      	cmp	r1, #0
 8004b30:	d019      	beq.n	8004b66 <RCM_ExecRegularConv+0x14a>
        if (RCM_NoInj_array[i].next > handle)
 8004b32:	7c5c      	ldrb	r4, [r3, #17]
 8004b34:	42a2      	cmp	r2, r4
 8004b36:	d321      	bcc.n	8004b7c <RCM_ExecRegularConv+0x160>
      if (true == RCM_NoInj_array [i].enable)
 8004b38:	7c99      	ldrb	r1, [r3, #18]
          LastEnable = i;
 8004b3a:	2602      	movs	r6, #2
      if (true == RCM_NoInj_array [i].enable)
 8004b3c:	2900      	cmp	r1, #0
 8004b3e:	d000      	beq.n	8004b42 <RCM_ExecRegularConv+0x126>
 8004b40:	e785      	b.n	8004a4e <RCM_ExecRegularConv+0x32>
         formerNext = RCM_NoInj_array[LastEnable].next;
 8004b42:	0034      	movs	r4, r6
 8004b44:	0061      	lsls	r1, r4, #1
 8004b46:	1909      	adds	r1, r1, r4
 8004b48:	0049      	lsls	r1, r1, #1
 8004b4a:	1859      	adds	r1, r3, r1
         RCM_NoInj_array[handle].next = formerNext;
 8004b4c:	1884      	adds	r4, r0, r2
         formerNext = RCM_NoInj_array[LastEnable].next;
 8004b4e:	794d      	ldrb	r5, [r1, #5]
         RCM_NoInj_array[handle].next = formerNext;
 8004b50:	0064      	lsls	r4, r4, #1
 8004b52:	191c      	adds	r4, r3, r4
 8004b54:	7165      	strb	r5, [r4, #5]
         RCM_NoInj_array[LastEnable].next = handle;
 8004b56:	714a      	strb	r2, [r1, #5]
         RCM_NoInj_array[formerNext].prev = handle;
 8004b58:	0069      	lsls	r1, r5, #1
         RCM_NoInj_array[handle].prev = LastEnable;
 8004b5a:	7126      	strb	r6, [r4, #4]
         RCM_NoInj_array[formerNext].prev = handle;
 8004b5c:	1949      	adds	r1, r1, r5
 8004b5e:	e78f      	b.n	8004a80 <RCM_ExecRegularConv+0x64>
        if (RCM_NoInj_array[i].next > handle)
 8004b60:	2601      	movs	r6, #1
      if (true == RCM_NoInj_array [i].enable)
 8004b62:	2501      	movs	r5, #1
 8004b64:	e780      	b.n	8004a68 <RCM_ExecRegularConv+0x4c>
 8004b66:	7c99      	ldrb	r1, [r3, #18]
          LastEnable = i;
 8004b68:	2601      	movs	r6, #1
      if (true == RCM_NoInj_array [i].enable)
 8004b6a:	2900      	cmp	r1, #0
 8004b6c:	d0e9      	beq.n	8004b42 <RCM_ExecRegularConv+0x126>
 8004b6e:	e76e      	b.n	8004a4e <RCM_ExecRegularConv+0x32>
       if (LastEnable != RCM_MAX_CONV )
 8004b70:	2904      	cmp	r1, #4
 8004b72:	d1e6      	bne.n	8004b42 <RCM_ExecRegularConv+0x126>
         RCM_currentHandle = handle;
 8004b74:	4905      	ldr	r1, [pc, #20]	@ (8004b8c <RCM_ExecRegularConv+0x170>)
 8004b76:	0015      	movs	r5, r2
 8004b78:	700a      	strb	r2, [r1, #0]
    while (i < RCM_MAX_CONV)
 8004b7a:	e786      	b.n	8004a8a <RCM_ExecRegularConv+0x6e>
        if (RCM_NoInj_array[i].next > handle)
 8004b7c:	2602      	movs	r6, #2
      if (true == RCM_NoInj_array [i].enable)
 8004b7e:	2502      	movs	r5, #2
 8004b80:	e772      	b.n	8004a68 <RCM_ExecRegularConv+0x4c>
 8004b82:	2403      	movs	r4, #3
          LastEnable = i;
 8004b84:	2603      	movs	r6, #3
 8004b86:	e7dd      	b.n	8004b44 <RCM_ExecRegularConv+0x128>
 8004b88:	20000554 	.word	0x20000554
 8004b8c:	20000550 	.word	0x20000550
 8004b90:	20000134 	.word	0x20000134
 8004b94:	2000058c 	.word	0x2000058c
 8004b98:	fffff23f 	.word	0xfffff23f
 8004b9c:	7fffffe8 	.word	0x7fffffe8

08004ba0 <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv()
{
 8004ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t handle;
  if (RCM_UserConvHandle != NULL)
 8004ba2:	4b13      	ldr	r3, [pc, #76]	@ (8004bf0 <RCM_ExecUserConv+0x50>)
 8004ba4:	681c      	ldr	r4, [r3, #0]
 8004ba6:	2c00      	cmp	r4, #0
 8004ba8:	d004      	beq.n	8004bb4 <RCM_ExecUserConv+0x14>
  {
    handle = RCM_UserConvHandle->convHandle;
    if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 8004baa:	4d12      	ldr	r5, [pc, #72]	@ (8004bf4 <RCM_ExecUserConv+0x54>)
    handle = RCM_UserConvHandle->convHandle;
 8004bac:	7b26      	ldrb	r6, [r4, #12]
    if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 8004bae:	782b      	ldrb	r3, [r5, #0]
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d000      	beq.n	8004bb6 <RCM_ExecUserConv+0x16>
  }
  else
  {
     /* Nothing to do */
  }
}
 8004bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8004bb6:	0020      	movs	r0, r4
 8004bb8:	f7ff ff30 	bl	8004a1c <RCM_ExecRegularConv>
 8004bbc:	4b0e      	ldr	r3, [pc, #56]	@ (8004bf8 <RCM_ExecUserConv+0x58>)
      if (RCM_NoInj_array [handle].status != notvalid)
 8004bbe:	0072      	lsls	r2, r6, #1
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8004bc0:	8018      	strh	r0, [r3, #0]
      if (RCM_NoInj_array [handle].status != notvalid)
 8004bc2:	1992      	adds	r2, r2, r6
 8004bc4:	4b0d      	ldr	r3, [pc, #52]	@ (8004bfc <RCM_ExecUserConv+0x5c>)
 8004bc6:	0052      	lsls	r2, r2, #1
 8004bc8:	189b      	adds	r3, r3, r2
 8004bca:	785b      	ldrb	r3, [r3, #1]
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8004bcc:	0001      	movs	r1, r0
      if (RCM_NoInj_array [handle].status != notvalid)
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d001      	beq.n	8004bd6 <RCM_ExecUserConv+0x36>
        RCM_UserConvState = RCM_USERCONV_EOC;
 8004bd2:	2302      	movs	r3, #2
 8004bd4:	702b      	strb	r3, [r5, #0]
      if (RCM_CB_array[handle].cb != NULL)
 8004bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8004c00 <RCM_ExecUserConv+0x60>)
 8004bd8:	00f6      	lsls	r6, r6, #3
 8004bda:	58f7      	ldr	r7, [r6, r3]
 8004bdc:	2f00      	cmp	r7, #0
 8004bde:	d0e9      	beq.n	8004bb4 <RCM_ExecUserConv+0x14>
        RCM_UserConvState = RCM_USERCONV_IDLE;
 8004be0:	2200      	movs	r2, #0
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8004be2:	199b      	adds	r3, r3, r6
        RCM_UserConvState = RCM_USERCONV_IDLE;
 8004be4:	702a      	strb	r2, [r5, #0]
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8004be6:	0020      	movs	r0, r4
 8004be8:	685a      	ldr	r2, [r3, #4]
 8004bea:	47b8      	blx	r7
}
 8004bec:	e7e2      	b.n	8004bb4 <RCM_ExecUserConv+0x14>
 8004bee:	46c0      	nop			@ (mov r8, r8)
 8004bf0:	20000548 	.word	0x20000548
 8004bf4:	2000054c 	.word	0x2000054c
 8004bf8:	2000054e 	.word	0x2000054e
 8004bfc:	20000554 	.word	0x20000554
 8004c00:	2000056c 	.word	0x2000056c

08004c04 <RCM_ExecNextConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecNextConv(void)
{
 8004c04:	b570      	push	{r4, r5, r6, lr}
  if (true == RCM_NoInj_array [RCM_currentHandle].enable)
 8004c06:	4b16      	ldr	r3, [pc, #88]	@ (8004c60 <RCM_ExecNextConv+0x5c>)
 8004c08:	4916      	ldr	r1, [pc, #88]	@ (8004c64 <RCM_ExecNextConv+0x60>)
 8004c0a:	781a      	ldrb	r2, [r3, #0]
 8004c0c:	0053      	lsls	r3, r2, #1
 8004c0e:	189b      	adds	r3, r3, r2
 8004c10:	005b      	lsls	r3, r3, #1
 8004c12:	5c58      	ldrb	r0, [r3, r1]
 8004c14:	2800      	cmp	r0, #0
 8004c16:	d021      	beq.n	8004c5c <RCM_ExecNextConv+0x58>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8004c18:	2504      	movs	r5, #4
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8004c1a:	2603      	movs	r6, #3
    /* When this function is called, the ADC conversions triggered by External
       event for current reading has been completed.
       ADC is therefore ready to be started because already stopped */

    /* Clear EOC */
    LL_ADC_ClearFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8004c1c:	4812      	ldr	r0, [pc, #72]	@ (8004c68 <RCM_ExecNextConv+0x64>)
 8004c1e:	0092      	lsls	r2, r2, #2
 8004c20:	5814      	ldr	r4, [r2, r0]
    (void)LL_ADC_REG_SetSequencerChannels(RCM_handle_array[RCM_currentHandle]->regADC,
                                       __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));

    /* Start ADC for regular conversion */
    LL_ADC_REG_StartConversion(RCM_handle_array[RCM_currentHandle]->regADC);
    RCM_NoInj_array[RCM_currentHandle].status = ongoing;
 8004c22:	18c9      	adds	r1, r1, r3
    LL_ADC_ClearFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8004c24:	6822      	ldr	r2, [r4, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8004c26:	6015      	str	r5, [r2, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8004c28:	68d0      	ldr	r0, [r2, #12]
 8004c2a:	43b0      	bics	r0, r6
 8004c2c:	60d0      	str	r0, [r2, #12]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8004c2e:	68d0      	ldr	r0, [r2, #12]
 8004c30:	4e0e      	ldr	r6, [pc, #56]	@ (8004c6c <RCM_ExecNextConv+0x68>)
 8004c32:	4030      	ands	r0, r6
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8004c34:	2607      	movs	r6, #7
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8004c36:	60d0      	str	r0, [r2, #12]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8004c38:	6950      	ldr	r0, [r2, #20]
 8004c3a:	43b0      	bics	r0, r6
 8004c3c:	68a6      	ldr	r6, [r4, #8]
 8004c3e:	4330      	orrs	r0, r6
 8004c40:	6150      	str	r0, [r2, #20]
                                       __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 8004c42:	7920      	ldrb	r0, [r4, #4]
 8004c44:	2401      	movs	r4, #1
 8004c46:	0026      	movs	r6, r4
 8004c48:	4086      	lsls	r6, r0
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004c4a:	0370      	lsls	r0, r6, #13
 8004c4c:	0b40      	lsrs	r0, r0, #13
 8004c4e:	6290      	str	r0, [r2, #40]	@ 0x28
  MODIFY_REG(ADCx->CR,
 8004c50:	6890      	ldr	r0, [r2, #8]
 8004c52:	4e07      	ldr	r6, [pc, #28]	@ (8004c70 <RCM_ExecNextConv+0x6c>)
 8004c54:	4030      	ands	r0, r6
 8004c56:	4328      	orrs	r0, r5
 8004c58:	6090      	str	r0, [r2, #8]
    RCM_NoInj_array[RCM_currentHandle].status = ongoing;
 8004c5a:	704c      	strb	r4, [r1, #1]
  }
  else
  {
    /* Nothing to do, conversion not enabled have already notvalid status */
  }
}
 8004c5c:	bd70      	pop	{r4, r5, r6, pc}
 8004c5e:	46c0      	nop			@ (mov r8, r8)
 8004c60:	20000550 	.word	0x20000550
 8004c64:	20000554 	.word	0x20000554
 8004c68:	2000058c 	.word	0x2000058c
 8004c6c:	fffff23f 	.word	0xfffff23f
 8004c70:	7fffffe8 	.word	0x7fffffe8

08004c74 <RCM_ReadOngoingConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ReadOngoingConv(void)
{
 8004c74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c76:	46ce      	mov	lr, r9
 8004c78:	4647      	mov	r7, r8
 8004c7a:	b580      	push	{r7, lr}
  uint32_t result;
  RCM_status_t status;

  if (true == RCM_NoInj_array [RCM_currentHandle].enable)
 8004c7c:	4c17      	ldr	r4, [pc, #92]	@ (8004cdc <RCM_ReadOngoingConv+0x68>)
 8004c7e:	4918      	ldr	r1, [pc, #96]	@ (8004ce0 <RCM_ReadOngoingConv+0x6c>)
 8004c80:	7820      	ldrb	r0, [r4, #0]
 8004c82:	0043      	lsls	r3, r0, #1
 8004c84:	181a      	adds	r2, r3, r0
 8004c86:	0052      	lsls	r2, r2, #1
 8004c88:	5c8d      	ldrb	r5, [r1, r2]
 8004c8a:	2d00      	cmp	r5, #0
 8004c8c:	d021      	beq.n	8004cd2 <RCM_ReadOngoingConv+0x5e>
  {
    status = RCM_NoInj_array[RCM_currentHandle].status;
    result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
    if (( valid == status ) || ( notvalid == status ) || ( 0U == result ))
 8004c8e:	2702      	movs	r7, #2
    result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8004c90:	4d14      	ldr	r5, [pc, #80]	@ (8004ce4 <RCM_ReadOngoingConv+0x70>)
 8004c92:	0086      	lsls	r6, r0, #2
 8004c94:	5975      	ldr	r5, [r6, r5]
    status = RCM_NoInj_array[RCM_currentHandle].status;
 8004c96:	188a      	adds	r2, r1, r2
    result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8004c98:	682e      	ldr	r6, [r5, #0]
    if (( valid == status ) || ( notvalid == status ) || ( 0U == result ))
 8004c9a:	46b9      	mov	r9, r7
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8004c9c:	6835      	ldr	r5, [r6, #0]
 8004c9e:	46ac      	mov	ip, r5
 8004ca0:	7855      	ldrb	r5, [r2, #1]
 8004ca2:	43bd      	bics	r5, r7
 8004ca4:	d010      	beq.n	8004cc8 <RCM_ReadOngoingConv+0x54>
 8004ca6:	4665      	mov	r5, ip
 8004ca8:	076d      	lsls	r5, r5, #29
 8004caa:	d50d      	bpl.n	8004cc8 <RCM_ReadOngoingConv+0x54>
 8004cac:	6c35      	ldr	r5, [r6, #64]	@ 0x40
 8004cae:	46a8      	mov	r8, r5
 8004cb0:	250f      	movs	r5, #15
 8004cb2:	4647      	mov	r7, r8
 8004cb4:	43af      	bics	r7, r5
    else
    {
      /* Reading of ADC Converted Value */
      RCM_NoInj_array[RCM_currentHandle].value
                    = LL_ADC_REG_ReadConversionData12L(RCM_handle_array[RCM_currentHandle]->regADC);
      RCM_NoInj_array[RCM_currentHandle].status = valid;
 8004cb6:	464d      	mov	r5, r9
 8004cb8:	7055      	strb	r5, [r2, #1]
                    = LL_ADC_REG_ReadConversionData12L(RCM_handle_array[RCM_currentHandle]->regADC);
 8004cba:	8057      	strh	r7, [r2, #2]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8004cbc:	68f2      	ldr	r2, [r6, #12]
 8004cbe:	3501      	adds	r5, #1
 8004cc0:	43aa      	bics	r2, r5
 8004cc2:	3d02      	subs	r5, #2
 8004cc4:	432a      	orrs	r2, r5
 8004cc6:	60f2      	str	r2, [r6, #12]
      /* Restore back DMA configuration */
      LL_ADC_REG_SetDMATransfer( RCM_handle_array[RCM_currentHandle]->regADC, LL_ADC_REG_DMA_TRANSFER_LIMITED );
    }

    /* Prepare next conversion */
    RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 8004cc8:	181b      	adds	r3, r3, r0
 8004cca:	005b      	lsls	r3, r3, #1
 8004ccc:	18c9      	adds	r1, r1, r3
 8004cce:	794b      	ldrb	r3, [r1, #5]
 8004cd0:	7023      	strb	r3, [r4, #0]
    }
    else
    {
      /* Nothing to do */
    }
}
 8004cd2:	bcc0      	pop	{r6, r7}
 8004cd4:	46b9      	mov	r9, r7
 8004cd6:	46b0      	mov	r8, r6
 8004cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cda:	46c0      	nop			@ (mov r8, r8)
 8004cdc:	20000550 	.word	0x20000550
 8004ce0:	20000554 	.word	0x20000554
 8004ce4:	2000058c 	.word	0x2000058c

08004ce8 <USART1_IRQHandler>:
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8004ce8:	2240      	movs	r2, #64	@ 0x40
 8004cea:	4b27      	ldr	r3, [pc, #156]	@ (8004d88 <USART1_IRQHandler+0xa0>)
/**
  * @brief  This function handles USART interrupt request.
  * @param  None
  */
void USART1_IRQHandler(void)
{
 8004cec:	b510      	push	{r4, lr}
 8004cee:	69d9      	ldr	r1, [r3, #28]
 8004cf0:	420a      	tst	r2, r1
 8004cf2:	d008      	beq.n	8004d06 <USART1_IRQHandler+0x1e>
 8004cf4:	2401      	movs	r4, #1
 8004cf6:	4825      	ldr	r0, [pc, #148]	@ (8004d8c <USART1_IRQHandler+0xa4>)
 8004cf8:	6801      	ldr	r1, [r0, #0]
 8004cfa:	43a1      	bics	r1, r4
 8004cfc:	6001      	str	r1, [r0, #0]
    /* Disable the DMA channel to prepare the next chunck of data*/
    LL_DMA_DisableChannel(DMA_TX_A, DMACH_TX_A);
    LL_USART_ClearFlag_TC(USARTA);
    /* Data Sent by UART*/
    /* Need to free the buffer, and to check pending transfer*/
    ASPEP_HWDataTransmittedIT(&aspepOverUartA);
 8004cfe:	4824      	ldr	r0, [pc, #144]	@ (8004d90 <USART1_IRQHandler+0xa8>)
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8004d00:	621a      	str	r2, [r3, #32]
 8004d02:	f7fb fed9 	bl	8000ab8 <ASPEP_HWDataTransmittedIT>
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8004d06:	2208      	movs	r2, #8
 8004d08:	4b1f      	ldr	r3, [pc, #124]	@ (8004d88 <USART1_IRQHandler+0xa0>)
 8004d0a:	69d9      	ldr	r1, [r3, #28]
 8004d0c:	420a      	tst	r2, r1
 8004d0e:	d00b      	beq.n	8004d28 <USART1_IRQHandler+0x40>
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8004d10:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d12:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d16:	3a07      	subs	r2, #7
 8004d18:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8004d1c:	2010      	movs	r0, #16
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	4302      	orrs	r2, r0
 8004d22:	601a      	str	r2, [r3, #0]
 8004d24:	f381 8810 	msr	PRIMASK, r1
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8004d28:	2210      	movs	r2, #16
 8004d2a:	4b17      	ldr	r3, [pc, #92]	@ (8004d88 <USART1_IRQHandler+0xa0>)
 8004d2c:	69d9      	ldr	r1, [r3, #28]
 8004d2e:	420a      	tst	r2, r1
 8004d30:	d028      	beq.n	8004d84 <USART1_IRQHandler+0x9c>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_IDLE(const USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 8004d32:	6819      	ldr	r1, [r3, #0]
 8004d34:	420a      	tst	r2, r1
 8004d36:	d024      	beq.n	8004d82 <USART1_IRQHandler+0x9a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d38:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d3c:	2101      	movs	r1, #1
 8004d3e:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8004d42:	6818      	ldr	r0, [r3, #0]
 8004d44:	4390      	bics	r0, r2
 8004d46:	6018      	str	r0, [r3, #0]
 8004d48:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d4c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d50:	f381 8810 	msr	PRIMASK, r1
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableDMAReq_RX(USART_TypeDef *USARTx)
{
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_DMAR);
 8004d54:	2040      	movs	r0, #64	@ 0x40
 8004d56:	689a      	ldr	r2, [r3, #8]
 8004d58:	4382      	bics	r2, r0
 8004d5a:	609a      	str	r2, [r3, #8]
 8004d5c:	f384 8810 	msr	PRIMASK, r4
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8004d60:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d62:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d66:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8004d6a:	689a      	ldr	r2, [r3, #8]
 8004d6c:	4302      	orrs	r2, r0
 8004d6e:	609a      	str	r2, [r3, #8]
 8004d70:	f384 8810 	msr	PRIMASK, r4
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 8004d74:	2280      	movs	r2, #128	@ 0x80
 8004d76:	4b07      	ldr	r3, [pc, #28]	@ (8004d94 <USART1_IRQHandler+0xac>)
 8004d78:	0092      	lsls	r2, r2, #2
    LL_USART_DisableDMAReq_RX(USARTA);
    (void)LL_USART_ReceiveData8(USARTA);
    LL_USART_EnableDMAReq_RX(USARTA);
    /* Clear pending DMA TC to process only new received packet */
    LL_DMA_ClearFlag_TC(DMA_RX_A, DMACH_RX_A);
    ASPEP_HWReset(&aspepOverUartA);
 8004d7a:	4805      	ldr	r0, [pc, #20]	@ (8004d90 <USART1_IRQHandler+0xa8>)
 8004d7c:	605a      	str	r2, [r3, #4]
 8004d7e:	f7fc f8b9 	bl	8000ef4 <ASPEP_HWReset>
  }

  /* USER CODE BEGIN USART1_IRQHandler 1 */

  /* USER CODE END USART1_IRQHandler 1 */
}
 8004d82:	bd10      	pop	{r4, pc}
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 8004d84:	681b      	ldr	r3, [r3, #0]
  if (0U == flags)
 8004d86:	e7fc      	b.n	8004d82 <USART1_IRQHandler+0x9a>
 8004d88:	40013800 	.word	0x40013800
 8004d8c:	4002001c 	.word	0x4002001c
 8004d90:	20000354 	.word	0x20000354
 8004d94:	40020000 	.word	0x40020000

08004d98 <HardFault_Handler>:
/**
  * @brief  This function handles Hard Fault exception.
  * @param  None
  */
void HardFault_Handler(void)
{
 8004d98:	b510      	push	{r4, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */

  TSK_HardwareFaultTask();
 8004d9a:	f7fd fcdb 	bl	8002754 <TSK_HardwareFaultTask>

  /* Go to infinite loop when Hard Fault exception occurs */
  while (true)
 8004d9e:	e7fe      	b.n	8004d9e <HardFault_Handler+0x6>

08004da0 <SysTick_Handler>:

 /* USER CODE END HardFault_IRQn 1 */
}

void SysTick_Handler(void)
{
 8004da0:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8004da2:	4c0d      	ldr	r4, [pc, #52]	@ (8004dd8 <SysTick_Handler+0x38>)
 8004da4:	7823      	ldrb	r3, [r4, #0]
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d00f      	beq.n	8004dca <SysTick_Handler+0x2a>
  else
  {
    /* Nothing to do */
  }

  SystickDividerCounter ++;
 8004daa:	3301      	adds	r3, #1
 8004dac:	b2db      	uxtb	r3, r3
  return ((NULL == DMAx) ? 0U : ((READ_BIT(DMAx->ISR,
 8004dae:	2280      	movs	r2, #128	@ 0x80
 8004db0:	7023      	strb	r3, [r4, #0]
 8004db2:	4b0a      	ldr	r3, [pc, #40]	@ (8004ddc <SysTick_Handler+0x3c>)
 8004db4:	0092      	lsls	r2, r2, #2
 8004db6:	6819      	ldr	r1, [r3, #0]
 8004db8:	4211      	tst	r1, r2
 8004dba:	d003      	beq.n	8004dc4 <SysTick_Handler+0x24>
  /* Buffer is ready by the HW layer to be processed */
  /* NO DMA interrupt */
  if (LL_DMA_IsActiveFlag_TC(DMA_RX_A, DMACH_RX_A))
  {
    LL_DMA_ClearFlag_TC(DMA_RX_A, DMACH_RX_A);
    ASPEP_HWDataReceivedIT(&aspepOverUartA);
 8004dbc:	4808      	ldr	r0, [pc, #32]	@ (8004de0 <SysTick_Handler+0x40>)
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 8004dbe:	605a      	str	r2, [r3, #4]
 8004dc0:	f7fc f848 	bl	8000e54 <ASPEP_HWDataReceivedIT>
  }
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */

    MC_RunMotorControlTasks();
 8004dc4:	f7fd fc7a 	bl	80026bc <MC_RunMotorControlTasks>

  /* USER CODE BEGIN SysTick_IRQn 2 */

  /* USER CODE END SysTick_IRQn 2 */
}
 8004dc8:	bd10      	pop	{r4, pc}
    HAL_IncTick();
 8004dca:	f000 f939 	bl	8005040 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 8004dce:	f000 f9af 	bl	8005130 <HAL_SYSTICK_IRQHandler>
    SystickDividerCounter = 0;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e7eb      	b.n	8004dae <SysTick_Handler+0xe>
 8004dd6:	46c0      	nop			@ (mov r8, r8)
 8004dd8:	200003c4 	.word	0x200003c4
 8004ddc:	40020000 	.word	0x40020000
 8004de0:	20000354 	.word	0x20000354

08004de4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004de4:	2201      	movs	r2, #1
 8004de6:	4b0a      	ldr	r3, [pc, #40]	@ (8004e10 <HAL_MspInit+0x2c>)
{
 8004de8:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004dea:	6999      	ldr	r1, [r3, #24]
 8004dec:	4311      	orrs	r1, r2
 8004dee:	6199      	str	r1, [r3, #24]
 8004df0:	6999      	ldr	r1, [r3, #24]
 8004df2:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8004df4:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004df6:	9200      	str	r2, [sp, #0]
 8004df8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004dfa:	69da      	ldr	r2, [r3, #28]
 8004dfc:	0549      	lsls	r1, r1, #21
 8004dfe:	430a      	orrs	r2, r1
 8004e00:	61da      	str	r2, [r3, #28]
 8004e02:	69db      	ldr	r3, [r3, #28]
 8004e04:	400b      	ands	r3, r1
 8004e06:	9301      	str	r3, [sp, #4]
 8004e08:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004e0a:	b002      	add	sp, #8
 8004e0c:	4770      	bx	lr
 8004e0e:	46c0      	nop			@ (mov r8, r8)
 8004e10:	40021000 	.word	0x40021000

08004e14 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004e14:	e7fe      	b.n	8004e14 <NMI_Handler>
 8004e16:	46c0      	nop			@ (mov r8, r8)

08004e18 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004e18:	4770      	bx	lr
 8004e1a:	46c0      	nop			@ (mov r8, r8)

08004e1c <DMA1_Channel1_IRQHandler>:
  /* USER CODE BEGIN CURRENT_REGULATION_IRQn 0 */

  /* USER CODE END CURRENT_REGULATION_IRQn 0 */

  /* Clear Flags */
  DMA1->IFCR = (LL_DMA_ISR_GIF1|LL_DMA_ISR_TCIF1|LL_DMA_ISR_HTIF1);
 8004e1c:	2207      	movs	r2, #7
{
 8004e1e:	b510      	push	{r4, lr}
  DMA1->IFCR = (LL_DMA_ISR_GIF1|LL_DMA_ISR_TCIF1|LL_DMA_ISR_HTIF1);
 8004e20:	4b02      	ldr	r3, [pc, #8]	@ (8004e2c <DMA1_Channel1_IRQHandler+0x10>)
 8004e22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN CURRENT_REGULATION_IRQn 1 */

  /* USER CODE END CURRENT_REGULATION_IRQn 1 */
  TSK_HighFrequencyTask();
 8004e24:	f7fd fc14 	bl	8002650 <TSK_HighFrequencyTask>

  /* USER CODE BEGIN CURRENT_REGULATION_IRQn 2 */

  /* USER CODE END CURRENT_REGULATION_IRQn 2 */
}
 8004e28:	bd10      	pop	{r4, pc}
 8004e2a:	46c0      	nop			@ (mov r8, r8)
 8004e2c:	40020000 	.word	0x40020000

08004e30 <TIM1_BRK_UP_TRG_COM_IRQHandler>:
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8004e30:	2301      	movs	r3, #1
/**
  * @brief  This function handles first motor TIMx Update, Break-in interrupt request.
  * @param  None
  */
void TIMx_UP_BRK_M1_IRQHandler(void)
{
 8004e32:	b510      	push	{r4, lr}
 8004e34:	4c0e      	ldr	r4, [pc, #56]	@ (8004e70 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x40>)
 8004e36:	6922      	ldr	r2, [r4, #16]
 8004e38:	4213      	tst	r3, r2
 8004e3a:	d002      	beq.n	8004e42 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x12>
  return ((READ_BIT(TIMx->DIER, TIM_DIER_UIE) == (TIM_DIER_UIE)) ? 1UL : 0UL);
 8004e3c:	68e2      	ldr	r2, [r4, #12]
 8004e3e:	4213      	tst	r3, r2
 8004e40:	d10e      	bne.n	8004e60 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x30>
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8004e42:	2280      	movs	r2, #128	@ 0x80
 8004e44:	4b0a      	ldr	r3, [pc, #40]	@ (8004e70 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x40>)
 8004e46:	6919      	ldr	r1, [r3, #16]
 8004e48:	420a      	tst	r2, r1
 8004e4a:	d008      	beq.n	8004e5e <TIM1_BRK_UP_TRG_COM_IRQHandler+0x2e>
  return ((READ_BIT(TIMx->DIER, TIM_DIER_BIE) == (TIM_DIER_BIE)) ? 1UL : 0UL);
 8004e4c:	68d9      	ldr	r1, [r3, #12]
 8004e4e:	420a      	tst	r2, r1
 8004e50:	d005      	beq.n	8004e5e <TIM1_BRK_UP_TRG_COM_IRQHandler+0x2e>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8004e52:	3a02      	subs	r2, #2
 8004e54:	3aff      	subs	r2, #255	@ 0xff
  }

  if(LL_TIM_IsActiveFlag_BRK(TIM1) && LL_TIM_IsEnabledIT_BRK(TIM1))
  {
    LL_TIM_ClearFlag_BRK(TIM1);
    PWMC_OCP_Handler(&PWM_Handle_M1._Super);
 8004e56:	4807      	ldr	r0, [pc, #28]	@ (8004e74 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x44>)
 8004e58:	611a      	str	r2, [r3, #16]
 8004e5a:	f7fe fa9d 	bl	8003398 <PWMC_OCP_Handler>
  }

  /* USER CODE BEGIN TIMx_UP_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_UP_BRK_M1_IRQn 1 */
}
 8004e5e:	bd10      	pop	{r4, pc}
    R1_TIM1_UP_IRQHandler(&PWM_Handle_M1);
 8004e60:	4804      	ldr	r0, [pc, #16]	@ (8004e74 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x44>)
 8004e62:	f7ff fab3 	bl	80043cc <R1_TIM1_UP_IRQHandler>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004e66:	2302      	movs	r3, #2
 8004e68:	425b      	negs	r3, r3
 8004e6a:	6123      	str	r3, [r4, #16]
}
 8004e6c:	e7e9      	b.n	8004e42 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x12>
 8004e6e:	46c0      	nop			@ (mov r8, r8)
 8004e70:	40012c00 	.word	0x40012c00
 8004e74:	20000134 	.word	0x20000134

08004e78 <DMA1_Channel4_5_IRQHandler>:
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF5) == (DMA_ISR_TCIF5));
 8004e78:	2280      	movs	r2, #128	@ 0x80
 8004e7a:	4b06      	ldr	r3, [pc, #24]	@ (8004e94 <DMA1_Channel4_5_IRQHandler+0x1c>)
 8004e7c:	0292      	lsls	r2, r2, #10
 8004e7e:	6819      	ldr	r1, [r3, #0]
  * @brief  This function handles first motor DMAx TC interrupt request.
  *         Required only for R1 with rep rate > 1
  * @param  None
  */
void DMAx_R1_M1_IRQHandler(void)
{
 8004e80:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMAx_R1_M1_IRQn 0 */

  /* USER CODE END DMAx_R1_M1_IRQn 0 */

  if (LL_DMA_IsActiveFlag_TC5(DMA1))
 8004e82:	4211      	tst	r1, r2
 8004e84:	d100      	bne.n	8004e88 <DMA1_Channel4_5_IRQHandler+0x10>
  }

  /* USER CODE BEGIN DMAx_R1_M1_IRQn 1 */

  /* USER CODE END DMAx_R1_M1_IRQn 1 */
}
 8004e86:	bd10      	pop	{r4, pc}
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF5);
 8004e88:	605a      	str	r2, [r3, #4]
    R1_DMAx_TC_IRQHandler(&PWM_Handle_M1);
 8004e8a:	4803      	ldr	r0, [pc, #12]	@ (8004e98 <DMA1_Channel4_5_IRQHandler+0x20>)
 8004e8c:	f7ff faba 	bl	8004404 <R1_DMAx_TC_IRQHandler>
}
 8004e90:	e7f9      	b.n	8004e86 <DMA1_Channel4_5_IRQHandler+0xe>
 8004e92:	46c0      	nop			@ (mov r8, r8)
 8004e94:	40020000 	.word	0x40020000
 8004e98:	20000134 	.word	0x20000134

08004e9c <TIM2_IRQHandler>:
/**
  * @brief  This function handles TIMx global interrupt request for M1 Speed Sensor.
  * @param  None
  */
void SPD_TIM_M1_IRQHandler(void)
{
 8004e9c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 0 */

  /* USER CODE END SPD_TIM_M1_IRQn 0 */

  /* HALL Timer Update IT always enabled, no need to check enable UPDATE state */
  if (LL_TIM_IsActiveFlag_UPDATE(HALL_M1.TIMx) != 0)
 8004e9e:	4c0b      	ldr	r4, [pc, #44]	@ (8004ecc <TIM2_IRQHandler+0x30>)
 8004ea0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8004ea2:	691a      	ldr	r2, [r3, #16]
 8004ea4:	07d2      	lsls	r2, r2, #31
 8004ea6:	d506      	bpl.n	8004eb6 <TIM2_IRQHandler+0x1a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004ea8:	2202      	movs	r2, #2
 8004eaa:	4252      	negs	r2, r2
 8004eac:	611a      	str	r2, [r3, #16]
  {
    LL_TIM_ClearFlag_UPDATE(HALL_M1.TIMx);
    HALL_TIMx_UP_IRQHandler(&HALL_M1);
 8004eae:	0020      	movs	r0, r4
 8004eb0:	f7fc fb90 	bl	80015d4 <HALL_TIMx_UP_IRQHandler>
  {
    /* Nothing to do */
  }

  /* HALL Timer CC1 IT always enabled, no need to check enable CC1 state */
  if (LL_TIM_IsActiveFlag_CC1 (HALL_M1.TIMx))
 8004eb4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8004eb6:	691a      	ldr	r2, [r3, #16]
 8004eb8:	0792      	lsls	r2, r2, #30
 8004eba:	d505      	bpl.n	8004ec8 <TIM2_IRQHandler+0x2c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8004ebc:	2203      	movs	r2, #3
 8004ebe:	4252      	negs	r2, r2
  {
    LL_TIM_ClearFlag_CC1(HALL_M1.TIMx);
    HALL_TIMx_CC_IRQHandler(&HALL_M1);
 8004ec0:	0020      	movs	r0, r4
 8004ec2:	611a      	str	r2, [r3, #16]
 8004ec4:	f7fc f9e4 	bl	8001290 <HALL_TIMx_CC_IRQHandler>
  }

  /* USER CODE BEGIN SPD_TIM_M1_IRQn 1 */

  /* USER CODE END SPD_TIM_M1_IRQn 1 */
}
 8004ec8:	bd10      	pop	{r4, pc}
 8004eca:	46c0      	nop			@ (mov r8, r8)
 8004ecc:	20000058 	.word	0x20000058

08004ed0 <UASPEP_INIT>:
  * @brief  Initialization of the Hardware used for data transmission and reception.
  *
  * @param  pHandle Handler of the current instance of the UASPEP component
  */
void UASPEP_INIT(void *pHWHandle)
{
 8004ed0:	b570      	push	{r4, r5, r6, lr}
#endif
    /* DMA interrupt not used for all families */
    /* Enable DMA end of transfer on UART RX channel completion */
    /* LL_DMA_EnableIT_TC(pHandle->rxDMA, pHandle->rxChannel) */
    /* Enable Error interrupt (EIE) to unmask Overrun interrupt */
    LL_USART_EnableIT_ERROR(pHandle->USARTx);
 8004ed2:	6802      	ldr	r2, [r0, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ed4:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ed8:	2101      	movs	r1, #1
 8004eda:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8004ede:	6893      	ldr	r3, [r2, #8]
 8004ee0:	430b      	orrs	r3, r1
 8004ee2:	6093      	str	r3, [r2, #8]
 8004ee4:	f384 8810 	msr	PRIMASK, r4

    /* Write the USART_RDR register address in the DMA control register to configure it as
     * the source of the transfer */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)&pHandle->USARTx->RDR);
 8004ee8:	6804      	ldr	r4, [r0, #0]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8004eea:	68c2      	ldr	r2, [r0, #12]
 8004eec:	0025      	movs	r5, r4
 8004eee:	4b1a      	ldr	r3, [pc, #104]	@ (8004f58 <UASPEP_INIT+0x88>)
 8004ef0:	3524      	adds	r5, #36	@ 0x24
 8004ef2:	189a      	adds	r2, r3, r2
 8004ef4:	3a01      	subs	r2, #1
 8004ef6:	7816      	ldrb	r6, [r2, #0]
 8004ef8:	6842      	ldr	r2, [r0, #4]
 8004efa:	1992      	adds	r2, r2, r6
 8004efc:	6095      	str	r5, [r2, #8]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8004efe:	2240      	movs	r2, #64	@ 0x40
 8004f00:	6222      	str	r2, [r4, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f02:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f06:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8004f0a:	68a5      	ldr	r5, [r4, #8]
 8004f0c:	4315      	orrs	r5, r2
 8004f0e:	60a5      	str	r5, [r4, #8]
 8004f10:	f386 8810 	msr	PRIMASK, r6
    LL_USART_ClearFlag_TC(pHandle->USARTx);
 8004f14:	6804      	ldr	r4, [r0, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8004f16:	6222      	str	r2, [r4, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f18:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f1c:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 8004f20:	6825      	ldr	r5, [r4, #0]
 8004f22:	4315      	orrs	r5, r2
 8004f24:	6025      	str	r5, [r4, #0]
 8004f26:	f386 8810 	msr	PRIMASK, r6
    LL_USART_EnableDMAReq_TX(pHandle->USARTx);
 8004f2a:	6804      	ldr	r4, [r0, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f2c:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f30:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8004f34:	2680      	movs	r6, #128	@ 0x80
 8004f36:	68a1      	ldr	r1, [r4, #8]
 8004f38:	4331      	orrs	r1, r6
 8004f3a:	60a1      	str	r1, [r4, #8]
 8004f3c:	f385 8810 	msr	PRIMASK, r5
    LL_DMA_SetPeriphAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)&pHandle->USARTx->TDR);
 8004f40:	6801      	ldr	r1, [r0, #0]
 8004f42:	6905      	ldr	r5, [r0, #16]
 8004f44:	000c      	movs	r4, r1
 8004f46:	195b      	adds	r3, r3, r5
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	781d      	ldrb	r5, [r3, #0]
 8004f4c:	6883      	ldr	r3, [r0, #8]
 8004f4e:	3428      	adds	r4, #40	@ 0x28
 8004f50:	195b      	adds	r3, r3, r5
 8004f52:	609c      	str	r4, [r3, #8]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8004f54:	620a      	str	r2, [r1, #32]
}
 8004f56:	bd70      	pop	{r4, r5, r6, pc}
 8004f58:	08006368 	.word	0x08006368

08004f5c <UASPEP_CFG_TRANSMISSION>:
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8004f5c:	4b09      	ldr	r3, [pc, #36]	@ (8004f84 <UASPEP_CFG_TRANSMISSION+0x28>)
  * @param  pHWHandle Hardware components chosen for communication
  * @param  data Data to be transmitted to controller
  * @param  length Length of the data to be transmitted
  */
void UASPEP_CFG_TRANSMISSION(void *pHWHandle, void *data, uint16_t length)
{
 8004f5e:	b510      	push	{r4, lr}
 8004f60:	6904      	ldr	r4, [r0, #16]
 8004f62:	5ce4      	ldrb	r4, [r4, r3]
 8004f64:	6883      	ldr	r3, [r0, #8]
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  if (0U == LL_DMA_IsEnabledChannel(pHandle->txDMA, pHandle->txChannel))
 8004f66:	2001      	movs	r0, #1
 8004f68:	191b      	adds	r3, r3, r4
 8004f6a:	681c      	ldr	r4, [r3, #0]
 8004f6c:	4220      	tst	r0, r4
 8004f6e:	d108      	bne.n	8004f82 <UASPEP_CFG_TRANSMISSION+0x26>
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8004f70:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8004f72:	6859      	ldr	r1, [r3, #4]
 8004f74:	0c09      	lsrs	r1, r1, #16
 8004f76:	0409      	lsls	r1, r1, #16
 8004f78:	430a      	orrs	r2, r1
 8004f7a:	605a      	str	r2, [r3, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	4302      	orrs	r2, r0
 8004f80:	601a      	str	r2, [r3, #0]
  }
  else
  {
    /* Nothing to do */
  }
}
 8004f82:	bd10      	pop	{r4, pc}
 8004f84:	08006367 	.word	0x08006367

08004f88 <UASPEP_CFG_RECEPTION>:
  * @param  pHWHandle Hardware components chosen for communication
  * @param  buffer Buffer which will receive the communicated data
  * @param  length Length of the received data
  */
void UASPEP_CFG_RECEPTION(void *pHWHandle, void* buffer, uint16_t length)
{
 8004f88:	b510      	push	{r4, lr}
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8004f8a:	4b09      	ldr	r3, [pc, #36]	@ (8004fb0 <UASPEP_CFG_RECEPTION+0x28>)
 8004f8c:	68c4      	ldr	r4, [r0, #12]
 8004f8e:	5ce4      	ldrb	r4, [r4, r3]
 8004f90:	6843      	ldr	r3, [r0, #4]
 8004f92:	191b      	adds	r3, r3, r4
 8004f94:	2401      	movs	r4, #1
 8004f96:	6818      	ldr	r0, [r3, #0]
 8004f98:	43a0      	bics	r0, r4
 8004f9a:	6018      	str	r0, [r3, #0]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8004f9c:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8004f9e:	6859      	ldr	r1, [r3, #4]
 8004fa0:	0c09      	lsrs	r1, r1, #16
 8004fa2:	0409      	lsls	r1, r1, #16
 8004fa4:	4311      	orrs	r1, r2
 8004fa6:	6059      	str	r1, [r3, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	4322      	orrs	r2, r4
 8004fac:	601a      	str	r2, [r3, #0]
  //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
  LL_DMA_SetMemoryAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)buffer);
  LL_DMA_SetDataLength(pHandle->rxDMA, pHandle->rxChannel, length);

  LL_DMA_EnableChannel(pHandle->rxDMA, pHandle->rxChannel);
}
 8004fae:	bd10      	pop	{r4, pc}
 8004fb0:	08006367 	.word	0x08006367

08004fb4 <UASPEP_IDLE_ENABLE>:
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8004fb4:	2110      	movs	r1, #16
  * @param  pHandle Handler of the current instance of the UASPEP component
  */
void UASPEP_IDLE_ENABLE(void *pHWHandle)
{
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  LL_USART_ClearFlag_IDLE(pHandle->USARTx);
 8004fb6:	6803      	ldr	r3, [r0, #0]
 8004fb8:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fba:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	601a      	str	r2, [r3, #0]
 8004fca:	f380 8810 	msr	PRIMASK, r0
  LL_USART_EnableIT_IDLE(pHandle->USARTx);
}
 8004fce:	4770      	bx	lr

08004fd0 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8004fd0:	4770      	bx	lr
 8004fd2:	46c0      	nop			@ (mov r8, r8)

08004fd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004fd4:	b570      	push	{r4, r5, r6, lr}
 8004fd6:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004fd8:	20fa      	movs	r0, #250	@ 0xfa
 8004fda:	4b0e      	ldr	r3, [pc, #56]	@ (8005014 <HAL_InitTick+0x40>)
 8004fdc:	0080      	lsls	r0, r0, #2
 8004fde:	7819      	ldrb	r1, [r3, #0]
 8004fe0:	f7fb f892 	bl	8000108 <__udivsi3>
 8004fe4:	4d0c      	ldr	r5, [pc, #48]	@ (8005018 <HAL_InitTick+0x44>)
 8004fe6:	0001      	movs	r1, r0
 8004fe8:	6828      	ldr	r0, [r5, #0]
 8004fea:	f7fb f88d 	bl	8000108 <__udivsi3>
 8004fee:	f000 f883 	bl	80050f8 <HAL_SYSTICK_Config>
 8004ff2:	2800      	cmp	r0, #0
 8004ff4:	d10c      	bne.n	8005010 <HAL_InitTick+0x3c>
  {
    return HAL_ERROR;
 8004ff6:	3001      	adds	r0, #1
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004ff8:	2c03      	cmp	r4, #3
 8004ffa:	d900      	bls.n	8004ffe <HAL_InitTick+0x2a>
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8004ffc:	bd70      	pop	{r4, r5, r6, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004ffe:	3802      	subs	r0, #2
 8005000:	2200      	movs	r2, #0
 8005002:	0021      	movs	r1, r4
 8005004:	f000 f840 	bl	8005088 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005008:	4b04      	ldr	r3, [pc, #16]	@ (800501c <HAL_InitTick+0x48>)
 800500a:	2000      	movs	r0, #0
 800500c:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 800500e:	e7f5      	b.n	8004ffc <HAL_InitTick+0x28>
    return HAL_ERROR;
 8005010:	2001      	movs	r0, #1
 8005012:	e7f3      	b.n	8004ffc <HAL_InitTick+0x28>
 8005014:	200003cc 	.word	0x200003cc
 8005018:	200003c8 	.word	0x200003c8
 800501c:	200003d0 	.word	0x200003d0

08005020 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005020:	2110      	movs	r1, #16
 8005022:	4a06      	ldr	r2, [pc, #24]	@ (800503c <HAL_Init+0x1c>)
{
 8005024:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005026:	6813      	ldr	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8005028:	2002      	movs	r0, #2
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800502a:	430b      	orrs	r3, r1
 800502c:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800502e:	f7ff ffd1 	bl	8004fd4 <HAL_InitTick>
  HAL_MspInit();
 8005032:	f7ff fed7 	bl	8004de4 <HAL_MspInit>
}
 8005036:	2000      	movs	r0, #0
 8005038:	bd10      	pop	{r4, pc}
 800503a:	46c0      	nop			@ (mov r8, r8)
 800503c:	40022000 	.word	0x40022000

08005040 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8005040:	4a03      	ldr	r2, [pc, #12]	@ (8005050 <HAL_IncTick+0x10>)
 8005042:	4b04      	ldr	r3, [pc, #16]	@ (8005054 <HAL_IncTick+0x14>)
 8005044:	6811      	ldr	r1, [r2, #0]
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	185b      	adds	r3, r3, r1
 800504a:	6013      	str	r3, [r2, #0]
}
 800504c:	4770      	bx	lr
 800504e:	46c0      	nop			@ (mov r8, r8)
 8005050:	2000059c 	.word	0x2000059c
 8005054:	200003cc 	.word	0x200003cc

08005058 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8005058:	4b01      	ldr	r3, [pc, #4]	@ (8005060 <HAL_GetTick+0x8>)
 800505a:	6818      	ldr	r0, [r3, #0]
}
 800505c:	4770      	bx	lr
 800505e:	46c0      	nop			@ (mov r8, r8)
 8005060:	2000059c 	.word	0x2000059c

08005064 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005064:	b570      	push	{r4, r5, r6, lr}
 8005066:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005068:	f7ff fff6 	bl	8005058 <HAL_GetTick>
 800506c:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800506e:	1c63      	adds	r3, r4, #1
 8005070:	d002      	beq.n	8005078 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8005072:	4b04      	ldr	r3, [pc, #16]	@ (8005084 <HAL_Delay+0x20>)
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8005078:	f7ff ffee 	bl	8005058 <HAL_GetTick>
 800507c:	1b40      	subs	r0, r0, r5
 800507e:	42a0      	cmp	r0, r4
 8005080:	d3fa      	bcc.n	8005078 <HAL_Delay+0x14>
  {
  }
}
 8005082:	bd70      	pop	{r4, r5, r6, pc}
 8005084:	200003cc 	.word	0x200003cc

08005088 <HAL_NVIC_SetPriority>:
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005088:	22ff      	movs	r2, #255	@ 0xff
 800508a:	2303      	movs	r3, #3
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800508c:	b510      	push	{r4, lr}
 800508e:	0014      	movs	r4, r2
 8005090:	4003      	ands	r3, r0
 8005092:	00db      	lsls	r3, r3, #3
 8005094:	409c      	lsls	r4, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005096:	0189      	lsls	r1, r1, #6
 8005098:	400a      	ands	r2, r1
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800509a:	43e4      	mvns	r4, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800509c:	409a      	lsls	r2, r3
  if ((int32_t)(IRQn) >= 0)
 800509e:	2800      	cmp	r0, #0
 80050a0:	db0b      	blt.n	80050ba <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80050a2:	4b0c      	ldr	r3, [pc, #48]	@ (80050d4 <HAL_NVIC_SetPriority+0x4c>)
 80050a4:	21c0      	movs	r1, #192	@ 0xc0
 80050a6:	469c      	mov	ip, r3
 80050a8:	0880      	lsrs	r0, r0, #2
 80050aa:	0080      	lsls	r0, r0, #2
 80050ac:	4460      	add	r0, ip
 80050ae:	0089      	lsls	r1, r1, #2
 80050b0:	5843      	ldr	r3, [r0, r1]
 80050b2:	4023      	ands	r3, r4
 80050b4:	4313      	orrs	r3, r2
 80050b6:	5043      	str	r3, [r0, r1]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80050b8:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80050ba:	230f      	movs	r3, #15
 80050bc:	4906      	ldr	r1, [pc, #24]	@ (80050d8 <HAL_NVIC_SetPriority+0x50>)
 80050be:	4003      	ands	r3, r0
 80050c0:	468c      	mov	ip, r1
 80050c2:	3b08      	subs	r3, #8
 80050c4:	089b      	lsrs	r3, r3, #2
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	4463      	add	r3, ip
 80050ca:	69d9      	ldr	r1, [r3, #28]
 80050cc:	400c      	ands	r4, r1
 80050ce:	4314      	orrs	r4, r2
 80050d0:	61dc      	str	r4, [r3, #28]
 80050d2:	e7f1      	b.n	80050b8 <HAL_NVIC_SetPriority+0x30>
 80050d4:	e000e100 	.word	0xe000e100
 80050d8:	e000ed00 	.word	0xe000ed00

080050dc <HAL_NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80050dc:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80050e0:	4b03      	ldr	r3, [pc, #12]	@ (80050f0 <HAL_NVIC_SystemReset+0x14>)
 80050e2:	4a04      	ldr	r2, [pc, #16]	@ (80050f4 <HAL_NVIC_SystemReset+0x18>)
 80050e4:	60da      	str	r2, [r3, #12]
 80050e6:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80050ea:	46c0      	nop			@ (mov r8, r8)
  for(;;)                                                           /* wait until reset */
 80050ec:	e7fd      	b.n	80050ea <HAL_NVIC_SystemReset+0xe>
 80050ee:	46c0      	nop			@ (mov r8, r8)
 80050f0:	e000ed00 	.word	0xe000ed00
 80050f4:	05fa0004 	.word	0x05fa0004

080050f8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80050f8:	2280      	movs	r2, #128	@ 0x80
 80050fa:	1e43      	subs	r3, r0, #1
 80050fc:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 80050fe:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005100:	4293      	cmp	r3, r2
 8005102:	d20e      	bcs.n	8005122 <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005104:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005106:	4a07      	ldr	r2, [pc, #28]	@ (8005124 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005108:	4807      	ldr	r0, [pc, #28]	@ (8005128 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800510a:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800510c:	6a03      	ldr	r3, [r0, #32]
 800510e:	0609      	lsls	r1, r1, #24
 8005110:	021b      	lsls	r3, r3, #8
 8005112:	0a1b      	lsrs	r3, r3, #8
 8005114:	430b      	orrs	r3, r1
 8005116:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005118:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800511a:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800511c:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800511e:	3307      	adds	r3, #7
 8005120:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8005122:	4770      	bx	lr
 8005124:	e000e010 	.word	0xe000e010
 8005128:	e000ed00 	.word	0xe000ed00

0800512c <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800512c:	4770      	bx	lr
 800512e:	46c0      	nop			@ (mov r8, r8)

08005130 <HAL_SYSTICK_IRQHandler>:
{
 8005130:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 8005132:	f7ff fffb 	bl	800512c <HAL_SYSTICK_Callback>
}
 8005136:	bd10      	pop	{r4, pc}

08005138 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005138:	6900      	ldr	r0, [r0, #16]
 800513a:	4008      	ands	r0, r1
 800513c:	1e43      	subs	r3, r0, #1
 800513e:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8005140:	b2c0      	uxtb	r0, r0
  }
 8005142:	4770      	bx	lr

08005144 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8005144:	4b01      	ldr	r3, [pc, #4]	@ (800514c <HAL_RCC_GetHCLKFreq+0x8>)
 8005146:	6818      	ldr	r0, [r3, #0]
}
 8005148:	4770      	bx	lr
 800514a:	46c0      	nop			@ (mov r8, r8)
 800514c:	200003c8 	.word	0x200003c8

08005150 <LL_ADC_Init>:
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8005150:	6882      	ldr	r2, [r0, #8]
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8005152:	0003      	movs	r3, r0
 8005154:	b510      	push	{r4, lr}
              );
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8005156:	2001      	movs	r0, #1
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8005158:	07d2      	lsls	r2, r2, #31
 800515a:	d410      	bmi.n	800517e <LL_ADC_Init+0x2e>
    MODIFY_REG(ADCx->CFGR1,
 800515c:	688c      	ldr	r4, [r1, #8]
 800515e:	684a      	ldr	r2, [r1, #4]
 8005160:	68d8      	ldr	r0, [r3, #12]
 8005162:	4322      	orrs	r2, r4
 8005164:	68cc      	ldr	r4, [r1, #12]
    MODIFY_REG(ADCx->CFGR2,
 8005166:	6809      	ldr	r1, [r1, #0]
    MODIFY_REG(ADCx->CFGR1,
 8005168:	4322      	orrs	r2, r4
 800516a:	4c05      	ldr	r4, [pc, #20]	@ (8005180 <LL_ADC_Init+0x30>)
 800516c:	4020      	ands	r0, r4
 800516e:	4302      	orrs	r2, r0
  ErrorStatus status = SUCCESS;
 8005170:	2000      	movs	r0, #0
    MODIFY_REG(ADCx->CFGR1,
 8005172:	60da      	str	r2, [r3, #12]
    MODIFY_REG(ADCx->CFGR2,
 8005174:	691a      	ldr	r2, [r3, #16]
 8005176:	0092      	lsls	r2, r2, #2
 8005178:	0892      	lsrs	r2, r2, #2
 800517a:	430a      	orrs	r2, r1
 800517c:	611a      	str	r2, [r3, #16]
  }
  return status;
}
 800517e:	bd10      	pop	{r4, pc}
 8005180:	ffff3fc7 	.word	0xffff3fc7

08005184 <LL_ADC_REG_Init>:
 8005184:	6883      	ldr	r3, [r0, #8]
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8005186:	0002      	movs	r2, r0
 8005188:	b510      	push	{r4, lr}

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800518a:	2001      	movs	r0, #1
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 800518c:	07db      	lsls	r3, r3, #31
 800518e:	d40e      	bmi.n	80051ae <LL_ADC_REG_Init+0x2a>
    MODIFY_REG(ADCx->CFGR1,
 8005190:	684c      	ldr	r4, [r1, #4]
 8005192:	680b      	ldr	r3, [r1, #0]
 8005194:	68d0      	ldr	r0, [r2, #12]
 8005196:	4323      	orrs	r3, r4
 8005198:	688c      	ldr	r4, [r1, #8]
 800519a:	4323      	orrs	r3, r4
 800519c:	68cc      	ldr	r4, [r1, #12]
 800519e:	6909      	ldr	r1, [r1, #16]
 80051a0:	4323      	orrs	r3, r4
 80051a2:	430b      	orrs	r3, r1
 80051a4:	4902      	ldr	r1, [pc, #8]	@ (80051b0 <LL_ADC_REG_Init+0x2c>)
 80051a6:	4001      	ands	r1, r0
  ErrorStatus status = SUCCESS;
 80051a8:	2000      	movs	r0, #0
    MODIFY_REG(ADCx->CFGR1,
 80051aa:	430b      	orrs	r3, r1
 80051ac:	60d3      	str	r3, [r2, #12]
  }
  return status;
}
 80051ae:	bd10      	pop	{r4, pc}
 80051b0:	fffec23c 	.word	0xfffec23c

080051b4 <LL_GPIO_Init>:

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80051b4:	2201      	movs	r2, #1
{
 80051b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051b8:	4645      	mov	r5, r8
 80051ba:	46de      	mov	lr, fp
 80051bc:	4657      	mov	r7, sl
 80051be:	464e      	mov	r6, r9
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80051c0:	680c      	ldr	r4, [r1, #0]
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80051c2:	4690      	mov	r8, r2
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80051c4:	43e2      	mvns	r2, r4
{
 80051c6:	b5e0      	push	{r5, r6, r7, lr}
  pinpos = 0;
 80051c8:	2300      	movs	r3, #0
 80051ca:	4694      	mov	ip, r2
{
 80051cc:	b083      	sub	sp, #12
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80051ce:	2c00      	cmp	r4, #0
 80051d0:	d111      	bne.n	80051f6 <LL_GPIO_Init+0x42>
 80051d2:	e058      	b.n	8005286 <LL_GPIO_Init+0xd2>
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 80051d4:	68c5      	ldr	r5, [r0, #12]
 80051d6:	9a00      	ldr	r2, [sp, #0]
 80051d8:	4015      	ands	r5, r2
 80051da:	464a      	mov	r2, r9
 80051dc:	4315      	orrs	r5, r2
 80051de:	60c5      	str	r5, [r0, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 80051e0:	6805      	ldr	r5, [r0, #0]
 80051e2:	9a00      	ldr	r2, [sp, #0]
 80051e4:	402a      	ands	r2, r5
 80051e6:	9d01      	ldr	r5, [sp, #4]
 80051e8:	436e      	muls	r6, r5
 80051ea:	4332      	orrs	r2, r6
 80051ec:	6002      	str	r2, [r0, #0]
 80051ee:	0022      	movs	r2, r4
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
    }
    pinpos++;
 80051f0:	3301      	adds	r3, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80051f2:	40da      	lsrs	r2, r3
 80051f4:	d047      	beq.n	8005286 <LL_GPIO_Init+0xd2>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80051f6:	4642      	mov	r2, r8
 80051f8:	0025      	movs	r5, r4
 80051fa:	409a      	lsls	r2, r3
 80051fc:	4015      	ands	r5, r2
    if (currentpin != 0x00u)
 80051fe:	4214      	tst	r4, r2
 8005200:	d0f5      	beq.n	80051ee <LL_GPIO_Init+0x3a>
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 8005202:	002e      	movs	r6, r5
 8005204:	436e      	muls	r6, r5
 8005206:	0072      	lsls	r2, r6, #1
 8005208:	1992      	adds	r2, r2, r6
 800520a:	43d2      	mvns	r2, r2
 800520c:	9200      	str	r2, [sp, #0]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 800520e:	690a      	ldr	r2, [r1, #16]
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005210:	684f      	ldr	r7, [r1, #4]
 8005212:	4372      	muls	r2, r6
 8005214:	4691      	mov	r9, r2
 8005216:	1e7a      	subs	r2, r7, #1
 8005218:	9701      	str	r7, [sp, #4]
 800521a:	2a01      	cmp	r2, #1
 800521c:	d8da      	bhi.n	80051d4 <LL_GPIO_Init+0x20>
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 800521e:	6882      	ldr	r2, [r0, #8]
 8005220:	9f00      	ldr	r7, [sp, #0]
 8005222:	4693      	mov	fp, r2
 8005224:	688a      	ldr	r2, [r1, #8]
 8005226:	4372      	muls	r2, r6
 8005228:	4692      	mov	sl, r2
 800522a:	465a      	mov	r2, fp
 800522c:	403a      	ands	r2, r7
 800522e:	4693      	mov	fp, r2
 8005230:	4652      	mov	r2, sl
 8005232:	465f      	mov	r7, fp
 8005234:	433a      	orrs	r2, r7
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005236:	4667      	mov	r7, ip
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 8005238:	6082      	str	r2, [r0, #8]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800523a:	6842      	ldr	r2, [r0, #4]
 800523c:	403a      	ands	r2, r7
 800523e:	4692      	mov	sl, r2
 8005240:	68ca      	ldr	r2, [r1, #12]
 8005242:	4362      	muls	r2, r4
 8005244:	4693      	mov	fp, r2
 8005246:	4652      	mov	r2, sl
 8005248:	465f      	mov	r7, fp
 800524a:	433a      	orrs	r2, r7
 800524c:	6042      	str	r2, [r0, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 800524e:	68c2      	ldr	r2, [r0, #12]
 8005250:	9f00      	ldr	r7, [sp, #0]
 8005252:	403a      	ands	r2, r7
 8005254:	4692      	mov	sl, r2
 8005256:	464a      	mov	r2, r9
 8005258:	4657      	mov	r7, sl
 800525a:	433a      	orrs	r2, r7
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800525c:	9f01      	ldr	r7, [sp, #4]
 800525e:	60c2      	str	r2, [r0, #12]
 8005260:	2f02      	cmp	r7, #2
 8005262:	d1bd      	bne.n	80051e0 <LL_GPIO_Init+0x2c>
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005264:	694a      	ldr	r2, [r1, #20]
 8005266:	4691      	mov	r9, r2
        if (currentpin < LL_GPIO_PIN_8)
 8005268:	2dff      	cmp	r5, #255	@ 0xff
 800526a:	d814      	bhi.n	8005296 <LL_GPIO_Init+0xe2>
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800526c:	0032      	movs	r2, r6
 800526e:	4372      	muls	r2, r6
 8005270:	4692      	mov	sl, r2
 8005272:	4657      	mov	r7, sl
 8005274:	6a05      	ldr	r5, [r0, #32]
 8005276:	0112      	lsls	r2, r2, #4
 8005278:	1bd2      	subs	r2, r2, r7
 800527a:	4395      	bics	r5, r2
 800527c:	464a      	mov	r2, r9
 800527e:	437a      	muls	r2, r7
 8005280:	4315      	orrs	r5, r2
 8005282:	6205      	str	r5, [r0, #32]
}
 8005284:	e7ac      	b.n	80051e0 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
}
 8005286:	2000      	movs	r0, #0
 8005288:	b003      	add	sp, #12
 800528a:	bcf0      	pop	{r4, r5, r6, r7}
 800528c:	46bb      	mov	fp, r7
 800528e:	46b2      	mov	sl, r6
 8005290:	46a9      	mov	r9, r5
 8005292:	46a0      	mov	r8, r4
 8005294:	bdf0      	pop	{r4, r5, r6, r7, pc}
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8005296:	0a2d      	lsrs	r5, r5, #8
 8005298:	436d      	muls	r5, r5
 800529a:	436d      	muls	r5, r5
 800529c:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 800529e:	4692      	mov	sl, r2
 80052a0:	012a      	lsls	r2, r5, #4
 80052a2:	1b52      	subs	r2, r2, r5
 80052a4:	4693      	mov	fp, r2
 80052a6:	4652      	mov	r2, sl
 80052a8:	465f      	mov	r7, fp
 80052aa:	43ba      	bics	r2, r7
 80052ac:	4692      	mov	sl, r2
 80052ae:	464a      	mov	r2, r9
 80052b0:	436a      	muls	r2, r5
 80052b2:	0015      	movs	r5, r2
 80052b4:	4652      	mov	r2, sl
 80052b6:	4315      	orrs	r5, r2
 80052b8:	6245      	str	r5, [r0, #36]	@ 0x24
}
 80052ba:	e791      	b.n	80051e0 <LL_GPIO_Init+0x2c>

080052bc <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80052bc:	0003      	movs	r3, r0
 80052be:	b570      	push	{r4, r5, r6, lr}
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80052c0:	2000      	movs	r0, #0

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d12e      	bne.n	8005324 <LL_RCC_GetUSARTClockFreq+0x68>
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 80052c6:	4a2b      	ldr	r2, [pc, #172]	@ (8005374 <LL_RCC_GetUSARTClockFreq+0xb8>)
 80052c8:	3303      	adds	r3, #3
 80052ca:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80052cc:	400b      	ands	r3, r1
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	d040      	beq.n	8005354 <LL_RCC_GetUSARTClockFreq+0x98>
 80052d2:	2b03      	cmp	r3, #3
 80052d4:	d043      	beq.n	800535e <LL_RCC_GetUSARTClockFreq+0xa2>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80052d6:	6851      	ldr	r1, [r2, #4]
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d024      	beq.n	8005326 <LL_RCC_GetUSARTClockFreq+0x6a>
 80052dc:	230c      	movs	r3, #12
 80052de:	400b      	ands	r3, r1
uint32_t RCC_GetSystemClockFreq(void)
{
  uint32_t frequency = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80052e0:	2b08      	cmp	r3, #8
 80052e2:	d144      	bne.n	800536e <LL_RCC_GetUSARTClockFreq+0xb2>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 80052e4:	4b24      	ldr	r3, [pc, #144]	@ (8005378 <LL_RCC_GetUSARTClockFreq+0xbc>)
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 80052e6:	240f      	movs	r4, #15
 80052e8:	469c      	mov	ip, r3
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 80052ea:	6850      	ldr	r0, [r2, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 80052ec:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 80052ee:	03c0      	lsls	r0, r0, #15
 80052f0:	17c0      	asrs	r0, r0, #31
 80052f2:	4018      	ands	r0, r3
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 80052f4:	4021      	ands	r1, r4
 80052f6:	4460      	add	r0, ip
      break;
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 80052f8:	3101      	adds	r1, #1
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 80052fa:	6855      	ldr	r5, [r2, #4]
 80052fc:	f7fa ff04 	bl	8000108 <__udivsi3>
 8005300:	0003      	movs	r3, r0
 8005302:	0cad      	lsrs	r5, r5, #18
 8005304:	402c      	ands	r4, r5
 8005306:	1ca0      	adds	r0, r4, #2
 8005308:	4358      	muls	r0, r3
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800530a:	4b1a      	ldr	r3, [pc, #104]	@ (8005374 <LL_RCC_GetUSARTClockFreq+0xb8>)
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800530c:	491b      	ldr	r1, [pc, #108]	@ (800537c <LL_RCC_GetUSARTClockFreq+0xc0>)
 800530e:	685a      	ldr	r2, [r3, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	0612      	lsls	r2, r2, #24
 8005314:	0f12      	lsrs	r2, r2, #28
 8005316:	5c8a      	ldrb	r2, [r1, r2]
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8005318:	055b      	lsls	r3, r3, #21
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800531a:	40d0      	lsrs	r0, r2
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800531c:	4a18      	ldr	r2, [pc, #96]	@ (8005380 <LL_RCC_GetUSARTClockFreq+0xc4>)
 800531e:	0f5b      	lsrs	r3, r3, #29
 8005320:	5cd3      	ldrb	r3, [r2, r3]
 8005322:	40d8      	lsrs	r0, r3
}
 8005324:	bd70      	pop	{r4, r5, r6, pc}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005326:	330b      	adds	r3, #11
 8005328:	400b      	ands	r3, r1
  switch (LL_RCC_GetSysClkSource())
 800532a:	2b08      	cmp	r3, #8
 800532c:	d11d      	bne.n	800536a <LL_RCC_GetUSARTClockFreq+0xae>
      pllinputfreq = HSI_VALUE / 2U;
 800532e:	4b12      	ldr	r3, [pc, #72]	@ (8005378 <LL_RCC_GetUSARTClockFreq+0xbc>)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8005330:	240f      	movs	r4, #15
 8005332:	469c      	mov	ip, r3
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8005334:	6850      	ldr	r0, [r2, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8005336:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8005338:	03c0      	lsls	r0, r0, #15
 800533a:	17c0      	asrs	r0, r0, #31
 800533c:	4018      	ands	r0, r3
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 800533e:	4021      	ands	r1, r4
 8005340:	4460      	add	r0, ip
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 8005342:	3101      	adds	r1, #1
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8005344:	6855      	ldr	r5, [r2, #4]
 8005346:	f7fa fedf 	bl	8000108 <__udivsi3>
 800534a:	0cad      	lsrs	r5, r5, #18
 800534c:	402c      	ands	r4, r5
 800534e:	3402      	adds	r4, #2
 8005350:	4360      	muls	r0, r4
  return frequency;
 8005352:	e7e7      	b.n	8005324 <LL_RCC_GetUSARTClockFreq+0x68>
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8005354:	6a10      	ldr	r0, [r2, #32]
        if (LL_RCC_LSE_IsReady())
 8005356:	0780      	lsls	r0, r0, #30
 8005358:	0fc0      	lsrs	r0, r0, #31
 800535a:	03c0      	lsls	r0, r0, #15
 800535c:	e7e2      	b.n	8005324 <LL_RCC_GetUSARTClockFreq+0x68>
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800535e:	6813      	ldr	r3, [r2, #0]
 8005360:	2202      	movs	r2, #2
 8005362:	0010      	movs	r0, r2
 8005364:	4018      	ands	r0, r3
        if (LL_RCC_HSI_IsReady())
 8005366:	421a      	tst	r2, r3
 8005368:	d0dc      	beq.n	8005324 <LL_RCC_GetUSARTClockFreq+0x68>
          usart_frequency = HSI_VALUE;
 800536a:	4806      	ldr	r0, [pc, #24]	@ (8005384 <LL_RCC_GetUSARTClockFreq+0xc8>)
  return usart_frequency;
 800536c:	e7da      	b.n	8005324 <LL_RCC_GetUSARTClockFreq+0x68>
      frequency = HSI_VALUE;
 800536e:	4805      	ldr	r0, [pc, #20]	@ (8005384 <LL_RCC_GetUSARTClockFreq+0xc8>)
 8005370:	e7cb      	b.n	800530a <LL_RCC_GetUSARTClockFreq+0x4e>
 8005372:	46c0      	nop			@ (mov r8, r8)
 8005374:	40021000 	.word	0x40021000
 8005378:	003d0900 	.word	0x003d0900
 800537c:	08006378 	.word	0x08006378
 8005380:	08006370 	.word	0x08006370
 8005384:	007a1200 	.word	0x007a1200

08005388 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8005388:	b530      	push	{r4, r5, lr}
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800538a:	4d1b      	ldr	r5, [pc, #108]	@ (80053f8 <LL_TIM_Init+0x70>)
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800538c:	6803      	ldr	r3, [r0, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800538e:	880a      	ldrh	r2, [r1, #0]
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8005390:	688c      	ldr	r4, [r1, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005392:	42a8      	cmp	r0, r5
 8005394:	d02a      	beq.n	80053ec <LL_TIM_Init+0x64>
 8005396:	2580      	movs	r5, #128	@ 0x80
 8005398:	05ed      	lsls	r5, r5, #23
 800539a:	42a8      	cmp	r0, r5
 800539c:	d015      	beq.n	80053ca <LL_TIM_Init+0x42>
 800539e:	4d17      	ldr	r5, [pc, #92]	@ (80053fc <LL_TIM_Init+0x74>)
 80053a0:	42a8      	cmp	r0, r5
 80053a2:	d012      	beq.n	80053ca <LL_TIM_Init+0x42>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053a4:	4d16      	ldr	r5, [pc, #88]	@ (8005400 <LL_TIM_Init+0x78>)
 80053a6:	42a8      	cmp	r0, r5
 80053a8:	d013      	beq.n	80053d2 <LL_TIM_Init+0x4a>
 80053aa:	4d16      	ldr	r5, [pc, #88]	@ (8005404 <LL_TIM_Init+0x7c>)
 80053ac:	42a8      	cmp	r0, r5
 80053ae:	d002      	beq.n	80053b6 <LL_TIM_Init+0x2e>
 80053b0:	4d15      	ldr	r5, [pc, #84]	@ (8005408 <LL_TIM_Init+0x80>)
 80053b2:	42a8      	cmp	r0, r5
 80053b4:	d111      	bne.n	80053da <LL_TIM_Init+0x52>
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80053b6:	4d15      	ldr	r5, [pc, #84]	@ (800540c <LL_TIM_Init+0x84>)
 80053b8:	402b      	ands	r3, r5
 80053ba:	68cd      	ldr	r5, [r1, #12]
 80053bc:	432b      	orrs	r3, r5
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80053be:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80053c0:	62c4      	str	r4, [r0, #44]	@ 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 80053c2:	6282      	str	r2, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80053c4:	690b      	ldr	r3, [r1, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80053c6:	6303      	str	r3, [r0, #48]	@ 0x30
}
 80053c8:	e00a      	b.n	80053e0 <LL_TIM_Init+0x58>
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80053ca:	2570      	movs	r5, #112	@ 0x70
 80053cc:	43ab      	bics	r3, r5
 80053ce:	684d      	ldr	r5, [r1, #4]
 80053d0:	432b      	orrs	r3, r5
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80053d2:	4d0e      	ldr	r5, [pc, #56]	@ (800540c <LL_TIM_Init+0x84>)
 80053d4:	68c9      	ldr	r1, [r1, #12]
 80053d6:	402b      	ands	r3, r5
 80053d8:	430b      	orrs	r3, r1
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80053da:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80053dc:	62c4      	str	r4, [r0, #44]	@ 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 80053de:	6282      	str	r2, [r0, #40]	@ 0x28
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80053e0:	2201      	movs	r2, #1
 80053e2:	6943      	ldr	r3, [r0, #20]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	6143      	str	r3, [r0, #20]
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);

  return SUCCESS;
}
 80053e8:	2000      	movs	r0, #0
 80053ea:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80053ec:	2570      	movs	r5, #112	@ 0x70
 80053ee:	43ab      	bics	r3, r5
 80053f0:	684d      	ldr	r5, [r1, #4]
 80053f2:	432b      	orrs	r3, r5
 80053f4:	e7df      	b.n	80053b6 <LL_TIM_Init+0x2e>
 80053f6:	46c0      	nop			@ (mov r8, r8)
 80053f8:	40012c00 	.word	0x40012c00
 80053fc:	40000400 	.word	0x40000400
 8005400:	40002000 	.word	0x40002000
 8005404:	40014400 	.word	0x40014400
 8005408:	40014800 	.word	0x40014800
 800540c:	fffffcff 	.word	0xfffffcff

08005410 <LL_TIM_OC_Init>:
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
  ErrorStatus result = ERROR;

  switch (Channel)
 8005410:	2380      	movs	r3, #128	@ 0x80
{
 8005412:	b570      	push	{r4, r5, r6, lr}
  switch (Channel)
 8005414:	005b      	lsls	r3, r3, #1
 8005416:	4299      	cmp	r1, r3
 8005418:	d057      	beq.n	80054ca <LL_TIM_OC_Init+0xba>
 800541a:	d82b      	bhi.n	8005474 <LL_TIM_OC_Init+0x64>
 800541c:	2901      	cmp	r1, #1
 800541e:	d100      	bne.n	8005422 <LL_TIM_OC_Init+0x12>
 8005420:	e077      	b.n	8005512 <LL_TIM_OC_Init+0x102>
 8005422:	2910      	cmp	r1, #16
 8005424:	d14f      	bne.n	80054c6 <LL_TIM_OC_Init+0xb6>
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8005426:	6a03      	ldr	r3, [r0, #32]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8005428:	4c6c      	ldr	r4, [pc, #432]	@ (80055dc <LL_TIM_OC_Init+0x1cc>)
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800542a:	438b      	bics	r3, r1
 800542c:	6203      	str	r3, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800542e:	6a06      	ldr	r6, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8005430:	6845      	ldr	r5, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8005432:	6983      	ldr	r3, [r0, #24]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8005434:	4023      	ands	r3, r4
 8005436:	6814      	ldr	r4, [r2, #0]
 8005438:	0224      	lsls	r4, r4, #8
 800543a:	431c      	orrs	r4, r3

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 800543c:	2320      	movs	r3, #32
 800543e:	439e      	bics	r6, r3
 8005440:	6913      	ldr	r3, [r2, #16]
 8005442:	011b      	lsls	r3, r3, #4
 8005444:	4333      	orrs	r3, r6

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8005446:	438b      	bics	r3, r1
 8005448:	6851      	ldr	r1, [r2, #4]
 800544a:	0109      	lsls	r1, r1, #4
 800544c:	4319      	orrs	r1, r3

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800544e:	4b64      	ldr	r3, [pc, #400]	@ (80055e0 <LL_TIM_OC_Init+0x1d0>)
 8005450:	4298      	cmp	r0, r3
 8005452:	d100      	bne.n	8005456 <LL_TIM_OC_Init+0x46>
 8005454:	e07e      	b.n	8005554 <LL_TIM_OC_Init+0x144>
 8005456:	4b63      	ldr	r3, [pc, #396]	@ (80055e4 <LL_TIM_OC_Init+0x1d4>)
 8005458:	4298      	cmp	r0, r3
 800545a:	d100      	bne.n	800545e <LL_TIM_OC_Init+0x4e>
 800545c:	e07a      	b.n	8005554 <LL_TIM_OC_Init+0x144>
 800545e:	4b62      	ldr	r3, [pc, #392]	@ (80055e8 <LL_TIM_OC_Init+0x1d8>)
 8005460:	4298      	cmp	r0, r3
 8005462:	d100      	bne.n	8005466 <LL_TIM_OC_Init+0x56>
 8005464:	e076      	b.n	8005554 <LL_TIM_OC_Init+0x144>

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8005466:	68d3      	ldr	r3, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8005468:	6045      	str	r5, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800546a:	6184      	str	r4, [r0, #24]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800546c:	6383      	str	r3, [r0, #56]	@ 0x38

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800546e:	6201      	str	r1, [r0, #32]
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8005470:	2000      	movs	r0, #0
 8005472:	e029      	b.n	80054c8 <LL_TIM_OC_Init+0xb8>
  switch (Channel)
 8005474:	2380      	movs	r3, #128	@ 0x80
 8005476:	015b      	lsls	r3, r3, #5
 8005478:	4299      	cmp	r1, r3
 800547a:	d124      	bne.n	80054c6 <LL_TIM_OC_Init+0xb6>
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800547c:	6a03      	ldr	r3, [r0, #32]
 800547e:	4e5b      	ldr	r6, [pc, #364]	@ (80055ec <LL_TIM_OC_Init+0x1dc>)

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8005480:	4c56      	ldr	r4, [pc, #344]	@ (80055dc <LL_TIM_OC_Init+0x1cc>)
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8005482:	4033      	ands	r3, r6
 8005484:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8005486:	6a01      	ldr	r1, [r0, #32]
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8005488:	6845      	ldr	r5, [r0, #4]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800548a:	69c3      	ldr	r3, [r0, #28]
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800548c:	4023      	ands	r3, r4
 800548e:	6814      	ldr	r4, [r2, #0]
 8005490:	0224      	lsls	r4, r4, #8
 8005492:	431c      	orrs	r4, r3

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8005494:	4b56      	ldr	r3, [pc, #344]	@ (80055f0 <LL_TIM_OC_Init+0x1e0>)
 8005496:	4019      	ands	r1, r3
 8005498:	6913      	ldr	r3, [r2, #16]
 800549a:	031b      	lsls	r3, r3, #12
 800549c:	430b      	orrs	r3, r1

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 800549e:	6851      	ldr	r1, [r2, #4]
 80054a0:	4033      	ands	r3, r6
 80054a2:	0309      	lsls	r1, r1, #12
 80054a4:	430b      	orrs	r3, r1

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054a6:	494e      	ldr	r1, [pc, #312]	@ (80055e0 <LL_TIM_OC_Init+0x1d0>)
 80054a8:	4288      	cmp	r0, r1
 80054aa:	d068      	beq.n	800557e <LL_TIM_OC_Init+0x16e>
 80054ac:	494d      	ldr	r1, [pc, #308]	@ (80055e4 <LL_TIM_OC_Init+0x1d4>)
 80054ae:	4288      	cmp	r0, r1
 80054b0:	d065      	beq.n	800557e <LL_TIM_OC_Init+0x16e>
 80054b2:	494d      	ldr	r1, [pc, #308]	@ (80055e8 <LL_TIM_OC_Init+0x1d8>)
 80054b4:	4288      	cmp	r0, r1
 80054b6:	d062      	beq.n	800557e <LL_TIM_OC_Init+0x16e>

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80054b8:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80054ba:	6045      	str	r5, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80054bc:	61c4      	str	r4, [r0, #28]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80054be:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80054c0:	6203      	str	r3, [r0, #32]
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80054c2:	2000      	movs	r0, #0
 80054c4:	e000      	b.n	80054c8 <LL_TIM_OC_Init+0xb8>
  switch (Channel)
 80054c6:	2001      	movs	r0, #1
}
 80054c8:	bd70      	pop	{r4, r5, r6, pc}
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80054ca:	6a03      	ldr	r3, [r0, #32]
 80054cc:	4e49      	ldr	r6, [pc, #292]	@ (80055f4 <LL_TIM_OC_Init+0x1e4>)
 80054ce:	4033      	ands	r3, r6
 80054d0:	6203      	str	r3, [r0, #32]
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80054d2:	2373      	movs	r3, #115	@ 0x73
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80054d4:	6a04      	ldr	r4, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80054d6:	6845      	ldr	r5, [r0, #4]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80054d8:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80054da:	4399      	bics	r1, r3
 80054dc:	6813      	ldr	r3, [r2, #0]
 80054de:	4319      	orrs	r1, r3
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80054e0:	4b45      	ldr	r3, [pc, #276]	@ (80055f8 <LL_TIM_OC_Init+0x1e8>)
 80054e2:	401c      	ands	r4, r3
 80054e4:	6913      	ldr	r3, [r2, #16]
 80054e6:	021b      	lsls	r3, r3, #8
 80054e8:	4323      	orrs	r3, r4
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80054ea:	6854      	ldr	r4, [r2, #4]
 80054ec:	4033      	ands	r3, r6
 80054ee:	0224      	lsls	r4, r4, #8
 80054f0:	431c      	orrs	r4, r3
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054f2:	4b3b      	ldr	r3, [pc, #236]	@ (80055e0 <LL_TIM_OC_Init+0x1d0>)
 80054f4:	4298      	cmp	r0, r3
 80054f6:	d05c      	beq.n	80055b2 <LL_TIM_OC_Init+0x1a2>
 80054f8:	4b3a      	ldr	r3, [pc, #232]	@ (80055e4 <LL_TIM_OC_Init+0x1d4>)
 80054fa:	4298      	cmp	r0, r3
 80054fc:	d059      	beq.n	80055b2 <LL_TIM_OC_Init+0x1a2>
 80054fe:	4b3a      	ldr	r3, [pc, #232]	@ (80055e8 <LL_TIM_OC_Init+0x1d8>)
 8005500:	4298      	cmp	r0, r3
 8005502:	d056      	beq.n	80055b2 <LL_TIM_OC_Init+0x1a2>
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8005504:	68d3      	ldr	r3, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8005506:	6045      	str	r5, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8005508:	61c1      	str	r1, [r0, #28]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800550a:	63c3      	str	r3, [r0, #60]	@ 0x3c
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800550c:	6204      	str	r4, [r0, #32]
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800550e:	2000      	movs	r0, #0
 8005510:	e7da      	b.n	80054c8 <LL_TIM_OC_Init+0xb8>
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8005512:	2673      	movs	r6, #115	@ 0x73
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8005514:	6a03      	ldr	r3, [r0, #32]
 8005516:	438b      	bics	r3, r1
 8005518:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800551a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800551c:	6845      	ldr	r5, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800551e:	6984      	ldr	r4, [r0, #24]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8005520:	43b4      	bics	r4, r6
 8005522:	6816      	ldr	r6, [r2, #0]
 8005524:	4334      	orrs	r4, r6
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8005526:	2602      	movs	r6, #2
 8005528:	43b3      	bics	r3, r6
 800552a:	6916      	ldr	r6, [r2, #16]
 800552c:	4333      	orrs	r3, r6
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 800552e:	438b      	bics	r3, r1
 8005530:	6851      	ldr	r1, [r2, #4]
 8005532:	430b      	orrs	r3, r1
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005534:	492a      	ldr	r1, [pc, #168]	@ (80055e0 <LL_TIM_OC_Init+0x1d0>)
 8005536:	4288      	cmp	r0, r1
 8005538:	d027      	beq.n	800558a <LL_TIM_OC_Init+0x17a>
 800553a:	492a      	ldr	r1, [pc, #168]	@ (80055e4 <LL_TIM_OC_Init+0x1d4>)
 800553c:	4288      	cmp	r0, r1
 800553e:	d024      	beq.n	800558a <LL_TIM_OC_Init+0x17a>
 8005540:	4929      	ldr	r1, [pc, #164]	@ (80055e8 <LL_TIM_OC_Init+0x1d8>)
 8005542:	4288      	cmp	r0, r1
 8005544:	d021      	beq.n	800558a <LL_TIM_OC_Init+0x17a>
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8005546:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8005548:	6045      	str	r5, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800554a:	6184      	str	r4, [r0, #24]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800554c:	6342      	str	r2, [r0, #52]	@ 0x34
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800554e:	6203      	str	r3, [r0, #32]
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8005550:	2000      	movs	r0, #0
 8005552:	e7b9      	b.n	80054c8 <LL_TIM_OC_Init+0xb8>
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8005554:	2380      	movs	r3, #128	@ 0x80
 8005556:	4399      	bics	r1, r3
 8005558:	6953      	ldr	r3, [r2, #20]
 800555a:	019b      	lsls	r3, r3, #6
 800555c:	430b      	orrs	r3, r1
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 800555e:	2140      	movs	r1, #64	@ 0x40
 8005560:	438b      	bics	r3, r1
 8005562:	6891      	ldr	r1, [r2, #8]
 8005564:	0189      	lsls	r1, r1, #6
 8005566:	4319      	orrs	r1, r3
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8005568:	4b24      	ldr	r3, [pc, #144]	@ (80055fc <LL_TIM_OC_Init+0x1ec>)
 800556a:	401d      	ands	r5, r3
 800556c:	6993      	ldr	r3, [r2, #24]
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	432b      	orrs	r3, r5
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8005572:	4d23      	ldr	r5, [pc, #140]	@ (8005600 <LL_TIM_OC_Init+0x1f0>)
 8005574:	402b      	ands	r3, r5
 8005576:	69d5      	ldr	r5, [r2, #28]
 8005578:	00ed      	lsls	r5, r5, #3
 800557a:	431d      	orrs	r5, r3
 800557c:	e773      	b.n	8005466 <LL_TIM_OC_Init+0x56>
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 800557e:	4921      	ldr	r1, [pc, #132]	@ (8005604 <LL_TIM_OC_Init+0x1f4>)
 8005580:	4029      	ands	r1, r5
 8005582:	6995      	ldr	r5, [r2, #24]
 8005584:	01ad      	lsls	r5, r5, #6
 8005586:	430d      	orrs	r5, r1
 8005588:	e796      	b.n	80054b8 <LL_TIM_OC_Init+0xa8>
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800558a:	2108      	movs	r1, #8
 800558c:	438b      	bics	r3, r1
 800558e:	6951      	ldr	r1, [r2, #20]
 8005590:	0089      	lsls	r1, r1, #2
 8005592:	4319      	orrs	r1, r3
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8005594:	2304      	movs	r3, #4
 8005596:	4399      	bics	r1, r3
 8005598:	6893      	ldr	r3, [r2, #8]
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	430b      	orrs	r3, r1
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800559e:	4915      	ldr	r1, [pc, #84]	@ (80055f4 <LL_TIM_OC_Init+0x1e4>)
 80055a0:	4029      	ands	r1, r5
 80055a2:	6995      	ldr	r5, [r2, #24]
 80055a4:	4329      	orrs	r1, r5
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80055a6:	4d14      	ldr	r5, [pc, #80]	@ (80055f8 <LL_TIM_OC_Init+0x1e8>)
 80055a8:	4029      	ands	r1, r5
 80055aa:	69d5      	ldr	r5, [r2, #28]
 80055ac:	006d      	lsls	r5, r5, #1
 80055ae:	430d      	orrs	r5, r1
 80055b0:	e7c9      	b.n	8005546 <LL_TIM_OC_Init+0x136>
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80055b2:	4b13      	ldr	r3, [pc, #76]	@ (8005600 <LL_TIM_OC_Init+0x1f0>)
 80055b4:	401c      	ands	r4, r3
 80055b6:	6953      	ldr	r3, [r2, #20]
 80055b8:	029b      	lsls	r3, r3, #10
 80055ba:	4323      	orrs	r3, r4
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80055bc:	4c0f      	ldr	r4, [pc, #60]	@ (80055fc <LL_TIM_OC_Init+0x1ec>)
 80055be:	4023      	ands	r3, r4
 80055c0:	6894      	ldr	r4, [r2, #8]
 80055c2:	02a4      	lsls	r4, r4, #10
 80055c4:	431c      	orrs	r4, r3
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80055c6:	4b09      	ldr	r3, [pc, #36]	@ (80055ec <LL_TIM_OC_Init+0x1dc>)
 80055c8:	401d      	ands	r5, r3
 80055ca:	6993      	ldr	r3, [r2, #24]
 80055cc:	011b      	lsls	r3, r3, #4
 80055ce:	432b      	orrs	r3, r5
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80055d0:	4d07      	ldr	r5, [pc, #28]	@ (80055f0 <LL_TIM_OC_Init+0x1e0>)
 80055d2:	402b      	ands	r3, r5
 80055d4:	69d5      	ldr	r5, [r2, #28]
 80055d6:	016d      	lsls	r5, r5, #5
 80055d8:	431d      	orrs	r5, r3
 80055da:	e793      	b.n	8005504 <LL_TIM_OC_Init+0xf4>
 80055dc:	ffff8cff 	.word	0xffff8cff
 80055e0:	40012c00 	.word	0x40012c00
 80055e4:	40014400 	.word	0x40014400
 80055e8:	40014800 	.word	0x40014800
 80055ec:	ffffefff 	.word	0xffffefff
 80055f0:	ffffdfff 	.word	0xffffdfff
 80055f4:	fffffeff 	.word	0xfffffeff
 80055f8:	fffffdff 	.word	0xfffffdff
 80055fc:	fffffbff 	.word	0xfffffbff
 8005600:	fffff7ff 	.word	0xfffff7ff
 8005604:	ffffbfff 	.word	0xffffbfff

08005608 <LL_TIM_BDTR_Init>:
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8005608:	688a      	ldr	r2, [r1, #8]
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 800560a:	7b0b      	ldrb	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 800560c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 800560e:	4a0b      	ldr	r2, [pc, #44]	@ (800563c <LL_TIM_BDTR_Init+0x34>)
 8005610:	4013      	ands	r3, r2
 8005612:	684a      	ldr	r2, [r1, #4]
 8005614:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8005616:	4a0a      	ldr	r2, [pc, #40]	@ (8005640 <LL_TIM_BDTR_Init+0x38>)
 8005618:	4013      	ands	r3, r2
 800561a:	680a      	ldr	r2, [r1, #0]
 800561c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 800561e:	4a09      	ldr	r2, [pc, #36]	@ (8005644 <LL_TIM_BDTR_Init+0x3c>)
 8005620:	4013      	ands	r3, r2
 8005622:	89ca      	ldrh	r2, [r1, #14]
 8005624:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8005626:	4a08      	ldr	r2, [pc, #32]	@ (8005648 <LL_TIM_BDTR_Init+0x40>)
 8005628:	4013      	ands	r3, r2
 800562a:	690a      	ldr	r2, [r1, #16]
 800562c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 800562e:	4a07      	ldr	r2, [pc, #28]	@ (800564c <LL_TIM_BDTR_Init+0x44>)
 8005630:	4013      	ands	r3, r2
 8005632:	694a      	ldr	r2, [r1, #20]
 8005634:	4313      	orrs	r3, r2
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8005636:	6443      	str	r3, [r0, #68]	@ 0x44
}
 8005638:	2000      	movs	r0, #0
 800563a:	4770      	bx	lr
 800563c:	fffffbff 	.word	0xfffffbff
 8005640:	fffff7ff 	.word	0xfffff7ff
 8005644:	ffffefff 	.word	0xffffefff
 8005648:	ffffdfff 	.word	0xffffdfff
 800564c:	ffffbfff 	.word	0xffffbfff

08005650 <LL_USART_Init>:
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8005650:	6803      	ldr	r3, [r0, #0]
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8005652:	b570      	push	{r4, r5, r6, lr}
 8005654:	0004      	movs	r4, r0
 8005656:	000d      	movs	r5, r1
 8005658:	07db      	lsls	r3, r3, #31
 800565a:	d41a      	bmi.n	8005692 <LL_USART_Init+0x42>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800565c:	684b      	ldr	r3, [r1, #4]
 800565e:	68c9      	ldr	r1, [r1, #12]
 8005660:	6802      	ldr	r2, [r0, #0]
 8005662:	430b      	orrs	r3, r1
 8005664:	6929      	ldr	r1, [r5, #16]
 8005666:	430b      	orrs	r3, r1
 8005668:	69a9      	ldr	r1, [r5, #24]
 800566a:	430b      	orrs	r3, r1
 800566c:	491b      	ldr	r1, [pc, #108]	@ (80056dc <LL_USART_Init+0x8c>)
 800566e:	400a      	ands	r2, r1
 8005670:	4313      	orrs	r3, r2
 8005672:	6003      	str	r3, [r0, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8005674:	6843      	ldr	r3, [r0, #4]
 8005676:	4a1a      	ldr	r2, [pc, #104]	@ (80056e0 <LL_USART_Init+0x90>)
 8005678:	4013      	ands	r3, r2
 800567a:	68aa      	ldr	r2, [r5, #8]
 800567c:	4313      	orrs	r3, r2
 800567e:	6043      	str	r3, [r0, #4]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8005680:	6883      	ldr	r3, [r0, #8]
 8005682:	4a18      	ldr	r2, [pc, #96]	@ (80056e4 <LL_USART_Init+0x94>)
 8005684:	4013      	ands	r3, r2
 8005686:	696a      	ldr	r2, [r5, #20]
 8005688:	4313      	orrs	r3, r2
 800568a:	6083      	str	r3, [r0, #8]
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800568c:	4b16      	ldr	r3, [pc, #88]	@ (80056e8 <LL_USART_Init+0x98>)
 800568e:	4298      	cmp	r0, r3
 8005690:	d001      	beq.n	8005696 <LL_USART_Init+0x46>
  ErrorStatus status = ERROR;
 8005692:	2001      	movs	r0, #1
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 8005694:	bd70      	pop	{r4, r5, r6, pc}
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8005696:	2000      	movs	r0, #0
 8005698:	f7ff fe10 	bl	80052bc <LL_RCC_GetUSARTClockFreq>
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800569c:	2800      	cmp	r0, #0
 800569e:	d0f8      	beq.n	8005692 <LL_USART_Init+0x42>
        && (USART_InitStruct->BaudRate != 0U))
 80056a0:	6829      	ldr	r1, [r5, #0]
 80056a2:	2900      	cmp	r1, #0
 80056a4:	d0f5      	beq.n	8005692 <LL_USART_Init+0x42>
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80056a6:	2280      	movs	r2, #128	@ 0x80
 80056a8:	69ad      	ldr	r5, [r5, #24]
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80056aa:	084b      	lsrs	r3, r1, #1
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80056ac:	0212      	lsls	r2, r2, #8
 80056ae:	4295      	cmp	r5, r2
 80056b0:	d007      	beq.n	80056c2 <LL_USART_Init+0x72>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80056b2:	18c0      	adds	r0, r0, r3
 80056b4:	f7fa fd28 	bl	8000108 <__udivsi3>
 80056b8:	0403      	lsls	r3, r0, #16
 80056ba:	0c1b      	lsrs	r3, r3, #16
      status = SUCCESS;
 80056bc:	2000      	movs	r0, #0
 80056be:	60e3      	str	r3, [r4, #12]
 80056c0:	e7e8      	b.n	8005694 <LL_USART_Init+0x44>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80056c2:	0040      	lsls	r0, r0, #1
 80056c4:	18c0      	adds	r0, r0, r3
 80056c6:	f7fa fd1f 	bl	8000108 <__udivsi3>
    brrtemp = usartdiv & 0xFFF0U;
 80056ca:	4b08      	ldr	r3, [pc, #32]	@ (80056ec <LL_USART_Init+0x9c>)
 80056cc:	4003      	ands	r3, r0
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056ce:	0700      	lsls	r0, r0, #28
 80056d0:	0f40      	lsrs	r0, r0, #29
 80056d2:	4318      	orrs	r0, r3
    USARTx->BRR = brrtemp;
 80056d4:	60e0      	str	r0, [r4, #12]
 80056d6:	2000      	movs	r0, #0
 80056d8:	e7dc      	b.n	8005694 <LL_USART_Init+0x44>
 80056da:	46c0      	nop			@ (mov r8, r8)
 80056dc:	ffff69f3 	.word	0xffff69f3
 80056e0:	ffffcfff 	.word	0xffffcfff
 80056e4:	fffffcff 	.word	0xfffffcff
 80056e8:	40013800 	.word	0x40013800
 80056ec:	0000fff0 	.word	0x0000fff0

080056f0 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80056f0:	4b01      	ldr	r3, [pc, #4]	@ (80056f8 <LL_SetSystemCoreClock+0x8>)
 80056f2:	6018      	str	r0, [r3, #0]
}
 80056f4:	4770      	bx	lr
 80056f6:	46c0      	nop			@ (mov r8, r8)
 80056f8:	200003c8 	.word	0x200003c8

080056fc <VBS_GetAvBusVoltage_V>:
  * @brief  It return latest averaged Vbus measurement expressed in Volt format
  * @param  pHandle related Handle of BusVoltageSensor_Handle_t
  * @retval uint16_t Latest averaged Vbus measurement in Volt format
  */
__weak uint16_t VBS_GetAvBusVoltage_V(const BusVoltageSensor_Handle_t *pHandle)
{
 80056fc:	0003      	movs	r3, r0
    temp = 0U;
  }
  else
  {
#endif
    temp = (uint32_t)(pHandle->AvBusVoltage_d);
 80056fe:	88c0      	ldrh	r0, [r0, #6]
    temp *= pHandle->ConversionFactor;
 8005700:	885b      	ldrh	r3, [r3, #2]
 8005702:	4358      	muls	r0, r3
    temp /= 65536U;
#ifdef NULL_PTR_CHECK_BUS_VOLT
  }
#endif
  return ((uint16_t)temp);
 8005704:	0c00      	lsrs	r0, r0, #16
}
 8005706:	4770      	bx	lr

08005708 <Circle_Limitation>:
  *  @f$v_q = \sqrt(MaxModule^2-v_d^2\ ) @f$

  *
  */
__weak qd_t Circle_Limitation(const CircleLimitation_Handle_t *pHandle, qd_t Vqd)
{
 8005708:	b530      	push	{r4, r5, lr}
 800570a:	b20b      	sxth	r3, r1
 800570c:	1409      	asrs	r1, r1, #16
    int32_t square_limit;
    int32_t vd_square_limit;
    int32_t new_q;
    int32_t new_d;

    maxModule = (int32_t)pHandle->MaxModule;
 800570e:	8802      	ldrh	r2, [r0, #0]

    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
    square_d = ((int32_t)(Vqd.d)) * Vqd.d;
 8005710:	000c      	movs	r4, r1
    square_limit = maxModule * maxModule;
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
 8005712:	8845      	ldrh	r5, [r0, #2]
    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
 8005714:	0018      	movs	r0, r3
    square_d = ((int32_t)(Vqd.d)) * Vqd.d;
 8005716:	434c      	muls	r4, r1
    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
 8005718:	4358      	muls	r0, r3
    square_limit = maxModule * maxModule;
 800571a:	4352      	muls	r2, r2
    square_sum = square_q + square_d;
 800571c:	1900      	adds	r0, r0, r4
{
 800571e:	b085      	sub	sp, #20

    if (square_sum > square_limit)
 8005720:	4282      	cmp	r2, r0
 8005722:	da0f      	bge.n	8005744 <Circle_Limitation+0x3c>
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
 8005724:	0028      	movs	r0, r5
 8005726:	436d      	muls	r5, r5
    {
      if (square_d <= vd_square_limit)
 8005728:	42ac      	cmp	r4, r5
 800572a:	dc11      	bgt.n	8005750 <Circle_Limitation+0x48>
      {
#if defined CIRCLE_LIMITATION_SQRT_M0
        square_temp = (square_limit - square_d) / 1048576;
 800572c:	1b12      	subs	r2, r2, r4
 800572e:	17d4      	asrs	r4, r2, #31
 8005730:	0324      	lsls	r4, r4, #12
 8005732:	0b24      	lsrs	r4, r4, #12
 8005734:	18a2      	adds	r2, r4, r2
        new_q = SqrtTable[square_temp];
 8005736:	4810      	ldr	r0, [pc, #64]	@ (8005778 <Circle_Limitation+0x70>)
        square_temp = (square_limit - square_d) / 1048576;
 8005738:	1512      	asrs	r2, r2, #20
        new_q = SqrtTable[square_temp];
 800573a:	0052      	lsls	r2, r2, #1
 800573c:	5a12      	ldrh	r2, [r2, r0]
#else
        square_temp = square_limit - square_d;
        new_q = MCM_Sqrt(square_temp);
#endif
        if (Vqd.q < 0)
 800573e:	2b00      	cmp	r3, #0
 8005740:	db14      	blt.n	800576c <Circle_Limitation+0x64>
        else
        {
          /* Nothing to do */
        }
      }
      local_vqd.q = (int16_t)new_q;
 8005742:	b213      	sxth	r3, r2
      local_vqd.d = (int16_t)new_d;
    }
#ifdef NULL_PTR_CHECK_CRC_LIM
  }
#endif
  return (local_vqd);
 8005744:	0418      	lsls	r0, r3, #16
 8005746:	0409      	lsls	r1, r1, #16
 8005748:	0c00      	lsrs	r0, r0, #16
 800574a:	4308      	orrs	r0, r1
}
 800574c:	b005      	add	sp, #20
 800574e:	bd30      	pop	{r4, r5, pc}
        if (Vqd.d < 0)
 8005750:	2900      	cmp	r1, #0
 8005752:	db0e      	blt.n	8005772 <Circle_Limitation+0x6a>
        square_temp = (square_limit - vd_square_limit) / 1048576;
 8005754:	1b52      	subs	r2, r2, r5
 8005756:	17d4      	asrs	r4, r2, #31
 8005758:	0324      	lsls	r4, r4, #12
 800575a:	0b24      	lsrs	r4, r4, #12
 800575c:	18a2      	adds	r2, r4, r2
        new_q = SqrtTable[square_temp];
 800575e:	4906      	ldr	r1, [pc, #24]	@ (8005778 <Circle_Limitation+0x70>)
        square_temp = (square_limit - vd_square_limit) / 1048576;
 8005760:	1512      	asrs	r2, r2, #20
        new_q = SqrtTable[square_temp];
 8005762:	0052      	lsls	r2, r2, #1
 8005764:	5a52      	ldrh	r2, [r2, r1]
      local_vqd.d = (int16_t)new_d;
 8005766:	b201      	sxth	r1, r0
        if (Vqd.q < 0)
 8005768:	2b00      	cmp	r3, #0
 800576a:	daea      	bge.n	8005742 <Circle_Limitation+0x3a>
          new_q = - new_q;
 800576c:	4252      	negs	r2, r2
      local_vqd.q = (int16_t)new_q;
 800576e:	b213      	sxth	r3, r2
      local_vqd.d = (int16_t)new_d;
 8005770:	e7e8      	b.n	8005744 <Circle_Limitation+0x3c>
          new_d = -new_d;
 8005772:	4240      	negs	r0, r0
 8005774:	e7ee      	b.n	8005754 <Circle_Limitation+0x4c>
 8005776:	46c0      	nop			@ (mov r8, r8)
 8005778:	08006388 	.word	0x08006388

0800577c <NTC_Init>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (REAL_SENSOR == pHandle->bSensorType)
 800577c:	7803      	ldrb	r3, [r0, #0]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d107      	bne.n	8005792 <NTC_Init+0x16>
    /* nothing to do */
  }
  else
  {
#endif
    if (pHandle->hSensitivity > 0 ) 
 8005782:	2210      	movs	r2, #16
 8005784:	5e83      	ldrsh	r3, [r0, r2]
 8005786:	1e5a      	subs	r2, r3, #1
 8005788:	4313      	orrs	r3, r2
 800578a:	17db      	asrs	r3, r3, #31
 800578c:	b29b      	uxth	r3, r3
    {
      pHandle->hAvTemp_d = 0U;
    }
    else
    {
      pHandle->hAvTemp_d = 0xFFFFU;
 800578e:	8043      	strh	r3, [r0, #2]
}
 8005790:	4770      	bx	lr
      pHandle->hFaultState = MC_NO_ERROR;
 8005792:	2300      	movs	r3, #0
 8005794:	8103      	strh	r3, [r0, #8]
      pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8005796:	8883      	ldrh	r3, [r0, #4]
 8005798:	e7f9      	b.n	800578e <NTC_Init+0x12>
 800579a:	46c0      	nop			@ (mov r8, r8)

0800579c <NTC_GetAvTemp_C>:
  else
  {
#endif
    int32_t wTemp;

    if (REAL_SENSOR == pHandle->bSensorType)
 800579c:	7803      	ldrb	r3, [r0, #0]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d10a      	bne.n	80057b8 <NTC_GetAvTemp_C+0x1c>
    {
      wTemp = (int32_t)pHandle->hAvTemp_d;
      wTemp -= ((int32_t)pHandle->wV0);
 80057a2:	6942      	ldr	r2, [r0, #20]
      wTemp = (int32_t)pHandle->hAvTemp_d;
 80057a4:	8843      	ldrh	r3, [r0, #2]
      wTemp -= ((int32_t)pHandle->wV0);
 80057a6:	1a9b      	subs	r3, r3, r2
      wTemp *= pHandle->hSensitivity;
 80057a8:	2110      	movs	r1, #16
 80057aa:	5e42      	ldrsh	r2, [r0, r1]
#ifndef FULL_MISRA_C_COMPLIANCY_NTC_TEMP
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 80057ac:	8b00      	ldrh	r0, [r0, #24]
      wTemp *= pHandle->hSensitivity;
 80057ae:	4353      	muls	r3, r2
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 80057b0:	141b      	asrs	r3, r3, #16
 80057b2:	18c0      	adds	r0, r0, r3
    }
    returnValue = (int16_t)wTemp;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
 80057b4:	b200      	sxth	r0, r0
}
 80057b6:	4770      	bx	lr
      wTemp = (int32_t)pHandle->hExpectedTemp_C;
 80057b8:	88c0      	ldrh	r0, [r0, #6]
 80057ba:	e7fb      	b.n	80057b4 <NTC_GetAvTemp_C+0x18>

080057bc <OL_Init>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hVoltage = pHandle->hDefaultVoltage;
 80057bc:	8803      	ldrh	r3, [r0, #0]
    pHandle->pVSS = pVSS;
 80057be:	60c1      	str	r1, [r0, #12]
    pHandle->hVoltage = pHandle->hDefaultVoltage;
 80057c0:	8103      	strh	r3, [r0, #8]
#ifdef NULL_PTR_CHECK_OPEN_LOOP
  }
#endif
}
 80057c2:	4770      	bx	lr

080057c4 <OL_VqdConditioning>:
#ifdef NULL_PTR_CHECK_OPEN_LOOP
  Vqd.q = ((MC_NULL == pHandle) ? 0 : pHandle->hVoltage);
#else
  Vqd.q = (pHandle->hVoltage);
#endif
  return (Vqd);
 80057c4:	8900      	ldrh	r0, [r0, #8]
{
 80057c6:	b082      	sub	sp, #8
}
 80057c8:	b002      	add	sp, #8
 80057ca:	4770      	bx	lr

080057cc <OL_Calc>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (true ==  pHandle->VFMode)
 80057cc:	7883      	ldrb	r3, [r0, #2]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00a      	beq.n	80057e8 <OL_Calc+0x1c>
    {
      /* V/F mode true means enabled */
      if (pHandle->pVSS->_Super.hAvrMecSpeedUnit >= 0)
 80057d2:	68c3      	ldr	r3, [r0, #12]
      {
        pHandle->hVoltage = pHandle->hVFOffset + (pHandle->hVFSlope * pHandle->pVSS->_Super.hAvrMecSpeedUnit);
 80057d4:	8882      	ldrh	r2, [r0, #4]
      if (pHandle->pVSS->_Super.hAvrMecSpeedUnit >= 0)
 80057d6:	210c      	movs	r1, #12
 80057d8:	5e59      	ldrsh	r1, [r3, r1]
        pHandle->hVoltage = pHandle->hVFOffset + (pHandle->hVFSlope * pHandle->pVSS->_Super.hAvrMecSpeedUnit);
 80057da:	88c3      	ldrh	r3, [r0, #6]
 80057dc:	434b      	muls	r3, r1
 80057de:	b29b      	uxth	r3, r3
      if (pHandle->pVSS->_Super.hAvrMecSpeedUnit >= 0)
 80057e0:	2900      	cmp	r1, #0
 80057e2:	db02      	blt.n	80057ea <OL_Calc+0x1e>
        pHandle->hVoltage = pHandle->hVFOffset + (pHandle->hVFSlope * pHandle->pVSS->_Super.hAvrMecSpeedUnit);
 80057e4:	18d2      	adds	r2, r2, r3
 80057e6:	8102      	strh	r2, [r0, #8]
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_OPEN_LOOP
  }
#endif
}
 80057e8:	4770      	bx	lr
        pHandle->hVoltage = pHandle->hVFOffset - (pHandle->hVFSlope * pHandle->pVSS->_Super.hAvrMecSpeedUnit);
 80057ea:	1ad2      	subs	r2, r2, r3
 80057ec:	8102      	strh	r2, [r0, #8]
}
 80057ee:	e7fb      	b.n	80057e8 <OL_Calc+0x1c>

080057f0 <PID_HandleInit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKpGain =  pHandle->hDefKpGain;
 80057f0:	6803      	ldr	r3, [r0, #0]
 80057f2:	6043      	str	r3, [r0, #4]
    pHandle->hKiGain =  pHandle->hDefKiGain;
    pHandle->hKdGain =  pHandle->hDefKdGain;
 80057f4:	8c03      	ldrh	r3, [r0, #32]
 80057f6:	8443      	strh	r3, [r0, #34]	@ 0x22
    pHandle->wIntegralTerm = 0;
 80057f8:	2300      	movs	r3, #0
 80057fa:	6083      	str	r3, [r0, #8]
    pHandle->wPrevProcessVarError = 0;
 80057fc:	6283      	str	r3, [r0, #40]	@ 0x28
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80057fe:	4770      	bx	lr

08005800 <PID_SetKP>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKpGain = hKpGain;
 8005800:	8081      	strh	r1, [r0, #4]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8005802:	4770      	bx	lr

08005804 <PID_SetKI>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKiGain = hKiGain;
 8005804:	80c1      	strh	r1, [r0, #6]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8005806:	4770      	bx	lr

08005808 <PID_GetKP>:
__weak int16_t PID_GetKP(PID_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKpGain);
#else
  return (pHandle->hKpGain);
 8005808:	2304      	movs	r3, #4
 800580a:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 800580c:	4770      	bx	lr
 800580e:	46c0      	nop			@ (mov r8, r8)

08005810 <PID_GetKI>:
__weak int16_t PID_GetKI(PID_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKiGain);
#else
  return (pHandle->hKiGain);
 8005810:	2306      	movs	r3, #6
 8005812:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 8005814:	4770      	bx	lr
 8005816:	46c0      	nop			@ (mov r8, r8)

08005818 <PID_SetIntegralTerm>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wIntegralTerm = wIntegralTermValue;
 8005818:	6081      	str	r1, [r0, #8]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return;
}
 800581a:	4770      	bx	lr

0800581c <PID_SetKD>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKdGain = hKdGain;
 800581c:	8441      	strh	r1, [r0, #34]	@ 0x22
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800581e:	4770      	bx	lr

08005820 <PID_GetKD>:
__weak int16_t PID_GetKD(PID_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKdGain);
#else
  return (pHandle->hKdGain);
 8005820:	2322      	movs	r3, #34	@ 0x22
 8005822:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 8005824:	4770      	bx	lr
 8005826:	46c0      	nop			@ (mov r8, r8)

08005828 <PI_Controller>:
  * 
  * The resulting value is then saturated by the upper and lower output limit values before 
  * being returned.
  */
__weak int16_t PI_Controller(PID_Handle_t *pHandle, int32_t wProcessVarError)
{
 8005828:	0003      	movs	r3, r0
 800582a:	b5f0      	push	{r4, r5, r6, r7, lr}
    int32_t wIntegral_Term;
    int32_t wOutput_32;
    int32_t wIntegral_sum_temp;
    int32_t wDischarge = 0;
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 800582c:	2216      	movs	r2, #22
 800582e:	5e9e      	ldrsh	r6, [r3, r2]
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8005830:	2214      	movs	r2, #20
 8005832:	5e80      	ldrsh	r0, [r0, r2]

    /* Proportional term computation*/
    wProportional_Term = pHandle->hKpGain * wProcessVarError;

    /* Integral term computation */
    if (0 == pHandle->hKiGain)
 8005834:	2406      	movs	r4, #6
 8005836:	5f1d      	ldrsh	r5, [r3, r4]
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8005838:	2404      	movs	r4, #4
 800583a:	5f1a      	ldrsh	r2, [r3, r4]
 800583c:	2400      	movs	r4, #0
 800583e:	434a      	muls	r2, r1
    if (0 == pHandle->hKiGain)
 8005840:	2d00      	cmp	r5, #0
 8005842:	d00b      	beq.n	800585c <PI_Controller+0x34>
    {
      pHandle->wIntegralTerm = 0;
    }
    else
    {
      wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8005844:	4369      	muls	r1, r5
      wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 8005846:	689d      	ldr	r5, [r3, #8]
        {
          /* Nothing to do */
        }
      }

      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8005848:	68dc      	ldr	r4, [r3, #12]
      if (wIntegral_sum_temp < 0)
 800584a:	186f      	adds	r7, r5, r1
 800584c:	d41a      	bmi.n	8005884 <PI_Controller+0x5c>
        if (pHandle->wIntegralTerm < 0)
 800584e:	4029      	ands	r1, r5
 8005850:	d422      	bmi.n	8005898 <PI_Controller+0x70>
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8005852:	42a7      	cmp	r7, r4
 8005854:	dc02      	bgt.n	800585c <PI_Controller+0x34>
      {
        pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
      }
      else if (wIntegral_sum_temp < pHandle->wLowerIntegralLimit)
 8005856:	691c      	ldr	r4, [r3, #16]
 8005858:	42bc      	cmp	r4, r7
 800585a:	dd1b      	ble.n	8005894 <PI_Controller+0x6c>
    /* WARNING: the below instruction is not MISRA compliant, user should verify
               that Cortex-M3 assembly instruction ASR (arithmetic shift right)
               is used by the compiler to perform the shifts (instead of LSR
               logical shift right)*/
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    wOutput_32 = (wProportional_Term >> pHandle->hKpDivisorPOW2) + (pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2);
 800585c:	0025      	movs	r5, r4
 800585e:	8b99      	ldrh	r1, [r3, #28]
 8005860:	410a      	asrs	r2, r1
 8005862:	8bd9      	ldrh	r1, [r3, #30]
 8005864:	410d      	asrs	r5, r1
 8005866:	1952      	adds	r2, r2, r5
#else
    wOutput_32 = (wProportional_Term / (int32_t)pHandle->hKpDivisor)
              + (pHandle->wIntegralTerm / (int32_t)pHandle->hKiDivisor);
#endif

    if (wOutput_32 > hUpperOutputLimit)
 8005868:	4290      	cmp	r0, r2
 800586a:	da03      	bge.n	8005874 <PI_Controller+0x4c>
    {
      wDischarge = hUpperOutputLimit - wOutput_32;
 800586c:	1a82      	subs	r2, r0, r2
    else
    {
      /* Nothing to do here */
    }

    pHandle->wIntegralTerm += wDischarge;
 800586e:	18a4      	adds	r4, r4, r2
 8005870:	609c      	str	r4, [r3, #8]
    returnValue = (int16_t)wOutput_32;
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return (returnValue);
}
 8005872:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (wOutput_32 < hLowerOutputLimit)
 8005874:	4296      	cmp	r6, r2
 8005876:	dd03      	ble.n	8005880 <PI_Controller+0x58>
      wDischarge = hLowerOutputLimit - wOutput_32;
 8005878:	1ab2      	subs	r2, r6, r2
 800587a:	0030      	movs	r0, r6
    pHandle->wIntegralTerm += wDischarge;
 800587c:	18a4      	adds	r4, r4, r2
 800587e:	e7f7      	b.n	8005870 <PI_Controller+0x48>
    returnValue = (int16_t)wOutput_32;
 8005880:	b210      	sxth	r0, r2
 8005882:	e7f5      	b.n	8005870 <PI_Controller+0x48>
        if (pHandle->wIntegralTerm > 0)
 8005884:	2d00      	cmp	r5, #0
 8005886:	dde4      	ble.n	8005852 <PI_Controller+0x2a>
          if (wIntegral_Term > 0)
 8005888:	2900      	cmp	r1, #0
 800588a:	dde2      	ble.n	8005852 <PI_Controller+0x2a>
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 800588c:	4903      	ldr	r1, [pc, #12]	@ (800589c <PI_Controller+0x74>)
            wIntegral_sum_temp = INT32_MAX;
 800588e:	0027      	movs	r7, r4
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8005890:	428c      	cmp	r4, r1
 8005892:	d1e3      	bne.n	800585c <PI_Controller+0x34>
        pHandle->wIntegralTerm = wIntegral_sum_temp;
 8005894:	003c      	movs	r4, r7
 8005896:	e7e1      	b.n	800585c <PI_Controller+0x34>
            wIntegral_sum_temp = -INT32_MAX;
 8005898:	4f01      	ldr	r7, [pc, #4]	@ (80058a0 <PI_Controller+0x78>)
 800589a:	e7da      	b.n	8005852 <PI_Controller+0x2a>
 800589c:	7fffffff 	.word	0x7fffffff
 80058a0:	80000001 	.word	0x80000001

080058a4 <PQD_CalcElMotorPower>:
  * computed as an int16_t value.
  * 
  * @param pHandle Handle on the related PQD Motor Power Measurement component instance.
  */
__weak void PQD_CalcElMotorPower(PQD_MotorPowMeas_Handle_t *pHandle)
{
 80058a4:	b510      	push	{r4, lr}
  }
  else
  {
#endif
    int32_t wAux;
    qd_t Iqd = pHandle->pFOCVars->Iqd;
 80058a6:	6883      	ldr	r3, [r0, #8]
    qd_t Vqd = pHandle->pFOCVars->Vqd;

    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
 80058a8:	220c      	movs	r2, #12
 80058aa:	5e99      	ldrsh	r1, [r3, r2]
 80058ac:	2416      	movs	r4, #22
 80058ae:	5f1a      	ldrsh	r2, [r3, r4]
 80058b0:	434a      	muls	r2, r1
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 80058b2:	240e      	movs	r4, #14
 80058b4:	5f19      	ldrsh	r1, [r3, r4]
 80058b6:	2418      	movs	r4, #24
 80058b8:	5f1b      	ldrsh	r3, [r3, r4]
 80058ba:	434b      	muls	r3, r1
    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
 80058bc:	18d2      	adds	r2, r2, r3
    wAux /= 65536;

    /* pHandle->hAvrgElMotorPower += (wAux - pHandle->hAvrgElMotorPower) >> 4 */
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 80058be:	2300      	movs	r3, #0
 80058c0:	5ec1      	ldrsh	r1, [r0, r3]
    wAux /= 65536;
 80058c2:	17d3      	asrs	r3, r2, #31
 80058c4:	041b      	lsls	r3, r3, #16
 80058c6:	0c1b      	lsrs	r3, r3, #16
 80058c8:	189b      	adds	r3, r3, r2
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 80058ca:	220f      	movs	r2, #15
    wAux /= 65536;
 80058cc:	141b      	asrs	r3, r3, #16
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 80058ce:	1a5b      	subs	r3, r3, r1
 80058d0:	17dc      	asrs	r4, r3, #31
 80058d2:	4022      	ands	r2, r4
 80058d4:	18d3      	adds	r3, r2, r3
 80058d6:	111b      	asrs	r3, r3, #4
 80058d8:	185b      	adds	r3, r3, r1
 80058da:	8003      	strh	r3, [r0, #0]

#ifdef NULL_PTR_CHECK_PQD_MOT_POW_MEAS
  }
#endif
}
 80058dc:	bd10      	pop	{r4, pc}
 80058de:	46c0      	nop			@ (mov r8, r8)

080058e0 <PQD_GetAvrgElMotorPowerW>:
  * 
  * @param pHandle pointer on the related component instance.
  * @retval float_t The average measured motor power expressed in Watts.
  */
__weak float_t PQD_GetAvrgElMotorPowerW(const PQD_MotorPowMeas_Handle_t *pHandle)
{
 80058e0:	b570      	push	{r4, r5, r6, lr}
 80058e2:	0004      	movs	r4, r0
  else
  {
#endif

  /* First perform an integer multiplication, then a float one. */
  PowerW = ((float_t)pHandle->hAvrgElMotorPower * (float_t)VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 80058e4:	2300      	movs	r3, #0
 80058e6:	5ec0      	ldrsh	r0, [r0, r3]
 80058e8:	f7fa fede 	bl	80006a8 <__aeabi_i2f>
 80058ec:	1c06      	adds	r6, r0, #0
 80058ee:	68e0      	ldr	r0, [r4, #12]
 80058f0:	f7ff ff04 	bl	80056fc <VBS_GetAvBusVoltage_V>
 80058f4:	6861      	ldr	r1, [r4, #4]
 80058f6:	0005      	movs	r5, r0
 80058f8:	1c30      	adds	r0, r6, #0
 80058fa:	f7fa fd7b 	bl	80003f4 <__aeabi_fmul>
 80058fe:	1c04      	adds	r4, r0, #0
 8005900:	0028      	movs	r0, r5
 8005902:	f7fa ff21 	bl	8000748 <__aeabi_ui2f>
 8005906:	1c01      	adds	r1, r0, #0
 8005908:	1c20      	adds	r0, r4, #0
 800590a:	f7fa fd73 	bl	80003f4 <__aeabi_fmul>

#ifdef NULL_PTR_CHECK_PQD_MOT_POW_MEAS
  }
#endif
  return (PowerW);
}
 800590e:	bd70      	pop	{r4, r5, r6, pc}

08005910 <REMNG_Init>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->Ext = 0;
 8005910:	2300      	movs	r3, #0
 8005912:	6083      	str	r3, [r0, #8]
    pHandle->TargetFinal = 0;
 8005914:	6043      	str	r3, [r0, #4]
    pHandle->RampRemainingStep = 0U;
 8005916:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 8005918:	6103      	str	r3, [r0, #16]
    pHandle->ScalingFactor = 1U;
 800591a:	3301      	adds	r3, #1
 800591c:	6143      	str	r3, [r0, #20]
#ifdef NULL_PTR_CHECK_RMP_EXT_MNG
  }
#endif
}
 800591e:	4770      	bx	lr

08005920 <SPD_GetAvrgMecSpeedUnit>:
__weak int16_t SPD_GetAvrgMecSpeedUnit(const SpeednPosFdbk_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hAvrMecSpeedUnit);
#else
  return (pHandle->hAvrMecSpeedUnit);
 8005920:	230c      	movs	r3, #12
 8005922:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 8005924:	4770      	bx	lr
 8005926:	46c0      	nop			@ (mov r8, r8)

08005928 <SPD_IsMecSpeedReliable>:
  * - Called at least with the same periodicity on which speed control is executed.
  *         -

  */
__weak bool SPD_IsMecSpeedReliable(SpeednPosFdbk_Handle_t *pHandle, const int16_t *pMecSpeedUnit)
{
 8005928:	0003      	movs	r3, r0
 800592a:	b570      	push	{r4, r5, r6, lr}
    bool SpeedError = false;

    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

    /* Compute absoulte value of mechanical speed */
    if (*pMecSpeedUnit < 0)
 800592c:	2500      	movs	r5, #0
 800592e:	5f4c      	ldrsh	r4, [r1, r5]
    uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 8005930:	78c0      	ldrb	r0, [r0, #3]
    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 8005932:	781a      	ldrb	r2, [r3, #0]
    {
      hAux = -(*pMecSpeedUnit);
 8005934:	8809      	ldrh	r1, [r1, #0]
    if (*pMecSpeedUnit < 0)
 8005936:	2c00      	cmp	r4, #0
 8005938:	da01      	bge.n	800593e <SPD_IsMecSpeedReliable+0x16>
      hAux = -(*pMecSpeedUnit);
 800593a:	4249      	negs	r1, r1
 800593c:	b289      	uxth	r1, r1
    else
    {
      /* Nothing to do */
    }

    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 800593e:	8adc      	ldrh	r4, [r3, #22]
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 8005940:	8a9d      	ldrh	r5, [r3, #20]
    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 8005942:	428c      	cmp	r4, r1
 8005944:	d811      	bhi.n	800596a <SPD_IsMecSpeedReliable+0x42>
    {
      /* Nothing to do */
    }

    /* Compute absoulte value of mechanical acceleration */
    if (pHandle->hMecAccelUnitP < 0)
 8005946:	2412      	movs	r4, #18
 8005948:	5f1e      	ldrsh	r6, [r3, r4]
    {
      hAux = -(pHandle->hMecAccelUnitP);
 800594a:	8a5c      	ldrh	r4, [r3, #18]
    if (pHandle->hMecAccelUnitP < 0)
 800594c:	2e00      	cmp	r6, #0
 800594e:	db11      	blt.n	8005974 <SPD_IsMecSpeedReliable+0x4c>
    else
    {
      hAbsMecAccelUnitP = (uint16_t)pHandle->hMecAccelUnitP;
    }

    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 8005950:	8b1e      	ldrh	r6, [r3, #24]
 8005952:	42a6      	cmp	r6, r4
 8005954:	d309      	bcc.n	800596a <SPD_IsMecSpeedReliable+0x42>
    else
    {
      /* Nothing to do */
    }

    if (true == SpeedError)
 8005956:	428d      	cmp	r5, r1
 8005958:	d307      	bcc.n	800596a <SPD_IsMecSpeedReliable+0x42>
        /* Nothing to do */
      }
    }
    else
    {
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 800595a:	4290      	cmp	r0, r2
 800595c:	d80d      	bhi.n	800597a <SPD_IsMecSpeedReliable+0x52>
      {
        /* Nothing to do */
      }
    }

    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
 800595e:	1a10      	subs	r0, r2, r0
 8005960:	1e41      	subs	r1, r0, #1
 8005962:	4188      	sbcs	r0, r1
 8005964:	b2c0      	uxtb	r0, r0
    else
    {
      /* Nothing to do */
    }

    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8005966:	701a      	strb	r2, [r3, #0]
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  }
#endif
  return (SpeedSensorReliability);
}
 8005968:	bd70      	pop	{r4, r5, r6, pc}
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 800596a:	4290      	cmp	r0, r2
 800596c:	d9f7      	bls.n	800595e <SPD_IsMecSpeedReliable+0x36>
        bSpeedErrorNumber++;
 800596e:	3201      	adds	r2, #1
 8005970:	b2d2      	uxtb	r2, r2
 8005972:	e7f4      	b.n	800595e <SPD_IsMecSpeedReliable+0x36>
      hAux = -(pHandle->hMecAccelUnitP);
 8005974:	4264      	negs	r4, r4
 8005976:	b2a4      	uxth	r4, r4
      hAbsMecAccelUnitP = (uint16_t)hAux;
 8005978:	e7ea      	b.n	8005950 <SPD_IsMecSpeedReliable+0x28>
        bSpeedErrorNumber = 0u;
 800597a:	2200      	movs	r2, #0
  bool SpeedSensorReliability = true;
 800597c:	2001      	movs	r0, #1
 800597e:	e7f2      	b.n	8005966 <SPD_IsMecSpeedReliable+0x3e>

08005980 <STC_Init>:
  else
  {
#endif
    pHandle->PISpeed = pPI;
    pHandle->SPD = SPD_Handle;
    pHandle->Mode = pHandle->ModeDefault;
 8005980:	232a      	movs	r3, #42	@ 0x2a
    pHandle->SPD = SPD_Handle;
 8005982:	6142      	str	r2, [r0, #20]
    pHandle->PISpeed = pPI;
 8005984:	6101      	str	r1, [r0, #16]
    pHandle->Mode = pHandle->ModeDefault;
 8005986:	5cc3      	ldrb	r3, [r0, r3]
 8005988:	7003      	strb	r3, [r0, #0]
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 800598a:	222c      	movs	r2, #44	@ 0x2c
 800598c:	5e83      	ldrsh	r3, [r0, r2]
 800598e:	041b      	lsls	r3, r3, #16
 8005990:	6043      	str	r3, [r0, #4]
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 8005992:	222e      	movs	r2, #46	@ 0x2e
 8005994:	5e83      	ldrsh	r3, [r0, r2]
 8005996:	041b      	lsls	r3, r3, #16
 8005998:	6083      	str	r3, [r0, #8]
    pHandle->TargetFinal = 0;
 800599a:	2300      	movs	r3, #0
 800599c:	8043      	strh	r3, [r0, #2]
    pHandle->RampRemainingStep = 0U;
 800599e:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 80059a0:	6183      	str	r3, [r0, #24]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 80059a2:	4770      	bx	lr

080059a4 <STC_SetSpeedSensor>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SPD = SPD_Handle;
 80059a4:	6141      	str	r1, [r0, #20]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 80059a6:	4770      	bx	lr

080059a8 <STC_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (MCM_SPEED_MODE == pHandle->Mode)
 80059a8:	7803      	ldrb	r3, [r0, #0]
{
 80059aa:	b510      	push	{r4, lr}
    if (MCM_SPEED_MODE == pHandle->Mode)
 80059ac:	2b03      	cmp	r3, #3
 80059ae:	d000      	beq.n	80059b2 <STC_Clear+0xa>
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 80059b0:	bd10      	pop	{r4, pc}
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
 80059b2:	2100      	movs	r1, #0
 80059b4:	6900      	ldr	r0, [r0, #16]
 80059b6:	f7ff ff2f 	bl	8005818 <PID_SetIntegralTerm>
}
 80059ba:	e7f9      	b.n	80059b0 <STC_Clear+0x8>

080059bc <STC_GetMecSpeedRefUnit>:
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->SpeedRefUnitExt >> 16));
#else
  return ((int16_t)(pHandle->SpeedRefUnitExt >> 16));
 80059bc:	2306      	movs	r3, #6
 80059be:	5ec0      	ldrsh	r0, [r0, r3]
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->SpeedRefUnitExt / 65536));
#else
  return ((int16_t)(pHandle->SpeedRefUnitExt / 65536));
#endif
#endif
}
 80059c0:	4770      	bx	lr
 80059c2:	46c0      	nop			@ (mov r8, r8)

080059c4 <STC_SetControlMode>:
  }
  else
  {
#endif
    pHandle->Mode = bMode;
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp */
 80059c4:	2300      	movs	r3, #0
    pHandle->Mode = bMode;
 80059c6:	7001      	strb	r1, [r0, #0]
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp */
 80059c8:	60c3      	str	r3, [r0, #12]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 80059ca:	4770      	bx	lr

080059cc <STC_ExecRamp>:
    uint32_t wAux;
    int32_t wAux1;
    int16_t hCurrentReference;

    /* Check if the hTargetFinal is out of the bound of application */
    if (MCM_TORQUE_MODE == pHandle->Mode)
 80059cc:	7803      	ldrb	r3, [r0, #0]
{
 80059ce:	b570      	push	{r4, r5, r6, lr}
 80059d0:	0004      	movs	r4, r0
 80059d2:	000d      	movs	r5, r1
    if (MCM_TORQUE_MODE == pHandle->Mode)
 80059d4:	2b04      	cmp	r3, #4
 80059d6:	d017      	beq.n	8005a08 <STC_ExecRamp+0x3c>
#else
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt / 65536);
#endif

#ifdef CHECK_BOUNDARY
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 80059d8:	8bc1      	ldrh	r1, [r0, #30]
 80059da:	2000      	movs	r0, #0
 80059dc:	42a9      	cmp	r1, r5
 80059de:	da00      	bge.n	80059e2 <STC_ExecRamp+0x16>
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (allowedRange);
}
 80059e0:	bd70      	pop	{r4, r5, r6, pc}
      else if (hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit)
 80059e2:	2624      	movs	r6, #36	@ 0x24
 80059e4:	5fa1      	ldrsh	r1, [r4, r6]
 80059e6:	42a9      	cmp	r1, r5
 80059e8:	dcfa      	bgt.n	80059e0 <STC_ExecRamp+0x14>
      else if ((int32_t)hTargetFinal < (int32_t)pHandle->MinAppPositiveMecSpeedUnit)
 80059ea:	8c21      	ldrh	r1, [r4, #32]
 80059ec:	42a9      	cmp	r1, r5
 80059ee:	dd03      	ble.n	80059f8 <STC_ExecRamp+0x2c>
        if (hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit)
 80059f0:	2622      	movs	r6, #34	@ 0x22
 80059f2:	5fa1      	ldrsh	r1, [r4, r6]
 80059f4:	42a9      	cmp	r1, r5
 80059f6:	dbf3      	blt.n	80059e0 <STC_ExecRamp+0x14>
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
 80059f8:	6866      	ldr	r6, [r4, #4]
      if (0U == hDurationms)
 80059fa:	2a00      	cmp	r2, #0
 80059fc:	d115      	bne.n	8005a2a <STC_ExecRamp+0x5e>
        if (MCM_SPEED_MODE == pHandle->Mode)
 80059fe:	2b03      	cmp	r3, #3
 8005a00:	d10c      	bne.n	8005a1c <STC_ExecRamp+0x50>
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 8005a02:	042d      	lsls	r5, r5, #16
 8005a04:	6065      	str	r5, [r4, #4]
 8005a06:	e00b      	b.n	8005a20 <STC_ExecRamp+0x54>
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxPositiveTorque)
 8005a08:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 8005a0a:	2000      	movs	r0, #0
 8005a0c:	428b      	cmp	r3, r1
 8005a0e:	dbe7      	blt.n	80059e0 <STC_ExecRamp+0x14>
      if ((int32_t)hTargetFinal < (int32_t)pHandle->MinNegativeTorque)
 8005a10:	2128      	movs	r1, #40	@ 0x28
 8005a12:	5e63      	ldrsh	r3, [r4, r1]
 8005a14:	42ab      	cmp	r3, r5
 8005a16:	dce3      	bgt.n	80059e0 <STC_ExecRamp+0x14>
      if (0U == hDurationms)
 8005a18:	2a00      	cmp	r2, #0
 8005a1a:	d117      	bne.n	8005a4c <STC_ExecRamp+0x80>
          pHandle->TorqueRef = ((int32_t)hTargetFinal) * 65536;
 8005a1c:	042d      	lsls	r5, r5, #16
 8005a1e:	60a5      	str	r5, [r4, #8]
        pHandle->RampRemainingStep = 0U;
 8005a20:	2300      	movs	r3, #0
{
 8005a22:	2001      	movs	r0, #1
        pHandle->RampRemainingStep = 0U;
 8005a24:	60e3      	str	r3, [r4, #12]
        pHandle->IncDecAmount = 0;
 8005a26:	61a3      	str	r3, [r4, #24]
 8005a28:	e7da      	b.n	80059e0 <STC_ExecRamp+0x14>
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
 8005a2a:	1436      	asrs	r6, r6, #16
        wAux /= 1000U;
 8005a2c:	21fa      	movs	r1, #250	@ 0xfa
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 8005a2e:	8ba0      	ldrh	r0, [r4, #28]
        wAux /= 1000U;
 8005a30:	0089      	lsls	r1, r1, #2
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 8005a32:	4350      	muls	r0, r2
        pHandle->TargetFinal = hTargetFinal;
 8005a34:	8065      	strh	r5, [r4, #2]
        wAux /= 1000U;
 8005a36:	f7fa fb67 	bl	8000108 <__udivsi3>
        pHandle->RampRemainingStep++;
 8005a3a:	1c41      	adds	r1, r0, #1
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 8005a3c:	1ba8      	subs	r0, r5, r6
        pHandle->RampRemainingStep++;
 8005a3e:	60e1      	str	r1, [r4, #12]
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 8005a40:	0400      	lsls	r0, r0, #16
        wAux1 /= ((int32_t)pHandle->RampRemainingStep);
 8005a42:	f7fa fbeb 	bl	800021c <__divsi3>
        pHandle->IncDecAmount = wAux1;
 8005a46:	61a0      	str	r0, [r4, #24]
{
 8005a48:	2001      	movs	r0, #1
 8005a4a:	e7c9      	b.n	80059e0 <STC_ExecRamp+0x14>
  return ((int16_t)(pHandle->TorqueRef >> 16));
 8005a4c:	230a      	movs	r3, #10
 8005a4e:	5ee6      	ldrsh	r6, [r4, r3]
 8005a50:	e7ec      	b.n	8005a2c <STC_ExecRamp+0x60>
 8005a52:	46c0      	nop			@ (mov r8, r8)

08005a54 <STC_CalcTorqueReference>:
    int32_t wCurrentReference;
    int16_t hMeasuredSpeed;
    int16_t hTargetSpeed;
    int16_t hError;

    if (MCM_TORQUE_MODE == pHandle->Mode)
 8005a54:	7802      	ldrb	r2, [r0, #0]
{
 8005a56:	b570      	push	{r4, r5, r6, lr}
      wCurrentReference = pHandle->SpeedRefUnitExt;
    }

    /* Update the speed reference or the torque reference according to the mode
       and terminates the ramp if needed */
    if (pHandle->RampRemainingStep > 1U)
 8005a58:	68c3      	ldr	r3, [r0, #12]
{
 8005a5a:	0004      	movs	r4, r0
    if (MCM_TORQUE_MODE == pHandle->Mode)
 8005a5c:	2a04      	cmp	r2, #4
 8005a5e:	d01f      	beq.n	8005aa0 <STC_CalcTorqueReference+0x4c>
      wCurrentReference = pHandle->SpeedRefUnitExt;
 8005a60:	6845      	ldr	r5, [r0, #4]
    if (pHandle->RampRemainingStep > 1U)
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d908      	bls.n	8005a78 <STC_CalcTorqueReference+0x24>
    {
      /* Increment/decrement the reference value */
      wCurrentReference += pHandle->IncDecAmount;
 8005a66:	6981      	ldr	r1, [r0, #24]

      /* Decrement the number of remaining steps */
      pHandle->RampRemainingStep--;
 8005a68:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 8005a6a:	186d      	adds	r5, r5, r1
      pHandle->RampRemainingStep--;
 8005a6c:	60c3      	str	r3, [r0, #12]
    else
    {
      /* Do nothing */
    }

    if (MCM_SPEED_MODE == pHandle->Mode)
 8005a6e:	2a03      	cmp	r2, #3
 8005a70:	d00a      	beq.n	8005a88 <STC_CalcTorqueReference+0x34>
    else
    {
      pHandle->TorqueRef = wCurrentReference;
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hTorqueReference = (int16_t)(wCurrentReference >> 16);
 8005a72:	1428      	asrs	r0, r5, #16
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 8005a74:	60a5      	str	r5, [r4, #8]
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (hTorqueReference);
}
 8005a76:	bd70      	pop	{r4, r5, r6, pc}
    else if (1U == pHandle->RampRemainingStep)
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d1f8      	bne.n	8005a6e <STC_CalcTorqueReference+0x1a>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8005a7c:	2302      	movs	r3, #2
 8005a7e:	5ec5      	ldrsh	r5, [r0, r3]
      pHandle->RampRemainingStep = 0U;
 8005a80:	2300      	movs	r3, #0
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8005a82:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep = 0U;
 8005a84:	60c3      	str	r3, [r0, #12]
 8005a86:	e7f2      	b.n	8005a6e <STC_CalcTorqueReference+0x1a>
      hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit(pHandle->SPD);
 8005a88:	6960      	ldr	r0, [r4, #20]
 8005a8a:	f7ff ff49 	bl	8005920 <SPD_GetAvrgMecSpeedUnit>
      hTargetSpeed = (int16_t)(wCurrentReference >> 16);
 8005a8e:	1429      	asrs	r1, r5, #16
      hError = hTargetSpeed - hMeasuredSpeed;
 8005a90:	1a09      	subs	r1, r1, r0
      hTorqueReference = PI_Controller(pHandle->PISpeed, (int32_t)hError);
 8005a92:	b209      	sxth	r1, r1
 8005a94:	6920      	ldr	r0, [r4, #16]
 8005a96:	f7ff fec7 	bl	8005828 <PI_Controller>
      pHandle->SpeedRefUnitExt = wCurrentReference;
 8005a9a:	6065      	str	r5, [r4, #4]
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 8005a9c:	0405      	lsls	r5, r0, #16
 8005a9e:	e7e9      	b.n	8005a74 <STC_CalcTorqueReference+0x20>
      wCurrentReference = pHandle->TorqueRef;
 8005aa0:	6885      	ldr	r5, [r0, #8]
    if (pHandle->RampRemainingStep > 1U)
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d904      	bls.n	8005ab0 <STC_CalcTorqueReference+0x5c>
      wCurrentReference += pHandle->IncDecAmount;
 8005aa6:	6982      	ldr	r2, [r0, #24]
      pHandle->RampRemainingStep--;
 8005aa8:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 8005aaa:	18ad      	adds	r5, r5, r2
      pHandle->RampRemainingStep--;
 8005aac:	60c3      	str	r3, [r0, #12]
    if (MCM_SPEED_MODE == pHandle->Mode)
 8005aae:	e7e0      	b.n	8005a72 <STC_CalcTorqueReference+0x1e>
    else if (1U == pHandle->RampRemainingStep)
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d1de      	bne.n	8005a72 <STC_CalcTorqueReference+0x1e>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8005ab4:	2302      	movs	r3, #2
 8005ab6:	5ec5      	ldrsh	r5, [r0, r3]
      pHandle->RampRemainingStep = 0U;
 8005ab8:	2300      	movs	r3, #0
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8005aba:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep = 0U;
 8005abc:	60c3      	str	r3, [r0, #12]
    if (MCM_SPEED_MODE == pHandle->Mode)
 8005abe:	e7d8      	b.n	8005a72 <STC_CalcTorqueReference+0x1e>

08005ac0 <STC_GetMecSpeedRefUnitDefault>:
__weak int16_t STC_GetMecSpeedRefUnitDefault(SpeednTorqCtrl_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  return ((MC_NULL == pHandle) ? 0 : pHandle->MecSpeedRefUnitDefault);
#else
  return (pHandle->MecSpeedRefUnitDefault);
 8005ac0:	232c      	movs	r3, #44	@ 0x2c
 8005ac2:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 8005ac4:	4770      	bx	lr
 8005ac6:	46c0      	nop			@ (mov r8, r8)

08005ac8 <STC_GetDefaultIqdref>:
    IqdRefDefault.q = pHandle->TorqueRefDefault;
    IqdRefDefault.d = pHandle->IdrefDefault;
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (IqdRefDefault);
 8005ac8:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8005aca:	8dc0      	ldrh	r0, [r0, #46]	@ 0x2e
 8005acc:	041b      	lsls	r3, r3, #16
{
 8005ace:	b082      	sub	sp, #8
  return (IqdRefDefault);
 8005ad0:	4318      	orrs	r0, r3
}
 8005ad2:	b002      	add	sp, #8
 8005ad4:	4770      	bx	lr
 8005ad6:	46c0      	nop			@ (mov r8, r8)

08005ad8 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *
  * - Called during the CHARGE_BOOT_CAP, SWITCH_OVER and WAIT_STOP_MOTOR states of the MC state machine
  * into MediumFrequencyTask to initialize the speed reference.
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed(SpeednTorqCtrl_Handle_t *pHandle)
{
 8005ad8:	b510      	push	{r4, lr}
 8005ada:	0004      	movs	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SpeedRefUnitExt = ((int32_t)SPD_GetAvrgMecSpeedUnit(pHandle->SPD)) * (int32_t)65536;
 8005adc:	6940      	ldr	r0, [r0, #20]
 8005ade:	f7ff ff1f 	bl	8005920 <SPD_GetAvrgMecSpeedUnit>
 8005ae2:	0400      	lsls	r0, r0, #16
 8005ae4:	6060      	str	r0, [r4, #4]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8005ae6:	bd10      	pop	{r4, pc}

08005ae8 <VVBS_Init>:
  * @param  pHandle related Handle of VirtualBusVoltageSensor_Handle_t
  * @retval none
  */
__weak void VVBS_Init(VirtualBusVoltageSensor_Handle_t *pHandle)
{
  pHandle->_Super.FaultState = MC_NO_ERROR;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	8103      	strh	r3, [r0, #8]
  pHandle->_Super.LatestConv = pHandle->ExpectedVbus_d;
 8005aec:	8943      	ldrh	r3, [r0, #10]
 8005aee:	8083      	strh	r3, [r0, #4]
  pHandle->_Super.AvBusVoltage_d = pHandle->ExpectedVbus_d;
 8005af0:	80c3      	strh	r3, [r0, #6]
}
 8005af2:	4770      	bx	lr

08005af4 <VSS_CalcElAngle>:
  *
  * - Systematically called after #SPD_GetElAngle that retrieves last computed rotor electrical angle.
  */
//cstat !MISRAC2012-Rule-8.13
__weak int16_t VSS_CalcElAngle(VirtualSpeedSensor_Handle_t *pHandle, int16_t *pInputVars_str)
{
 8005af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005af6:	46c6      	mov	lr, r8
    int16_t hAngleDiff;
    int32_t wAux;
    int16_t hAngleCorr;
    int16_t hSignCorr = 1;

    if (true == pHandle->bCopyObserver)
 8005af8:	2333      	movs	r3, #51	@ 0x33
{
 8005afa:	b500      	push	{lr}
    if (true == pHandle->bCopyObserver)
 8005afc:	5cc3      	ldrb	r3, [r0, r3]
{
 8005afe:	0004      	movs	r4, r0
 8005b00:	000e      	movs	r6, r1
    if (true == pHandle->bCopyObserver)
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d006      	beq.n	8005b14 <VSS_CalcElAngle+0x20>
    {
      hRetAngle = *(int16_t *)pInputVars_str;
 8005b06:	2300      	movs	r3, #0
 8005b08:	5ecd      	ldrsh	r5, [r1, r3]
    pHandle->_Super.hElAngle = hRetAngle;
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
  return (hRetAngle);
}
 8005b0a:	0028      	movs	r0, r5
    pHandle->_Super.hElAngle = hRetAngle;
 8005b0c:	80a5      	strh	r5, [r4, #4]
}
 8005b0e:	bc80      	pop	{r7}
 8005b10:	46b8      	mov	r8, r7
 8005b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8005b14:	230e      	movs	r3, #14
 8005b16:	5ec7      	ldrsh	r7, [r0, r3]
 8005b18:	8e05      	ldrh	r5, [r0, #48]	@ 0x30
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 8005b1a:	7841      	ldrb	r1, [r0, #1]
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8005b1c:	19ed      	adds	r5, r5, r7
 8005b1e:	b2ab      	uxth	r3, r5
 8005b20:	b22d      	sxth	r5, r5
 8005b22:	8605      	strh	r5, [r0, #48]	@ 0x30
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 8005b24:	0038      	movs	r0, r7
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8005b26:	4698      	mov	r8, r3
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 8005b28:	f7fa fb78 	bl	800021c <__divsi3>
 8005b2c:	88e3      	ldrh	r3, [r4, #6]
 8005b2e:	18c0      	adds	r0, r0, r3
      if (true == pHandle->bTransitionStarted)
 8005b30:	232c      	movs	r3, #44	@ 0x2c
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 8005b32:	80e0      	strh	r0, [r4, #6]
      if (true == pHandle->bTransitionStarted)
 8005b34:	5ce3      	ldrb	r3, [r4, r3]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d0e7      	beq.n	8005b0a <VSS_CalcElAngle+0x16>
        if (0 == pHandle->hTransitionRemainingSteps)
 8005b3a:	232e      	movs	r3, #46	@ 0x2e
 8005b3c:	5ee0      	ldrsh	r0, [r4, r3]
 8005b3e:	2800      	cmp	r0, #0
 8005b40:	d01a      	beq.n	8005b78 <VSS_CalcElAngle+0x84>
          pHandle->hTransitionRemainingSteps--;
 8005b42:	3801      	subs	r0, #1
 8005b44:	b200      	sxth	r0, r0
 8005b46:	85e0      	strh	r0, [r4, #46]	@ 0x2e
          if (pHandle->_Super.hElSpeedDpp >= 0)
 8005b48:	2f00      	cmp	r7, #0
 8005b4a:	db22      	blt.n	8005b92 <VSS_CalcElAngle+0x9e>
            hAngleDiff = *(int16_t *)pInputVars_str - pHandle->hElAngleAccu;
 8005b4c:	4643      	mov	r3, r8
 8005b4e:	8837      	ldrh	r7, [r6, #0]
 8005b50:	1afe      	subs	r6, r7, r3
 8005b52:	2301      	movs	r3, #1
 8005b54:	4698      	mov	r8, r3
 8005b56:	b236      	sxth	r6, r6
          hAngleCorr = (int16_t)(wAux / pHandle->hTransitionSteps);
 8005b58:	2336      	movs	r3, #54	@ 0x36
 8005b5a:	5ee1      	ldrsh	r1, [r4, r3]
          wAux = (int32_t)hAngleDiff * pHandle->hTransitionRemainingSteps;
 8005b5c:	4370      	muls	r0, r6
          hAngleCorr = (int16_t)(wAux / pHandle->hTransitionSteps);
 8005b5e:	f7fa fb5d 	bl	800021c <__divsi3>
          hAngleCorr *= hSignCorr;
 8005b62:	4643      	mov	r3, r8
 8005b64:	4358      	muls	r0, r3
            pHandle->bTransitionLocked = true;
 8005b66:	2332      	movs	r3, #50	@ 0x32
          hAngleCorr *= hSignCorr;
 8005b68:	b280      	uxth	r0, r0
          if (hAngleDiff >= 0)
 8005b6a:	2e00      	cmp	r6, #0
 8005b6c:	db0b      	blt.n	8005b86 <VSS_CalcElAngle+0x92>
            pHandle->bTransitionLocked = true;
 8005b6e:	2201      	movs	r2, #1
            hRetAngle = *(int16_t *)pInputVars_str - hAngleCorr;
 8005b70:	1a38      	subs	r0, r7, r0
            pHandle->bTransitionLocked = true;
 8005b72:	54e2      	strb	r2, [r4, r3]
            hRetAngle = *(int16_t *)pInputVars_str - hAngleCorr;
 8005b74:	b205      	sxth	r5, r0
 8005b76:	e7c8      	b.n	8005b0a <VSS_CalcElAngle+0x16>
          hRetAngle = *(int16_t *)pInputVars_str;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	5ef5      	ldrsh	r5, [r6, r3]
          pHandle->bTransitionEnded = true;
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	232d      	movs	r3, #45	@ 0x2d
 8005b80:	54e2      	strb	r2, [r4, r3]
          pHandle->_Super.bSpeedErrorNumber = 0U;
 8005b82:	7020      	strb	r0, [r4, #0]
 8005b84:	e7c1      	b.n	8005b0a <VSS_CalcElAngle+0x16>
            if (false == pHandle->bTransitionLocked)
 8005b86:	5ce3      	ldrb	r3, [r4, r3]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d0be      	beq.n	8005b0a <VSS_CalcElAngle+0x16>
              hRetAngle = *(int16_t *)pInputVars_str + hAngleCorr;
 8005b8c:	19c0      	adds	r0, r0, r7
 8005b8e:	b205      	sxth	r5, r0
 8005b90:	e7bb      	b.n	8005b0a <VSS_CalcElAngle+0x16>
            hAngleDiff = pHandle->hElAngleAccu - *(int16_t *)pInputVars_str;
 8005b92:	4643      	mov	r3, r8
 8005b94:	8837      	ldrh	r7, [r6, #0]
 8005b96:	1bde      	subs	r6, r3, r7
 8005b98:	4b01      	ldr	r3, [pc, #4]	@ (8005ba0 <VSS_CalcElAngle+0xac>)
 8005b9a:	b236      	sxth	r6, r6
 8005b9c:	4698      	mov	r8, r3
 8005b9e:	e7db      	b.n	8005b58 <VSS_CalcElAngle+0x64>
 8005ba0:	0000ffff 	.word	0x0000ffff

08005ba4 <VSS_CalcAvrgMecSpeedUnit>:
  * - Called with the same periodicity on which speed control is executed, precisely during START and SWITCH_OVER states
  * of the MC tasks state machine or in its RUM state in @ref OpenLoop "Open Loop Control" configuration into
  * TSK_MediumFrequencyTask.
  */
__weak bool VSS_CalcAvrgMecSpeedUnit(VirtualSpeedSensor_Handle_t *pHandle, int16_t *hMecSpeedUnit)
{
 8005ba4:	b570      	push	{r4, r5, r6, lr}
    SpeedSensorReliability = false;
  }
  else
  {
#endif
    if (pHandle->hRemainingStep > 1u)
 8005ba6:	8d03      	ldrh	r3, [r0, #40]	@ 0x28
{
 8005ba8:	0004      	movs	r4, r0
 8005baa:	000d      	movs	r5, r1
    if (pHandle->hRemainingStep > 1u)
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d91c      	bls.n	8005bea <VSS_CalcAvrgMecSpeedUnit+0x46>
    {
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 8005bb0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8005bb2:	6a02      	ldr	r2, [r0, #32]
#endif

      /* Convert dpp into MecUnit */
      *hMecSpeedUnit = (int16_t)((((int32_t)pHandle->_Super.hElSpeedDpp)
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 8005bb4:	69e1      	ldr	r1, [r4, #28]
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 8005bb6:	189b      	adds	r3, r3, r2
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 8005bb8:	8b42      	ldrh	r2, [r0, #26]
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 8005bba:	6243      	str	r3, [r0, #36]	@ 0x24
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 >> 16);
 8005bbc:	141b      	asrs	r3, r3, #16
 8005bbe:	81c3      	strh	r3, [r0, #14]
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 8005bc0:	4353      	muls	r3, r2
 8005bc2:	0098      	lsls	r0, r3, #2
 8005bc4:	18c0      	adds	r0, r0, r3
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 8005bc6:	7863      	ldrb	r3, [r4, #1]
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 8005bc8:	0040      	lsls	r0, r0, #1
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 8005bca:	4359      	muls	r1, r3
 8005bcc:	f7fa fb26 	bl	800021c <__divsi3>
      *hMecSpeedUnit = (int16_t)((((int32_t)pHandle->_Super.hElSpeedDpp)
 8005bd0:	b200      	sxth	r0, r0
 8005bd2:	8028      	strh	r0, [r5, #0]
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
      pHandle->hRemainingStep--;
 8005bd4:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8005bd6:	81a0      	strh	r0, [r4, #12]
      pHandle->hRemainingStep--;
 8005bd8:	3b01      	subs	r3, #1
 8005bda:	8523      	strh	r3, [r4, #40]	@ 0x28
    else
    {
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
    }
    /* If the transition is not done yet, we already know that speed is not reliable */
    if (false == pHandle->bTransitionEnded)
 8005bdc:	232d      	movs	r3, #45	@ 0x2d
 8005bde:	5ce0      	ldrb	r0, [r4, r3]
 8005be0:	2800      	cmp	r0, #0
 8005be2:	d10b      	bne.n	8005bfc <VSS_CalcAvrgMecSpeedUnit+0x58>
    {
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8005be4:	78e3      	ldrb	r3, [r4, #3]
 8005be6:	7023      	strb	r3, [r4, #0]
    }
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
  return (SpeedSensorReliability);
}
 8005be8:	bd70      	pop	{r4, r5, r6, pc}
    else if (1U == pHandle->hRemainingStep)
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d00b      	beq.n	8005c06 <VSS_CalcAvrgMecSpeedUnit+0x62>
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 8005bee:	220c      	movs	r2, #12
 8005bf0:	5e83      	ldrsh	r3, [r0, r2]
 8005bf2:	800b      	strh	r3, [r1, #0]
    if (false == pHandle->bTransitionEnded)
 8005bf4:	232d      	movs	r3, #45	@ 0x2d
 8005bf6:	5ce0      	ldrb	r0, [r4, r3]
 8005bf8:	2800      	cmp	r0, #0
 8005bfa:	d0f3      	beq.n	8005be4 <VSS_CalcAvrgMecSpeedUnit+0x40>
      SpeedSensorReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, hMecSpeedUnit);
 8005bfc:	0029      	movs	r1, r5
 8005bfe:	0020      	movs	r0, r4
 8005c00:	f7ff fe92 	bl	8005928 <SPD_IsMecSpeedReliable>
 8005c04:	e7f0      	b.n	8005be8 <VSS_CalcAvrgMecSpeedUnit+0x44>
      *hMecSpeedUnit = pHandle->hFinalMecSpeedUnit;
 8005c06:	222a      	movs	r2, #42	@ 0x2a
 8005c08:	5e83      	ldrsh	r3, [r0, r2]
 8005c0a:	800b      	strh	r3, [r1, #0]
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8005c0c:	8183      	strh	r3, [r0, #12]
      pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)*hMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 8005c0e:	69c0      	ldr	r0, [r0, #28]
 8005c10:	4358      	muls	r0, r3
                                          / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8005c12:	8b63      	ldrh	r3, [r4, #26]
 8005c14:	0099      	lsls	r1, r3, #2
 8005c16:	18c9      	adds	r1, r1, r3
 8005c18:	0049      	lsls	r1, r1, #1
 8005c1a:	f7fa faff 	bl	800021c <__divsi3>
      pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8005c1e:	7863      	ldrb	r3, [r4, #1]
 8005c20:	4343      	muls	r3, r0
 8005c22:	81e3      	strh	r3, [r4, #14]
      pHandle->hRemainingStep = 0U;
 8005c24:	2300      	movs	r3, #0
 8005c26:	8523      	strh	r3, [r4, #40]	@ 0x28
 8005c28:	e7d8      	b.n	8005bdc <VSS_CalcAvrgMecSpeedUnit+0x38>
 8005c2a:	46c0      	nop			@ (mov r8, r8)

08005c2c <VSS_SetMecAcceleration>:
  * - Called during @ref RevUpCtrl "Rev-Up Control" and
  * @ref EncAlignCtrl "Encoder Alignment Controller procedure" initialization.
  */
__weak void  VSS_SetMecAcceleration(VirtualSpeedSensor_Handle_t *pHandle, int16_t hFinalMecSpeedUnit,
                                    uint16_t hDurationms)
{
 8005c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c2e:	46ce      	mov	lr, r9
 8005c30:	4647      	mov	r7, r8
    int32_t wMecAccDppP32;
    uint16_t hNbrStep;
    int16_t hCurrentMecSpeedDpp;
    int16_t hFinalMecSpeedDpp;

    if (false == pHandle->bTransitionStarted)
 8005c32:	232c      	movs	r3, #44	@ 0x2c
{
 8005c34:	b580      	push	{r7, lr}
    if (false == pHandle->bTransitionStarted)
 8005c36:	5cc3      	ldrb	r3, [r0, r3]
{
 8005c38:	0004      	movs	r4, r0
 8005c3a:	000e      	movs	r6, r1
 8005c3c:	0015      	movs	r5, r2
    if (false == pHandle->bTransitionStarted)
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d112      	bne.n	8005c68 <VSS_SetMecAcceleration+0x3c>
        pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)hFinalMecSpeedUnit)
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
                                              / (((int32_t)SPEED_UNIT)
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));

        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8005c42:	7843      	ldrb	r3, [r0, #1]
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 8005c44:	69c0      	ldr	r0, [r0, #28]
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8005c46:	4698      	mov	r8, r3
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8005c48:	8b63      	ldrh	r3, [r4, #26]
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 8005c4a:	4348      	muls	r0, r1
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8005c4c:	0099      	lsls	r1, r3, #2
 8005c4e:	18c9      	adds	r1, r1, r3
 8005c50:	0049      	lsls	r1, r1, #1
                                              / (((int32_t)SPEED_UNIT)
 8005c52:	f7fa fae3 	bl	800021c <__divsi3>
 8005c56:	0007      	movs	r7, r0
      if (0U == hDurationms)
 8005c58:	2d00      	cmp	r5, #0
 8005c5a:	d109      	bne.n	8005c70 <VSS_SetMecAcceleration+0x44>
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8005c5c:	4643      	mov	r3, r8
 8005c5e:	435f      	muls	r7, r3
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 8005c60:	81a6      	strh	r6, [r4, #12]
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8005c62:	81e7      	strh	r7, [r4, #14]

        pHandle->hRemainingStep = 0U;
 8005c64:	8525      	strh	r5, [r4, #40]	@ 0x28

        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8005c66:	8566      	strh	r6, [r4, #42]	@ 0x2a
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 8005c68:	bcc0      	pop	{r6, r7}
 8005c6a:	46b9      	mov	r9, r7
 8005c6c:	46b0      	mov	r8, r6
 8005c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hNbrStep = (uint16_t)((((uint32_t)hDurationms) * ((uint32_t)pHandle->hSpeedSamplingFreqHz)) / 1000U);
 8005c70:	21fa      	movs	r1, #250	@ 0xfa
 8005c72:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 8005c74:	0089      	lsls	r1, r1, #2
 8005c76:	4368      	muls	r0, r5
 8005c78:	f7fa fa46 	bl	8000108 <__udivsi3>
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 8005c7c:	220e      	movs	r2, #14
 8005c7e:	5ea3      	ldrsh	r3, [r4, r2]
        hNbrStep++;
 8005c80:	3001      	adds	r0, #1
 8005c82:	b285      	uxth	r5, r0
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 8005c84:	4699      	mov	r9, r3
        pHandle->hRemainingStep = hNbrStep;
 8005c86:	8525      	strh	r5, [r4, #40]	@ 0x28
        if (0U == hNbrStep)
 8005c88:	2d00      	cmp	r5, #0
 8005c8a:	d104      	bne.n	8005c96 <VSS_SetMecAcceleration+0x6a>
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 8005c8c:	464b      	mov	r3, r9
 8005c8e:	041b      	lsls	r3, r3, #16
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8005c90:	8566      	strh	r6, [r4, #42]	@ 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 8005c92:	6263      	str	r3, [r4, #36]	@ 0x24
}
 8005c94:	e7e8      	b.n	8005c68 <VSS_SetMecAcceleration+0x3c>
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 8005c96:	0018      	movs	r0, r3
 8005c98:	4641      	mov	r1, r8
 8005c9a:	f7fa fabf 	bl	800021c <__divsi3>
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 8005c9e:	b23f      	sxth	r7, r7
 8005ca0:	1a38      	subs	r0, r7, r0
 8005ca2:	0029      	movs	r1, r5
                         * ((int32_t)65536)) / ((int32_t )hNbrStep);
 8005ca4:	0400      	lsls	r0, r0, #16
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 8005ca6:	f7fa fab9 	bl	800021c <__divsi3>
          pHandle->wElAccDppP32 = wMecAccDppP32 * ((int16_t)pHandle->_Super.bElToMecRatio);
 8005caa:	4643      	mov	r3, r8
 8005cac:	4343      	muls	r3, r0
 8005cae:	6223      	str	r3, [r4, #32]
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 8005cb0:	464b      	mov	r3, r9
 8005cb2:	041b      	lsls	r3, r3, #16
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8005cb4:	8566      	strh	r6, [r4, #42]	@ 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 8005cb6:	6263      	str	r3, [r4, #36]	@ 0x24
    }
 8005cb8:	e7d6      	b.n	8005c68 <VSS_SetMecAcceleration+0x3c>
 8005cba:	46c0      	nop			@ (mov r8, r8)

08005cbc <memset>:
 8005cbc:	0003      	movs	r3, r0
 8005cbe:	1882      	adds	r2, r0, r2
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d100      	bne.n	8005cc6 <memset+0xa>
 8005cc4:	4770      	bx	lr
 8005cc6:	7019      	strb	r1, [r3, #0]
 8005cc8:	3301      	adds	r3, #1
 8005cca:	e7f9      	b.n	8005cc0 <memset+0x4>

08005ccc <__libc_init_array>:
 8005ccc:	b570      	push	{r4, r5, r6, lr}
 8005cce:	2600      	movs	r6, #0
 8005cd0:	4c0c      	ldr	r4, [pc, #48]	@ (8005d04 <__libc_init_array+0x38>)
 8005cd2:	4d0d      	ldr	r5, [pc, #52]	@ (8005d08 <__libc_init_array+0x3c>)
 8005cd4:	1b64      	subs	r4, r4, r5
 8005cd6:	10a4      	asrs	r4, r4, #2
 8005cd8:	42a6      	cmp	r6, r4
 8005cda:	d109      	bne.n	8005cf0 <__libc_init_array+0x24>
 8005cdc:	2600      	movs	r6, #0
 8005cde:	f000 f823 	bl	8005d28 <_init>
 8005ce2:	4c0a      	ldr	r4, [pc, #40]	@ (8005d0c <__libc_init_array+0x40>)
 8005ce4:	4d0a      	ldr	r5, [pc, #40]	@ (8005d10 <__libc_init_array+0x44>)
 8005ce6:	1b64      	subs	r4, r4, r5
 8005ce8:	10a4      	asrs	r4, r4, #2
 8005cea:	42a6      	cmp	r6, r4
 8005cec:	d105      	bne.n	8005cfa <__libc_init_array+0x2e>
 8005cee:	bd70      	pop	{r4, r5, r6, pc}
 8005cf0:	00b3      	lsls	r3, r6, #2
 8005cf2:	58eb      	ldr	r3, [r5, r3]
 8005cf4:	4798      	blx	r3
 8005cf6:	3601      	adds	r6, #1
 8005cf8:	e7ee      	b.n	8005cd8 <__libc_init_array+0xc>
 8005cfa:	00b3      	lsls	r3, r6, #2
 8005cfc:	58eb      	ldr	r3, [r5, r3]
 8005cfe:	4798      	blx	r3
 8005d00:	3601      	adds	r6, #1
 8005d02:	e7f2      	b.n	8005cea <__libc_init_array+0x1e>
 8005d04:	08006b8c 	.word	0x08006b8c
 8005d08:	08006b8c 	.word	0x08006b8c
 8005d0c:	08006b90 	.word	0x08006b90
 8005d10:	08006b8c 	.word	0x08006b8c

08005d14 <memcpy>:
 8005d14:	2300      	movs	r3, #0
 8005d16:	b510      	push	{r4, lr}
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d100      	bne.n	8005d1e <memcpy+0xa>
 8005d1c:	bd10      	pop	{r4, pc}
 8005d1e:	5ccc      	ldrb	r4, [r1, r3]
 8005d20:	54c4      	strb	r4, [r0, r3]
 8005d22:	3301      	adds	r3, #1
 8005d24:	e7f8      	b.n	8005d18 <memcpy+0x4>
	...

08005d28 <_init>:
 8005d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d2a:	46c0      	nop			@ (mov r8, r8)
 8005d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d2e:	bc08      	pop	{r3}
 8005d30:	469e      	mov	lr, r3
 8005d32:	4770      	bx	lr

08005d34 <_fini>:
 8005d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d36:	46c0      	nop			@ (mov r8, r8)
 8005d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d3a:	bc08      	pop	{r3}
 8005d3c:	469e      	mov	lr, r3
 8005d3e:	4770      	bx	lr
